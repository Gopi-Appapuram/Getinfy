{"version":3,"file":"static/js/3148.d6bd04d6.chunk.js","mappings":"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","sources":["views/accounts/Providers/store/stateSlice.js","views/accounts/Providers/store/index.js","views/accounts/Providers/components/ProvidersTable.js","views/accounts/Providers/components/ProvidersTableSearch.js","views/accounts/Providers/components/ProvidersFilter.js","views/accounts/Providers/components/ProvidersTableTools.js","views/accounts/Providers/components/ProvidersDeleteConfirmation.js","views/accounts/Providers/index.js"],"sourcesContent":["import { createSlice, current } from '@reduxjs/toolkit'\r\n\r\nconst stateSlice = createSlice({\r\n    name: 'providerList/state',\r\n    initialState: {\r\n        selectedRows: [],\r\n        selectedRow: [],\r\n        deleteMode: '',\r\n    },\r\n    reducers: {\r\n        setSelectedRows: (state, action) => {\r\n            state.selectedRows = action.payload\r\n        },\r\n        setSelectedRow: (state, action) => {\r\n            state.selectedRow = action.payload\r\n        },\r\n        addRowItem: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (!currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: [...currentState.selectedRows, ...payload],\r\n                }\r\n            }\r\n        },\r\n        removeRowItem: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: currentState.selectedRows.filter(\r\n                        (id) => id !== payload\r\n                    ),\r\n                }\r\n            }\r\n        },\r\n        setDeleteMode: (state, action) => {\r\n            state.deleteMode = action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    setSelectedRows,\r\n    setSelectedRow,\r\n    addRowItem,\r\n    removeRowItem,\r\n    toggleDeleteConfirmation,\r\n    setDeleteMode,\r\n} = stateSlice.actions\r\n\r\nexport default stateSlice.reducer\r\n","import { combineReducers } from '@reduxjs/toolkit'\r\nimport state from './stateSlice'\r\nimport data from './dataSlice'\r\n\r\nconst reducer = combineReducers({\r\n    state,\r\n    data,\r\n})\r\n\r\nexport default reducer\r\n","import React, { useEffect, useCallback, useMemo, useRef, useState } from 'react'\r\nimport { Badge, Tooltip,Dialog,Button } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getCurrency, getOrders, getParentAccount, getProductCategory, getUploadFileType, setTableData } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowItem,\r\n    removeRowItem,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport dayjs from 'dayjs'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { AiFillCopy } from 'react-icons/ai'\r\nimport { RiCheckboxCircleFill, RiCloseCircleFill } from 'react-icons/ri'\r\nimport { BsPatchCheckFill } from 'react-icons/bs'\r\nimport { apiUpdateProviderAccStatus } from 'services/ProvidersService'\r\nimport GetDropdownLabel, { OpenNotification, snakeToCamel } from 'views/Servicefile'\r\n\r\nconst orderStatusColor = {\r\n    'ACTIVE': {\r\n        label: 'Active',\r\n        dotClass: 'bg-black-400',\r\n        textClass: 'text-black-400',\r\n        backgroundColor: 'bg-[#F5F5F5]'\r\n    },\r\n    'SUBMITTED': {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-400',\r\n        textClass: 'text-black-400',\r\n        backgroundColor: 'bg-[#F0F7FF]'\r\n    },\r\n   'IN_ACTIVE': { \r\n        label: 'Inactive', \r\n        dotClass: 'bg-blue-400', \r\n        textClass: 'text-black-400', \r\n        backgroundColor: 'bg-[#F5F5F5]' \r\n    },\r\n}\r\n\r\n\r\nconst OrderColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/order-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\nconst ProvidersTable = ({actionPermissions}) => {\r\n\r\n    const [isDeactivate, setDeactivate] = useState(false)\r\n    const [row, setRow] = useState('')\r\n\r\n    const tableRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const updateOperatorStatus = async () => {\r\n        let isStatus = row.acc_status === \"ACTIVE\" ? \"IN_ACTIVE\" : \"ACTIVE\";\r\n        const resp = await apiUpdateProviderAccStatus(row.id, isStatus);  \r\n          \r\n        if (resp.data.success) {\r\n           \r\n            if(isStatus=== 'ACTIVE'){\r\n                   \r\n                 setDeactivate(false)\r\n                 OpenNotification('success','Activated successfully')\r\n           \r\n            }else{\r\n                   \r\n                 setDeactivate(false)\r\n                 OpenNotification('success','Deactivated successfully')\r\n          \r\n \r\n            }\r\n             \r\n         }\r\n    }\r\n\r\n    const ActionColumn = ({ row }) => {\r\n        const dispatch = useDispatch()\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n    \r\n        const onDelete = () => {\r\n            dispatch(setDeleteMode('single'))\r\n            dispatch(setSelectedRow([row.id]))\r\n        }\r\n    \r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/order-details/${row.id}`)\r\n        }, [navigate, row])\r\n\r\n        const onEdit = () => {\r\n           navigate(`/account-new-providers/edit`,  { state: { data: row ,mode:'EDIT'} })\r\n        }\r\n\r\n        const onClone = () => {\r\n            navigate(`/account-new-providers/edit`,{ state: { data: row, mode:\"ADD\" } })\r\n        }\r\n\r\n        const handleClick = () => {\r\n            setDeactivate(true);\r\n            setRow(row);\r\n          };\r\n          \r\n          const iconColor = row.acc_status != \"ACTIVE\" ? \"green\" : \"rose\";\r\n          const IconComponent = row.acc_status != \"ACTIVE\" ? RiCheckboxCircleFill : RiCloseCircleFill;\r\n          const disableIconStyle = { color: 'grey', pointerEvents: 'none' }\r\n          const { canAdd, canEdit, canView, canActivate, canClone, canApprove } =\r\n          actionPermissions\r\n\r\n        return (\r\n            <div className=\"flex justify-start text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                        onClick={onEdit}\r\n                        style={canEdit ? null : disableIconStyle}\r\n                        >\r\n                        <MdModeEdit />\r\n                    </span>\r\n                </Tooltip>\r\n    \r\n                <Tooltip title=\"Clone\">\r\n                    <span className={`cursor-pointer p-1  hover:${textTheme}`}\r\n                        onClick={onClone}\r\n                        style={canClone ? null : disableIconStyle}\r\n                        >\r\n                        <AiFillCopy />\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title=\"View\">\r\n                    <span className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                        onClick={onView}\r\n                        style={canView ? null : disableIconStyle}>\r\n                        <HiOutlineEye />\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip  title={`${\r\n                        row.acc_status != 'ACTIVE' ? 'Activate' : 'Deactivate'\r\n                    }`}>\r\n                    <span className={`cursor-pointer p-1 text-${iconColor}-800 hover:text-${iconColor}-800`}\r\n                        onClick={handleClick}   style={canActivate ? null : disableIconStyle}>\r\n                        <IconComponent />\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    \r\n    const { pageIndex, pageSize, sort, query, total ,sort_field,order} = useSelector(\r\n        (state) => state.providerList.data.tableData\r\n    )\r\n    const loading = useSelector((state) => state.providerList.data.loading)\r\n\r\n    const data = useSelector((state) => state.providerList.data.orderList?.res)\r\n    const totalCount = useSelector((state) => state.providerList.data.orderList?.total)\r\n\r\n    const {enterAccount, password,rememberMe,usernameOrEmail\r\n    } = useSelector(\r\n     (state) => state.auth.user\r\n )\r\n    const parentAccountList = useSelector((state) => state.providerList?.data?.parentAccountList)\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            dispatch(getOrders({  page_no:pageIndex-1, page_size: pageSize, sort_field:sort_field?sort_field:'id',unq_id:enterAccount,order:order }))\r\n           \r\n        }\r\n        fetchData()\r\n        dispatch(getParentAccount({enterAccount}))\r\n    }, [dispatch, pageIndex, pageSize, sort, isDeactivate, query, enterAccount, sort_field,order])\r\n\r\n    useEffect(() => {\r\n        if (tableRef) {\r\n            tableRef.current?.resetSelected()\r\n        }\r\n    }, [data])\r\n    useEffect(() => {\r\n        dispatch(getUploadFileType(enterAccount))\r\n    }, [])\r\n    const tableData = useMemo(\r\n        () => ({ pageIndex, pageSize, sort, query, total:totalCount }),\r\n        [pageIndex, pageSize, sort, query, totalCount]\r\n    )\r\n  \r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Actions',\r\n                flex: 1,\r\n                id: 'action',\r\n                cell: (props) => <ActionColumn row={props.row.original} />,\r\n            },\r\n            {\r\n                header: 'Provider ID',\r\n                accessorKey: 'acc_unq_id',\r\n            },\r\n            {\r\n                header: 'Provider Title',\r\n                accessorKey: 'acc_name',\r\n            },\r\n          \r\n            {\r\n                header: 'Operator ',\r\n                accessorKey: 'acc_parent',\r\n\r\n                cell: (props) => {\r\n                    const { acc_parent } = props.row.original\r\n                    return(\r\n                    <span>{GetDropdownLabel(acc_parent,parentAccountList)}</span>\r\n                    )}  \r\n                //cell: (props) => <span>{'Airtel Inc.'}</span>\r\n\r\n            },\r\n            \r\n            {\r\n                header: ' Email ID ',\r\n                accessorKey: 'acc_email_id',\r\n            },\r\n           \r\n            {\r\n                header: 'Address',\r\n                accessorKey: 'acc_add_l1',\r\n            },\r\n         \r\n            {\r\n                header: 'Status',\r\n                accessorKey: 'acc_status',\r\n                flex: 1,\r\n                cell: (props) => {\r\n                    const { acc_status } = props.row.original\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n                            <span className={`flex ml-2 rtl:mr-2 capitalize font-semibold rounded-full border ${orderStatusColor[acc_status]?.backgroundColor} mt-4 px-2 py-1 text-${orderStatusColor[acc_status]?.dotClass}`}>\r\n                                {acc_status === 'ACTIVE' &&<RiCheckboxCircleFill className='mt-1 mr-2 text-[#3B8C59]'/>}\r\n                                {acc_status === 'IN_ACTIVE' &&<RiCloseCircleFill className='mt-1 mr-2 text-[#FF0000]' />}\r\n                                {acc_status === 'SUBMITTED' &&<BsPatchCheckFill className='mt-1 mr-2 text-blue-500'/>}\r\n                                {orderStatusColor[acc_status].label}\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                },\r\n            },\r\n        ],\r\n        [parentAccountList]\r\n    )\r\n\r\n    const onPaginationChange = (page) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageIndex = page\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSelectChange = (value) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageSize = Number(value)\r\n        newTableData.pageIndex = 1\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSort = (sort) => {\r\n        \r\n\r\n        const newTableData = cloneDeep(tableData)\r\n        const sortfield = snakeToCamel(sort.key)\r\n        newTableData[\"sort_field\"] = sortfield;\r\n        newTableData[\"order\"] = sort.order;\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n\r\n    const onRowSelect = (checked, row) => {\r\n        if (checked) {\r\n            dispatch(addRowItem([row.id]))\r\n        } else {\r\n            dispatch(removeRowItem(row.id))\r\n        }\r\n    }\r\n\r\n    const onAllRowSelect = useCallback(\r\n        (checked, rows) => {\r\n            if (checked) {\r\n                const originalRows = rows.map((row) => row.original)\r\n                const selectedIds = []\r\n                originalRows.forEach((row) => {\r\n                    selectedIds.push(row.id)\r\n                })\r\n                dispatch(setSelectedRows(selectedIds))\r\n            } else {\r\n                dispatch(setSelectedRows([]))\r\n            }\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    return (\r\n        <>\r\n        <DataTable\r\n            ref={tableRef}\r\n            columns={columns}\r\n            data={data}\r\n            loading={loading}\r\n            pagingData={tableData}\r\n            onPaginationChange={onPaginationChange}\r\n            onSelectChange={onSelectChange}\r\n            onSort={onSort}\r\n            onCheckBoxChange={onRowSelect}\r\n            onIndeterminateCheckBoxChange={onAllRowSelect}\r\n            selectable\r\n        />\r\n        <Dialog \r\n            isOpen={isDeactivate}\r\n            onClose={() => setDeactivate(false)}>\r\n            <h6 style={{fontStyle: 'normal',fontSize: 700, fontSize: '18px'}}>\r\n                {row.acc_status != 'ACTIVE' ? `Activate` : `Deactivate` }</h6>\r\n            <hr className='text-gary-500 mt-4 mb-4'/>\r\n            <p>{row.acc_status != 'ACTIVE'\r\n                        ? `Are you sure you want to activate this provider ?`\r\n                        : `Are you sure you want to deactivate this provider ?`}</p>\r\n            <div className='mt-6 text-end'>\r\n                <Button style={{ backgroundColor: \"#4D4D4D\", color:\"white\" }} className='mr-3'\r\n                 onClick={() => setDeactivate(false)}\r\n                >No</Button>\r\n                <Button variant='solid'\r\n                 onClick={() => updateOperatorStatus()}\r\n                >Yes</Button>\r\n            </div>\r\n        </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProvidersTable\r\n","import React, { useRef } from 'react'\r\nimport { Input } from 'components/ui'\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getOrders, setTableData } from '../store/dataSlice'\r\nimport debounce from 'lodash/debounce'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\n\r\nconst ProvidersTableSearch = () => {\r\n    const dispatch = useDispatch()\r\n    const { enterAccount, password, rememberMe, usernameOrEmail } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n    const searchInput = useRef()\r\n\r\n    const tableData = useSelector(\r\n        (state) => state.providerList.data.tableData\r\n    )\r\n\r\n    const debounceFn = debounce(handleDebounceFn, 500)\r\n\r\n    function handleDebounceFn(val) {\r\n        const newTableData = cloneDeep(tableData)  \r\n        newTableData.page_no = tableData.pageIndex-1\r\n        newTableData.page_size = tableData.pageSize\r\n        newTableData.unq_id=enterAccount\r\n        newTableData.sort_field=tableData.sort_field\r\n\r\n     \r\n        if (typeof val === 'string' && val.length > 1) {\r\n            fetchData(newTableData)\r\n        }\r\n\r\n        if (typeof val === 'string' && val.length === 0) {\r\n            fetchData(newTableData)\r\n        }\r\n    }\r\n\r\n    const fetchData = (data) => {\r\n        dispatch(setTableData(data))\r\n        dispatch(getOrders(data))\r\n    }\r\n\r\n    const onEdit = (e) => {\r\n        debounceFn(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <Input\r\n            ref={searchInput}\r\n            className=\"lg:w-52\"\r\n            size=\"sm\"\r\n            placeholder=\"Search\"\r\n            prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n            onChange={onEdit}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ProvidersTableSearch\r\n","import React from 'react'\r\nimport { HiOutlineFilter} from 'react-icons/hi'\r\nimport {\r\n   \r\n    Button,\r\n  \r\n} from 'components/ui'\r\n\r\n\r\n\r\nconst ProvidersFilter = () => {\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                size=\"sm\"\r\n                className=\"block md:inline-block ltr:md:ml-2 rtl:md:mr-2 md:mb-0 mb-4\"\r\n                icon={<HiOutlineFilter />}\r\n                onClick={() => {}}\r\n            >\r\n                Filter\r\n            </Button>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProvidersFilter\r\n","import React from 'react'\r\nimport { HiDownload, HiPlusCircle } from 'react-icons/hi'\r\nimport ProvidersTableSearch from './ProvidersTableSearch'\r\nimport { Link } from 'react-router-dom'\r\nimport ProvidersFilter from './ProvidersFilter'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Radio,\r\n    FormItem,\r\n    FormContainer,\r\n    Drawer,\r\n} from 'components/ui'\r\nimport { MdOutlineSettings } from 'react-icons/md'\r\n\r\n\r\n\r\nconst ProvidersTableTools = ({actionPermissions}) => {\r\n    const { canAdd } = actionPermissions\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center\">\r\n            <ProvidersTableSearch />\r\n            <ProvidersFilter />\r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n                target=\"_blank\"\r\n                download\r\n            >\r\n                <Button block size=\"sm\" icon={<HiDownload />}>\r\n                    Export\r\n                </Button>\r\n            </Link>\r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n                target=\"_blank\"\r\n                download\r\n            >\r\n                <Button block size=\"sm\" icon={<MdOutlineSettings />}>\r\n                    Columns\r\n                </Button>\r\n            </Link> \r\n            <Link\r\n                className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                to=\"/account-new-providers\"\r\n            >\r\n                <Button block variant='solid' style={{\r\n                    fontStyle: 'normal',\r\n                    fontSize: 500, fontSize: '18px', \r\n                }} size=\"sm\" icon={<HiPlusCircle />}\r\n                disabled={!canAdd}\r\n                >\r\n                   Create\r\n                </Button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProvidersTableTools\r\n","import React from 'react'\r\nimport { toast, Notification } from 'components/ui'\r\nimport { ConfirmDialog } from 'components/shared'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n    setSelectedRows,\r\n} from '../store/stateSlice'\r\nimport { deleteOrders, getOrders } from '../store/dataSlice'\r\n\r\nconst ProvidersDeleteConfirmation = () => {\r\n    const dispatch = useDispatch()\r\n    const selectedRows = useSelector(\r\n        (state) => state.providerList.state.selectedRows\r\n    )\r\n    const selectedRow = useSelector(\r\n        (state) => state.providerList.state.selectedRow\r\n    )\r\n    const deleteMode = useSelector(\r\n        (state) => state.providerList.state.deleteMode\r\n    )\r\n    const tableData = useSelector(\r\n        (state) => state.providerList.data.tableData\r\n    )\r\n\r\n    const onDialogClose = () => {\r\n        dispatch(setDeleteMode(''))\r\n\r\n        if (deleteMode === 'single') {\r\n            dispatch(setSelectedRow([]))\r\n        }\r\n    }\r\n\r\n    const onDelete = async () => {\r\n        dispatch(setDeleteMode(''))\r\n\r\n        if (deleteMode === 'single') {\r\n            const success = await deleteOrders({ id: selectedRow })\r\n            deleteSucceed(success)\r\n            dispatch(setSelectedRow([]))\r\n        }\r\n\r\n        if (deleteMode === 'batch') {\r\n            const success = await deleteOrders({ id: selectedRows })\r\n            deleteSucceed(success, selectedRows.length)\r\n            dispatch(setSelectedRows([]))\r\n        }\r\n    }\r\n\r\n    const deleteSucceed = (success, orders) => {\r\n        if (success) {\r\n            dispatch(getOrders(tableData))\r\n            toast.push(\r\n                <Notification\r\n                    title={'Successfuly Deleted'}\r\n                    type=\"success\"\r\n                    duration={2500}\r\n                >\r\n                    {deleteMode === 'single' && 'Order '}\r\n                    {deleteMode === 'batch' && `${orders} orders `}\r\n                    successfuly deleted\r\n                </Notification>,\r\n                {\r\n                    placement: 'top-center',\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ConfirmDialog\r\n            isOpen={deleteMode === 'single' || deleteMode === 'batch'}\r\n            onClose={onDialogClose}\r\n            onRequestClose={onDialogClose}\r\n            type=\"danger\"\r\n            title=\"Delete product\"\r\n            onCancel={onDialogClose}\r\n            onConfirm={onDelete}\r\n            confirmButtonColor=\"red-600\"\r\n        >\r\n            <p>\r\n                Are you sure you want to delete this order? All record related\r\n                to this order will be deleted as well. This action cannot be\r\n                undone.\r\n            </p>\r\n        </ConfirmDialog>\r\n    )\r\n}\r\n\r\nexport default ProvidersDeleteConfirmation\r\n","import React, { useState } from 'react'\r\nimport reducer from './store'\r\nimport { injectReducer } from 'store/index'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport ProvidersTable from './components/ProvidersTable'\r\nimport ProvidersTableTools from './components/ProvidersTableTools'\r\nimport ProvidersDeleteConfirmation from './components/ProvidersDeleteConfirmation'\r\nimport { useSelector } from 'react-redux'\r\n\r\ninjectReducer('providerList', reducer)\r\n\r\nconst Providers = () => {\r\n\r\n    const { permissionsList } = useSelector((state) => state.auth.user)\r\n    const [canAdd, setCanAdd] = useState(permissionsList.includes('ACCPROADD'))\r\n    const [canEdit, setCanEdit] = useState(\r\n        permissionsList.includes('ACCPROEDI')\r\n    )\r\n    const [canView, setCanView] = useState(permissionsList.includes('ACCPROVIE'))\r\n    const [canActivate, setCanActivate] = useState(permissionsList.includes('ACCPRODEA'))\r\n    const [canClone, setCanClone] = useState(permissionsList.includes('ACCPROCLO'))\r\n    const [canApprove, setCanApprove] = useState(permissionsList.includes('ACCPROAPP'))\r\n\r\n    const actionPermissions = {\r\n        canAdd,\r\n        canEdit,\r\n        canClone,\r\n        canView,\r\n        canActivate,\r\n        canApprove,\r\n    }\r\n    return (\r\n        <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n            <div className=\"lg:flex items-center justify-between mb-4\">\r\n                <h3 className=\"mb-4 lg:mb-0\">Providers</h3>\r\n                <ProvidersTableTools actionPermissions={actionPermissions} />\r\n            </div>\r\n            <ProvidersTable actionPermissions={actionPermissions}  />\r\n            <ProvidersDeleteConfirmation />\r\n        </AdaptableCard>\r\n    )\r\n}\r\n\r\nexport default Providers\r\n"],"names":["stateSlice","createSlice","name","initialState","selectedRows","selectedRow","deleteMode","reducers","setSelectedRows","state","action","payload","setSelectedRow","addRowItem","currentState","current","includes","removeRowItem","filter","id","setDeleteMode","actions","toggleDeleteConfirmation","combineReducers","data","orderStatusColor","label","dotClass","textClass","backgroundColor","actionPermissions","useState","isDeactivate","setDeactivate","row","setRow","tableRef","useRef","dispatch","useDispatch","updateOperatorStatus","isStatus","acc_status","apiUpdateProviderAccStatus","success","OpenNotification","ActionColumn","textTheme","useThemeClass","navigate","useNavigate","onView","useCallback","iconColor","IconComponent","RiCheckboxCircleFill","RiCloseCircleFill","disableIconStyle","color","pointerEvents","canEdit","canAdd","canView","canActivate","canClone","canApprove","className","title","onClick","mode","style","useSelector","providerList","tableData","pageIndex","pageSize","sort","query","sort_field","total","order","loading","orderList","res","totalCount","auth","user","enterAccount","parentAccountList","password","rememberMe","usernameOrEmail","useEffect","fetchData","getOrders","page_no","page_size","unq_id","getParentAccount","resetSelected","getUploadFileType","useMemo","columns","header","flex","cell","props","original","accessorKey","acc_parent","GetDropdownLabel","onAllRowSelect","checked","rows","originalRows","map","selectedIds","forEach","push","ref","pagingData","onPaginationChange","page","newTableData","cloneDeep","setTableData","onSelectChange","value","Number","onSort","sortfield","snakeToCamel","key","onCheckBoxChange","onIndeterminateCheckBoxChange","selectable","isOpen","onClose","fontStyle","fontSize","variant","searchInput","debounceFn","debounce","val","length","size","placeholder","prefix","onChange","e","target","icon","download","block","to","disabled","onDialogClose","onDelete","deleteOrders","deleteSucceed","orders","toast","type","duration","placement","onRequestClose","onCancel","onConfirm","confirmButtonColor","injectReducer","reducer","permissionsList","bodyClass"],"sourceRoot":""}