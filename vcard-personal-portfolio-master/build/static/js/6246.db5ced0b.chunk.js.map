{"version":3,"file":"static/js/6246.db5ced0b.chunk.js","mappings":"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","sources":["mock/data/timezones.js","utils/hooks/useTimeOutMessage.js","views/accounts/EnterpriseCustomers/components/EnterpriseAccountInfo.js","views/accounts/EnterpriseCustomers/components/EnterpriseContactInfo.js","views/accounts/EnterpriseCustomers/components/EnterpriseAddressInfo.js","views/accounts/EnterpriseCustomers/components/EnterpriseUploadFiles.js","views/accounts/EnterpriseCustomers/components/EnterpriseBillingInfo.js","views/accounts/EnterpriseCustomers/components/EnterpriseDetails.js","views/accounts/EnterpriseCustomers/components/EnterpriseMasterUserInfo.js","views/accounts/EnterpriseCustomers/components/EnterpriseMasterContactInfo.js","views/accounts/EnterpriseCustomers/components/EnterpriseMasterInfo.js","views/accounts/EnterpriseCustomers/components/EnterprisePreview.js","views/accounts/EnterpriseCustomers/components/StepControlled.js","views/accounts/EnterpriseCustomers/components/NewEnterPrise.js"],"sourcesContent":["export const timeZone = [\r\n    { id: 1, value: '(UTC-10:00) Hawaii' },\r\n    { id: 2, value: '(UTC-09:00) Alaska' },\r\n    { id: 3, value: '(UTC-08:00) Baja California' },\r\n    { id: 4, value: '(UTC-08:00) Pacific Time (US & Canada)' },\r\n    { id: 5, value: '(UTC-07:00) Arizona' },\r\n    { id: 6, value: '(UTC-07:00) Chihuahua, La Paz, Mazatlan' },\r\n    { id: 7, value: '(UTC-07:00) Mountain Time (US & Canada)' },\r\n    { id: 8, value: '(UTC-06:00) Central America' },\r\n    { id: 9, value: '(UTC-06:00) Central Time (US & Canada)' },\r\n    { id: 10, value: '(UTC-06:00) Guadalajara, Mexico City, Monterrey' },\r\n    { id: 11, value: '(UTC-06:00) Saskatchewan' },\r\n    { id: 12, value: '(UTC-05:00) Bogota, Lima, Quito, Rio Branco' },\r\n    { id: 13, value: '(UTC-05:00) Eastern Time (US & Canada)' },\r\n    { id: 14, value: '(UTC-05:00) Indiana (East)' },\r\n    { id: 15, value: '(UTC-04:30) Caracas' },\r\n    { id: 16, value: '(UTC-04:00) Asuncion' },\r\n    { id: 17, value: '(UTC-04:00) Atlantic Time (Canada)' },\r\n    { id: 18, value: '(UTC-04:00) Cuiaba' },\r\n    { id: 19, value: '(UTC-04:00) Georgetown, La Paz, Manaus, San Juan' },\r\n    { id: 20, value: '(UTC-04:00) Santiago' },\r\n    { id: 21, value: '(UTC-03:30) Newfoundland' },\r\n    { id: 22, value: '(UTC-03:00) Brasilia' },\r\n    { id: 23, value: '(UTC-03:00) Buenos Aires' },\r\n    { id: 24, value: '(UTC-03:00) Cayenne, Fortaleza' },\r\n    { id: 25, value: '(UTC-03:00) Greenland' },\r\n    { id: 26, value: '(UTC-03:00) Montevideo' },\r\n    { id: 27, value: '(UTC-03:00) Salvador' },\r\n    { id: 28, value: '(UTC-02:00) Coordinated Universal Time-02' },\r\n    { id: 29, value: '(UTC-01:00) Azores' },\r\n    { id: 30, value: '(UTC-01:00) Cape Verde Is.' },\r\n    { id: 31, value: '(UTC) Casablanca' },\r\n    { id: 32, value: '(UTC) Coordinated Universal Time' },\r\n    { id: 33, value: '(UTC) Dublin, Edinburgh, Lisbon, London' },\r\n    { id: 34, value: '(UTC) Monrovia, Reykjavik' },\r\n    {\r\n        id: 35,\r\n        value: '(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna',\r\n    },\r\n    {\r\n        id: 36,\r\n        value: '(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague',\r\n    },\r\n    { id: 37, value: '(UTC+01:00) Brussels, Copenhagen, Madrid, Paris' },\r\n    { id: 38, value: '(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb' },\r\n    { id: 39, value: '(UTC+01:00) West Central Africa' },\r\n    { id: 40, value: '(UTC+01:00) Windhoek' },\r\n    { id: 41, value: '(UTC+02:00) Amman' },\r\n    { id: 42, value: '(UTC+02:00) Athens, Bucharest' },\r\n    { id: 43, value: '(UTC+02:00) Beirut' },\r\n    { id: 44, value: '(UTC+02:00) Cairo' },\r\n    { id: 45, value: '(UTC+02:00) Damascus' },\r\n    { id: 46, value: '(UTC+02:00) E. Europe' },\r\n    { id: 47, value: '(UTC+02:00) Harare, Pretoria' },\r\n    {\r\n        id: 48,\r\n        value: '(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius',\r\n    },\r\n    { id: 49, value: '(UTC+02:00) Istanbul' },\r\n    { id: 50, value: '(UTC+02:00) Jerusalem' },\r\n    { id: 51, value: '(UTC+02:00) Kaliningrad (RTZ 1)' },\r\n    { id: 52, value: '(UTC+02:00) Tripoli' },\r\n    { id: 53, value: '(UTC+03:00) Baghdad' },\r\n    { id: 54, value: '(UTC+03:00) Kuwait, Riyadh' },\r\n    { id: 55, value: '(UTC+03:00) Minsk' },\r\n    { id: 56, value: '(UTC+03:00) Moscow, St. Petersburg, Volgograd (RTZ 2)' },\r\n    { id: 57, value: '(UTC+03:00) Nairobi' },\r\n    { id: 58, value: '(UTC+03:30) Tehran' },\r\n    { id: 59, value: '(UTC+04:00) Abu Dhabi, Muscat' },\r\n    { id: 60, value: '(UTC+04:00) Baku' },\r\n    { id: 61, value: '(UTC+04:00) Izhevsk, Samara (RTZ 3)' },\r\n    { id: 62, value: '(UTC+04:00) Port Louis' },\r\n    { id: 63, value: '(UTC+04:00) Tbilisi' },\r\n    { id: 64, value: '(UTC+04:00) Yerevan' },\r\n    { id: 65, value: '(UTC+04:30) Kabul' },\r\n    { id: 66, value: '(UTC+05:00) Ashgabat, Tashkent' },\r\n    { id: 67, value: '(UTC+05:00) Ekaterinburg (RTZ 4)' },\r\n    { id: 68, value: '(UTC+05:00) Islamabad, Karachi' },\r\n    { id: 69, value: '(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi' },\r\n    { id: 70, value: '(UTC+05:30) Sri Jayawardenepura' },\r\n    { id: 71, value: '(UTC+05:45) Kathmandu' },\r\n    { id: 72, value: '(UTC+06:00) Astana' },\r\n    { id: 73, value: '(UTC+06:00) Dhaka' },\r\n    { id: 74, value: '(UTC+06:00) Novosibirsk (RTZ 5)' },\r\n    { id: 75, value: '(UTC+06:30) Yangon (Rangoon)' },\r\n    { id: 76, value: '(UTC+07:00) Bangkok, Hanoi, Jakarta' },\r\n    { id: 77, value: '(UTC+07:00) Krasnoyarsk (RTZ 6)' },\r\n    { id: 78, value: '(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi' },\r\n    { id: 79, value: '(UTC+08:00) Irkutsk (RTZ 7)' },\r\n    { id: 80, value: '(UTC+08:00) Kuala Lumpur, Singapore' },\r\n    { id: 81, value: '(UTC+08:00) Perth' },\r\n    { id: 82, value: '(UTC+08:00) Taipei' },\r\n    { id: 83, value: '(UTC+08:00) Ulaanbaatar' },\r\n    { id: 84, value: '(UTC+09:00) Osaka, Sapporo, Tokyo' },\r\n    { id: 85, value: '(UTC+09:00) Seoul' },\r\n    { id: 86, value: '(UTC+09:00) Yakutsk (RTZ 8)' },\r\n    { id: 87, value: '(UTC+09:30) Adelaide' },\r\n    { id: 88, value: '(UTC+09:30) Darwin' },\r\n    { id: 89, value: '(UTC+10:00) Brisbane' },\r\n    { id: 90, value: '(UTC+10:00) Canberra, Melbourne, Sydney' },\r\n    { id: 91, value: '(UTC+10:00) Guam, Port Moresby' },\r\n    { id: 92, value: '(UTC+10:00) Hobart' },\r\n    { id: 93, value: '(UTC+10:00) Magadan' },\r\n    { id: 94, value: '(UTC+10:00) Vladivostok, Magadan (RTZ 9)' },\r\n    { id: 95, value: '(UTC+11:00) Chokurdakh (RTZ 10)' },\r\n    { id: 96, value: '(UTC+11:00) Solomon Is., New Caledonia' },\r\n    { id: 97, value: '(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky (RTZ 11)' },\r\n    { id: 98, value: '(UTC+12:00) Auckland, Wellington' },\r\n    { id: 99, value: '(UTC+12:00) Coordinated Universal Time+12' },\r\n    { id: 100, value: '(UTC+12:00) Fiji' },\r\n    { id: 101, value: '(UTC+12:00) Petropavlovsk-Kamchatsky - Old' },\r\n    { id: 102, value: \"(UTC+13:00) Nuku'alofa\" },\r\n    { id: 103, value: '(UTC+13:00) Samoa' },\r\n    { id: 104, value: '(UTC+14:00) Kiritimati Island' },\r\n]\r\n","import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Tooltip,\r\n    Dialog,\r\n} from 'components/ui'\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport { BsFillPlusCircleFill } from 'react-icons/bs'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport * as Yup from 'yup'\r\nimport { timeZone } from '../../../../mock/data/timezones'\r\nimport { useEffect, useState } from 'react'\r\nimport { getParenOperator, getParentAccount, setSelectedParentOperator } from '../store/dataSlice'\r\nimport { RiCloseCircleFill } from 'react-icons/ri'\r\n\r\nexport const statusOptions = [\r\n    { label: 'Married', value: '1' },\r\n    { label: 'Widowed', value: '2' },\r\n    { label: 'Separated', value: '3' },\r\n    { label: 'Divorced', value: '3' },\r\n    { label: 'Single ', value: '4' },\r\n]\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: '5' },\r\n    { label: 'Airtel Inc.', value: '6' },\r\n    { label: 'Airtel India', value: '7' },\r\n]\r\nconst orientationtype = [\r\n    { label: 'Right to Left', value: \"RTL\" },\r\n    { label: 'Left to Right', value: \"LTR\" },\r\n]\r\n\r\nconst language = [\r\n    { label: 'English', value: 1 },\r\n    { label: 'Spanish', value: 2 },\r\n    { label: 'Arabic', value: 3 },\r\n    { label: 'Portugese', value: 4 },\r\n\r\n]\r\n\r\nconst currency = [\r\n    { label: 'USD', value: 0 },\r\n    { label: 'EUR', value: 1 },\r\n    { label: 'CAD', value: 2 },\r\n    { label: 'KWD', value: 3 },\r\n    { label: 'INR', value: 4 },\r\n]\r\n\r\nconst timeZone111 = [\r\n    { label: 'India (GMT+5:30)', value: 0 },\r\n    { label: 'USA (GMT-4)', value: 1 },\r\n    { label: 'Chicago (GMT-5)', value: 2 },\r\n    { label: 'Phoenix (GMT-7)', value: 3 },\r\n    { label: 'Los Angeles (GMT-7)', value: 4 },\r\n]\r\n\r\nconst parentAccount = [\r\n    { label: 'Global MNO', value: 1 },\r\n\r\n]\r\n\r\nconst custCat = [\r\n    { label: 'Premium', value: \"0\" },\r\n    { label: 'Platinum', value: \"1\" },\r\n    { label: 'Gold', value: \"2\" },\r\n    { label: 'Silver', value: \"3\" },\r\n\r\n]\r\n\r\n\r\n\r\nconst enterpriseValidationSchema = Yup.object().shape({\r\n    //providerId : Yup.string().required('Please Enter Provider Id'),\r\n    // accMnoParentId: Yup.string().required('Please Enter Parent Account'),\r\n    custName: Yup.string().min(2, \"Customer title must be at least 2 characters\").max(100).required('Please enter a valid enterprise customer title'),\r\n    customerType: Yup.string().required('Please Select Type'),\r\n    custCompName: Yup.string().min(2, \"Company name must be at least 2 characters\").max(100).required('Please enter company name'),\r\n    custIncorpDt: Yup.string().required('Please select incorporate date'),\r\n    custTaxId: Yup.string().min(1).max(50).required('Please enter tax id'),\r\n    custTimeZone: Yup.string().required('Please select time zone'),\r\n    custCurrency: Yup.string().required('Please select currency'),\r\n    custLang: Yup.string().required('Please select language'),\r\n    custOrient: Yup.string().required('Please select display orientation'),\r\n    custCat: Yup.string().required('Please select a customer category').nullable(),\r\n})\r\nconst EnterpriseAccountInfo = ({ formik, onChange, refId, ...props }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [accOperatorId, setOperatorId] = useState()\r\n\r\n    const currencyList = useSelector((state) => state.enterpriseList?.data?.currencyList)\r\n    const parentAccountList = useSelector((state) => state.enterpriseList?.data?.parentAccountList)\r\n    const custmoerCategoryList = useSelector((state) => state.enterpriseList?.data?.custmoerCatList)\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n\r\n    const operatorAccountList = useSelector((state) => state.enterpriseList?.data?.operatorAccountList)\r\n\r\n    const timeZoneList = timeZone?.map((timezone) => ({\r\n        value: timezone.id,\r\n        label: timezone.value,\r\n    }))\r\n    const selectedParentOperator = useSelector((state) => state.enterpriseList?.data?.selectedParentOperator)\r\n\r\n\r\n    // useEffect(() => {\r\n    //     if (formik.isValidating && !formik.isValid) {\r\n    //       formik.setTouched(formik.errors, true);\r\n    //     }\r\n    //   }, [formik.isValidating, formik.isValid, formik.errors]);\r\n\r\n    const [dialogIsOpen, setIsOpen] = useState(false)\r\n    const [newLabel, setNewLabel] = useState('')\r\n    const openDialog = () => {\r\n        setIsOpen(true)\r\n    }\r\n\r\n    const onDialogClose = (e) => {\r\n        setIsOpen(false)\r\n    }\r\n    const onDialogOk = (push, values) => {\r\n        if (newLabel !== '') {\r\n            push({ field_title: newLabel, field_value: '' })\r\n            setNewLabel('')\r\n            setIsOpen(false)\r\n        }\r\n    }\r\n    // useEffect(() => {\r\n    //     dispatch(getParentAccount({ accMnoParentId: accOperatorId }))\r\n\r\n\r\n    // }, [accOperatorId, dispatch])\r\n\r\n    const handleDropdownChange = (field, form, gender) => {\r\n        form.setFieldValue(field.name, gender.value)\r\n        setOperatorId(gender.acc_unq_id);\r\n        dispatch(setSelectedParentOperator(gender.acc_unq_id))\r\n\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (selectedParentOperator) {\r\n            dispatch(getParentAccount({ accMnoParentId: selectedParentOperator }))\r\n\r\n        }\r\n\r\n    }, [accOperatorId, dispatch, selectedParentOperator]);\r\n    console.log(selectedParentOperator, \"selectedParentOperator\")\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">ACCOUNT INFO</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.EpIntialValues.entAccInfo}\r\n                validationSchema={enterpriseValidationSchema}\r\n\r\n\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n\r\n                    let updatedPayload = { ...props.enterpriseState, ...values }\r\n                    props.setEnterpriseState(updatedPayload)\r\n                    let dataToStore = props.EpIntialValues\r\n                    dataToStore.entAccInfo = values\r\n                    props.setEpIntialValues(dataToStore)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n\r\n\r\n                                    <FormItem\r\n                                        label={<p>Operator<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.customerType && touched.customerType\r\n                                        }\r\n                                        errorMessage={errors.customerType}\r\n                                    >\r\n                                        <Field name=\"customerType\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n\r\n                                                    placeholder=\"Airtel Inc.\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={operatorAccountList}\r\n                                                    value={operatorAccountList?.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.customerType\r\n                                                    )}\r\n\r\n                                                    onChange={(gender) => { handleDropdownChange(field, form, gender) }\r\n                                                    }\r\n\r\n\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n\r\n                                    <FormItem\r\n                                        label={<p>Parent Account</p>}\r\n                                    >\r\n                                        <Field name=\"accMnoParentId\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Global Mno\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={parentAccountList}\r\n                                                    value={parentAccountList?.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.accMnoParentId\r\n                                                    )}\r\n\r\n\r\n                                                    onChange={(gender) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            gender.value\r\n                                                        )\r\n                                                    }\r\n\r\n                                                />\r\n\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n\r\n\r\n                                    <FormItem\r\n                                        label={<p>Enterprise Customer Title<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n\r\n                                        invalid={\r\n                                            errors.custName &&\r\n                                            touched.custName\r\n                                        }\r\n                                        errorMessage={errors.custName}\r\n                                    >\r\n                                        <Field\r\n\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"custName\"\r\n                                            placeholder=\"Enter enterprise customer title\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n                                    <FormItem\r\n                                        label={<p>Company Name<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.custCompName &&\r\n                                            touched.custCompName\r\n                                        }\r\n                                        errorMessage={errors.custCompName}\r\n                                    >\r\n                                        <Field\r\n\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"custCompName\"\r\n                                            placeholder=\"Enter Company Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Incorporation Date<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.custIncorpDt &&\r\n                                            touched.custIncorpDt\r\n                                        }\r\n                                        errorMessage={errors.custIncorpDt}\r\n\r\n                                    >\r\n                                        <Field name=\"custIncorpDt\" placeholder=\"Incorporation Date\">\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    placeholder=\"Select incorporation date\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    onChange={(custIncorpDt) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            custIncorpDt\r\n                                                        )\r\n                                                    }}\r\n                                                    maxDate={new Date()}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Tax ID<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.custTaxId && touched.custTaxId}\r\n                                        errorMessage={errors.custTaxId}\r\n\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"custTaxId\"\r\n                                            placeholder=\"Enter Tax ID\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Time zone<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.custTimeZone && touched.custTimeZone\r\n                                        }\r\n                                        errorMessage={errors.custTimeZone}\r\n\r\n                                    >\r\n                                        <Field name=\"custTimeZone\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    value={timeZoneList?.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.custTimeZone\r\n                                                    )}\r\n                                                    placeholder=\"Select Type\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={timeZoneList}\r\n                                                    onChange={(gender) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            gender.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Currency<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.custCurrency && touched.custCurrency\r\n                                        }\r\n                                        errorMessage={errors.custCurrency}\r\n\r\n                                    >\r\n                                        <Field name=\"custCurrency\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    value={currencyList?.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.custCurrency\r\n                                                    )}\r\n                                                    placeholder=\"Select Type\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={currencyList}\r\n                                                    onChange={(gender) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            gender.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Language<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.custLang && touched.custLang\r\n                                        }\r\n                                        errorMessage={errors.custLang}\r\n                                    >\r\n                                        <Field name=\"custLang\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    value={language.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.custLang\r\n                                                    )}\r\n                                                    placeholder=\"Select Type\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={language}\r\n                                                    onChange={(gender) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            gender.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Display Orientation<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.custOrient &&\r\n                                            touched.custOrient\r\n                                        }\r\n                                        errorMessage={errors.custOrient}\r\n\r\n                                    >\r\n                                        <Field name=\"custOrient\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    value={orientationtype.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.custOrient\r\n                                                    )}\r\n                                                    placeholder=\"Select Type\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={orientationtype}\r\n                                                    onChange={(gender) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            gender.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Customer category<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.custCat && touched.custCat}\r\n                                        errorMessage={errors.custCat}\r\n                                    >\r\n                                        <Field name=\"custCat\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select customer category\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={custmoerCategoryList}\r\n                                                    value={custmoerCategoryList?.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.custCat\r\n                                                    )}\r\n                                                    onChange={(gender) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            gender.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FieldArray name=\"fields\">\r\n                                        {({ push, remove }) => (\r\n                                            <>\r\n\r\n                                                {values.fields.map((item, index) => {\r\n                                                    return (\r\n\r\n\r\n                                                        <FormItem\r\n                                                            label={\r\n                                                                <div style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                                                                    <p style={{ marginRight: '20px' }}>{item.field_title}</p>\r\n                                                                    <Tooltip title={`Remove`}>\r\n                                                                        <span\r\n                                                                            className={`cursor-pointer  text-${'rose'}-800 hover:text-${'rose'}-800`}\r\n                                                                            onClick={() => remove(index)}\r\n                                                                            style={{ marginLeft: 'auto' }}\r\n                                                                        >\r\n                                                                            <RiCloseCircleFill />\r\n                                                                        </span>\r\n                                                                    </Tooltip>\r\n                                                                </div>\r\n\r\n                                                            }\r\n                                                        >\r\n\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                placeholder=\"\"\r\n                                                                component={Input}\r\n                                                                name={`fields[${index}].field_value`}\r\n                                                            />\r\n\r\n                                                        </FormItem>\r\n\r\n                                                    )\r\n                                                })}\r\n\r\n\r\n\r\n                                                <Dialog\r\n                                                    isOpen={dialogIsOpen}\r\n                                                    onClose={onDialogClose}\r\n                                                    onRequestClose={onDialogClose}\r\n                                                    shouldCloseOnOverlayClick={false}\r\n                                                    shouldCloseOnEsc={false}\r\n                                                >\r\n                                                    <FormItem\r\n                                                        label=\"Field Title\"\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"title\"\r\n                                                            placeholder=\"Please enter Custom Field Title\"\r\n                                                            component={Input}\r\n                                                            value={newLabel}\r\n                                                            onChange={(e) => setNewLabel(e.target.value)}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <div className=\"text-right mt-6\">\r\n                                                        <Button\r\n                                                            className=\"ltr:mr-2 rtl:ml-2\"\r\n                                                            variant=\"plain\"\r\n                                                            onClick={onDialogClose}\r\n                                                        >\r\n                                                            Cancel\r\n                                                        </Button>\r\n                                                        <Button variant=\"solid\" onClick={() => onDialogOk(push, values,)}>\r\n                                                            Okay\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </Dialog>\r\n\r\n                                            </>\r\n                                        )}\r\n                                    </FieldArray>\r\n                                </div>\r\n                            </FormContainer>\r\n                            <div className=\"mt-2\">\r\n                                <Button\r\n                                    type=\"button\"\r\n                                    variant=\"plain\"\r\n                                    className=\"font-bold\"\r\n                                    style={{ color: '#004D99' }}\r\n                                    onClick={() => openDialog()}\r\n                                    icon={<BsFillPlusCircleFill fill=\"#004D99\" className='' />}\r\n                                    disabled={values.fields[values.fields.length - 1]?.field_value == '' ? true : false}\r\n                                >\r\n                                    ADD CUSTOM FIELD\r\n                                </Button>\r\n                            </div>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EnterpriseAccountInfo\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Tooltip,\r\n    Dialog,\r\n} from 'components/ui'\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport * as Yup from \"yup\";\r\nimport { validateURL } from 'views/Servicefile';\r\nimport { useState } from 'react';\r\nimport { RiCloseCircleFill } from 'react-icons/ri';\r\nimport { BsFillPlusCircleFill } from 'react-icons/bs';\r\n\r\n\r\nconst enterpriseContactInitValues = {\r\n\r\n    custPrimCont: \"\",\r\n    custEmailId: \"\",\r\n    custAltCont: \"\",\r\n    custFax: \"\",\r\n    custWebUrl: \"\",\r\n    custPhone:\"\",\r\n    custordEmailId:\"\"\r\n    \r\n}\r\n\r\nconst enterpriseContactValidationSchema = Yup.object().shape({\r\n    custFirstName: Yup\r\n    .string()\r\n    .required(\"First enter first name\"),\r\n    custLastName: Yup.string().required(\"Please enter last name\"),\r\n    // custPrimCont: Yup.string().min(2,\"Primary Contact must be at least 2 characters\").max(100).required(\"Please Enter Primary Contact\"),\r\n    custEmailId: Yup.string().min(5,\"Email id must be at least 5 characters\").max(50).email('Please enter valid email id').required('Please enter email id'),\r\n    custordEmailId: Yup.string().min(5,\"Email Id must be at least 5 characters\").max(50).email('Please enter valid email id').required('Please enter ordered email id').nullable(),\r\n\r\n    // custAltCont: Yup\r\n    // .string()\r\n    // .required(\"Mobile number is required\")\r\n    // .matches(/^(\\+\\d{1,3}[- ]?)?\\d{10}$/, \"Invalid mobile number\"),\r\n    custPhone: Yup.string().min(5,\"Number must be atleast 5 characters\").max(20,\"Max 20 characters are allowed\")\r\n    .required(\"Please enter phone number\").nullable(),\r\n    // custFax: Yup.string().required('Please Enter Fax'),\r\n    //custWebUrl: Yup.string().required('Please Enter Web Url'),\r\n})\r\n\r\n\r\nconst EnterpriseContactInfo = ({ onChange, refId, ...props }) => {\r\n\r\n    const [dialogIsOpen, setIsOpen] = useState(false)\r\n    const [newLabel, setNewLabel] = useState('')\r\n    const openDialog = () => {\r\n        setIsOpen(true)\r\n    }\r\n\r\n    const onDialogClose = (e) => {\r\n        setIsOpen(false)\r\n    }\r\n    const onDialogOk = (push, values) => {\r\n        if (newLabel !== '') {\r\n            push({ field_title: newLabel, field_value: '' })\r\n            setNewLabel('')\r\n            setIsOpen(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">CONTACT INFO</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.EpIntialValues.entContact}\r\n                validationSchema={enterpriseContactValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n\r\n                    \r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.enterpriseState, ...values }\r\n\r\n                    props.setEnterpriseState(updatedPayload)\r\n                    let dataToStore = props.EpIntialValues\r\n                    dataToStore.entContact = values\r\n                    props.setEpIntialValues(dataToStore)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        \r\n                                        label={<p>First Name<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.custFirstName && touched.custFirstName}\r\n                                        errorMessage={errors.custFirstName}\r\n                                    >\r\n                                        <Field\r\n                                            values={values.custFirstName}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"custFirstName\"\r\n                                            placeholder=\"Enter First Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        \r\n                                        label=\"Middle Name\"\r\n                                    >\r\n                                        <Field\r\n                                            values={values.custMiddleName}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"custMiddleName\"\r\n                                            placeholder=\"Enter Middle Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        \r\n                                        label={<p>Last Name<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.custLastName && touched.custLastName}\r\n                                        errorMessage={errors.custLastName}\r\n                                    >\r\n                                        <Field\r\n                                            values={values.custLastName}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"custLastName\"\r\n                                            placeholder=\"Enter Last Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Email ID<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.custEmailId && touched.custEmailId}\r\n                                        errorMessage={errors.custEmailId}\r\n                                    >\r\n                                        <Field\r\n                                            values={values.custEmailId}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"custEmailId\"\r\n                                            placeholder=\"Enter Email ID\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Phone Number<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.custPhone && touched.custPhone}\r\n                                        errorMessage={errors.custPhone}\r\n                                    >\r\n                                        <Field\r\n                                            values={values.custPhone}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"custPhone\"\r\n                                            placeholder=\"Enter Phone Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Alternate Phone Number\"\r\n                                        // invalid={errors.custAltCont && touched.custAltCont}\r\n                                        // errorMessage={errors.custAltCont}\r\n                                    >\r\n                                        <Field\r\n                                            values={values.custAltCont}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"custAltCont\"\r\n                                            placeholder=\"Enter Alternate Phone Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Fax Number\"\r\n                                        invalid={errors.custFax && touched.custFax}\r\n                                        errorMessage={errors.custFax}\r\n                                    >\r\n                                        <Field\r\n                                            values={values.custFax}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"custFax\"\r\n                                            placeholder=\"Enter Fax Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Website URL\"\r\n                                        invalid={errors.custWebUrl && touched.custWebUrl}\r\n                                        errorMessage={errors.custWebUrl}\r\n                                    >\r\n                                        <Field\r\n                                            values={values.custWebUrl}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"custWebUrl\"\r\n                                            placeholder=\"Enter Website URL\"\r\n                                            component={Input}\r\n                                            validate={validateURL}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n                                    <FormItem\r\n                                        label={<p>Order Approver Email ID<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.custordEmailId && touched.custordEmailId}\r\n                                        errorMessage={errors.custordEmailId}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"custordEmailId\"\r\n                                            placeholder=\"Enter Order Approver Email ID\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FieldArray name=\"fields\">\r\n                                        {({ push, remove }) => (\r\n                                            <>\r\n                                                {values.fields.map((item, index) => {\r\n                                                    return (\r\n                                                        <FormItem\r\n                                                            label={\r\n                                                                <div style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                                                                    <p style={{ marginRight: '20px' }}>{item.field_title}</p>\r\n                                                                    <Tooltip title={`Remove`}>\r\n                                                                        <span\r\n                                                                            className={`cursor-pointer  text-${'rose'}-800 hover:text-${'rose'}-800`}\r\n                                                                            onClick={() => remove(index)}\r\n                                                                            style={{ marginLeft: 'auto' }}\r\n                                                                        >\r\n                                                                            <RiCloseCircleFill />\r\n                                                                        </span>\r\n                                                                    </Tooltip>\r\n                                                                </div>\r\n\r\n                                                            }\r\n                                                        >\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                placeholder=\"\"\r\n                                                                component={Input}\r\n                                                                name={`fields[${index}].field_value`}\r\n                                                            />\r\n\r\n                                                        </FormItem>\r\n\r\n                                                    )\r\n                                                })}\r\n\r\n                                                <Dialog\r\n                                                    isOpen={dialogIsOpen}\r\n                                                    onClose={onDialogClose}\r\n                                                    onRequestClose={onDialogClose}\r\n                                                    shouldCloseOnOverlayClick={false}\r\n                                                    shouldCloseOnEsc={false}\r\n                                                >\r\n                                                    <FormItem\r\n                                                        label=\"Field Title\"\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"title\"\r\n                                                            placeholder=\"Please enter Custom Field Title\"\r\n                                                            component={Input}\r\n                                                            value={newLabel}\r\n                                                            onChange={(e) => setNewLabel(e.target.value)}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <div className=\"text-right mt-6\">\r\n                                                        <Button\r\n                                                            className=\"ltr:mr-2 rtl:ml-2\"\r\n                                                            variant=\"plain\"\r\n                                                            onClick={onDialogClose}\r\n                                                        >\r\n                                                            Cancel\r\n                                                        </Button>\r\n                                                        <Button variant=\"solid\" onClick={() => onDialogOk(push, values,)}>\r\n                                                            Okay\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </Dialog>\r\n\r\n                                            </>\r\n                                        )}\r\n                                    </FieldArray>\r\n\r\n                                </div>\r\n\r\n                            </FormContainer>\r\n                            <div className=\"mt-2\">\r\n                                <Button\r\n                                    type=\"button\"\r\n                                    variant=\"plain\"\r\n                                    className=\"font-bold\"\r\n                                    style={{ color: '#004D99' }}\r\n                                    onClick={() => openDialog()}\r\n                                    icon={<BsFillPlusCircleFill fill=\"#004D99\" className='' />}\r\n                                    disabled={values.fields[values.fields.length - 1]?.field_value === '' ? true : false}\r\n                                >\r\n                                    ADD CUSTOM FIELD\r\n                                </Button>\r\n                            </div>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EnterpriseContactInfo\r\n","import React, { useCallback } from 'react'\r\nimport {\r\n    Input,\r\n   \r\n    FormItem,\r\n    FormContainer,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nconst addressFields = {\r\n    custCountry: '',\r\n    custAddL1: '',\r\n    custAddL2: '',\r\n    custCity: '',\r\n    custState:'',\r\n    custZipcode: '',\r\n    // sameCorrespondenceAddress: true,\r\n    // correspondenceAddress: {\r\n    //     accCountry: '',\r\n    //     accAddL1: '',\r\n    //     accAddL2: '',\r\n    //     accCity: '',\r\n    //     accState: '',\r\n    //     accZipcode: '',\r\n    // },\r\n}\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    custCountry: Yup.string().min(3,\"Country must be at least 3 characters\").max(50).required('Please enter country'),\r\n    custAddL1: Yup.string().min(3,\"Address must be at least 3 characters\").max(255).required('Please enter address'),\r\n    // accAddL2: Yup.string(),\r\n    custCity: Yup.string().min(3,\"City must be at least 3 characters\").max(50).required('Please enter city'),\r\n    custState: Yup.string().min(3,\"State must be at least 3 characters\").max(50).required('Please enter state'),\r\n    //accZipcode: Yup.string().required('Please enter zip code'),\r\n    // sameCorrespondenceAddress: Yup.bool(),\r\n    // correspondenceAddress: Yup.object().when('sameCorrespondenceAddress', {\r\n    //     is: false,\r\n    //     then: Yup.object().shape({\r\n    //         accCountry: Yup.string().required('Please select accCountry'),\r\n    //         accAddL1: Yup.string().required('Please enter your address'),\r\n    //         accAddL2: Yup.string(),\r\n    //         accCity: Yup.string().required('Please enter your accCity'),\r\n    //         accState: Yup.string().required('Please enter your accState'),\r\n    //         accZipcode: Yup.string().required('Please enter zip code'),\r\n    //     }),\r\n    //     otherwise: (schema) => schema,\r\n    // }),\r\n})\r\n\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: 'M' },\r\n    { label: 'Airtel Inc.', value: 'F' },\r\n    { label: 'Airtel India', value: 'O' },\r\n]\r\n\r\n\r\nconst EnterpriseAddressInfo = ({onChange,refId,...props}) => {\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"mx-4 mb-4 mt-2\">ADDRESS</h3>\r\n            <Formik innerRef ={refId}\r\n                initialValues={props.EpIntialValues.address}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    \r\n                    setSubmitting(true)\r\n                    let updatedPayload ={...props.enterpriseState, ...values}\r\n                    props.setEnterpriseState(updatedPayload)\r\n                    let dataToStore = props.EpIntialValues\r\n                    dataToStore.address = values\r\n                    props.setEpIntialValues(dataToStore)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, setFieldValue, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                     label={<p>Address Line 1<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.custAddL1 &&touched.custAddL1}\r\n                                        errorMessage={errors.custAddL1}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name='custAddL1'\r\n                                            placeholder=\"Address Line 1\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n                                    <FormItem\r\n                                        label=\"Address Line 2\"\r\n                                        // invalid={errors.custAddL2 && touched.custAddL2}\r\n                                        // errorMessage={errors.custAddL2}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'custAddL2'}\r\n                                            placeholder=\"Address Line 2\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                </div>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                     label={<p>City<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.custCity && touched.custCity}\r\n                                        errorMessage={errors.custCity}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'custCity'}\r\n                                            placeholder=\"City\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                    label={<p>State<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.custState &&touched.custState}\r\n                                        errorMessage={errors.custState}\r\n                                    >\r\n                                        <Field\r\n                                        \r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'custState'}\r\n                                            placeholder=\"State\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                    label={<p>Country<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.custCountry &&touched.custCountry}\r\n                                        errorMessage={errors.custCountry}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'custCountry'}\r\n                                            placeholder=\"State\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Zip Code\"\r\n                                        //invalid={errors.accZipcode && touched.accZipcode}\r\n                                        //errorMessage={errors.accZipcode}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'custZipcode'}\r\n                                            placeholder=\"Zip Code\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                </div>\r\n\r\n                                {/* <AddressForm\r\n                                    countryName=\"accCountry\"\r\n                                    addressLine1Name=\"accAddL1\"\r\n                                    addressLine2Name=\"accAddL2\"\r\n                                    cityName=\"accCity\"\r\n                                    stateName=\"accState\"\r\n                                    zipCodeName=\"accZipcode\"\r\n                                    {...formProps}\r\n                                />\r\n                               */}\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EnterpriseAddressInfo\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n    AdaptableCard,\r\n} from 'components/shared'\r\nimport {\r\n\r\n    FormItem,\r\n    FormContainer,\r\n    Button,\r\n    Upload,\r\n    Input,\r\n    Dialog\r\n} from 'components/ui'\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport { BsFillDashCircleFill, BsFillPlusCircleFill } from 'react-icons/bs'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { apiUploadFiles } from 'services/EnterpriseService'\r\nimport appConfig from 'configs/app.config'\r\nimport CloseButton from 'components/ui/CloseButton'\r\nimport { OpenNotification } from 'views/Servicefile'\r\n\r\nconst saveFilesInAccounts = 1\r\nconst EnterpriseUploadFiles = (props) => {\r\n    const { errors, touched, values, setFieldValue,mode } = props\r\n    const { enterAccount, acc_user_id } = useSelector((state) => state.auth.user)\r\n    const beforeUpload = async (newFiles, files) => {\r\n        const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInAccounts)\r\n        return ress\r\n    }\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n    const onClickView = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='py-5' style={{ backgroundColor: \"#f5f5f5\" }}>\r\n                <div className=\"md:grid grid-cols-2 gap-4\">\r\n                    <AdaptableCard>\r\n                        <h3 className=\" mb-4 mt-4 mx-4\">UPLOAD FILES</h3>\r\n                        <Formik\r\n                            innerRef={props.refId}\r\n                            initialValues={props.EpIntialValues}\r\n                            onSubmit={(values, { setSubmitting }) => {\r\n                                setSubmitting(true)\r\n                                let updatedPayload = { ...props.enterpriseState, uploadFiles : values.uploadFiles }\r\n                                props.setEnterpriseState(updatedPayload)\r\n                                let dataToStore = props.EpIntialValues\r\n                                dataToStore.uploadFiles = values.uploadFiles\r\n                                props.setEpIntialValues(dataToStore)\r\n                            }}\r\n                        >\r\n                            {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                                return (\r\n                                    <Form>\r\n                                        <FormContainer>\r\n                                            <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                                                {values?.uploadFiles?.map((fil, i) => {\r\n                                                    let doc_type;\r\n                                                    try {\r\n                                                        doc_type = fil?.doc_type\r\n                                                    } catch (error) {\r\n                                                        console.error('Invalid JSON:', fil.doc_type);\r\n                                                    }\r\n                                                    return <FormItem\r\n                                                        label={<p>{fil?.doc_name} <span style={{ color: \"red\" }}>{doc_type?.is_mandatory ? '*' : ''}</span></p>}\r\n                                                        key={i}\r\n                                                    >\r\n                                                        <div className=\"md:grid grid-cols-1 gap-3\">\r\n                                                            <AdaptableCard>\r\n                                                                <div>\r\n                                                                    <Upload\r\n                                                                        draggable\r\n                                                                        beforeUpload={beforeUpload}\r\n                                                                        onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                                            setFieldValue(`uploadFiles[${i}].file_url`, uploadRes?.data.fileUnqId);\r\n                                                                            setFieldValue(`uploadFiles[${i}].file_name`, uploadRes?.data.fileName);\r\n                                                                            setFieldValue(`uploadFiles[${i}].file_type`, \"upload\");\r\n                                                                            setFieldValue(`uploadFiles[${i}].doc_name`, fil?.doc_name);\r\n                                                                        }\r\n                                                                        }\r\n\r\n                                                                        className='border-gray-200 w-[500] h-[0]' style={{ minHeight: '3rem' }} name={`uploadFiles[${i}].file_url`}>\r\n                                                                        <div className=\"my-10 text-center\">\r\n                                                                            <p className=\"font-semibold\">\r\n                                                                                <span className=\"text-gray-400 dark:text-white\">\r\n                                                                                    {values.uploadFiles[i].file_url && 'File Uploaded' || \"No Files Uploaded\"} ,{' '}\r\n                                                                                </span>\r\n                                                                                <span className=\"text-blue-700\">\r\n                                                                                    Browse\r\n                                                                                </span>\r\n                                                                            </p>\r\n                                                                        </div>\r\n                                                                    </Upload>\r\n                                                                    {values.uploadFiles[i].file_url &&\r\n                                                                        <div className=\"upload-file cursor-pointer truncate\" >\r\n                                                                            <div className=\"upload-file-info\" onClick={() => onClickView(values.uploadFiles[i])}>\r\n                                                                                <h6 className=\"upload-file-name\">{values.uploadFiles[i].file_name.substring(0, 15)}</h6>\r\n                                                                            </div>\r\n\r\n                                                                            <CloseButton\r\n                                                                                className=\"upload-file-remove \"\r\n                                                                                onClick={() => {\r\n                                                                                    setFieldValue(`uploadFiles[${i}].file_url`, '');\r\n                                                                                    setFieldValue(`uploadFiles[${i}].file_name`, '');\r\n                                                                                    setFieldValue(`uploadFiles[${i}].file_type`, \"upload\");\r\n                                                                                    setFieldValue(`uploadFiles[${i}].doc_name`, fil?.doc_name);\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        </div>}\r\n                                                                </div>\r\n                                                            </AdaptableCard>\r\n                                                        </div>\r\n                                                    </FormItem>\r\n                                                })}\r\n                                            </div>\r\n\r\n                                        </FormContainer>\r\n                                    </Form>\r\n                                )\r\n                            }}\r\n                        </Formik>\r\n                    </AdaptableCard>\r\n                    <AdaptableCard>\r\n                        <h3 className=\"mb-4 mt-4 mx-4\">ADDITIONAL FILES</h3>\r\n                        <Formik innerRef={props.refIdAdd}\r\n                            initialValues={props?.EpIntialValues}\r\n                            onSubmit={(values, { setSubmitting }) => {\r\n                                setSubmitting(true)\r\n                                let isUploaded = props.EpIntialValues.uploadFiles?.filter(e => e.doc_type.is_mandatory === true).every(e => e.file_name !== \"\")\r\n                                if(isUploaded){\r\n                                    let updatedPayload = { ...props.enterpriseState, additionalFiles: values.additionalFiles }\r\n                                    props.setEnterpriseState(updatedPayload)\r\n                                    let dataToStore = props.EpIntialValues\r\n                                    dataToStore.additionalFiles = values.additionalFiles\r\n                                    props.setEpIntialValues(dataToStore)\r\n                                    if(mode == \"ADD\"){\r\n                                        props.setStep(props.step + 1)\r\n                                    }else{\r\n                                        props.setStep(props.step + 2)\r\n                                    }\r\n                                }else{\r\n                                    OpenNotification('warning', 'Please upload the required documents')\r\n                                }\r\n                            }}\r\n                        >\r\n                            {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                                return (\r\n                                    <Form>\r\n                                        <FieldArray name=\"additionalFiles\">\r\n                                            {({ push, remove }) => (\r\n                                                <>\r\n                                                    {values?.additionalFiles && values?.additionalFiles.map((file, index) => (\r\n                                                        <>\r\n                                                            <div className=\"md:grid grid-cols-2 gap-2 mx-4 my-1\" key={index}>\r\n                                                                <div>\r\n                                                                    <Field\r\n                                                                        type=\"text\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        name={`additionalFiles[${index}].doc_name`}\r\n                                                                        placeholder=\"Enter Title\"\r\n                                                                        component={Input}\r\n                                                                        // className=\"w-64\"\r\n                                                                    />\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                    <Upload\r\n                                                                        draggable\r\n                                                                        className=\"border-gray-200 w-[500] h-[0] px-6\"\r\n                                                                        style={{ minHeight: \"3rem\" }}\r\n                                                                        beforeUpload={beforeUpload}\r\n                                                                        onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                                            setFieldValue(`additionalFiles[${index}].file_url`, uploadRes?.data.fileUnqId);\r\n                                                                            setFieldValue(`additionalFiles[${index}].file_name`, uploadRes?.data.fileName);\r\n                                                                            setFieldValue(`additionalFiles[${index}].file_type`, \"additional\");\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <div className=\"my-10 text-center\">\r\n                                                                            <p className=\"font-semibold\">\r\n                                                                                <span className=\"text-gray-400 dark:text-white\">\r\n                                                                                    {values?.additionalFiles[index]?.file_url && 'File Uploaded' || \"No Files Uploaded\"} ,{' '}\r\n                                                                                </span>\r\n                                                                                <span className=\"text-blue-700\">Browse</span>\r\n                                                                            </p>\r\n                                                                        </div>\r\n                                                                    </Upload>\r\n                                                                    {values?.additionalFiles[index]?.file_url &&\r\n                                                                        <div className=\"upload-file truncate\" >\r\n                                                                            <div className=\"upload-file-info\" onClick={() => onClickView(values.additionalFiles[index])}>\r\n                                                                                <h6 className=\"upload-file-name\">{values.additionalFiles[index].file_name.substring(0, 15)}</h6>\r\n                                                                            </div>\r\n                                                                            <CloseButton\r\n                                                                                className=\"upload-file-remove \"\r\n                                                                                onClick={() => {\r\n                                                                                    setFieldValue(`additionalFiles[${index}].file_url`, '');\r\n                                                                                    setFieldValue(`additionalFiles[${index}].file_name`, '');\r\n                                                                                    setFieldValue(`additionalFiles[${index}].file_type`, \"\");\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        </div>}\r\n\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"grid grid-cols-2\">\r\n                                                                <Button\r\n                                                                    variant=\"plain\"\r\n                                                                    type=\"button\"\r\n                                                                    className=\"font-bold m-2\"\r\n                                                                    style={{ color: \"#004D99\" }}\r\n                                                                    icon={<BsFillPlusCircleFill fill=\"#004D99\" />}\r\n                                                                    onClick={() => push({ file_name: \"\", file_url: \"\", file_type: \"\", })}\r\n                                                                >\r\n                                                                    ADD FILE\r\n                                                                </Button>\r\n                                                               \r\n                                                                    <Button\r\n                                                                        variant=\"plain\"\r\n                                                                        type=\"button\"\r\n                                                                        className=\"font-bold m-2\"\r\n                                                                        style={{ color: \"#FF0000\" }}\r\n                                                                        disabled={index === 0 ? true : false}\r\n                \r\n                                                                        icon={<BsFillDashCircleFill fill=\"#FF0000\" />}\r\n                                                                        onClick={() => remove(index)}\r\n                                                                    >\r\n                                                                        DELETE FILE\r\n                                                                    </Button>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    ))}\r\n                                                </>\r\n                                            )}\r\n                                        </FieldArray>\r\n                                    </Form>\r\n                                )\r\n                            }}\r\n                            \r\n                        </Formik>\r\n                    </AdaptableCard>\r\n                    <Dialog isOpen={showContent}\r\n                                onClose={() => setShowContent(false)}>\r\n                                <div className='p-5'>\r\n                                    <img src={`${appConfig.apiPrefix}/media/uniqid/${content?.file_url}`} alt=\"Content\" />\r\n                                    <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content?.file_url}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                                </div>\r\n\r\n                            </Dialog>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default EnterpriseUploadFiles\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Checkbox,\r\n    Radio\r\n} from 'components/ui'\r\nimport React, { useEffect, useState } from 'react'\r\nimport * as Yup from 'yup'\r\n\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik'\r\nimport { Upload } from 'components/ui'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: 'M' },\r\n    { label: 'Airtel Inc.', value: 'F' },\r\n    { label: 'Airtel India', value: 'O' },\r\n]\r\n\r\n\r\nconst placementList = [\r\n    { name: 'Prepaid', value: 'Prepaid' },\r\n    { name: 'Postpaid', value: 'Postpaid' },\r\n\r\n]\r\n\r\nconst billCycle = [\r\n    { label: 'Daily', value: 'DAILY' },\r\n    { label: 'Weekly', value: 'WEEKLY' },\r\n    { label: 'Monthly', value: 'MONTHLY' },\r\n    { label: 'Quarterly', value: 'QUARTERLY' },\r\n    { label: 'Half-Yearly', value: 'HALFYEARLY' },\r\n    { label: 'Yearly', value: 'YEARLY' }\r\n]\r\n\r\nconst enterpriseBillingInitValues = {\r\n    billCycle: \"\",\r\n    billDate: \"\",\r\n    billDueTenor: \"\",\r\n    creditLimit: \"\",\r\n    payAmount:''\r\n}\r\n\r\n  const settelementWeekOpt = [\r\n    {label:'Sunday',value:\"sunday\"},\r\n    {label:'Monday',value:\"monday\"},\r\n    {label:'Tuesday',value:\"tuesday\"},\r\n    {label:'Wednesday',value:\"wednesday\"},\r\n    {label:'Thursday',value:\"thursday\"},\r\n    {label:'Friday',value:\"friday\"},\r\n    {label:'Saturday',value:\"saturday\"},\r\n  ]\r\n\r\n  const monthOptions = [\r\n    {label : \"1\",value : \"1\"},{label : \"2\",value : \"2\"},\r\n    {label : \"3\",value : \"3\"},{label : \"4\",value : \"4\"},\r\n    {label : \"5\",value : \"5\"},{label : \"6\",value : \"6\"},\r\n    {label : \"7\",value : \"7\"},{label : \"8\",value : \"8\"},\r\n    {label : \"9\",value : \"9\"},{label : \"10\",value : \"10\"},\r\n    {label : \"11\",value : \"11\"},{label : \"12\",value : \"12\"},\r\n    {label : \"13\",value : \"13\"},{label : \"14\",value : \"14\"},\r\n    {label : \"15\",value : \"15\"},{label : \"16\",value : \"16\"},\r\n    {label : \"17\",value : \"17\"},{label : \"18\",value : \"18\"},\r\n    {label : \"19\",value : \"19\"},{label : \"20\",value : \"20\"},\r\n    {label : \"21\",value : \"21\"},{label : \"22\",value : \"22\"},\r\n    {label : \"23\",value : \"23\"},{label : \"24\",value : \"24\"},\r\n    {label : \"25\",value : \"25\"},{label : \"26\",value : \"26\"},\r\n    {label : \"27\",value : \"27\"},{label : \"28\",value : \"28\"},\r\n  ]\r\n\r\n  const settelementMonthOpt = [\r\n    {label:'January',value:\"january\"},\r\n    {label:'February',value:\"february\"},\r\n    {label:'March',value:\"march\"},\r\n    {label:'April',value:\"april\"},\r\n    {label:'May',value:\"may\"},\r\n    {label:'June',value:\"june\"},\r\n    {label:'July',value:\"july\"},\r\n    {label:'August',value:\"august\"},\r\n    {label:'September',value:\"september\"},\r\n    {label:'October',value:\"october\"},\r\n    {label:'November',value:\"november\"},\r\n    {label:'December',value:\"december\"}\r\n  ]\r\n\r\nconst payAmount = [\r\n    {label:'PayPal',value:'PayPal'},\r\n]\r\n\r\nconst enterpriseBillingValidationSchema = Yup.object().shape({\r\n    //providerId : Yup.string().required('Please Enter Provider Id'),\r\n\r\n\r\n    /*     billCycle: Yup.string().required('Please select a billing cycle'),\r\n        billDate: Yup.string().required('Please select a billing date'),\r\n        billDueTenor: Yup.string().min(1).max(2,\"DueTenor must be at most 2 characters\").required('Please enter due tenor days'),\r\n        creditLimit: Yup.string().min(2,\"Credit Limit must be at least 3 characters\").max(20).required('Please enter a valid credit limit'),\r\n       \r\n        */\r\n    //IncorpDate : Yup.string().required('Please Select Corporate Date'),\r\n    //taxId : Yup.string().required('Please Enter Tax Id'),\r\n    // prodCategory : Yup.string().required('Please Enter Prduct Category'),\r\n    // timeZone : Yup.string().required('Please Enter Time Zone'),\r\n    // currnecy : Yup.string().required('Please Enter Currency'),\r\n    // language: Yup.string().required('Please Enter Language'),\r\n    //displayOrientation : Yup.string().required('Please Enter Display Orientation')\r\n})\r\n\r\nconst EnterpriseBillingInfo = ({ onChange, refId, ...props }) => {\r\n    const [placement, setPlacement] = useState(placementList[1].value)\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n\r\n\r\n    const onPlacementChange = (val) => {\r\n        setPlacement(val)\r\n    }\r\n\r\n    const onCheck = (value, field, form) => {\r\n        form.setFieldValue(field.name, value)\r\n    }\r\n\r\n\r\n    console.log(props, \"propspropspropsprops\",placement)\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">BILLING INFO</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.EpIntialValues.billing}\r\n                validationSchema={enterpriseBillingValidationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true)\r\n                    let updatedPayload = { ...props.enterpriseState, ...values }\r\n                    props.setEnterpriseState(updatedPayload)\r\n                    let dataToStore = props.EpIntialValues\r\n                    dataToStore.billing = values\r\n                    props.setEpIntialValues(dataToStore)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-3 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        label=\"Business Unit\"\r\n                                    >\r\n                                        <Field name=\"sameCorrespondenceAddress\">\r\n                                            {({ field, form }) => (\r\n                                                <Checkbox\r\n                                                    checked={\r\n                                                        values.sameCorrespondenceAddress\r\n                                                    }\r\n                                                    // onChange={(val) =>\r\n                                                    //     onCheck(\r\n                                                    //         val,\r\n                                                    //         field,\r\n                                                    //         form,\r\n                                                    //         setFieldValue\r\n                                                    //     )\r\n                                                    // }\r\n                                                    onChange={(val) =>\r\n                                                        onCheck(val, field, form, setFieldValue)\r\n                                                    }\r\n                                                >\r\n\r\n                                                </Checkbox>\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n\r\n                                    {values.sameCorrespondenceAddress === true &&\r\n                                        <FormItem\r\n                                            label={<p>Type<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        >\r\n                                             <Radio.Group value={placement} onChange={onPlacementChange}>\r\n                                            {placementList?.map((item) => (\r\n                                                <Radio value={item.value} id={item.value} key={item.value}>\r\n                                                    {item.name}\r\n                                                </Radio>\r\n                                            ))}\r\n                                        </Radio.Group>  \r\n                                        </FormItem>}\r\n\r\n\r\n                                </div>\r\n                                {values.sameCorrespondenceAddress === true && placement ==='Postpaid' && (<div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        label={<p>Credit Limit<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                    // invalid={errors.creditLimit && touched.creditLimit}\r\n                                    //     errorMessage={errors.creditLimit}\r\n\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"creditLimit\"\r\n                                            placeholder=\"Enter credit limit\"\r\n                                            component={Input}\r\n                                            validate = {async(v) => {\r\n                                                if(values.sameCorrespondenceAddress){\r\n                                                    try{\r\n                                                        await Yup.string().required(\"Please enter credit limit\").validate(v)\r\n                                                    }catch(error){\r\n                                                        return error.message\r\n                                                    }\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                        <ErrorMessage name= {`creditLimit`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                        \r\n                                    </FormItem>\r\n\r\n\r\n\r\n\r\n                                    <FormItem\r\n                                        label={<p>Billing Cycle<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                    // invalid={errors.billCycle && touched.billCycle}\r\n                                    // errorMessage={errors.billCycle}\r\n                                    >\r\n                                        <Field name=\"billCycle\" validate = {async(v) => {\r\n                                                if(values.sameCorrespondenceAddress){\r\n                                                    try{\r\n                                                        await Yup.string().required(\"Please select billing cycle\").validate(v)\r\n                                                    }catch(error){\r\n                                                        return error.message\r\n                                                    }\r\n                                                }\r\n                                            }}>\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select billing cycle\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={billCycle}\r\n                                                    value={billCycle.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.billCycle\r\n                                                    )}\r\n                                                    onChange={(gender) =>{\r\n                                                        form.setFieldValue(\"settelementWeek\",'')\r\n                                                        form.setFieldValue(\"settelementMonth\",'')\r\n                                                        form.setFieldValue(\"settelementDate\",'')\r\n                                                        form.setFieldValue(field.name,gender.value)\r\n                                                    }}\r\n\r\n\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                        <ErrorMessage name= {`billCycle`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n\r\n\r\n                                    </FormItem>\r\n                                    {values.billCycle === \"WEEKLY\" && \r\n                                    <FormItem label={<p>Billing Week<span style={{color: 'red'}}>{'*'}</span></p>}>\r\n                                        <Field name=\"settelementWeek\" validate = {async(v) => {\r\n                                                if(values.billCycle === \"WEEKLY\"){\r\n                                                    try{await Yup.string().required(\"Please select week\").validate(v)}\r\n                                                    catch(error){return error.message}\r\n                                            }}}\r\n                                        >\r\n                                            {({ field, form }) => (\r\n                                                <Select options={settelementWeekOpt} placeholder=\"Select settlement week\" field={field} form={form}\r\n                                                value={settelementWeekOpt.filter((week) =>week.value ===values.settelementWeek)}\r\n                                                onChange={(week) => form.setFieldValue(field.name,week.value)}\r\n                                            />\r\n                                            )}\r\n                                        </Field>\r\n                                        <ErrorMessage name= {`settelementWeek`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                    </FormItem>}\r\n                                    {(values.billCycle === \"QUARTERLY\" || values.billCycle === \"HALFYEARLY\" || values.billCycle === \"YEARLY\") && \r\n                                    <FormItem label={<p>Billing Month<span style={{color: 'red'}}>{'*'}</span></p>}>\r\n                                        <Field name=\"settelementMonth\" validate = {async(v) => {\r\n                                                if(values.billCycle === \"QUARTERLY\" || values.billCycle === \"HALFYEARLY\" ||values.billCycle === \"YEARLY\"){\r\n                                                    try{await Yup.string().required(\"Please select month\").validate(v)}\r\n                                                    catch(error){return error.message}\r\n                                            }}}\r\n                                        >\r\n                                            {({ field, form }) => (\r\n                                                <Select options={settelementMonthOpt} placeholder=\"Select settlement month\" field={field} form={form}\r\n                                                value={settelementMonthOpt.filter((week) =>week.value ===values.settelementMonth)}\r\n                                                onChange={(week) => form.setFieldValue(field.name,week.value)}\r\n                                            />\r\n                                            )}\r\n                                        </Field>\r\n                                        <ErrorMessage name= {`settelementMonth`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                    </FormItem>}\r\n                                    {(values.billCycle === \"MONTHLY\"|| values.billCycle === \"QUARTERLY\" || values.billCycle === \"HALFYEARLY\" || values.billCycle === \"YEARLY\") && \r\n                                    <FormItem label={<p>Billing Date<span style={{color: 'red'}}>{'*'}</span></p>}>\r\n                                        <Field name=\"settelementDate\" validate = {async(v) => {\r\n                                                if(values.billCycle === \"MONTHLY\" || values.billCycle === \"QUARTERLY\" || values.billCycle === \"HALFYEARLY\" || values.billCycle === \"YEARLY\"){\r\n                                                    try{await Yup.string().required(\"Please select date\").validate(v)}\r\n                                                    catch(error){return error.message}\r\n                                            }}}\r\n                                        >\r\n                                            {({ field, form }) => (\r\n                                                <Select options={monthOptions} placeholder=\"Select settlement date\" field={field} form={form}\r\n                                                value={monthOptions.filter((week) =>week.value === values.settelementDate)}\r\n                                                onChange={(week) => form.setFieldValue(field.name,week.value)}\r\n                                            />\r\n                                            )}\r\n                                        </Field>\r\n                                        <ErrorMessage name= {`settelementDate`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                    </FormItem>}\r\n\r\n\r\n                                    {/* <FormItem\r\n                                        label={<p>Billing Date<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n\r\n\r\n                                    // invalid={errors.billDate && touched.billDate}\r\n                                    // errorMessage={errors.billDate}\r\n                                    >\r\n                                        <Field name=\"billDate\" \r\n                                            validate = {async(v) => {\r\n                                                if(values.sameCorrespondenceAddress){\r\n                                                    try{\r\n                                                        await Yup.string().required(\"Please select billing date\").validate(v)\r\n                                                    }catch(error){\r\n                                                        return error.message\r\n                                                    }\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker placeholder=\"Select billing date\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                        <ErrorMessage name= {`billDate`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                    </FormItem> */}\r\n\r\n\r\n\r\n                                    <FormItem\r\n                                        label={<p>{'Due Tenor (Days)'}<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                    // invalid={errors.billDueTenor && touched.billDueTenor}\r\n                                    // errorMessage={errors.billDueTenor}\r\n\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"billDueTenor\"\r\n                                            placeholder=\"Enter Tenor\"\r\n                                            component={Input}\r\n                                            validate = {async(v) => {\r\n                                                if(values.sameCorrespondenceAddress){\r\n                                                    try{\r\n                                                        await Yup.string().required(\"Please enter due tenor\").validate(v)\r\n                                                    }catch(error){\r\n                                                        return error.message\r\n                                                    }\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                        <ErrorMessage name= {`billDueTenor`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                      \r\n                                    </FormItem>\r\n\r\n\r\n\r\n                                </div>)}\r\n\r\n                                {values.sameCorrespondenceAddress === true && placement ==='Prepaid' &&(<div className='mx-4 grid grid-cols-3'>\r\n                                       \r\n                                    <FormItem\r\n                                        label={<p>Preferred Payment Gateway<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                    \r\n                                    >\r\n                                        <Field name=\"payAmount\" validate = {async(v) => {\r\n                                            }}>\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Payamount\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={payAmount}\r\n                                                    value={payAmount.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.payAmount\r\n                                                    )}\r\n                                                    onChange={(gender) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            gender.value\r\n                                                        )\r\n                                                    }\r\n\r\n\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                        {/* <ErrorMessage name= {`payAmount`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage> */}\r\n\r\n\r\n                                    </FormItem>\r\n                                </div>)}\r\n\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EnterpriseBillingInfo\r\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport EnterpriseAccountInfo from './EnterpriseAccountInfo'\r\nimport EnterpriseContactInfo from './EnterpriseContactInfo'\r\nimport EnterpriseAddressInfo from './EnterpriseAddressInfo'\r\nimport EnterpriseUploadFiles from './EnterpriseUploadFiles'\r\nimport EnterpriseBillingInfo from './EnterpriseBillingInfo'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport { useFormikContext } from 'formik'\r\n\r\n\r\nconst EnterpriseDetails = forwardRef((props, ref) => {\r\n\r\n  const [formData, setFormData] = useState({\r\n    EnterpriseAccountInfo: { values: null, validated: false },\r\n    EnterpriseContactInfo: { values: null, validated: false },\r\n    EnterpriseAddressInfo: { values: null, validated: false },\r\n    EnterpriseBillingInfo: { values: null, validated: false },\r\n    EnterpriseUploladFileFileInfo : { values: null, validated: false },\r\n    EnterpriseAdditionalFileInfo : { values: null, validated: false },\r\n  })\r\n\r\n  const enterpriseAccountInforef = React.useRef()\r\n  const enterpriseContactInforef = React.useRef()\r\n  const enterpriseAddressInforef = React.useRef()\r\n  const enterpriseBillingInforef = React.useRef()\r\n  const enterpriseUploadFileref = React.useRef()\r\n  const enterpriseAddItonalref = React.useRef()\r\n\r\n  // React.useEffect(() => {\r\n  //   if (\r\n  //     formData.EnterpriseAccountInfo.validated &&  formData.EnterpriseAddressInfo.validated\r\n  //     //&& formData.EnterpriseContactInfo.validated\r\n\r\n\r\n  //   ) {\r\n  //     alert('Ready to save')\r\n  //   }\r\n  // }, [formData])\r\n\r\n  async function handleSubmit() {\r\n\r\n    let validationErrors = false;\r\n\r\n    await enterpriseAccountInforef.current?.validateForm().then(errors => {\r\n      if (errors && Object.keys(errors).length > 0) {\r\n        enterpriseAccountInforef.current.setTouched(errors, true);\r\n        validationErrors = true;\r\n      }\r\n    });\r\n\r\n    await enterpriseContactInforef.current?.validateForm().then(errors => {\r\n\r\n      if (errors && Object.keys(errors).length > 0) {\r\n        enterpriseContactInforef.current.setTouched(errors, true);\r\n        validationErrors = true;\r\n      }\r\n\r\n    });\r\n\r\n    await enterpriseAddressInforef.current?.validateForm().then(errors => {\r\n\r\n      if (errors && Object.keys(errors).length > 0) {\r\n        enterpriseAddressInforef.current.setTouched(errors, true);\r\n        validationErrors = true;\r\n      }\r\n\r\n     \r\n    });\r\n\r\n    enterpriseBillingInforef.current?.validateForm().then(errors => {\r\n      if (errors && Object.keys(errors).length > 0) {\r\n        enterpriseBillingInforef.current.setTouched(errors, true);\r\n        validationErrors=true;\r\n      }\r\n    });\r\n\r\n    await enterpriseUploadFileref.current?.validateForm().then(errors => {\r\n\r\n      if (errors && Object.keys(errors).length > 0) {\r\n        enterpriseUploadFileref.current.setTouched(errors, true);\r\n        validationErrors = true;\r\n      }\r\n\r\n    });\r\n\r\n    await enterpriseAddItonalref.current?.validateForm().then(errors => {\r\n\r\n      if (errors && Object.keys(errors).length > 0) {\r\n        enterpriseAddItonalref.current.setTouched(errors, true);\r\n        validationErrors = true;\r\n      }\r\n\r\n    });\r\n\r\n\r\n    if (!validationErrors) {\r\n      await enterpriseAccountInforef?.current.submitForm()\r\n      await enterpriseContactInforef?.current.submitForm()\r\n      await enterpriseAddressInforef?.current.submitForm()\r\n      await enterpriseBillingInforef?.current.submitForm()\r\n      await enterpriseUploadFileref?.current.submitForm()\r\n      await enterpriseAddItonalref?.current.submitForm()\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  function handleChangeEnterpriseAccountInfo(data) {\r\n    setFormData({ ...formData, EnterpriseAccountInfo: data })\r\n  }\r\n\r\n  function handleChangeEnterpriseContactInfo(data) {\r\n    setFormData({ ...formData, EnterpriseContactInfo: data })\r\n  }\r\n\r\n  function handleChangeEnterpriseAddressInfo(data) {\r\n    setFormData({ ...formData, EnterpriseAddressInfo: data })\r\n  }\r\n\r\n  function handleChangeEnterpriseBillingInfo(data) {\r\n    setFormData({ ...formData, EnterpriseBillingInfo: data })\r\n  }\r\n\r\n  function handleChangeEnterpriseUploadInfo(data) {\r\n    setFormData({ ...formData, EnterpriseUploladFileFileInfo: data })\r\n  }\r\n\r\n  function handleChangeEnterpriseAdditionalInfo(data) {\r\n    setFormData({ ...formData, EnterpriseAdditionalFileInfo: data })\r\n  }\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      handleSubmitFromParent() {\r\n        handleSubmit()\r\n      },\r\n    }\r\n  })\r\n  return (\r\n\r\n    <>\r\n     <div className=\"p-5\" style={{backgroundColor:\"#F5F5F5\"}}>\r\n        <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider >\r\n          <div className='border-b pb-6 mx-4'>\r\n            <EnterpriseAccountInfo handleSubmit={handleSubmit}\r\n              onChange={handleChangeEnterpriseAccountInfo}\r\n              refId={enterpriseAccountInforef}\r\n              enterpriseState={props.enterpriseState}\r\n              setEnterpriseState={props.setEnterpriseState}\r\n              EpIntialValues={props.EpIntialValues}\r\n              setEpIntialValues={props.setEpIntialValues}\r\n              setAccMnoId={props.setAccMnoId}\r\n            />\r\n          </div>\r\n          <div className='border-b pb-6 mx-4'>\r\n            <EnterpriseContactInfo onChange={handleChangeEnterpriseContactInfo}\r\n              refId={enterpriseContactInforef}\r\n              enterpriseState={props.enterpriseState}\r\n              setEnterpriseState={props.setEnterpriseState}\r\n              EpIntialValues={props.EpIntialValues}\r\n              setEpIntialValues={props.setEpIntialValues}\r\n            />\r\n          </div>\r\n          <div className='border-b pb-6 mx-4'>\r\n            <EnterpriseAddressInfo onChange={handleChangeEnterpriseAddressInfo}\r\n              refId={enterpriseAddressInforef}\r\n              enterpriseState={props.enterpriseState}\r\n              setEnterpriseState={props.setEnterpriseState}\r\n              EpIntialValues={props.EpIntialValues}\r\n              setEpIntialValues={props.setEpIntialValues}\r\n            />\r\n          </div>\r\n\r\n          <EnterpriseBillingInfo onChange={handleChangeEnterpriseBillingInfo}\r\n            refId={enterpriseBillingInforef}\r\n            enterpriseState={props.enterpriseState}\r\n            setEnterpriseState={props.setEnterpriseState}\r\n            setStep={props.setStep}\r\n            step={props.step}\r\n            EpIntialValues={props.EpIntialValues}\r\n            setEpIntialValues={props.setEpIntialValues}\r\n          />\r\n\r\n        </AdaptableCard>\r\n     \r\n\r\n      <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" >\r\n        <EnterpriseUploadFiles \r\n          onChange={handleChangeEnterpriseUploadInfo}\r\n          onChangeAdd={handleChangeEnterpriseAdditionalInfo}\r\n          refId={enterpriseUploadFileref}\r\n          refIdAdd={enterpriseAddItonalref}\r\n          enterpriseState={props.enterpriseState}\r\n          setEnterpriseState={props.setEnterpriseState}\r\n          setStep={props.setStep}\r\n          step={props.step}\r\n          EpIntialValues={props.EpIntialValues}\r\n          setEpIntialValues={props.setEpIntialValues}\r\n          mode={props.mode}\r\n        />\r\n      </AdaptableCard>\r\n</div>\r\n    </>\r\n    \r\n  )\r\n})\r\n\r\nexport default EnterpriseDetails\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport * as Yup from \"yup\";\r\n\r\nexport const statusOptions = [\r\n    { label: 'Married', value: 'M' },\r\n    { label: 'Widowed', value: 'W' },\r\n    { label: 'Separated', value: 'S' },\r\n    { label: 'Divorced', value: 'D' },\r\n    { label: 'Single ', value: 'S' },\r\n]\r\n\r\nconst userRole = [\r\n    { label: 'Super Admin', value: 1 },\r\n    { label: 'User.', value: 2 },\r\n    { label: 'Admin', value: 3 },\r\n]\r\n\r\nconst enterpriseUserInitValues = {\r\n    roleId: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    emailId: '',\r\n    phoneNumber: '',\r\n    middleName:\"\",\r\n}\r\n\r\n\r\nconst enterpriseValidationSchema = Yup.object().shape({\r\n\r\n    //roleId: Yup.string().required('Please Select Role'),\r\n    firstName: Yup.string().min(2,\"First name must be at least 2 characters\").max(100).required('Please enter fisrt name'),\r\n    lastName: Yup.string().min(2,\"Last Name must be at least 2 characters\").max(100).required('Please enter last name'),\r\n\r\n\r\n    emailId: Yup.string().min(5,\"Email id must be at least 5 characters\").max(50).email('Please enter valid email id').required('Please enter email id'),\r\n    phoneNumber:Yup.string().min(2,\"Number must be atleast 2 characters\").max(20,\"Max 20 characters are allowed\")\r\n    .required(\"Please enter phone number\").nullable(),\r\n\r\n\r\n})\r\n\r\nconst EnterpriseMasterAccountInfo = ({ onChange, refId, ...props }) => {\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">MASTER USER</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.EpIntialValues.userInfo}\r\n                validationSchema={enterpriseValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n\r\n                    \r\n                    setSubmitting(true)\r\n                    \r\n                    let updatedPayload = { ...props.enterpriseState, userInfo: values }       \r\n                    let dataToStore = props.EpIntialValues\r\n                    dataToStore.userInfo = values\r\n                    props.setEnterpriseState(updatedPayload)\r\n                    props.setEpIntialValues(dataToStore)\r\n\r\n\r\n                   \r\n\r\n\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n\r\n                                \r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n\r\n                                    <FormItem\r\n                                        label={<p>First Name<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.firstName && touched.firstName\r\n                                        }\r\n                                        errorMessage={errors.firstName}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"firstName\"\r\n                                            placeholder=\"Enter First Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Middle Name\">\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"middleName\"\r\n                                            placeholder=\"Enter Middle  Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n                                    <FormItem\r\n                                        label={<p>Last Name<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.lastName && touched.lastName\r\n                                        }\r\n                                        errorMessage={errors.lastName}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"lastName\"\r\n                                            placeholder=\"Enter Last  Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n\r\n                                    <FormItem\r\n                                        label={<p>Email ID<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.emailId && touched.emailId\r\n                                        }\r\n                                        errorMessage={errors.emailId}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"emailId\"\r\n                                            placeholder=\"Enter Email ID\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n\r\n                                    <FormItem\r\n                                        label={<p>Phone Number<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.phoneNumber && touched.phoneNumber\r\n                                        }\r\n                                        errorMessage={errors.phoneNumber}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"phoneNumber\"\r\n                                            placeholder=\"Enter Phone Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n\r\n\r\n\r\n                                </div>\r\n\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EnterpriseMasterAccountInfo\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Upload\r\n} from 'components/ui'\r\nimport CloseButton from 'components/ui/CloseButton';\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { apiUploadFiles } from 'services/EnterpriseService';\r\nimport { OpenNotification } from 'views/Servicefile';\r\nimport * as Yup from \"yup\";\r\n\r\nexport const statusOptions = [\r\n    { label: 'Married', value: 'M' },\r\n    { label: 'Widowed', value: 'W' },\r\n    { label: 'Separated', value: 'S' },\r\n    { label: 'Divorced', value: 'D' },\r\n    { label: 'Single ', value: 'S' },\r\n]\r\nconst genderOptions = [\r\n    { label: 'Super Admin', value: 1 },\r\n    { label: 'User.', value: 2 },\r\n    { label: 'Admin', value: 3 },\r\n]\r\n\r\nconst contarctStatus = [\r\n    { label: 'ACTIVE', value: 'ACTIVE' },\r\n    { label: 'IN_ACTIVE', value: 'IN_ACTIVE' },\r\n    { label: 'PENDING_APPROVAL', value: 'PENDING_APPROVAL' }\r\n]\r\n\r\nconst enterpriseUserContractInitValues = {\r\n    contractType: \"\",\r\n    signedDate: \"\",\r\n    enforceDate: \"\",\r\n    terminateDate: \"\",\r\n    status: \"\",\r\n\r\n}\r\n\r\n\r\nconst enterpriseValidationSchema = Yup.object().shape({\r\n\r\n    contractType: Yup.string().required('Please enter contractType').nullable(),\r\n    signedDate: Yup.string().required('Please select signed date').nullable(),\r\n    enforceDate: Yup.string().required('Please select enforcement date').nullable(),\r\n    terminateDate: Yup.string().required('Please select terminate date').nullable(),\r\n    status: Yup.string().required('Please enter status').nullable(),\r\n\r\n\r\n})\r\n\r\nconst saveFilesInCatalog = 1\r\n\r\nconst EnterpriseMasterAccountInfo = ({ onChange, refId, ...props }) => {\r\n\r\n    const { setFieldValue } = props\r\n    const { acc_user_id } = useSelector((state) => state.auth.user)\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n\r\n    const beforeUpload = async (newFiles, files) => {\r\n        // const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInAccounts)\r\n        // return ress\r\n        const file = newFiles[0];\r\n        const allowedTypes = ['image/jpeg', 'image/png'];\r\n\r\n        if (!allowedTypes.includes(file.type)) {\r\n            OpenNotification('warning', 'JPG/PNG files are allowed only!')\r\n            return false;\r\n        }\r\n        try {\r\n            const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInCatalog)\r\n            return ress\r\n        } catch (error) {\r\n            console.error('Error during file upload:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n\r\n    const onClickView = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n\r\n    const contractTypeList = useSelector((state) => state.enterpriseList?.data?.contractTypeList)\r\n\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">CONTRACT INFO</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.EpIntialValues.userContact}\r\n                validationSchema={enterpriseValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n\r\n\r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.enterpriseState, ...values }\r\n                    props.setEnterpriseState(updatedPayload)\r\n                    let dataToStore = props.EpIntialValues\r\n                    dataToStore.userContact = values\r\n                    props.setEpIntialValues(dataToStore)\r\n                    props.setStep(props.step + 1)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n\r\n\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem label={<p>Contract Type<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.contractType && touched.contractType\r\n                                        }\r\n                                        errorMessage={errors.contractType}\r\n                                    >\r\n                                        <Field name=\"contractType\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    // isDisabled={true}\r\n                                                    placeholder=\"Select Type\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={contractTypeList}\r\n                                                    value={contractTypeList?.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.contractType\r\n                                                    )}\r\n                                                    onChange={(gender) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            gender.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>File Upload<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                    >\r\n                                        <Field name=\"imageFile\">\r\n                                            {({ field, form }) => (\r\n                                                <div>\r\n                                                    <Upload draggable\r\n                                                        beforeUpload={beforeUpload}\r\n                                                        onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                            form.setFieldValue(field.name, uploadRes?.data?.fileUnqId);\r\n                                                        }}\r\n\r\n                                                        className='border-gray-200 w-[500] h-[0]' style={{ minHeight: '3rem' }}\r\n                                                    >\r\n                                                        <div className=\"my-10 text-center\">\r\n                                                            <p className=\"font-semibold\">\r\n                                                                <span className=\"text-gray-400 dark:text-white\">{values.imageFile ? \"File uploaded, \" : 'No Files Uploaded, '}</span>\r\n\r\n                                                                <span className=\"text-blue-700\">\r\n                                                                    Browse\r\n                                                                </span>\r\n                                                            </p>\r\n\r\n                                                        </div>\r\n                                                    </Upload>\r\n                                                    {values.imageFile &&\r\n                                                        <div className=\"upload-file cursor-pointer h-12 w-120\" >\r\n                                                            <div className=\"upload-file-info\" onClick={() => onClickView(values.imageFile)}>\r\n                                                                <h6 className=\"upload-file-name\">{values.imageFile.substring(0, 15)}</h6>\r\n                                                            </div>\r\n                                                            <CloseButton className=\"upload-file-remove \" onClick={() => { form.setFieldValue(field.name, ''); }} />\r\n                                                        </div>}\r\n                                                </div>\r\n                                            )}\r\n\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Signed Date<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.signedDate && touched.signedDate}\r\n                                        errorMessage={errors.signedDate}\r\n                                    >\r\n                                        <Field name=\"signedDate\" placeholder=\"Select Date\">\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    placeholder=\"Select Date\"\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Enforcement Date<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.enforceDate && touched.enforceDate}\r\n                                        errorMessage={errors.enforceDate}\r\n                                    >\r\n                                        <Field name=\"enforceDate\" placeholder=\"Select Date\">\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    placeholder=\"Select Date\"\r\n                                                    value={field.value}\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Termination date<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.terminateDate && touched.terminateDate}\r\n                                        errorMessage={errors.terminateDate}\r\n                                    >\r\n                                        <Field name=\"terminateDate\" placeholder=\"Select Date\">\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    placeholder=\"Select Date\"\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Contract Status<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.status && touched.status\r\n                                        }\r\n                                        errorMessage={errors.status}\r\n                                    >\r\n                                        <Field name=\"status\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Type\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={contarctStatus}\r\n                                                    value={contarctStatus.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.status\r\n                                                    )}\r\n                                                    onChange={(gender) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            gender.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                </div>\r\n\r\n\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EnterpriseMasterAccountInfo\r\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport EnterpriseMasterUserInfo from './EnterpriseMasterUserInfo'\r\nimport EnterpriseMasterContactInfo from './EnterpriseMasterContactInfo'\r\n\r\n\r\nimport { AdaptableCard } from 'components/shared'\r\n\r\n\r\nconst EnterpriseMasterInfo = forwardRef((props, ref) => {\r\n\r\n  const [formData, setFormData] = useState({\r\n    EnterpriseMasterInfo: { values: null, validated: false },\r\n    EnterpriseContractInfo: { values: null, validated: false },\r\n\r\n  })\r\n\r\n  const enterpriseMasterInforef = React.useRef()\r\n  const enterpriseContractInforef = React.useRef()\r\n\r\n\r\n  // React.useEffect(() => {\r\n  //   if (\r\n  //     formData.EnterpriseMasterInfo.validated\r\n  //     //&& formData.EnterpriseContactInfo.validated\r\n  //   ) {\r\n  //     alert('Ready to save')\r\n  //   }\r\n  // }, [formData])\r\n\r\n  async function handleSubmit() {\r\n\r\n    let validationErrors = false;\r\n\r\n    await enterpriseMasterInforef.current?.validateForm().then(errors => {\r\n      if (errors && Object.keys(errors).length > 0) {\r\n        enterpriseMasterInforef.current.setTouched(errors, true);\r\n        validationErrors = true;\r\n      }\r\n    });\r\n    await enterpriseContractInforef.current?.validateForm().then(errors => {\r\n\r\n      if (errors && Object.keys(errors).length > 0) {\r\n        enterpriseContractInforef.current.setTouched(errors, true);\r\n        validationErrors = true;\r\n      }\r\n\r\n    });\r\n\r\n    if (!validationErrors) {\r\n      await enterpriseMasterInforef?.current.submitForm()\r\n      await enterpriseContractInforef?.current.submitForm()\r\n      \r\n\r\n    }\r\n\r\n  }\r\n\r\n  function handleChangeEnterpriseMasterInfo(data) {\r\n    setFormData({ ...formData, EnterpriseMasterInfo: data })\r\n  }\r\n\r\n  function handleChangeEnterpriseContactInfo(data) {\r\n    setFormData({ ...formData, EnterpriseContractInfo: data })\r\n  }\r\n\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      handleSubmitFromParent() {\r\n        handleSubmit()\r\n      },\r\n    }\r\n  })\r\n\r\n\r\n  return (\r\n    <>\r\n      <div style={{backgroundColor:\"#F5F5F5\"}} className=\" p-5\">\r\n        <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider >\r\n          <div className='border-b pb-6 '>\r\n            <EnterpriseMasterUserInfo handleSubmit={handleSubmit}\r\n              onChange={handleChangeEnterpriseMasterInfo}\r\n              refId={enterpriseMasterInforef}\r\n              enterpriseState={props.enterpriseState}\r\n              setEnterpriseState={props.setEnterpriseState}\r\n              EpIntialValues={props.EpIntialValues}\r\n              setEpIntialValues={props.setEpIntialValues}\r\n\r\n            />\r\n          </div>\r\n\r\n          <EnterpriseMasterContactInfo handleSubmit={handleSubmit}\r\n            onChange={handleChangeEnterpriseContactInfo}\r\n            refId={enterpriseContractInforef}\r\n            enterpriseState={props.enterpriseState}\r\n            setEnterpriseState={props.setEnterpriseState}\r\n            setStep={props.setStep}\r\n            step={props.step}\r\n            EpIntialValues={props.EpIntialValues}\r\n            setEpIntialValues={props.setEpIntialValues}\r\n          />\r\n        </AdaptableCard>\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default EnterpriseMasterInfo\r\n","import { Alert, Button, Card, Dialog } from 'components/ui'\r\nimport React, { useState } from 'react'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport GetDropdownLabel from 'views/Servicefile';\r\nimport { timeZone } from '../../../../mock/data/timezones'\r\nimport appConfig from 'configs/app.config';\r\nimport dayjs from 'dayjs';\r\n\r\n\r\nconst custOperator = [\r\n    { label: 'Airtel Telangana', value: 1 },\r\n    { label: 'Airtel Mumbai', value: 2 },\r\n    { label: 'Airtel Rajasthan ', value: 3 },\r\n\r\n]\r\n\r\nconst timeZoneS = [\r\n    { label: 'India (GMT+5:30)', value: '1' },\r\n    { label: 'USA (GMT-4)', value: '2' },\r\n    { label: 'Chicago (GMT-5)', value: '3' },\r\n    { label: 'Phoenix (GMT-7)', value: '4' },\r\n    { label: 'Los Angeles (GMT-7)', value: '5' },\r\n]\r\n\r\nconst parentAccount = [\r\n    { label: 'Global MNO', value: 1 },\r\n\r\n]\r\nconst custCat = [\r\n    { label: 'Premium', value: '1' },\r\n    { label: 'Platinum', value: '2' },\r\n    { label: 'Gold', value: '3' },\r\n    { label: 'Silver', value: '3' },\r\n\r\n]\r\nconst currency = [\r\n    { label: 'USD', value: '1' },\r\n    { label: 'EUR', value: '2' },\r\n    { label: 'CAD', value: '3' },\r\n    { label: 'KWD', value: '4' },\r\n    { label: 'INR', value: '5' },\r\n]\r\nconst orientationtype = [\r\n    { label: 'Right to Left', value: \"RTL\" },\r\n    { label: 'Left to Right', value: \"LTR\" },\r\n]\r\n\r\nconst language = [\r\n    { label: 'English', value: 1 },\r\n    { label: 'Spanish', value: 2 },\r\n    { label: 'Arabic', value: 3 },\r\n    { label: 'Portugese', value: 4 },\r\n\r\n]\r\n\r\nconst contarctStatus = [\r\n    { label: 'ACTIVE', value: 'ACTIVE' },\r\n    { label: 'IN_ACTIVE', value: 'IN_ACTIVE' },\r\n    { label: 'PENDING_APPROVAL', value: 'PENDING_APPROVAL' }\r\n]\r\n\r\nfunction EnterprisePreview({ enterpriseState, setStep, message, mode }) {\r\n\r\n    console.log(enterpriseState, \"enterpriseState\")\r\n\r\n\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n\r\n    const currencyList = useSelector((state) => state.enterpriseList?.data?.currencyList)\r\n    const parentAccountList = useSelector((state) => state.enterpriseList?.data?.parentAccountList)\r\n    const custmoerCategoryList = useSelector((state) => state.enterpriseList?.data?.custmoerCatList)\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n\r\n    const operatorAccountList = useSelector((state) => state.enterpriseList?.data?.operatorAccountList)\r\n\r\n    const timeZoneList = timeZone?.map((timezone) => ({\r\n        value: timezone.id,\r\n        label: timezone.value,\r\n    }))\r\n\r\n    const contractTypeList = useSelector((state) => state.enterpriseList?.data?.contractTypeList)\r\n    function convert(str) {\r\n        var date = new Date(str),\r\n            mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\r\n            day = (\"0\" + date.getDate()).slice(-2);\r\n        return [day, mnth, date.getFullYear()].join(\"/\");\r\n    }\r\n    const onClickFile = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {message && (\r\n                <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                    {Array.isArray(message) ? message.join(\", \") : message}\r\n                </Alert>\r\n            )}\r\n            <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2\">\r\n                    <h6 className=\"mx-2 mb-4 mt-1 font-bold text-cyan-500\">\r\n                        ENTERPRISE CUSTOMER DETAILS{' '}\r\n                    </h6>\r\n                    <div className=\" text-base  font-bold flex justify-end\">\r\n                        <button onClick={() => { setStep(0) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"md:grid grid-cols-6\">\r\n                    <div className=\"col-span-2 md:gird mx-2\">\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">\r\n                            Accounts Info\r\n                        </div>\r\n                        <div className=\"col-span-6 md:grid grid-cols-2 gap-2\">\r\n                           \r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custName}</p>\r\n                            {/* <p className=\"mt-2 text-base\">{enterpriseState?.customerType}</p> */}\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(enterpriseState?.accMnoParentId, parentAccountList)}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custCompName}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(enterpriseState?.customerType, operatorAccountList)}</p>\r\n                            <p className=\"mt-2 text-base\">\r\n                                <p>\r\n                                    {dayjs(\r\n                                        enterpriseState?.custIncorpDt,\r\n                                        dateFormat\r\n                                    )?.format(dateFormat)}\r\n                                </p>\r\n                            </p>\r\n                            <p className=\"mt-2 text-base\">Tax: {enterpriseState?.custTaxId}</p>\r\n                            <p className=\"mt-2 text-base\">Business Unit:{enterpriseState?.sameCorrespondenceAddress}</p>\r\n                           \r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(enterpriseState?.custTimeZone, timeZoneList)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(enterpriseState?.custCurrency, currencyList)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(enterpriseState?.custLang, language)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(enterpriseState?.custOrient, orientationtype)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(enterpriseState?.custCat, custmoerCategoryList)}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n\r\n\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">\r\n                            Contact Info\r\n                        </div>\r\n                        <div className='md:grid grid-cols-1 gap-2'>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custFirstName}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custMiddleName}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custLastName}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custEmailId}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custAltCont}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custWebUrl}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custPhone}</p>\r\n\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">\r\n                            Address\r\n                        </div>\r\n                        <div className='md:grid grid-cols-1 gap-2'>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custAddL1}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custAddL2}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custCity}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custState}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custCountry}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.custZipcode}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">\r\n                            Billing Info\r\n                        </div>\r\n                        <div className='md:grid grid-cols-1 gap-2'>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.billCycle}</p>\r\n                            <p className=\"mt-2 text-base\">\r\n                                {dayjs(\r\n                                    enterpriseState?.billDate,\r\n                                    dateFormat\r\n                                )?.format(dateFormat)}\r\n                            </p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.creditLimit}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.billDueTenor}</p>\r\n                            <p className=\"mt-2 text-base\">{enterpriseState?.sameCorrespondenceAddress}</p>\r\n\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">Files</div>\r\n                        {enterpriseState?.uploadFiles.map(e => {\r\n                            if (e.file_name !== \"\") {\r\n                                return (\r\n                                    <>\r\n                                        <div className='md:grid grid-cols-1 gap-2' onClick={() => onClickFile(e)}>\r\n                                            <p className='mt-2 text-base underline text-sky-500 cursor-pointer'>{e.doc_name}</p>\r\n                                        </div>\r\n                                    </>\r\n                                )\r\n                            }\r\n                        })}\r\n                        {enterpriseState?.additionalFiles.map(e => {\r\n                            if (e.file_name !== \"\") {\r\n                                return (\r\n                                    <>\r\n                                        <div className='md:grid grid-cols-1 gap-2' onClick={() => onClickFile(e)}>\r\n                                            <p className='mt-2 text-base underline text-sky-500 cursor-pointer'>{e.doc_name}</p>\r\n                                        </div>\r\n                                    </>\r\n                                )\r\n                            }\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n            {mode == \"ADD\" && <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2\">\r\n                    <h6 className=\"mx-2 mb-4 mt-1 font-bold text-cyan-500\">\r\n                        MASTER INFO{' '}\r\n                    </h6>\r\n                    {mode == \"ADD\" && <div className=\" text-base font-bold flex justify-end\">\r\n                        <Link onClick={() => { setStep(0) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </Link>\r\n                    </div>}\r\n                </div>\r\n                <div className=\"md:grid grid-cols-12\">\r\n                    <div className='col-span-2 md:gird mx-2'>\r\n                        <p className='text-base underline font-bold mb-2'>FirstName</p>\r\n                        <p className='text-base'>{enterpriseState?.userInfo?.firstName}</p>\r\n                    </div>\r\n                    <div className='col-span-2 md:gird mx-2'>\r\n                        <p className='text-base underline font-bold mb-2'>LastName</p>\r\n                        <p className='text-base'>{enterpriseState?.userInfo?.lastName}</p>\r\n                    </div>\r\n                    <div className='col-span-2 md:gird mx-2'>\r\n                        <p className='text-base underline font-bold mb-2'>Email ID:</p>\r\n                        <p className='text-base'>{enterpriseState?.userInfo?.emailId}</p>\r\n                    </div>\r\n                    <div className='col-span-6 md:gird mx-2'>\r\n                        <p className='text-base underline font-bold mb-2'>Phone Number</p>\r\n                        <p className='text-base'>{enterpriseState?.userInfo?.phoneNumber}</p>\r\n                    </div>\r\n\r\n                    <div className='col-span-2 md:gird mx-2 mt-4'>\r\n                        <p className='text-base underline font-bold mb-2'>Contract Type</p>\r\n                        <p className='text-base'>{GetDropdownLabel(enterpriseState?.contractType, contractTypeList)}</p>\r\n                    </div>\r\n                    <div className='col-span-2 md:gird mx-2 mt-4'>\r\n                        <p className='text-base underline font-bold mb-2'>Signed Date</p>\r\n                        <p className='text-base'>\r\n                            {dayjs(\r\n                                enterpriseState?.signedDate,\r\n                                dateFormat\r\n                            )?.format(dateFormat)}\r\n                        </p>\r\n                    </div>\r\n                    <div className='col-span-2 md:gird mx-2 mt-4'>\r\n                        <p className='text-base underline font-bold mb-2'>Enforcement Date</p>\r\n                        <p className='text-base'>\r\n                            {dayjs(\r\n                                enterpriseState?.enforceDate,\r\n                                dateFormat\r\n                            )?.format(dateFormat)}\r\n                        </p>\r\n                    </div>\r\n                    <div className='col-span-2 md:gird mx-2 mt-4'>\r\n                        <p className='text-base underline font-bold mb-2'>Termination Date</p>\r\n                        <p className='text-base'>\r\n                            {dayjs(\r\n                                enterpriseState?.terminateDate,\r\n                                dateFormat\r\n                            )?.format(dateFormat)}\r\n                        </p>\r\n                    </div>\r\n                    <div className='col-span-2 md:gird mx-2 mt-4'>\r\n                        <p className='text-base underline font-bold mb-2'>status</p>\r\n                        <p className='text-base'>{GetDropdownLabel(enterpriseState?.status, contarctStatus)}</p>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </Card>}\r\n            <Dialog isOpen={showContent}\r\n                onClose={() => setShowContent(false)}>\r\n                <div className='p-5'>\r\n                    <img src={`${appConfig.apiPrefix}/media/uniqid/${content?.file_url}`} alt=\"Content\" />\r\n                    <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content?.file_url}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EnterprisePreview\r\n","import React, { useRef, useState, useEffect } from 'react'\r\nimport { Steps, Button } from 'components/ui'\r\nimport EnterpriseDetails from './EnterpriseDetails'\r\nimport EnterpriseMasterInfo from './EnterpriseMasterInfo'\r\nimport EnterprisePreview from './EnterprisePreview'\r\nimport { Link } from 'react-router-dom'\r\nimport { apiSubmitEnterprise, apiUpdateEnterprise } from 'services/EnterpriseService'\r\nimport { useNavigate, useLocation } from 'react-router-dom'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport { EditandCopyEnterprise } from 'utils/campareandCopy'\r\nimport { getContractType, getCurrency, getCustomerCategory, getParenOperator, getParentAccount, getUploadFileType } from '../store/dataSlice'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { GetErrorMsg, OpenNotification } from 'views/Servicefile'\r\nimport { concat } from 'lodash'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\n\r\nconst Controlled = () => {\r\n    const dispatch = useDispatch()\r\n    const { enterAccount, password, rememberMe, usernameOrEmail, acc_mno_id\r\n    } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n    const location = useLocation();\r\n    const rowForEdit = location.state?.data;\r\n    const mode = location.state?.mode ? location.state.mode : \"ADD\";\r\n\r\n\r\n\r\n    let intialValues = {\r\n        entAccInfo: {\r\n            enterpriseId: '', // not in api\r\n            accMnoParentId: '',\r\n            custName: '',\r\n            customerType: '',\r\n            custCompName: '',\r\n            custIncorpDt: '',\r\n            custTaxId: '',\r\n            custTimeZone: '',\r\n            custCurrency: '',\r\n            custLang: '',\r\n            custOrient: '',\r\n            custCat: '',\r\n            fields: []\r\n        },\r\n        entContact: {\r\n            custFirstName: \"\",\r\n            custLastName: \"\",\r\n            custMiddleName: \"\",\r\n            custEmailId: \"\",\r\n            custAltCont: \"\",\r\n            custFax: \"\",\r\n            custWebUrl: \"\",\r\n            custPhone: \"\",\r\n            custordEmailId: \"\",\r\n            fields: [],\r\n        },\r\n        address: {\r\n            custCountry: '',\r\n            custAddL1: '',\r\n            custAddL2: '',\r\n            custCity: '',\r\n            custState: '',\r\n            custZipcode: '',\r\n        },\r\n        billing: {\r\n            billCycle: \"\",\r\n            // billDate: \"\",\r\n            billDueTenor: \"\",\r\n            creditLimit: \"\",\r\n            sameCorrespondenceAddress: false,\r\n            placement: \"\",\r\n\r\n            settelementWeek : \"\",\r\n            settelementMonth:\"\",\r\n            settelementDate:\"\"\r\n        },\r\n        userInfo: {\r\n            roleId: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            middleName: \"\",\r\n            emailId: '',\r\n            phoneNumber: ''\r\n        },\r\n        userContact: {\r\n            contractType: \"\",\r\n            signedDate: \"\",\r\n            enforceDate: \"\",\r\n            terminateDate: \"\",\r\n            status: \"\",\r\n        },\r\n        uploadFiles: [\r\n        ],\r\n        additionalFiles: [\r\n            {\r\n                file_name: \"\",\r\n                file_url: \"\",\r\n                file_type: \"\",\r\n                dgl_acc_mno_id: null\r\n            }\r\n        ]\r\n\r\n    }\r\n\r\n    const [EpIntialValues, setEpIntialValues] = useState()\r\n    const operatorFileTypes = useSelector(state => state.enterpriseList?.data?.fileList)\r\n    useEffect(() => {\r\n        dispatch(getUploadFileType(enterAccount))\r\n    }, [])\r\n    useEffect(() => {\r\n        if (operatorFileTypes?.res?.length) {\r\n\r\n            let uploadArray = []\r\n            for (let i = 0; i < operatorFileTypes?.res.length; i++) {\r\n                if (operatorFileTypes?.res[i].acc_type === 'Enterprise Customer') {\r\n                    const docType = JSON.parse(operatorFileTypes?.res[i].doc_type);\r\n                    docType.map((item, index) => {\r\n                        uploadArray.push({\r\n                            \"doc_type\": docType[index],\r\n                            \"doc_name\": docType[index].doc_type_name,\r\n                            \"file_name\": \"\",\r\n                            \"file_url\": \"\",\r\n                            \"file_type\": \"upload\"\r\n                        })\r\n                    })\r\n                }\r\n            }\r\n            intialValues.uploadFiles = uploadArray\r\n            setEpIntialValues(intialValues)\r\n        } else {\r\n            setEpIntialValues(intialValues)\r\n        }\r\n    }, [operatorFileTypes])\r\n    const navigate = useNavigate()\r\n    const [enterpriseState, setEnterpriseState] = useState({})\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    const [step, setStep] = useState(0)\r\n    const childRef = useRef()\r\n    const childRefMasterInfo = useRef()\r\n\r\n\r\n    const onChange = (nextStep) => {\r\n        if (nextStep < 0) {\r\n            setStep(0)\r\n        } else if (nextStep > 3) {\r\n            setStep(3)\r\n        } else {\r\n            setStep(nextStep)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const onNext = () => {\r\n        if (step === 0) {\r\n            childRef.current?.handleSubmitFromParent()\r\n        }\r\n\r\n        if (step === 1) {\r\n            childRefMasterInfo.current?.handleSubmitFromParent()\r\n        }\r\n\r\n    }\r\n\r\n    const onPrevious = () => {\r\n        if (mode == 'EDIT') {\r\n            onChange(step - 2)\r\n        } else {\r\n            onChange(step - 1)\r\n        }\r\n    }\r\n\r\n    const submitApi = async () => {\r\n        let uploadEdDocument = concat(enterpriseState?.uploadFiles, enterpriseState?.additionalFiles)\r\n        if (mode === \"ADD\") {\r\n            uploadEdDocument = uploadEdDocument.map((file) => {\r\n                if (file?.file_url != '') {\r\n                    return {\r\n                        \"doc_name\": file?.doc_name,\r\n                        \"file_name\": file?.file_name,\r\n                        \"file_url\": file?.file_url,\r\n                        \"file_type\": file?.file_type,\r\n                    }\r\n                }\r\n            })\r\n            uploadEdDocument = uploadEdDocument.filter(item => item !== undefined && item !== null);\r\n            let createPayload = {\r\n                \"dgl_acc_mno_id\": enterpriseState.customerType,\r\n                \"cust_name\": enterpriseState.custName,\r\n                \"cust_parent\": enterpriseState.accMnoParentId,\r\n                \"cust_comp_name\": enterpriseState.custCompName,\r\n                \"cust_incorp_dt\": enterpriseState.custIncorpDt,\r\n                \"cust_tax_id\": enterpriseState.custTaxId,\r\n                \"cust_time_zone\": enterpriseState.custTimeZone,\r\n                \"cust_currency\": enterpriseState.custCurrency,\r\n                \"cust_lang\": enterpriseState.custLang,\r\n                \"cust_orient\": enterpriseState.custOrient,\r\n                \"dgl_md_cust_cat_id\": enterpriseState.custCat,\r\n                \"dgl_cust_custom_fields\": enterpriseState.fields,\r\n                \"cust_prim_cont\": enterpriseState.custPrimCont,\r\n                \"cust_email_id\": enterpriseState.custEmailId,\r\n                \"cust_phone_number\": enterpriseState.custPhone,\r\n                \"cust_alt_cont\": enterpriseState.custAltCont,\r\n                \"cust_fax\": enterpriseState.custFax,\r\n                \"cust_web_url\": enterpriseState.custWebUrl,\r\n                \"cust_order_approver_email_id\": enterpriseState.custordEmailId,\r\n                \"cust_add_l1\": enterpriseState.custAddL1,\r\n                \"cust_add_l2\": enterpriseState.custAddL2,\r\n                \"cust_city\": enterpriseState.custCity,\r\n                \"cust_state\": enterpriseState.custState,\r\n                \"cust_country\": enterpriseState.custCountry,\r\n                \"cust_zipcode\": enterpriseState.custZipcode,\r\n                \"is_business_unit\": enterpriseState.sameCorrespondenceAddress,\r\n                \"cust_pref_pg\": 1,\r\n                \"bill_cycle\": enterpriseState.billCycle,\r\n                // \"bill_date\": \"2023-06-30T18:30:00.000Z\",\r\n                \"bill_due_tenor\": enterpriseState.billDueTenor,\r\n                \"credit_limit\": 2.2514,\r\n                \"cust_last_name\": enterpriseState.custLastName,\r\n                \"cust_middle_name\": enterpriseState.custMiddleName,\r\n                \"cust_first_name\": enterpriseState.custFirstName,\r\n                \"cust_status\": \"ACTIVE\",\r\n                \"dgl_cust_files\": uploadEdDocument,\r\n                \"dgl_cust_roles\": [\r\n                    {\r\n                        \"role_name\": \"role_name1\" + Math.floor(10000 + Math.random() * 90000),\r\n                        \"role_desc\": \"keep\",\r\n                        \"permissions\": \"json string\",\r\n                        \"status\": 1\r\n                    }\r\n                ],\r\n                \"dgl_cust_users\": [\r\n                    {\r\n                        \"first_name\": enterpriseState.userInfo.firstName,\r\n                        \"last_name\": enterpriseState.userInfo.lastName,\r\n                        \"middle_name\": enterpriseState.userInfo.middleName,\r\n                        \"email\": enterpriseState.userInfo.emailId,\r\n                        \"phone\": enterpriseState.userInfo.phoneNumber,\r\n                        \"status\": \"ACTIVE\",\r\n                        \"cust_type\": \"EnterpriseCustomer\",\r\n                        \"add_line1\": \"\",\r\n                        \"add_line2\": \"\",\r\n                        \"profile_img\": \"\",\r\n                        \"cust_password\": \"12345\"\r\n                    }\r\n                ],\r\n                \"dgl_cust_contracts\": [\r\n                    {\r\n                        \"contract_name\": \"gt Contrac2t\",\r\n                        \"contract_file\": \"http://Url\",\r\n                        \"contr_desc\": \"Contract Description\",\r\n                        \"enforce_date\": enterpriseState.enforceDate,\r\n                        \"signed_date\": enterpriseState.signedDate,\r\n                        \"status\": enterpriseState.status,\r\n                        \"terminate_date\": enterpriseState.terminateDate,\r\n                        \"dgl_acc_mno_id\": acc_mno_id,\r\n                        \"dgl_md_contract_type_id\": enterpriseState.contractType\r\n                    }\r\n                ]\r\n            }\r\n            const resp = await apiSubmitEnterprise(createPayload)\r\n\r\n            if (resp.status === 'success') {\r\n\r\n\r\n                OpenNotification('success', 'Created successfully ')\r\n                navigate('/account-menu-item-view-5')\r\n\r\n\r\n            }\r\n            if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n\r\n        } else if (mode === \"EDIT\") {\r\n            uploadEdDocument = uploadEdDocument.map((file) => {\r\n                if (file?.file_url != '') {\r\n                    return {\r\n                        \"id\": file.id,\r\n                        \"doc_name\": file?.doc_name,\r\n                        \"file_name\": file?.file_name,\r\n                        \"file_url\": file?.file_url,\r\n                        \"file_type\": file?.file_type,\r\n                    }\r\n                }\r\n            })\r\n            uploadEdDocument = uploadEdDocument.filter(item => item !== undefined && item !== null);\r\n            let updatePayload = {\r\n\r\n                \"dgl_acc_mno_id\": enterpriseState.customerType,\r\n                \"cust_name\": enterpriseState.custName,\r\n                \"cust_parent\": enterpriseState.accMnoParentId,\r\n                \"cust_comp_name\": enterpriseState.custCompName,\r\n                \"cust_incorp_dt\": enterpriseState.custIncorpDt,\r\n                \"cust_tax_id\": enterpriseState.custTaxId,\r\n                \"cust_time_zone\": enterpriseState.custTimeZone,\r\n                \"cust_currency\": enterpriseState.custCurrency,\r\n                \"cust_lang\": enterpriseState.custLang,\r\n                \"cust_orient\": enterpriseState.custOrient,\r\n                \"dgl_md_cust_cat_id\": enterpriseState.custCat,\r\n                \"dgl_cust_custom_fields\": enterpriseState.fields,\r\n                \"cust_prim_cont\": enterpriseState.custPrimCont,\r\n                \"cust_email_id\": enterpriseState.custEmailId,\r\n                \"cust_phone_number\": enterpriseState.custPhone,\r\n                \"cust_alt_cont\": enterpriseState.custAltCont,\r\n                \"cust_fax\": enterpriseState.custFax,\r\n                \"cust_web_url\": enterpriseState.custWebUrl,\r\n                \"cust_order_approver_email_id\": enterpriseState.custordEmailId,\r\n                \"cust_add_l1\": enterpriseState.custAddL1,\r\n                \"cust_add_l2\": enterpriseState.custAddL2,\r\n                \"cust_city\": enterpriseState.custCity,\r\n                \"cust_state\": enterpriseState.custState,\r\n                \"cust_country\": enterpriseState.custCountry,\r\n                \"cust_zipcode\": enterpriseState.custZipcode,\r\n                \"is_business_unit\": enterpriseState.sameCorrespondenceAddress,\r\n                \"cust_pref_pg\": 1,\r\n                \"bill_cycle\": enterpriseState.billCycle,\r\n                // \"bill_date\": \"2023-06-30T18:30:00.000Z\",\r\n                \"bill_due_tenor\": enterpriseState.billDueTenor,\r\n                \"credit_limit\": 12.222,\r\n                \"cust_status\": \"ACTIVE\",\r\n                \"cust_unq_id\": rowForEdit?.cust_unq_id,\r\n                \"cust_last_name\": enterpriseState.custLastName,\r\n                \"cust_middle_name\": enterpriseState.custMiddleName,\r\n                \"cust_first_name\": enterpriseState.custFirstName,\r\n                \"dgl_cust_files\": uploadEdDocument,\r\n                \"dgl_cust_roles\": [\r\n                    {\r\n                        \"dgl_customer_id\": null,\r\n                        \"id\": rowForEdit?.dgl_cust_roles[0]?.id,\r\n                        \"role_name\": \"role_name1\" + Math.floor(10000 + Math.random() * 90000),\r\n                        \"role_desc\": \"role_desc1\",\r\n                        \"role_unq_id\": rowForEdit?.dgl_cust_roles[0]?.role_unq_id,\r\n                        \"permissions\": \"Permissions Json\",\r\n                        \"status\": rowForEdit?.dgl_cust_roles[0]?.status\r\n                    }\r\n                ],\r\n                \"dgl_cust_users\": [\r\n                    {\r\n                        \"id\": rowForEdit?.dgl_cust_users[0]?.id,\r\n                        \"first_name\": enterpriseState.userInfo.firstName,\r\n                        \"last_name\": enterpriseState.userInfo.lastName,\r\n                        \"middle_name\": enterpriseState.userInfo.middleName,\r\n                        \"email\": enterpriseState.userInfo.emailId,\r\n                        \"phone\": enterpriseState.userInfo.phoneNumber,\r\n                        \"cust_user_unq_id\": rowForEdit?.dgl_cust_users[0]?.cust_user_unq_id,\r\n                        \"status\": rowForEdit?.dgl_cust_users[0]?.status,\r\n                        \"cust_type\": \"EnterpriseCustomer\",\r\n                        \"zipcode\": null,\r\n                        \"add_line1\": \"hyderabad\",\r\n                        \"add_line2\": \"Banglore\",\r\n                        \"city\": null,\r\n                        \"country\": null,\r\n                    }\r\n                ],\r\n                \"dgl_cust_contracts\": rowForEdit?.dgl_cust_contracts,\r\n                \"id\": rowForEdit?.id,\r\n            }\r\n            const resp = await apiUpdateEnterprise(updatePayload)\r\n\r\n            if (resp.status === 'success') {\r\n                OpenNotification('success', 'Updated successfully')\r\n                navigate('/account-menu-item-view-5')\r\n\r\n\r\n\r\n            }\r\n            if (resp.status === 'failed') {\r\n\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (rowForEdit) {\r\n\r\n            const enterpriseIntialValues = EditandCopyEnterprise(intialValues, rowForEdit)\r\n            enterpriseIntialValues.uploadFiles.map(e => {\r\n                const matcheDobj = rowForEdit.dgl_cust_files.find(f => f.doc_name === e.doc_name)\r\n                if (matcheDobj) {\r\n                    e.file_name = matcheDobj.file_name\r\n                    e.file_url = matcheDobj.file_url\r\n                    e.file_type = matcheDobj.file_type\r\n                    e.doc_name = matcheDobj.doc_name\r\n                    e.id = matcheDobj.id\r\n                }\r\n            })\r\n            setEnterpriseState(enterpriseIntialValues);\r\n        }\r\n    }, [EpIntialValues, rowForEdit])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(getCurrency({ enterAccount }))\r\n        dispatch(getParenOperator({ enterAccount }))\r\n        //dispatch(getParentAccount({enterAccount}))\r\n        dispatch(getCustomerCategory({ enterAccount }))\r\n        dispatch(getContractType({ enterAccount }))\r\n\r\n\r\n    }, [dispatch, enterAccount])\r\n\r\n    let breadCrumbList = [{\r\n        name: 'Accounts',\r\n        // link: \"/home\"\r\n    }, {\r\n        name: 'Enterprise Customers',\r\n        link: \"/account-menu-item-view-5\"\r\n    }, {\r\n        name: `Create Enterprise Customers`,\r\n    }]\r\n    console.log(rowForEdit)\r\n\r\n    if (mode === \"EDIT\") {\r\n        breadCrumbList = [\r\n            {\r\n                name: 'Accounts',\r\n                // link: '/home',\r\n            },\r\n            {\r\n                name: 'Enterprise Customers',\r\n                link: '/account-menu-item-view-5',\r\n            },\r\n            {\r\n                name: rowForEdit?.cust_name,\r\n                link: '/account-menu-item-view-5',\r\n                state:rowForEdit\r\n            },\r\n            {\r\n                name: \"Edit Enterprise Customers \"  \r\n            },\r\n        ]\r\n    }\r\n    return (\r\n\r\n        EpIntialValues && <div>\r\n            {/* <div className='mb-5'>{mode === \"EDIT\" ? \"Edit\" : \"Create\"} Enterprise Customers</div> */}\r\n            <CustomBreadcrumbs  list={breadCrumbList} />\r\n            {mode == \"ADD\" ? <Steps current={step}>\r\n                <Steps.Item title=\"ENTER PRISE CUSTMOER DETAILS\" />\r\n                <Steps.Item title=\"MASTER INFO\" />\r\n                <Steps.Item title=\"PREVIEW\" />\r\n            </Steps> : <Steps current={step}>\r\n                <Steps.Item title=\"ENTER PRISE CUSTMOER DETAILS\" />\r\n                <Steps.Item title=\"PREVIEW\" />\r\n            </Steps>}\r\n\r\n            <div className=\"mt-6  bg-gray-50 dark:bg-gray-700 rounded \">\r\n\r\n\r\n                {step === 0 &&\r\n\r\n\r\n                    <EnterpriseDetails ref={childRef} enterpriseState={enterpriseState} setStep={setStep}\r\n                        step={step} setEnterpriseState={setEnterpriseState} EpIntialValues={EpIntialValues} setEpIntialValues={setEpIntialValues} mode={mode} />\r\n\r\n\r\n                }\r\n                {step === 1 &&\r\n\r\n                    <EnterpriseMasterInfo ref={childRefMasterInfo} enterpriseState={enterpriseState} setStep={setStep}\r\n                        step={step} setEnterpriseState={setEnterpriseState} EpIntialValues={EpIntialValues} setEpIntialValues={setEpIntialValues} />\r\n                }\r\n                {step === 2 &&\r\n                    <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n                        <EnterprisePreview enterpriseState={enterpriseState} step={step} setStep={setStep} message={message} mode={mode} />\r\n                    </AdaptableCard>\r\n\r\n                }\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"flex justify-between mt-8\">\r\n                <div>\r\n                    {step > 0 && <Button\r\n                        className=\"mx-2   \"\r\n                        style={{\r\n                            backgroundColor: \"#4D4D4D\", \r\n                            fontStyle: 'normal',\r\n                            fontSize: '18px',\r\n                            color: \"white\"\r\n                        }}\r\n                        onClick={onPrevious}\r\n                        type=\"button\"\r\n\r\n                    >\r\n                        Previous\r\n                    </Button>}\r\n                </div>\r\n\r\n                <div>\r\n                    {step >= 0 &&\r\n                        <>\r\n                            <Link\r\n                                className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                to=\"/account-menu-item-view-5\"\r\n                            >\r\n                                <Button\r\n                                    className=\"mx-2\"\r\n                                    onClick={onPrevious}\r\n                                    variant=\"solid\"\r\n                                    style={{\r\n                                        backgroundColor: \"#4D4D4D\",\r\n                                        color: \"white\", \r\n                                        fontStyle: 'normal',\r\n                                        fontSize: '18px',\r\n                                    }}\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                            </Link>\r\n                        </>}\r\n                    {step < 2 && <Button onClick={onNext} disabled={step === 2} variant=\"solid\" style={{\r\n                        color: \"white\", \r\n                        fontStyle: 'normal',\r\n                        fontSize: '18px',\r\n                    }}  >\r\n                        {step === 2 ? 'Completed' : 'Next'}\r\n                    </Button>}\r\n\r\n\r\n                    {step === 2 &&\r\n                        <>\r\n                            <Button onClick={submitApi} variant='solid' style={{\r\n                                \r\n                                fontStyle: 'normal',\r\n                                fontSize: '18px',\r\n                                color: \"white\"\r\n                            }}>\r\n                                {'Submit for Approval'}\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controlled\r\n","import React from 'react'\r\nimport StepControlled from './StepControlled'\r\nimport { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport { Input, FormItem } from 'components/ui'\r\nimport { Field } from 'formik'\r\nexport default function NewOperators() {\r\n   \r\n  return (\r\n    <>\r\n    {/* <div>Accounts/Enterprise Customers/Create Enterprise Customers</div> */}\r\n    <div>\r\n    <StepControlled />\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n"],"names":["timeZone","id","value","interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","orientationtype","label","language","enterpriseValidationSchema","Yup","shape","custName","min","max","required","customerType","custCompName","custIncorpDt","custTaxId","custTimeZone","custCurrency","custLang","custOrient","custCat","nullable","formik","onChange","refId","props","dispatch","useDispatch","accOperatorId","setOperatorId","currencyList","useSelector","state","enterpriseList","data","parentAccountList","custmoerCategoryList","custmoerCatList","dateFormat","locale","operatorAccountList","timeZoneList","timezone","selectedParentOperator","dialogIsOpen","setIsOpen","newLabel","setNewLabel","onDialogClose","e","getParentAccount","accMnoParentId","console","log","className","innerRef","initialValues","EpIntialValues","entAccInfo","validationSchema","onSubmit","values","setSubmitting","updatedPayload","enterpriseState","setEnterpriseState","dataToStore","setEpIntialValues","touched","errors","isSubmitting","style","color","invalid","errorMessage","name","field","form","placeholder","options","filter","gender","setFieldValue","acc_unq_id","setSelectedParentOperator","handleDropdownChange","type","autoComplete","component","Input","maxDate","Date","inputFormat","push","remove","fields","map","item","index","display","alignItems","flexWrap","marginRight","field_title","title","onClick","marginLeft","isOpen","onClose","onRequestClose","shouldCloseOnOverlayClick","shouldCloseOnEsc","target","variant","field_value","onDialogOk","icon","fill","disabled","length","enterpriseContactValidationSchema","custFirstName","custLastName","custEmailId","email","custordEmailId","custPhone","entContact","custMiddleName","custAltCont","custFax","custWebUrl","validate","validateURL","custCountry","custAddL1","custCity","custState","address","mode","auth","user","acc_user_id","enterAccount","beforeUpload","newFiles","files","apiUploadFiles","ress","showContent","setShowContent","content","setContent","onClickView","fileInfo","backgroundColor","uploadFiles","fil","i","doc_type","error","doc_name","is_mandatory","draggable","updatedFiles","uploadRes","filesDetails","fileUnqId","fileName","minHeight","file_url","file_name","substring","CloseButton","refIdAdd","every","additionalFiles","setStep","step","OpenNotification","file","file_type","src","appConfig","alt","window","open","placementList","billCycle","settelementWeekOpt","monthOptions","settelementMonthOpt","payAmount","enterpriseBillingValidationSchema","placement","setPlacement","onPlacementChange","val","billing","actions","checked","sameCorrespondenceAddress","onCheck","v","errMsg","week","settelementWeek","settelementMonth","settelementDate","EnterpriseDetails","forwardRef","ref","EnterpriseAccountInfo","validated","EnterpriseContactInfo","EnterpriseAddressInfo","EnterpriseBillingInfo","EnterpriseUploladFileFileInfo","EnterpriseAdditionalFileInfo","formData","setFormData","enterpriseAccountInforef","React","enterpriseContactInforef","enterpriseAddressInforef","enterpriseBillingInforef","enterpriseUploadFileref","enterpriseAddItonalref","handleSubmit","validationErrors","current","validateForm","then","Object","keys","setTouched","submitForm","useImperativeHandle","handleSubmitFromParent","bodyClass","divider","setAccMnoId","onChangeAdd","firstName","lastName","emailId","phoneNumber","userInfo","contarctStatus","contractType","signedDate","enforceDate","terminateDate","status","includes","contractTypeList","userContact","imageFile","date","EnterpriseMasterInfo","EnterpriseContractInfo","enterpriseMasterInforef","enterpriseContractInforef","EnterpriseMasterUserInfo","EnterpriseMasterContactInfo","onClickFile","showIcon","Array","isArray","join","GetDropdownLabel","dayjs","format","custAddL2","custZipcode","billDate","creditLimit","billDueTenor","acc_mno_id","password","rememberMe","usernameOrEmail","location","useLocation","rowForEdit","intialValues","enterpriseId","roleId","middleName","dgl_acc_mno_id","operatorFileTypes","fileList","getUploadFileType","res","uploadArray","acc_type","docType","JSON","parse","doc_type_name","navigate","useNavigate","useTimeOutMessage","childRef","useRef","childRefMasterInfo","nextStep","onPrevious","submitApi","uploadEdDocument","concat","undefined","createPayload","custPrimCont","Math","floor","random","apiSubmitEnterprise","resp","GetErrorMsg","updatePayload","cust_unq_id","dgl_cust_roles","role_unq_id","dgl_cust_users","cust_user_unq_id","dgl_cust_contracts","apiUpdateEnterprise","enterpriseIntialValues","EditandCopyEnterprise","matcheDobj","dgl_cust_files","find","f","getCurrency","getParenOperator","getCustomerCategory","getContractType","breadCrumbList","link","cust_name","list","fontStyle","fontSize","to","NewOperators","StepControlled"],"sourceRoot":""}