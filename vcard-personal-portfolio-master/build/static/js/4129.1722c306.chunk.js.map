{"version":3,"file":"static/js/4129.1722c306.chunk.js","mappings":"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","sources":["utils/hooks/useTimeOutMessage.js","views/masterData/pages/components/AddPage.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import React from 'react'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport { Input, FormItem, FormContainer, select, Button, Alert, Select } from 'components/ui'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom'\r\nimport { apiCreatePages, apiUpdatePages } from 'services/PagesService'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport ReactHtmlParser from 'html-react-parser'\r\nimport { GetErrorMsg, OpenNotification } from 'views/Servicefile'\r\nimport { EditandCopyPages } from 'utils/campareandCopy'\r\nimport { getParentAccount } from '../store/dataSlice'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\n\r\n\r\nfunction AddPage() {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const validationSchema = Yup.object().shape({\r\n\r\n        pageName: Yup.string().required(\"Please enter page name\").nullable(),\r\n        description: Yup.string().required(\"Please enter description\").nullable(),\r\n        metaTitle: Yup.string().required(\"Please enter meta title\").nullable(),\r\n        metaKeywords: Yup.string().required(\"Please enter meta keywords\").nullable(),\r\n        metaDescription: Yup.string().required(\"Please enter meta description\").nullable(),\r\n    })\r\n\r\n    let initialValues = {\r\n        pageName: \"\",\r\n        description: \"\",\r\n        metaTitle: \"\",\r\n        metaKeywords: \"\",\r\n        metaDescription: \"\",\r\n        acc_unq_id: \"\"\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    const formikRef = useRef()\r\n    const location = useLocation();\r\n    const mode = location.state?.mode ? location.state.mode : \"ADD\";\r\n\r\n    const rowForEdit = location.state?.data;\r\n\r\n    const [pagesIntialValues, setPagesIntialValues] = useState(EditandCopyPages(initialValues, rowForEdit ? rowForEdit : initialValues))\r\n\r\n    const { enterAccount, acc_mno_id, user_type } = useSelector((state) => state.auth.user)\r\n\r\n    const parentAccountList = useSelector((state) => state.Pages?.data?.parentAccountList)\r\n\r\n\r\n    useEffect(() => {\r\n        if (rowForEdit) {\r\n            const pagesEditIntialValues = EditandCopyPages(pagesIntialValues, rowForEdit);\r\n            setPagesIntialValues(pagesEditIntialValues)\r\n        }\r\n    }, [pagesIntialValues, rowForEdit])\r\n\r\n    useEffect(() => {\r\n        dispatch(getParentAccount({ enterAccount }))\r\n\r\n    }, [dispatch, enterAccount])\r\n\r\n\r\n    const submitApi = async (values) => {\r\n        let payload =\r\n        {\r\n            \"page_name\": values.pageName,\r\n            \"page_content\": ReactHtmlParser(values?.description).props.children,\r\n            \"meta_title\": values.metaTitle,\r\n            \"meta_data\": values.metaKeywords,\r\n            \"meta_description\": ReactHtmlParser(values.metaDescription).props.children,\r\n            \"page_status\": \"IN_ACTIVE\",\r\n            \"dgl_acc_mno\": acc_mno_id,\r\n            // acc_unq_id:values.acc_unq_id\r\n            \"unq_id\": user_type !== \"GlobalMno\" ? enterAccount : values.acc_unq_id\r\n        }\r\n        if (mode === \"ADD\") {\r\n            const resp = await apiCreatePages(payload)\r\n            if (resp.status === \"success\") {\r\n                navigate('/masterDataMenu-pages')\r\n                OpenNotification('success', 'Created successfully')\r\n            }\r\n            else if (resp.status === \"failed\") {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n        }\r\n        else if (mode === \"EDIT\") {\r\n            payload.id = rowForEdit.id\r\n            payload.dgl_acc_mno = rowForEdit?.dgl_acc_mno\r\n            payload.unq_id = user_type !== \"GlobalMno\" ? enterAccount : values.acc_unq_id\r\n            const resp = await apiUpdatePages(payload, rowForEdit.id)\r\n            if (resp.status === \"success\") {\r\n                navigate('/masterDataMenu-pages')\r\n                OpenNotification('success', 'Updated successfully')\r\n            }\r\n            else if (resp.status === \"failed\") {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n        }\r\n    }\r\n\r\n    let  breadCrumbList=[{\r\n        name:'Master Data',\r\n        // link:\"/home\"\r\n    },\r\n    {\r\n        name:'Pages',\r\n        link:\"/masterDataMenu-pages\"\r\n    },\r\n    {\r\n        name: `Add Page`,\r\n    }]\r\n    \r\n    \r\n    if(mode===\"EDIT\"){\r\n    breadCrumbList = [\r\n        {\r\n            name:'Master Data',\r\n            // link:\"/home\"\r\n        },\r\n        {\r\n            name:'Pages',\r\n            link:\"/masterDataMenu-pages\"\r\n        },\r\n        {\r\n          name: rowForEdit?.meta_title,\r\n          link: '/masterDataMenu-pages',\r\n          state:rowForEdit\r\n      },\r\n        {\r\n            name: `Edit Page`,\r\n        },\r\n    \r\n    \r\n    ]\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {message && <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                {message}\r\n            </Alert>}\r\n            <div>\r\n                {/* Master Data /Pages / Add Page  */}\r\n                <CustomBreadcrumbs  list={breadCrumbList} />\r\n                </div>\r\n            <div className='mt-5'>\r\n                {/* <h3 className='mb-4'>Add Page</h3> */}\r\n                <h3 className='mb-4'>{mode === \"EDIT\" ? \"Edit\" : \"Add\"} Page </h3>\r\n\r\n                <Formik\r\n                    innerRef={formikRef}\r\n                    initialValues={pagesIntialValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values) => {\r\n                        submitApi(values)\r\n\r\n                    }}\r\n                >\r\n                    {({ values, touched, errors, isSubmitting }) => {\r\n                        return (\r\n                            <Form>\r\n                                <div className=\" p-5\" style={{ backgroundColor: \"#F5F5F5\" }}>\r\n                                    <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider>\r\n                                        <FormContainer>\r\n                                            <div className=\"md:grid gap-4 mx-4 mt-3 pl-2\">\r\n                                                <div className='md:grid grid-cols-2 gap-4'>\r\n                                                    <FormItem\r\n                                                        label={<p>Operator <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        invalid={errors.acc_unq_id && touched.acc_unq_id}\r\n                                                        errorMessage={errors.acc_unq_id}\r\n                                                    >\r\n                                                        <Field name=\"acc_unq_id\" validate={async (passedValue) => {\r\n                                                            if (user_type === \"GlobalMno\") {\r\n                                                                try {\r\n                                                                    await Yup.string().required('Please select operator').validate(passedValue);\r\n                                                                } catch (error) {\r\n                                                                    return error.message;\r\n                                                                }\r\n                                                            }\r\n                                                        }}>\r\n                                                            {({ field, form }) => (\r\n                                                                <Select\r\n                                                                    // isDisabled = {user_type !== \"GlobalMno\" ? true : false}\r\n                                                                    placeholder=\"Select Operator\"\r\n                                                                    field={field}\r\n                                                                    form={form}\r\n                                                                    options={parentAccountList}\r\n                                                                    value={user_type !== \"GlobalMno\" ? parentAccountList?.filter(\r\n                                                                        (label) =>\r\n                                                                            label.acc_unq_id === enterAccount\r\n                                                                    ) : parentAccountList?.filter(\r\n                                                                        (label) =>\r\n                                                                            label.acc_unq_id === values.acc_unq_id\r\n                                                                    )}\r\n                                                                    onChange={(label) =>\r\n                                                                        form.setFieldValue(\r\n                                                                            field.name,\r\n                                                                            label.acc_unq_id\r\n                                                                        )\r\n                                                                    }\r\n                                                                />\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                                <FormItem\r\n                                                    label={<p> Page Name<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                    className=' mr-6'\r\n                                                    invalid={errors.pageName && touched.pageName}\r\n                                                    errorMessage={errors.pageName}\r\n                                                >\r\n                                                    <Field\r\n                                                        type=\"text\"\r\n                                                        autoComplete=\"off\"\r\n                                                        name=\"pageName\"\r\n                                                        placeholder=\"Enter Name\"\r\n                                                        component={Input}\r\n                                                        // className='w-2/5'\r\n                                                        style={{ width: \"48%\" }}\r\n                                                    />\r\n                                                </FormItem>\r\n                                                <FormItem\r\n                                                    label={<p>Page Content<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                    className=''\r\n                                                    invalid={errors.description && touched.description}\r\n\r\n                                                    errorMessage={errors.description}\r\n                                                >\r\n                                                    <Field name=\"description\"  >\r\n                                                        {({ field, form }) => (\r\n                                                            <RichTextEditor\r\n                                                                value={field.value}\r\n                                                                placeholder=\"Enter description\"\r\n                                                                onChange={(val) =>\r\n                                                                    form.setFieldValue(field.name, val)\r\n                                                                }\r\n                                                            />\r\n                                                        )}\r\n                                                    </Field>\r\n                                                </FormItem>\r\n                                                <div className='md:grid grid-cols-2'>\r\n                                                    <FormItem\r\n                                                        label={<p> Meta Title<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        className=' mr-6'\r\n                                                        invalid={errors.metaTitle && touched.metaTitle}\r\n                                                        errorMessage={errors.metaTitle}\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"metaTitle\"\r\n                                                            placeholder=\"Enter Name\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label={<p> Meta Keywords<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        className=' ml-6'\r\n                                                        invalid={errors.metaKeywords && touched.metaKeywords}\r\n                                                        errorMessage={errors.metaKeywords}\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"metaKeywords\"\r\n                                                            placeholder=\"Enter Page Tag\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                                <FormItem\r\n                                                    label={<p>Meta Description<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                    className=''\r\n                                                    invalid={errors.metaDescription && touched.metaDescription}\r\n\r\n                                                    errorMessage={errors.metaDescription}\r\n                                                >\r\n                                                    <Field name=\"metaDescription\"  >\r\n                                                        {({ field, form }) => (\r\n                                                            <RichTextEditor\r\n                                                                value={field.value}\r\n                                                                placeholder=\"Enter description\"\r\n                                                                onChange={(val) =>\r\n                                                                    form.setFieldValue(field.name, val)\r\n                                                                }\r\n                                                            />\r\n                                                        )}\r\n                                                    </Field>\r\n                                                </FormItem>\r\n                                            </div>\r\n                                        </FormContainer>\r\n                                    </AdaptableCard>\r\n                                </div>\r\n                                <div className=\" pt-4 text-right w-full flex justify-end\" >\r\n                                    <Link\r\n                                        className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                        to=\"/masterDataMenu-pages\"\r\n                                    >\r\n                                        <Button\r\n                                            type='button'\r\n                                            className=\"mx-2\"\r\n                                            style={{\r\n                                                backgroundColor: \"#4D4D4D\", \r\n                                                fontStyle: 'normal',\r\n                                                fontSize: '18px'\r\n                                            }}\r\n                                            variant=\"solid\"\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n                                    </Link>\r\n\r\n                                    <Button type='submit' variant='solid' style={{\r\n                                        fontStyle: 'normal',\r\n                                        fontSize: '18px',\r\n                                    }} >\r\n                                        {'Submit for Approval'}\r\n                                    </Button>\r\n                                </div>\r\n                            </Form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddPage"],"names":["interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","navigate","useNavigate","validationSchema","Yup","shape","pageName","required","nullable","description","metaTitle","metaKeywords","metaDescription","initialValues","acc_unq_id","dispatch","useDispatch","useTimeOutMessage","formikRef","useRef","location","useLocation","mode","state","rowForEdit","data","EditandCopyPages","pagesIntialValues","setPagesIntialValues","useSelector","auth","user","enterAccount","acc_mno_id","user_type","parentAccountList","Pages","pagesEditIntialValues","getParentAccount","submitApi","values","payload","ReactHtmlParser","props","children","apiCreatePages","resp","status","OpenNotification","GetErrorMsg","id","dgl_acc_mno","unq_id","apiUpdatePages","breadCrumbList","name","link","meta_title","className","type","showIcon","list","innerRef","onSubmit","touched","errors","isSubmitting","style","backgroundColor","bodyClass","divider","label","color","invalid","errorMessage","validate","passedValue","field","form","placeholder","options","value","filter","onChange","setFieldValue","autoComplete","component","Input","width","val","to","fontStyle","fontSize","variant"],"sourceRoot":""}