{"version":3,"file":"static/js/9066.356835c4.chunk.js","mappings":"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","sources":["components/template/Header.js","components/template/LanguageSelector.js","components/template/Logo.js","components/template/MobileNav.js","components/template/Notification.js","components/template/Search.js","components/template/ThemeConfigurator/ModeSwitcher.js","components/template/ThemeConfigurator/LayoutSwitcher.js","components/template/ThemeConfigurator/ThemeSwitcher.js","components/template/ThemeConfigurator/DirectionSwitcher.js","components/template/ThemeConfigurator/NavModeSwitcher.js","components/template/ThemeConfigurator/CopyButton.js","components/template/ThemeConfigurator/index.js","components/template/SidePanel/SidePanelContent.js","components/template/SidePanel/index.js","components/template/UserDropdown.js","configs/navigation-icon.config.js","services/CommonService.js","utils/hoc/withHeaderItem.js","utils/hooks/useResponsive.js"],"sourcesContent":["import React from 'react'\r\nimport classNames from 'classnames'\r\nimport PropTypes from 'prop-types'\r\nimport { HEADER_HEIGHT_CLASS } from 'constants/theme.constant'\r\n\r\nconst Header = (props) => {\r\n    const { headerStart, headerEnd, headerMiddle, className, container } = props\r\n\r\n    return (\r\n        <header className={classNames('header', className)}>\r\n            <div\r\n                className={classNames(\r\n                    'header-wrapper',\r\n                    HEADER_HEIGHT_CLASS,\r\n                    container && 'container mx-auto'\r\n                )}\r\n            >\r\n                <div className=\"header-action header-action-start\">\r\n                    {headerStart}\r\n                </div>\r\n                {headerMiddle && (\r\n                    <div className=\"header-action header-action-middle\">\r\n                        {headerMiddle}\r\n                    </div>\r\n                )}\r\n                <div className=\"header-action header-action-end\">\r\n                    {headerEnd}\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\n    headerStart: PropTypes.node,\r\n    headerEnd: PropTypes.node,\r\n    container: PropTypes.bool,\r\n}\r\n\r\nexport default Header\r\n","import React, { useMemo, useState } from 'react'\r\nimport { Avatar, Dropdown, Spinner } from 'components/ui'\r\nimport classNames from 'classnames'\r\nimport withHeaderItem from 'utils/hoc/withHeaderItem'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setLang } from 'store/locale/localeSlice'\r\nimport { dateLocales } from 'locales'\r\nimport dayjs from 'dayjs'\r\nimport i18n from 'i18next'\r\n\r\nimport { HiCheck } from 'react-icons/hi'\r\n\r\nconst languageList = [\r\n    { label: 'English', value: 'en', flag: 'us' },  \r\n    { label: 'Spanish', value: 'es', flag: 'sp' },\r\n    { label: 'Arabic', value: 'ar', flag: 'ar' },\r\n    { label: 'Portuguese', value: 'pt', flag: 'pt' },\r\n]\r\nexport const LanguageSelector = ({ className }) => {\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const locale = useSelector((state) => state.locale.currentLang)\r\n    const dispatch = useDispatch()\r\n\r\n    const selectLangFlag = useMemo(() => {\r\n        return languageList.find((lang) => lang.value === locale)?.flag\r\n    }, [locale])\r\n\r\n    const selectedLanguage = (\r\n        <div className={classNames(className, 'flex items-center')}>\r\n            {loading ? (\r\n                <Spinner size={20} />\r\n            ) : (\r\n                <Avatar\r\n                    size={24}\r\n                    shape=\"circle\"\r\n                    src={`/img/countries/${selectLangFlag}.png`}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n\r\n    const onLanguageSelect = (lang) => {\r\n        const formattedLang = lang.replace(/-([a-z])/g, function (g) {\r\n            return g[1].toUpperCase()\r\n        })\r\n\r\n        setLoading(true)\r\n\r\n        const dispatchLang = () => {\r\n            i18n.changeLanguage(formattedLang)\r\n            dispatch(setLang(lang))\r\n            setLoading(false)\r\n        }\r\n\r\n        dateLocales[formattedLang]()\r\n            .then(() => {\r\n                dayjs.locale(formattedLang)\r\n                dispatchLang()\r\n            })\r\n            .catch((_) => {\r\n                dispatchLang()\r\n            })\r\n    }\r\n\r\n    return (\r\n      \r\n        <Dropdown renderTitle={selectedLanguage} placement=\"bottom-end\">\r\n            {languageList.map((lang) => (\r\n              \r\n                <Dropdown.Item\r\n                    className=\"mb-1 justify-between\"\r\n                    eventKey={lang.label}\r\n                    key={lang.label}\r\n                    onClick={() => onLanguageSelect(lang.value)}\r\n                >\r\n                    <span className=\"flex items-center\">\r\n                        <Avatar\r\n                            size={18}\r\n                            shape=\"circle\"\r\n                            src={`/img/countries/${lang.flag}.png`}\r\n                        />\r\n                        <span className=\"ltr:ml-2 rtl:mr-2\">{lang.label}</span>\r\n                    </span>\r\n                    {locale === lang.value && (\r\n                        <HiCheck className=\"text-emerald-500 text-lg\" />\r\n                    )}\r\n                </Dropdown.Item>\r\n            ))}\r\n        </Dropdown>\r\n    )\r\n}\r\n\r\nexport default withHeaderItem(LanguageSelector)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { APP_NAME } from 'constants/app.constant'\r\nimport { useSelector } from 'react-redux'\r\nimport appConfig from 'configs/app.config'\r\n\r\nconst LOGO_SRC_PATH = '/img/logo/'\r\n\r\nconst Logo = (props) => {\r\n    const { type, mode, gutter, className, imgClass, style, logoWidth } = props\r\n    const { largeLogo, smallLogo, themeLargeLogo, themeSmallLogo } =\r\n        useSelector((state) => state.locale)\r\n    return (\r\n        <div\r\n            className={classNames('logo', className, gutter)}\r\n            style={{\r\n                ...style,\r\n                ...{ width: logoWidth },\r\n            }}\r\n        >\r\n            {largeLogo && type === 'full' && mode === 'light' ? (\r\n                <img\r\n                    className={imgClass}\r\n                    src={`${appConfig.apiPrefix}/media/uniqid/${largeLogo}`}\r\n                    alt=\"large logo\"\r\n                />\r\n            ) : smallLogo && type === 'streamline' && mode === 'light' ? (\r\n                <img\r\n                    className={imgClass}\r\n                    src={`${appConfig.apiPrefix}/media/uniqid/${smallLogo}`}\r\n                    alt=\"small logo\"\r\n                />\r\n            ) : themeLargeLogo && type === 'full' && mode === 'dark' ? (\r\n                <img\r\n                    className={imgClass}\r\n                    src={`${appConfig.apiPrefix}/media/uniqid/${themeLargeLogo}`}\r\n                    alt=\"small logo\"\r\n                />\r\n            ) : themeLargeLogo && type === 'full' && mode === 'dark' ? (\r\n                <img\r\n                    className={imgClass}\r\n                    src={`${appConfig.apiPrefix}/media/uniqid/${themeLargeLogo}`}\r\n                    alt=\"small logo\"\r\n                />\r\n            ) : themeSmallLogo && type === 'streamline' && mode === 'dark' ? (\r\n                <img\r\n                    className={imgClass}\r\n                    src={`${appConfig.apiPrefix}/media/uniqid/${themeSmallLogo}`}\r\n                    alt=\"small logo\"\r\n                />\r\n            ) : (\r\n                <img\r\n                    className={imgClass}\r\n                    src={`${LOGO_SRC_PATH}logo-${mode}-${type}.png`}\r\n                    alt={`${APP_NAME} logo`}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nLogo.defaultProps = {\r\n    mode: 'light',\r\n    type: 'full',\r\n    logoWidth: 'auto',\r\n}\r\n\r\nLogo.propTypes = {\r\n    mode: PropTypes.oneOf(['light', 'dark']),\r\n    type: PropTypes.oneOf(['full', 'streamline']),\r\n    gutter: PropTypes.string,\r\n    imgClass: PropTypes.string,\r\n    logoWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n}\r\n\r\nexport default Logo\r\n","import React, { useState, Suspense, lazy } from 'react'\r\nimport classNames from 'classnames'\r\nimport { Drawer } from 'components/ui'\r\nimport {\r\n    NAV_MODE_THEMED,\r\n    NAV_MODE_TRANSPARENT,\r\n    DIR_RTL,\r\n} from 'constants/theme.constant'\r\nimport withHeaderItem from 'utils/hoc/withHeaderItem'\r\nimport { NavToggle } from 'components/shared'\r\nimport navigationConfig from 'configs/navigation.config'\r\nimport useResponsive from 'utils/hooks/useResponsive'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst VerticalMenuContent = lazy(() =>\r\n    import('components/template/VerticalMenuContent')\r\n)\r\n\r\nconst MobileNavToggle = withHeaderItem(NavToggle)\r\n\r\nconst MobileNav = () => {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const openDrawer = () => {\r\n        setIsOpen(true)\r\n    }\r\n\r\n    const onDrawerClose = (e) => {\r\n        setIsOpen(false)\r\n    }\r\n\r\n    const themeColor = useSelector((state) => state.theme.themeColor)\r\n    const primaryColorLevel = useSelector(\r\n        (state) => state.theme.primaryColorLevel\r\n    )\r\n    const navMode = useSelector((state) => state.theme.navMode)\r\n    const mode = useSelector((state) => state.theme.mode)\r\n    const direction = useSelector((state) => state.theme.direction)\r\n    const currentRouteKey = useSelector(\r\n        (state) => state.base.common.currentRouteKey\r\n    )\r\n    const sideNavCollapse = useSelector(\r\n        (state) => state.theme.layout.sideNavCollapse\r\n    )\r\n    const userAuthority = useSelector((state) => state.auth.user.authority)\r\n\r\n    const { smaller } = useResponsive()\r\n\r\n    const navColor = () => {\r\n        if (navMode === NAV_MODE_THEMED) {\r\n            return `bg-${themeColor}-${primaryColorLevel} side-nav-${navMode}`\r\n        }\r\n\r\n        if (navMode === NAV_MODE_TRANSPARENT) {\r\n            return `side-nav-${mode}`\r\n        }\r\n\r\n        return `side-nav-${navMode}`\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {smaller.md && (\r\n                <>\r\n                    <div className=\"text-2xl\" onClick={openDrawer}>\r\n                        <MobileNavToggle toggled={isOpen} />\r\n                    </div>\r\n                    <Drawer\r\n                        title=\"Navigation\"\r\n                        isOpen={isOpen}\r\n                        onClose={onDrawerClose}\r\n                        onRequestClose={onDrawerClose}\r\n                        bodyClass={classNames(navColor(), 'p-0')}\r\n                        width={330}\r\n                        placement={direction === DIR_RTL ? 'right' : 'left'}\r\n                    >\r\n                        <Suspense fallback={<></>}>\r\n                            {isOpen && (\r\n                                <VerticalMenuContent\r\n                                    navMode={navMode}\r\n                                    collapsed={sideNavCollapse}\r\n                                    navigationTree={navigationConfig}\r\n                                    routeKey={currentRouteKey}\r\n                                    userAuthority={userAuthority}\r\n                                    onMenuItemClick={onDrawerClose}\r\n                                    direction={direction}\r\n                                />\r\n                            )}\r\n                        </Suspense>\r\n                    </Drawer>\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MobileNav\r\n","import React, { useEffect, useState, useCallback } from 'react'\r\nimport classNames from 'classnames'\r\nimport withHeaderItem from 'utils/hoc/withHeaderItem'\r\nimport {\r\n    Avatar,\r\n    Dropdown,\r\n    ScrollBar,\r\n    Spinner,\r\n    Badge,\r\n    Button,\r\n    Tooltip,\r\n} from 'components/ui'\r\nimport {\r\n    HiOutlineBell,\r\n    HiOutlineCalendar,\r\n    HiOutlineClipboardCheck,\r\n    HiOutlineBan,\r\n    HiOutlineMailOpen,\r\n} from 'react-icons/hi'\r\nimport {\r\n    apiGetNotificationList,\r\n    apiGetNotificationCount,\r\n} from 'services/CommonService'\r\nimport { Link } from 'react-router-dom'\r\nimport isLastChild from 'utils/isLastChild'\r\nimport useTwColorByName from 'utils/hooks/useTwColorByName'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { useSelector } from 'react-redux'\r\nimport useResponsive from 'utils/hooks/useResponsive'\r\nimport acronym from 'utils/acronym'\r\n\r\nconst notificationHeight = 'h-72'\r\nconst imagePath = '/img/avatars/'\r\n\r\nconst GeneratedAvatar = ({ target }) => {\r\n    const color = useTwColorByName()\r\n    return (\r\n        <Avatar shape=\"circle\" className={`${color(target)}`}>\r\n            {acronym(target)}\r\n        </Avatar>\r\n    )\r\n}\r\n\r\nconst notificationTypeAvatar = (data) => {\r\n    const { type, target, image, status } = data\r\n    switch (type) {\r\n        case 0:\r\n            if (image) {\r\n                return <Avatar shape=\"circle\" src={`${imagePath}${image}`} />\r\n            } else {\r\n                return <GeneratedAvatar target={target} />\r\n            }\r\n        case 1:\r\n            return (\r\n                <Avatar\r\n                    shape=\"circle\"\r\n                    className=\"bg-blue-100 text-blue-600 dark:bg-blue-500/20 dark:text-blue-100\"\r\n                    icon={<HiOutlineCalendar />}\r\n                />\r\n            )\r\n        case 2:\r\n            const statusSucceed = status === 'succeed'\r\n            const statusColor = statusSucceed\r\n                ? 'bg-emerald-100 text-emerald-600 dark:bg-emerald-500/20 dark:text-emerald-100'\r\n                : 'bg-red-100 text-red-600 dark:bg-red-500/20 dark:text-red-100'\r\n            const statusIcon = statusSucceed ? (\r\n                <HiOutlineClipboardCheck />\r\n            ) : (\r\n                <HiOutlineBan />\r\n            )\r\n            return (\r\n                <Avatar\r\n                    shape=\"circle\"\r\n                    className={statusColor}\r\n                    icon={statusIcon}\r\n                />\r\n            )\r\n        default:\r\n            return <Avatar />\r\n    }\r\n}\r\n\r\nconst NotificationToggle = ({ className, dot }) => {\r\n    return (\r\n        <div className={classNames('text-2xl', className)}>\r\n            {dot ? (\r\n                <Badge badgeStyle={{ top: '3px', right: '6px' }}>\r\n                    <HiOutlineBell />\r\n                </Badge>\r\n            ) : (\r\n                <HiOutlineBell />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Notification = ({ className }) => {\r\n    const [notificationList, setNotificationList] = useState([])\r\n    const [unreadNotification, setUnreadNotification] = useState(false)\r\n    const [noResult, setNoResult] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const { bgTheme } = useThemeClass()\r\n\r\n    const { larger } = useResponsive()\r\n\r\n    const direction = useSelector((state) => state.theme.direction)\r\n\r\n    const getNotificationCount = useCallback(async () => {\r\n        const resp = await apiGetNotificationCount()\r\n        if (resp.data.count > 0) {\r\n            setNoResult(false)\r\n            setUnreadNotification(true)\r\n        } else {\r\n            setNoResult(true)\r\n        }\r\n    }, [setUnreadNotification])\r\n\r\n    useEffect(() => {\r\n        getNotificationCount()\r\n    }, [getNotificationCount])\r\n\r\n    const onNotificationOpen = useCallback(async () => {\r\n        if (notificationList.length === 0) {\r\n            setLoading(true)\r\n            const resp = await apiGetNotificationList()\r\n            setLoading(false)\r\n            setNotificationList(resp.data)\r\n        }\r\n    }, [notificationList, setLoading])\r\n\r\n    const onMarkAllAsRead = useCallback(() => {\r\n        const list = notificationList.map((item) => {\r\n            if (!item.readed) {\r\n                item.readed = true\r\n            }\r\n            return item\r\n        })\r\n        setNotificationList(list)\r\n        setUnreadNotification(false)\r\n    }, [notificationList])\r\n\r\n    const onMarkAsRead = useCallback(\r\n        (id) => {\r\n            const list = notificationList.map((item) => {\r\n                if (item.id === id) {\r\n                    item.readed = true\r\n                }\r\n                return item\r\n            })\r\n            setNotificationList(list)\r\n            const hasUnread = notificationList.some((item) => !item.readed)\r\n\r\n            if (!hasUnread) {\r\n                setUnreadNotification(false)\r\n            }\r\n        },\r\n        [notificationList]\r\n    )\r\n\r\n    return (\r\n        <NotificationToggle\r\n                    dot={unreadNotification}\r\n                    className={className}\r\n                />\r\n      /*   <Dropdown\r\n            renderTitle={\r\n                <NotificationToggle\r\n                    dot={unreadNotification}\r\n                    className={className}\r\n                />\r\n            }\r\n            menuClass=\"p-0 min-w-[280px] md:min-w-[340px]\"\r\n            placement={larger.md ? 'bottom-end' : 'bottom-center'}\r\n            onOpen={onNotificationOpen}\r\n        >\r\n            <Dropdown.Item variant=\"header\">\r\n                <div className=\"border-b border-gray-200 dark:border-gray-600 px-4 py-2 flex items-center justify-between\">\r\n                    <h6>Notifications</h6>\r\n                    <Tooltip title=\"Mark all as read\">\r\n                        <Button\r\n                            variant=\"plain\"\r\n                            shape=\"circle\"\r\n                            size=\"sm\"\r\n                            icon={<HiOutlineMailOpen className=\"text-xl\" />}\r\n                            onClick={onMarkAllAsRead}\r\n                        />\r\n                    </Tooltip>\r\n                </div>\r\n            </Dropdown.Item>\r\n            <div className={classNames('overflow-y-auto', notificationHeight)}>\r\n                <ScrollBar direction={direction}>\r\n                    {notificationList.length > 0 &&\r\n                        notificationList.map((item, index) => (\r\n                            <div\r\n                                key={item.id}\r\n                                className={`relative flex px-4 py-4 cursor-pointer hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-black dark:hover:bg-opacity-20  ${\r\n                                    !isLastChild(notificationList, index)\r\n                                        ? 'border-b border-gray-200 dark:border-gray-600'\r\n                                        : ''\r\n                                }`}\r\n                                onClick={() => onMarkAsRead(item.id)}\r\n                            >\r\n                                <div>{notificationTypeAvatar(item)}</div>\r\n                                <div className=\"ltr:ml-3 rtl:mr-3\">\r\n                                    <div>\r\n                                        {item.target && (\r\n                                            <span className=\"font-semibold heading-text\">\r\n                                                {item.target}{' '}\r\n                                            </span>\r\n                                        )}\r\n                                        <span>{item.description}</span>\r\n                                    </div>\r\n                                    <span className=\"text-xs\">{item.date}</span>\r\n                                </div>\r\n                                <Badge\r\n                                    className=\"absolute top-4 ltr:right-4 rtl:left-4 mt-1.5\"\r\n                                    innerClass={`${\r\n                                        item.readed ? 'bg-gray-300' : bgTheme\r\n                                    } `}\r\n                                />\r\n                            </div>\r\n                        ))}\r\n                    {loading && (\r\n                        <div\r\n                            className={classNames(\r\n                                'flex items-center justify-center',\r\n                                notificationHeight\r\n                            )}\r\n                        >\r\n                            <Spinner size={40} />\r\n                        </div>\r\n                    )}\r\n                    {noResult && (\r\n                        <div\r\n                            className={classNames(\r\n                                'flex items-center justify-center',\r\n                                notificationHeight\r\n                            )}\r\n                        >\r\n                            <div className=\"text-center\">\r\n                                <img\r\n                                    className=\"mx-auto mb-2 max-w-[150px]\"\r\n                                    src=\"/img/others/no-notification.png\"\r\n                                    alt=\"no-notification\"\r\n                                />\r\n                                <h6 className=\"font-semibold\">\r\n                                    No notifications!\r\n                                </h6>\r\n                                <p className=\"mt-1\">Please Try again later</p>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </ScrollBar>\r\n            </div>\r\n            <Dropdown.Item variant=\"header\">\r\n                <div className=\"flex justify-center border-t border-gray-200 dark:border-gray-600 px-4 py-2\">\r\n                    <Link\r\n                        to=\"/app/account/activity-log\"\r\n                        className=\"font-semibold cursor-pointer p-2 px-3 text-gray-600 hover:text-gray-900 dark:text-gray-200 dark:hover:text-white\"\r\n                    >\r\n                        View All Activity\r\n                    </Link>\r\n                </div>\r\n            </Dropdown.Item>\r\n        </Dropdown> */\r\n    )\r\n}\r\n\r\nexport default withHeaderItem(Notification)\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport classNames from 'classnames'\r\nimport withHeaderItem from 'utils/hoc/withHeaderItem'\r\nimport { Dialog, Button } from 'components/ui'\r\nimport { apiGetSearchResult } from 'services/CommonService'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport navigationIcon from 'configs/navigation-icon.config'\r\nimport debounce from 'lodash/debounce'\r\nimport { HiOutlineSearch, HiChevronRight } from 'react-icons/hi'\r\nimport { Link } from 'react-router-dom'\r\nimport Highlighter from 'react-highlight-words'\r\n\r\nconst recommendedSearch = [\r\n    {\r\n        title: 'Recommended',\r\n        data: [\r\n            {\r\n                title: 'Documentation',\r\n                url: '/docs/documentation/introduction',\r\n                icon: 'documentation',\r\n                category: 'Docs',\r\n                categoryTitle: 'Docs',\r\n            },\r\n            {\r\n                title: 'Changelog',\r\n                url: '/docs/changelog',\r\n                icon: 'changeLog',\r\n                category: 'Docs',\r\n                categoryTitle: 'Docs',\r\n            },\r\n            {\r\n                title: 'Button',\r\n                url: '/ui-components/button',\r\n                icon: 'common',\r\n                category: 'Common',\r\n                categoryTitle: 'UI Components',\r\n            },\r\n        ],\r\n    },\r\n]\r\n\r\nconst ListItem = (props) => {\r\n    const { icon, label, url = '', isLast, keyWord, onNavigate } = props\r\n\r\n    const { textTheme } = useThemeClass()\r\n\r\n    return (\r\n        <Link to={url} onClick={onNavigate}>\r\n            <div\r\n                className={classNames(\r\n                    'flex items-center justify-between rounded-lg p-3.5 cursor-pointer user-select',\r\n                    'bg-gray-50 dark:bg-gray-700/60 hover:bg-gray-100 dark:hover:bg-gray-700/90',\r\n                    !isLast && 'mb-3'\r\n                )}\r\n            >\r\n                <div className=\"flex items-center\">\r\n                    <div\r\n                        className={classNames(\r\n                            'mr-4 rounded-md ring-1 ring-slate-900/5 shadow-sm text-xl group-hover:shadow h-6 w-6 flex items-center justify-center bg-white dark:bg-gray-700',\r\n                            textTheme,\r\n                            'dark:text-gray-100'\r\n                        )}\r\n                    >\r\n                        {icon && navigationIcon[icon]}\r\n                    </div>\r\n                    <div className=\"text-gray-900 dark:text-gray-300\">\r\n                        <Highlighter\r\n                            autoEscape\r\n                            highlightClassName={classNames(\r\n                                textTheme,\r\n                                'underline bg-transparent font-semibold dark:text-white'\r\n                            )}\r\n                            searchWords={[keyWord]}\r\n                            textToHighlight={label}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <HiChevronRight className=\"text-lg\" />\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport const Search = ({ className }) => {\r\n    const [searchDialogOpen, setSearchDialogOpen] = useState(false)\r\n    const [searchResult, setSearchResult] = useState(recommendedSearch)\r\n    const [noResult, setNoResult] = useState(false)\r\n\r\n    const inputRef = useRef()\r\n\r\n    const handleReset = () => {\r\n        setNoResult(false)\r\n        setSearchResult(recommendedSearch)\r\n    }\r\n\r\n    const handleSearchOpen = () => {\r\n        setSearchDialogOpen(true)\r\n    }\r\n\r\n    const handleSearchClose = () => {\r\n        setSearchDialogOpen(false)\r\n        if (noResult) {\r\n            setTimeout(() => {\r\n                handleReset()\r\n            }, 300)\r\n        }\r\n    }\r\n\r\n    const debounceFn = debounce(handleDebounceFn, 200)\r\n\r\n    async function handleDebounceFn(query) {\r\n        if (!query) {\r\n            setSearchResult(recommendedSearch)\r\n            return\r\n        }\r\n\r\n        if (noResult) {\r\n            setNoResult(false)\r\n        }\r\n        const respond = await apiGetSearchResult({ query })\r\n        if (respond.data) {\r\n            if (respond.data.length === 0) {\r\n                setNoResult(true)\r\n            }\r\n            setSearchResult(respond.data)\r\n        }\r\n    }\r\n\r\n    const handleSearch = (e) => {\r\n        debounceFn(e.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (searchDialogOpen) {\r\n            let timeout = setTimeout(() => inputRef.current?.focus(), 100)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n    }, [searchDialogOpen])\r\n\r\n    const handleNavigate = () => {\r\n        handleSearchClose()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={classNames(className, 'text-2xl')}\r\n                onClick={handleSearchOpen}\r\n            >\r\n                <HiOutlineSearch />\r\n            </div>\r\n           {/*  <Dialog\r\n                contentClassName=\"p-0\"\r\n                isOpen={searchDialogOpen}\r\n                closable={false}\r\n                onRequestClose={handleSearchClose}\r\n            >\r\n                <div>\r\n                    <div className=\"px-4 flex items-center justify-between border-b border-gray-200 dark:border-gray-600\">\r\n                        <div className=\"flex items-center\">\r\n                            <HiOutlineSearch className=\"text-xl\" />\r\n                            <input\r\n                                ref={inputRef}\r\n                                className=\"ring-0 outline-none block w-full p-4 text-base bg-transparent text-gray-900 dark:text-gray-100\"\r\n                                placeholder=\"Search...\"\r\n                                onChange={handleSearch}\r\n                            />\r\n                        </div>\r\n                        <Button size=\"xs\" onClick={handleSearchClose}>\r\n                            Esc\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"py-6 px-5 max-h-[550px] overflow-y-auto\">\r\n                        {searchResult.map((result) => (\r\n                            <div className=\"mb-6\" key={result.title}>\r\n                                <h6 className=\"mb-3\">{result.title}</h6>\r\n                                {result.data.map((data, index) => (\r\n                                    <ListItem\r\n                                        key={data.title + index}\r\n                                        icon={data.icon}\r\n                                        label={data.title}\r\n                                        url={data.url}\r\n                                        keyWord={inputRef.current?.value || ''}\r\n                                        onNavigate={handleNavigate}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        ))}\r\n                        {searchResult.length === 0 && noResult && (\r\n                            <div className=\"my-10 text-center text-lg\">\r\n                                <span>No results for </span>\r\n                                <span className=\"heading-text\">\r\n                                    '{inputRef.current?.value}'\r\n                                </span>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </Dialog> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withHeaderItem(Search)\r\n","import React, { useCallback } from 'react'\r\nimport useDarkMode from 'utils/hooks/useDarkMode'\r\nimport { Switcher } from 'components/ui'\r\n\r\nconst ModeSwitcher = () => {\r\n    const [isDark, setIsDark] = useDarkMode()\r\n\r\n    const onSwitchChange = useCallback(\r\n        (checked) => {\r\n            setIsDark(checked ? 'dark' : 'light')\r\n        },\r\n        [setIsDark]\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <Switcher\r\n                defaultChecked={isDark}\r\n                onChange={(checked) => onSwitchChange(checked)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModeSwitcher\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Segment } from 'components/ui'\r\nimport { SegmentItemOption, DoubleSidedImage } from 'components/shared'\r\nimport { HiCheckCircle } from 'react-icons/hi'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setLayout } from 'store/theme/themeSlice'\r\nimport {\r\n    LAYOUT_TYPE_CLASSIC,\r\n    LAYOUT_TYPE_MODERN,\r\n    LAYOUT_TYPE_STACKED_SIDE,\r\n    LAYOUT_TYPE_SIMPLE,\r\n    LAYOUT_TYPE_DECKED,\r\n    LAYOUT_TYPE_BLANK,\r\n} from 'constants/theme.constant'\r\n\r\nconst layouts = [\r\n    {\r\n        value: LAYOUT_TYPE_CLASSIC,\r\n        label: 'Classic',\r\n        src: '/img/thumbs/layouts/classic.jpg',\r\n        srcDark: '/img/thumbs/layouts/classic-dark.jpg',\r\n    },\r\n    {\r\n        value: LAYOUT_TYPE_MODERN,\r\n        label: 'Mordern',\r\n        src: '/img/thumbs/layouts/modern.jpg',\r\n        srcDark: '/img/thumbs/layouts/modern-dark.jpg',\r\n    },\r\n    {\r\n        value: LAYOUT_TYPE_STACKED_SIDE,\r\n        label: 'Stacked Side',\r\n        src: '/img/thumbs/layouts/stackedSide.jpg',\r\n        srcDark: '/img/thumbs/layouts/stackedSide-dark.jpg',\r\n    },\r\n    {\r\n        value: LAYOUT_TYPE_SIMPLE,\r\n        label: 'Simple',\r\n        src: '/img/thumbs/layouts/simple.jpg',\r\n        srcDark: '/img/thumbs/layouts/simple-dark.jpg',\r\n    },\r\n    {\r\n        value: LAYOUT_TYPE_DECKED,\r\n        label: 'Decked',\r\n        src: '/img/thumbs/layouts/decked.jpg',\r\n        srcDark: '/img/thumbs/layouts/decked-dark.jpg',\r\n    },\r\n    {\r\n        value: LAYOUT_TYPE_BLANK,\r\n        label: 'Blank',\r\n        src: '/img/thumbs/layouts/blank.jpg',\r\n        srcDark: '/img/thumbs/layouts/blank-dark.jpg',\r\n    },\r\n]\r\n\r\nconst LayoutSwitcher = () => {\r\n    const type = useSelector((state) => state.theme.layout.type)\r\n    const dispatch = useDispatch()\r\n\r\n    const onLayoutSelect = (val) => {\r\n        dispatch(setLayout(val))\r\n    }\r\n\r\n    const { textTheme } = useThemeClass()\r\n\r\n    return (\r\n        <div>\r\n            <Segment\r\n                className=\"w-full\"\r\n                value={[type]}\r\n                onChange={(val) => onLayoutSelect(val[0])}\r\n            >\r\n                <div className=\"grid grid-cols-3 gap-4 w-full\">\r\n                    {layouts.map((layout) => (\r\n                        <Segment.Item value={layout.value} key={layout.value}>\r\n                            {({\r\n                                ref,\r\n                                active,\r\n                                onSegmentItemClick,\r\n                                disabled,\r\n                            }) => {\r\n                                return (\r\n                                    <div className=\"text-center\">\r\n                                        <SegmentItemOption\r\n                                            hoverable\r\n                                            ref={ref}\r\n                                            active={active}\r\n                                            disabled={disabled}\r\n                                            defaultGutter={false}\r\n                                            onSegmentItemClick={\r\n                                                onSegmentItemClick\r\n                                            }\r\n                                            className=\"relative min-h-[80px] w-full\"\r\n                                            customCheck={\r\n                                                <HiCheckCircle\r\n                                                    className={classNames(\r\n                                                        textTheme,\r\n                                                        'absolute top-2 right-2 text-lg'\r\n                                                    )}\r\n                                                />\r\n                                            }\r\n                                        >\r\n                                            <DoubleSidedImage\r\n                                                className=\"rounded-md\"\r\n                                                src={layout.src}\r\n                                                darkModeSrc={layout.srcDark}\r\n                                                alt=\"\"\r\n                                            />\r\n                                        </SegmentItemOption>\r\n                                        <div\r\n                                            className={classNames(\r\n                                                active && textTheme,\r\n                                                'mt-2 font-semibold'\r\n                                            )}\r\n                                        >\r\n                                            {layout.label}\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            }}\r\n                        </Segment.Item>\r\n                    ))}\r\n                </div>\r\n            </Segment>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LayoutSwitcher\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Select, Badge } from 'components/ui'\r\nimport { setThemeColor, setThemeColorLevel } from 'store/theme/themeSlice'\r\nimport { HiCheck } from 'react-icons/hi'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { components } from 'react-select'\r\n\r\nconst { Control } = components\r\n\r\nconst colorList = [\r\n    { label: 'Red', value: 'red' },\r\n    { label: 'Orange', value: 'orange' },\r\n    { label: 'Amber', value: 'amber' },\r\n    { label: 'Yellow', value: 'yellow' },\r\n    { label: 'Lime', value: 'lime' },\r\n    { label: 'Green', value: 'green' },\r\n    { label: 'Emerald', value: 'emerald' },\r\n    { label: 'Teal', value: 'teal' },\r\n    { label: 'Cyan', value: 'cyan' },\r\n    { label: 'Sky', value: 'sky' },\r\n    { label: 'Blue', value: 'blue' },\r\n    { label: 'Indigo', value: 'indigo' },\r\n    { label: 'Violet', value: 'violet' },\r\n    { label: 'Purple', value: 'purple' },\r\n    { label: 'Fuchsia', value: 'fuchsia' },\r\n    { label: 'Pink', value: 'pink' },\r\n    { label: 'Rose', value: 'rose' },\r\n]\r\n\r\nconst colorLevelList = [\r\n    { label: '400', value: 400 },\r\n    { label: '500', value: 500 },\r\n    { label: '600', value: 600 },\r\n    { label: '700', value: 700 },\r\n    { label: '800', value: 800 },\r\n    { label: '900', value: 900 },\r\n]\r\n\r\nconst ColorBadge = ({ className, themeColor }) => {\r\n    const primaryColorLevel = useSelector(\r\n        (state) => state.theme.primaryColorLevel\r\n    )\r\n\r\n    return (\r\n        <Badge\r\n            className={className}\r\n            innerClass={classNames(`bg-${themeColor}-${primaryColorLevel}`)}\r\n        />\r\n    )\r\n}\r\n\r\nconst CustomSelectOption = ({ innerProps, label, value, isSelected }) => {\r\n    return (\r\n        <div\r\n            className={`flex items-center justify-between p-2 ${\r\n                isSelected\r\n                    ? 'bg-gray-100 dark:bg-gray-500'\r\n                    : 'hover:bg-gray-50 dark:hover:bg-gray-600'\r\n            }`}\r\n            {...innerProps}\r\n        >\r\n            <div className=\"flex items-center gap-2\">\r\n                <ColorBadge themeColor={value} />\r\n                <span>{label}</span>\r\n            </div>\r\n            {isSelected && <HiCheck className=\"text-emerald-500 text-xl\" />}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CustomControl = ({ children, ...props }) => {\r\n    const selected = props.getValue()[0]\r\n\r\n    const themeColor = useSelector((state) => state.theme.themeColor)\r\n\r\n    return (\r\n        <Control {...props}>\r\n            {selected && (\r\n                <ColorBadge\r\n                    themeColor={themeColor}\r\n                    className=\"ltr:ml-4 rtl:mr-4\"\r\n                />\r\n            )}\r\n            {children}\r\n        </Control>\r\n    )\r\n}\r\n\r\nconst ThemeSwitcher = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const themeColor = useSelector((state) => state.theme.themeColor)\r\n    const primaryColorLevel = useSelector(\r\n        (state) => state.theme.primaryColorLevel\r\n    )\r\n\r\n    const onThemeColorChange = ({ value }) => {\r\n        dispatch(setThemeColor(value))\r\n    }\r\n\r\n    const onThemeColorLevelChange = ({ value }) => {\r\n        dispatch(setThemeColorLevel(value))\r\n    }\r\n\r\n    return (\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n            <Select\r\n                size=\"sm\"\r\n                options={colorList}\r\n                components={{\r\n                    Option: CustomSelectOption,\r\n                    Control: CustomControl,\r\n                }}\r\n                value={colorList.filter((color) => color.value === themeColor)}\r\n                onChange={onThemeColorChange}\r\n            />\r\n            <Select\r\n                size=\"sm\"\r\n                options={colorLevelList}\r\n                value={colorLevelList.filter(\r\n                    (color) => color.value === primaryColorLevel\r\n                )}\r\n                onChange={onThemeColorLevelChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThemeSwitcher\r\n","import React from 'react'\r\nimport { InputGroup, Button } from 'components/ui'\r\nimport useDirection from 'utils/hooks/useDirection'\r\nimport { THEME_ENUM } from 'constants/theme.constant'\r\n\r\nconst dirList = [\r\n    { value: THEME_ENUM.DIR_LTR, label: 'LTR' },\r\n    { value: THEME_ENUM.DIR_RTL, label: 'RTL' },\r\n]\r\n\r\nconst DirectionSwitcher = ({ callBackClose }) => {\r\n    const [direction, updateDirection] = useDirection()\r\n\r\n    const onDirChange = (val) => {\r\n        updateDirection(val)\r\n        callBackClose?.()\r\n    }\r\n\r\n    return (\r\n        <InputGroup size=\"sm\">\r\n            {dirList.map((dir) => (\r\n                <Button\r\n                    key={dir.value}\r\n                    active={direction === dir.value}\r\n                    onClick={() => onDirChange(dir.value)}\r\n                >\r\n                    {dir.label}\r\n                </Button>\r\n            ))}\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default DirectionSwitcher\r\n","import React from 'react'\r\nimport { Radio } from 'components/ui'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setNavMode } from 'store/theme/themeSlice'\r\nimport { NAV_MODE_THEMED } from 'constants/theme.constant'\r\n\r\nconst NavModeSwitcher = () => {\r\n    const navMode = useSelector((state) => state.theme.navMode)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSetNavMode = (val) => {\r\n        dispatch(setNavMode(val))\r\n    }\r\n\r\n    return (\r\n        <Radio.Group\r\n            value={navMode === NAV_MODE_THEMED ? NAV_MODE_THEMED : 'default'}\r\n            onChange={(val) => onSetNavMode(val)}\r\n        >\r\n            <Radio value=\"default\">Default</Radio>\r\n            <Radio value={NAV_MODE_THEMED}>Themed</Radio>\r\n        </Radio.Group>\r\n    )\r\n}\r\n\r\nexport default NavModeSwitcher\r\n","import React from 'react'\r\nimport { Button, toast, Notification } from 'components/ui'\r\nimport { themeConfig } from 'configs/theme.config'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst CopyButton = () => {\r\n    const theme = useSelector((state) => state.theme)\r\n\r\n    const handleCopy = () => {\r\n        const config = {\r\n            ...themeConfig,\r\n            ...theme,\r\n            layout: {\r\n                type: theme.layout.type,\r\n                sideNavCollapse: theme.layout.sideNavCollapse,\r\n            },\r\n            panelExpand: false,\r\n        }\r\n\r\n        navigator.clipboard.writeText(JSON.stringify(config, null, 2))\r\n\r\n        toast.push(\r\n            <Notification title=\"Copy Success\" type=\"success\">\r\n                Please replace themeConfig in 'src/configs/themeConfig.js'\r\n            </Notification>,\r\n            {\r\n                placement: 'top-center',\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Button block variant=\"solid\" onClick={handleCopy}>\r\n            Copy config\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default CopyButton\r\n","import React from 'react'\r\nimport ModeSwitcher from './ModeSwitcher'\r\nimport LayoutSwitcher from './LayoutSwitcher'\r\nimport ThemeSwitcher from './ThemeSwitcher'\r\nimport DirectionSwitcher from './DirectionSwitcher'\r\nimport NavModeSwitcher from './NavModeSwitcher'\r\nimport CopyButton from './CopyButton'\r\n\r\nconst ThemeConfigurator = ({ callBackClose }) => {\r\n    return (\r\n        <div className=\"flex flex-col h-full justify-between\">\r\n            <div className=\"flex flex-col gap-y-10 mb-6\">\r\n                <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                        <h6>Dark Mode</h6>\r\n                        <span>Switch theme to dark mode</span>\r\n                    </div>\r\n                    <ModeSwitcher />\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                        <h6>Direction</h6>\r\n                        <span>Select a direction</span>\r\n                    </div>\r\n                    <DirectionSwitcher callBackClose={callBackClose} />\r\n                </div>\r\n                <div>\r\n                    <h6 className=\"mb-3\">Nav Mode</h6>\r\n                    <NavModeSwitcher />\r\n                </div>\r\n                <div>\r\n                    <h6 className=\"mb-3\">Theme</h6>\r\n                    <ThemeSwitcher />\r\n                </div>\r\n                <div>\r\n                    <h6 className=\"mb-3\">Layout</h6>\r\n                    <LayoutSwitcher />\r\n                </div>\r\n            </div>\r\n            <CopyButton />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThemeConfigurator\r\n","import React from 'react'\r\nimport ThemeConfigurator from 'components/template/ThemeConfigurator'\r\n\r\nconst SidePanelContent = (props) => {\r\n    return <ThemeConfigurator {...props} />\r\n}\r\n\r\nexport default SidePanelContent\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Drawer } from 'components/ui'\r\nimport { HiOutlineCog } from 'react-icons/hi'\r\nimport SidePanelContent from './SidePanelContent'\r\nimport withHeaderItem from 'utils/hoc/withHeaderItem'\r\nimport { setPanelExpand } from 'store/theme/themeSlice'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nexport const SidePanel = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const { className, ...rest } = props\r\n\r\n    const panelExpand = useSelector((state) => state.theme.panelExpand)\r\n\r\n    const direction = useSelector((state) => state.theme.direction)\r\n\r\n    const openPanel = () => {\r\n        dispatch(setPanelExpand(true))\r\n    }\r\n\r\n    const closePanel = () => {\r\n        dispatch(setPanelExpand(false))\r\n        const bodyClassList = document.body.classList\r\n        if (bodyClassList.contains('drawer-lock-scroll')) {\r\n            bodyClassList.remove('drawer-lock-scroll', 'drawer-open')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={classNames('text-2xl', className)}\r\n                onClick={openPanel}\r\n                {...rest}\r\n            >\r\n                <HiOutlineCog />\r\n            </div>\r\n            <Drawer\r\n                title=\"Theme Config\"\r\n                isOpen={panelExpand}\r\n                onClose={closePanel}\r\n                onRequestClose={closePanel}\r\n                placement={direction === 'rtl' ? 'left' : 'right'}\r\n                width={375}\r\n            >\r\n                <SidePanelContent callBackClose={closePanel} />\r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withHeaderItem(SidePanel)\r\n","import React from 'react'\r\nimport { Avatar, Dropdown } from 'components/ui'\r\nimport withHeaderItem from 'utils/hoc/withHeaderItem'\r\nimport useAuth from 'utils/hooks/useAuth'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport classNames from 'classnames'\r\nimport { HiOutlineUser, HiOutlineLogout } from 'react-icons/hi'\r\nimport appConfig from 'configs/app.config';\r\n\r\nconst dropdownItemList = [\r\n    {\r\n        label: 'Profile',\r\n        path: 'profile',\r\n        icon: <HiOutlineUser />,\r\n    },\r\n]\r\n\r\nexport const UserDropdown = ({ className }) => {\r\n    const { usernameOrEmail, password, rememberMe, email, avatar, user_name,role_name,profile_img_url } =\r\n        useSelector((state) => state.auth.user)\r\n\r\n        \r\n    const { signOut } = useAuth()\r\n\r\n    const UserAvatar = (\r\n        <div className={classNames(className, 'flex items-center gap-2')}>\r\n            <Avatar shape=\"circle\" src={`${appConfig.apiPrefix}/media/uniqid/${profile_img_url}`} />\r\n            <div className=\"hidden md:block\">\r\n                <div className=\"text-xs capitalize text-gray-900 dark:text-gray-100\">\r\n                    {user_name}\r\n                </div>\r\n                <div className=\"font-bold text-gray-900 dark:text-gray-100\">\r\n                    {role_name}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <Dropdown\r\n                menuStyle={{ minWidth: 240 }}\r\n                renderTitle={UserAvatar}\r\n                placement=\"bottom-end\"\r\n            >\r\n                <Dropdown.Item variant=\"header\">\r\n                    <div className=\"py-2 px-3 flex items-center gap-2\">\r\n                        <Avatar\r\n                            shape=\"circle\"\r\n                            src={'/img/avatars/thumb100.jpg'}\r\n                        />\r\n\r\n                        <div>\r\n                            <div className=\"font-bold text-gray-900 dark:text-gray-100\">\r\n                                {user_name}\r\n                            </div>\r\n                            <div className=\"text-xs\">{email}</div>\r\n                        </div>\r\n                    </div>\r\n                </Dropdown.Item>\r\n                <Dropdown.Item variant=\"divider\" />\r\n                <div style={{ marginTop: 8 }}></div>\r\n                {dropdownItemList.map((item) => (\r\n                    <Dropdown.Item\r\n                        eventKey={item.label}\r\n                        key={item.label}\r\n                        className=\"mb-1\"\r\n                    >\r\n                        <Link\r\n                            className=\"flex gap-2 items-center\"\r\n                            to={item.path}\r\n                        >\r\n                            <span className=\"text-xl opacity-50 text-[#004D99]\">\r\n                                {item.icon}\r\n                            </span>\r\n                            <span\r\n                                style={{\r\n                                    \r\n                                    fontStyle: 'normal',\r\n                                    fontSize: 400,\r\n                                    fontSize: '15px',\r\n                                    color: '#212121',\r\n                                }}\r\n                            >\r\n                                {item.label}\r\n                            </span>\r\n                        </Link>\r\n                    </Dropdown.Item>\r\n                ))}\r\n                <Dropdown.Item variant=\"divider\" />\r\n                <Dropdown.Item\r\n                    onClick={signOut}\r\n                    eventKey=\"Sign Out\"\r\n                    className=\"gap-2\"\r\n                >\r\n                    <span className=\"text-xl opacity-50 text-[#004D99]\">\r\n                        <HiOutlineLogout />\r\n                    </span>\r\n                    <span\r\n                        style={{\r\n                            \r\n                            fontStyle: 'normal',\r\n                            fontSize: 400,\r\n                            fontSize: '15px',\r\n                            color: '#212121',\r\n                        }}\r\n                    >\r\n                        Sign Out\r\n                    </span>\r\n                </Dropdown.Item>\r\n            </Dropdown>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withHeaderItem(UserDropdown)\r\n","import React from 'react'\r\nimport {\r\n    HiOutlineColorSwatch,\r\n    HiOutlineDesktopComputer,\r\n    HiOutlineTemplate,\r\n    HiOutlineViewGridAdd,\r\n    HiOutlineHome,\r\n} from 'react-icons/hi'\r\n\r\nimport { MdOutlineDashboard, MdOutlineOtherHouses, MdOutlineListAlt } from 'react-icons/md';\r\nimport { FaRegUser } from 'react-icons/fa';\r\nimport { BiCube } from 'react-icons/bi';\r\nimport { BsPercent } from 'react-icons/bs';\r\nimport { RiHandCoinLine } from 'react-icons/ri';\r\nimport { ImFilesEmpty } from 'react-icons/im';\r\nimport { FiSettings ,FiDatabase} from 'react-icons/fi';\r\nconst navigationIcon = {\r\n    // home: <HiOutlineHome />,\r\n    // singleMenu: <HiOutlineViewGridAdd />,\r\n    // collapseMenu: <HiOutlineTemplate />,\r\n    // groupSingleMenu: <HiOutlineDesktopComputer />,\r\n    // groupCollapseMenu: <HiOutlineColorSwatch />,\r\n\r\n    dashboard: <MdOutlineDashboard />,\r\n    user: <FaRegUser />,\r\n    catalouge: <BiCube />,\r\n    wareHouse: <MdOutlineOtherHouses />,\r\n    orders: <MdOutlineListAlt />,\r\n    offers: <BsPercent />,\r\n    billing: <RiHandCoinLine />,\r\n    reports: <ImFilesEmpty />,\r\n    settings: <FiSettings />,\r\n    masterData: <FiDatabase />\r\n\r\n}\r\n\r\nexport default navigationIcon","import ApiService from './ApiService'\r\n\r\nexport async function apiGetNotificationCount() {\r\n    return ApiService.fetchData({\r\n        url: '/notification/count',\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetNotificationList() {\r\n    return ApiService.fetchData({\r\n        url: '/notification/list',\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetSearchResult(data) {\r\n    return ApiService.fetchData({\r\n        url: '/search/query',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\nconst withHeaderItem = (Component) => (props) => {\r\n    const { className, hoverable = true } = props\r\n\r\n    return (\r\n        <Component\r\n            {...props}\r\n            className={classNames(\r\n                'header-action-item',\r\n                hoverable && 'header-action-item-hoverable',\r\n                className\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default withHeaderItem\r\n","import { useEffect, useState } from 'react'\r\nimport { theme } from 'twin.macro'\r\n\r\nconst twBreakpoint = theme`screens`\r\n\r\nconst breakpointInt = (str = '') => {\r\n    return parseInt(str.replace('px', ''))\r\n}\r\n\r\nconst breakpoint = {\r\n    '2xl': breakpointInt(twBreakpoint['2xl']), // 1536\r\n    xl: breakpointInt(twBreakpoint.xl), // 1280\r\n    lg: breakpointInt(twBreakpoint.lg), // 1024\r\n    md: breakpointInt(twBreakpoint.md), // 768\r\n    sm: breakpointInt(twBreakpoint.sm), // 640\r\n    xs: breakpointInt(twBreakpoint.xs), // 576\r\n}\r\n\r\nconst useResponsive = () => {\r\n    const getAllSizes = (comparator = 'smaller') => {\r\n        const currentWindowWidth = window.innerWidth\r\n        return Object.fromEntries(\r\n            Object.entries(breakpoint).map(([key, value]) => [\r\n                key,\r\n                comparator === 'larger'\r\n                    ? currentWindowWidth > value\r\n                    : currentWindowWidth < value,\r\n            ])\r\n        )\r\n    }\r\n\r\n    const getResponsiveState = () => {\r\n        const currentWindowWidth = window.innerWidth\r\n        return {\r\n            windowWidth: currentWindowWidth,\r\n            larger: getAllSizes('larger'),\r\n            smaller: getAllSizes('smaller'),\r\n        }\r\n    }\r\n\r\n    const [responsive, setResponsive] = useState(getResponsiveState())\r\n\r\n    const resizeHandler = () => {\r\n        const responsiveState = getResponsiveState()\r\n        setResponsive(responsiveState)\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', resizeHandler)\r\n        return () => window.removeEventListener('resize', resizeHandler)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [responsive.windowWidth])\r\n\r\n    return responsive\r\n}\r\n\r\nexport default useResponsive\r\n"],"names":["props","headerStart","headerEnd","headerMiddle","className","container","classNames","HEADER_HEIGHT_CLASS","languageList","label","value","flag","withHeaderItem","useState","loading","setLoading","locale","useSelector","state","currentLang","dispatch","useDispatch","selectLangFlag","useMemo","find","lang","selectedLanguage","size","shape","src","renderTitle","placement","map","eventKey","onClick","formattedLang","replace","g","toUpperCase","dispatchLang","i18n","setLang","dateLocales","then","dayjs","catch","_","onLanguageSelect","Logo","type","mode","gutter","imgClass","style","logoWidth","largeLogo","smallLogo","themeLargeLogo","themeSmallLogo","width","appConfig","alt","APP_NAME","defaultProps","VerticalMenuContent","lazy","MobileNavToggle","NavToggle","isOpen","setIsOpen","onDrawerClose","e","themeColor","theme","primaryColorLevel","navMode","direction","currentRouteKey","base","common","sideNavCollapse","layout","userAuthority","auth","user","authority","smaller","useResponsive","md","toggled","title","onClose","onRequestClose","bodyClass","NAV_MODE_THEMED","NAV_MODE_TRANSPARENT","DIR_RTL","Suspense","fallback","collapsed","navigationTree","navigationConfig","routeKey","onMenuItemClick","NotificationToggle","dot","badgeStyle","top","right","notificationList","setNotificationList","unreadNotification","setUnreadNotification","setNoResult","getNotificationCount","useThemeClass","bgTheme","larger","useCallback","apiGetNotificationCount","data","count","useEffect","length","apiGetNotificationList","resp","list","item","readed","id","some","recommendedSearch","url","icon","category","categoryTitle","searchDialogOpen","setSearchDialogOpen","setSearchResult","noResult","inputRef","useRef","debounce","query","apiGetSearchResult","respond","timeout","setTimeout","current","focus","clearTimeout","useDarkMode","isDark","setIsDark","onSwitchChange","checked","defaultChecked","onChange","layouts","LAYOUT_TYPE_CLASSIC","srcDark","LAYOUT_TYPE_MODERN","LAYOUT_TYPE_STACKED_SIDE","LAYOUT_TYPE_SIMPLE","LAYOUT_TYPE_DECKED","LAYOUT_TYPE_BLANK","textTheme","val","setLayout","onLayoutSelect","ref","active","onSegmentItemClick","disabled","hoverable","defaultGutter","customCheck","darkModeSrc","Control","components","colorList","colorLevelList","ColorBadge","innerClass","CustomSelectOption","innerProps","isSelected","CustomControl","children","selected","getValue","options","Option","filter","color","setThemeColor","setThemeColorLevel","dirList","THEME_ENUM","callBackClose","useDirection","updateDirection","dir","setNavMode","onSetNavMode","block","variant","config","themeConfig","panelExpand","navigator","clipboard","writeText","JSON","stringify","toast","rest","closePanel","setPanelExpand","bodyClassList","document","body","classList","contains","remove","dropdownItemList","path","email","usernameOrEmail","password","rememberMe","user_name","avatar","role_name","profile_img_url","signOut","useAuth","UserAvatar","menuStyle","minWidth","marginTop","to","fontStyle","fontSize","navigationIcon","dashboard","catalouge","wareHouse","orders","offers","billing","reports","settings","masterData","ApiService","method","Component","twBreakpoint","breakpointInt","str","parseInt","breakpoint","xl","lg","sm","xs","getAllSizes","comparator","currentWindowWidth","window","innerWidth","Object","fromEntries","entries","key","getResponsiveState","windowWidth","responsive","setResponsive","resizeHandler","responsiveState","addEventListener","removeEventListener"],"sourceRoot":""}