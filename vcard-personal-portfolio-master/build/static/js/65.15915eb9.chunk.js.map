{"version":3,"file":"static/js/65.15915eb9.chunk.js","mappings":"qMAAO,IAAMA,EAAW,CACpB,CAAEC,GAAI,EAAGC,MAAO,sBAChB,CAAED,GAAI,EAAGC,MAAO,sBAChB,CAAED,GAAI,EAAGC,MAAO,+BAChB,CAAED,GAAI,EAAGC,MAAO,0CAChB,CAAED,GAAI,EAAGC,MAAO,uBAChB,CAAED,GAAI,EAAGC,MAAO,2CAChB,CAAED,GAAI,EAAGC,MAAO,2CAChB,CAAED,GAAI,EAAGC,MAAO,+BAChB,CAAED,GAAI,EAAGC,MAAO,0CAChB,CAAED,GAAI,GAAIC,MAAO,mDACjB,CAAED,GAAI,GAAIC,MAAO,4BACjB,CAAED,GAAI,GAAIC,MAAO,+CACjB,CAAED,GAAI,GAAIC,MAAO,0CACjB,CAAED,GAAI,GAAIC,MAAO,8BACjB,CAAED,GAAI,GAAIC,MAAO,uBACjB,CAAED,GAAI,GAAIC,MAAO,wBACjB,CAAED,GAAI,GAAIC,MAAO,sCACjB,CAAED,GAAI,GAAIC,MAAO,sBACjB,CAAED,GAAI,GAAIC,MAAO,oDACjB,CAAED,GAAI,GAAIC,MAAO,wBACjB,CAAED,GAAI,GAAIC,MAAO,4BACjB,CAAED,GAAI,GAAIC,MAAO,wBACjB,CAAED,GAAI,GAAIC,MAAO,4BACjB,CAAED,GAAI,GAAIC,MAAO,kCACjB,CAAED,GAAI,GAAIC,MAAO,yBACjB,CAAED,GAAI,GAAIC,MAAO,0BACjB,CAAED,GAAI,GAAIC,MAAO,wBACjB,CAAED,GAAI,GAAIC,MAAO,6CACjB,CAAED,GAAI,GAAIC,MAAO,sBACjB,CAAED,GAAI,GAAIC,MAAO,8BACjB,CAAED,GAAI,GAAIC,MAAO,oBACjB,CAAED,GAAI,GAAIC,MAAO,oCACjB,CAAED,GAAI,GAAIC,MAAO,2CACjB,CAAED,GAAI,GAAIC,MAAO,6BACjB,CACID,GAAI,GACJC,MAAO,gEAEX,CACID,GAAI,GACJC,MAAO,iEAEX,CAAED,GAAI,GAAIC,MAAO,mDACjB,CAAED,GAAI,GAAIC,MAAO,gDACjB,CAAED,GAAI,GAAIC,MAAO,mCACjB,CAAED,GAAI,GAAIC,MAAO,wBACjB,CAAED,GAAI,GAAIC,MAAO,qBACjB,CAAED,GAAI,GAAIC,MAAO,iCACjB,CAAED,GAAI,GAAIC,MAAO,sBACjB,CAAED,GAAI,GAAIC,MAAO,qBACjB,CAAED,GAAI,GAAIC,MAAO,wBACjB,CAAED,GAAI,GAAIC,MAAO,yBACjB,CAAED,GAAI,GAAIC,MAAO,gCACjB,CACID,GAAI,GACJC,MAAO,6DAEX,CAAED,GAAI,GAAIC,MAAO,wBACjB,CAAED,GAAI,GAAIC,MAAO,yBACjB,CAAED,GAAI,GAAIC,MAAO,mCACjB,CAAED,GAAI,GAAIC,MAAO,uBACjB,CAAED,GAAI,GAAIC,MAAO,uBACjB,CAAED,GAAI,GAAIC,MAAO,8BACjB,CAAED,GAAI,GAAIC,MAAO,qBACjB,CAAED,GAAI,GAAIC,MAAO,yDACjB,CAAED,GAAI,GAAIC,MAAO,uBACjB,CAAED,GAAI,GAAIC,MAAO,sBACjB,CAAED,GAAI,GAAIC,MAAO,iCACjB,CAAED,GAAI,GAAIC,MAAO,oBACjB,CAAED,GAAI,GAAIC,MAAO,uCACjB,CAAED,GAAI,GAAIC,MAAO,0BACjB,CAAED,GAAI,GAAIC,MAAO,uBACjB,CAAED,GAAI,GAAIC,MAAO,uBACjB,CAAED,GAAI,GAAIC,MAAO,qBACjB,CAAED,GAAI,GAAIC,MAAO,kCACjB,CAAED,GAAI,GAAIC,MAAO,oCACjB,CAAED,GAAI,GAAIC,MAAO,kCACjB,CAAED,GAAI,GAAIC,MAAO,mDACjB,CAAED,GAAI,GAAIC,MAAO,mCACjB,CAAED,GAAI,GAAIC,MAAO,yBACjB,CAAED,GAAI,GAAIC,MAAO,sBACjB,CAAED,GAAI,GAAIC,MAAO,qBACjB,CAAED,GAAI,GAAIC,MAAO,mCACjB,CAAED,GAAI,GAAIC,MAAO,gCACjB,CAAED,GAAI,GAAIC,MAAO,uCACjB,CAAED,GAAI,GAAIC,MAAO,mCACjB,CAAED,GAAI,GAAIC,MAAO,qDACjB,CAAED,GAAI,GAAIC,MAAO,+BACjB,CAAED,GAAI,GAAIC,MAAO,uCACjB,CAAED,GAAI,GAAIC,MAAO,qBACjB,CAAED,GAAI,GAAIC,MAAO,sBACjB,CAAED,GAAI,GAAIC,MAAO,2BACjB,CAAED,GAAI,GAAIC,MAAO,qCACjB,CAAED,GAAI,GAAIC,MAAO,qBACjB,CAAED,GAAI,GAAIC,MAAO,+BACjB,CAAED,GAAI,GAAIC,MAAO,wBACjB,CAAED,GAAI,GAAIC,MAAO,sBACjB,CAAED,GAAI,GAAIC,MAAO,wBACjB,CAAED,GAAI,GAAIC,MAAO,2CACjB,CAAED,GAAI,GAAIC,MAAO,kCACjB,CAAED,GAAI,GAAIC,MAAO,sBACjB,CAAED,GAAI,GAAIC,MAAO,uBACjB,CAAED,GAAI,GAAIC,MAAO,4CACjB,CAAED,GAAI,GAAIC,MAAO,mCACjB,CAAED,GAAI,GAAIC,MAAO,0CACjB,CAAED,GAAI,GAAIC,MAAO,yDACjB,CAAED,GAAI,GAAIC,MAAO,oCACjB,CAAED,GAAI,GAAIC,MAAO,6CACjB,CAAED,GAAI,IAAKC,MAAO,oBAClB,CAAED,GAAI,IAAKC,MAAO,8CAClB,CAAED,GAAI,IAAKC,MAAO,0BAClB,CAAED,GAAI,IAAKC,MAAO,qBAClB,CAAED,GAAI,IAAKC,MAAO,iC,sVC9Df,SAAeC,EAAkB,GAAD,+BAQtC,8CARM,WAAiCC,GAAM,+FACnCC,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,yBAGJC,OAAQ,MACRH,OAAAA,KACF,4CACL,sBAEM,SAAeI,EAAqB,GAAD,+BAMzC,8CANM,WAAoCC,GAAI,+FACpCJ,EAAAA,EAAAA,UAAqB,CACxBC,IAAK,uBACLC,OAAQ,SACRE,KAAAA,KACF,4CACL,sBAUM,SAAeC,EAAkB,GAAD,+BAiBtC,8CAjBM,WAAiCD,GAAI,uGAEjBJ,EAAAA,EAAAA,UAAqB,CACpCC,IAAK,yBACLC,OAAQ,OACRE,KAAAA,IACF,OAJQ,OAAJE,EAAI,yBAKH,CACHC,OAAQ,UACRH,KAAME,IACT,yDAEM,CACHC,OAAQ,SACRC,SAAS,4BAAgB,QAAhB,OAAQC,gBAAQ,WAAhB,IAAkBL,OAAQ,KAAOM,aAC7C,0DAER,sBAEM,SAAeC,EAAkB,GAAD,+BAiBtC,8CAjBM,WAAiCP,GAAI,uGAEjBJ,EAAAA,EAAAA,UAAqB,CACpCC,IAAK,yBACLC,OAAQ,MACRE,KAAAA,IACF,OAJQ,OAAJE,EAAI,yBAKH,CACHC,OAAQ,UACRH,KAAME,IACT,yDAEM,CACHC,OAAQ,SACRC,SAAS,4BAAgB,QAAhB,OAAQC,gBAAQ,WAAhB,IAAkBL,OAAQ,KAAOM,aAC7C,0DAER,sBAEM,SAAeE,EAAqB,EAAD,kCAKzC,8CALM,WAAoChB,EAAIW,GAAM,+FAC1CP,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,6BAAD,OAA+BL,EAAE,uBAAeW,GACnDL,OAAQ,WACV,4CACL,sBAEM,SAAeW,EAAe,GAAD,+BAKnC,8CALM,WAA8BT,GAAI,+FAC9BJ,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,sCAAD,OAAwCG,EAAKU,cAChDZ,OAAQ,SACV,4CACL,sBAEM,SAAea,EAAoB,GAAD,+BAKxC,8CALM,WAAmCX,GAAI,+FACnCJ,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,mCAAD,OAAqCG,EAAKU,cAC7CZ,OAAQ,SACV,4CACL,sBAEM,SAAec,EAAiB,GAAD,+BAMrC,8CANM,WAAgCZ,GAAI,+FAChCJ,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,yCAAD,OAA2CG,EAAKa,uBAEnDf,OAAQ,SACV,4CACL,sBAEM,SAAegB,EAAsB,GAAD,+BAK1C,8CALM,WAAqCd,GAAI,+FACrCJ,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,kCAAD,OAAoCG,EAAKe,QAC5CjB,OAAQ,SACV,4CACL,sBAEM,SAAekB,EAAe,EAAD,oCAqBnC,8CArBM,WAA8BC,EAAKC,EAAMC,GAAI,gFAGd,OAHc,UAEtCC,EAAW,IAAIC,UACZC,OAAO,OAAQL,GAAM,SACXrB,EAAAA,EAAAA,UAAqB,CACpCC,IAAI,UAAD,OAAYqB,EAAI,YAAIC,GACvBrB,OAAQ,OACRE,KAAMoB,EACNG,QAAQ,CAAC,eAAgB,yBAC3B,OALQ,OAAJrB,EAAI,yBAMH,CACHC,OAAQ,UACRH,KAAME,EAAKF,OACd,yDAGM,CACHG,OAAQ,SACRC,SAAS,4BAAgB,QAAhB,OAAQC,gBAAQ,WAAhB,IAAkBL,OAAQ,KAAOM,aAC7C,0DAER,sBAEM,SAAekB,EAAsB,GAAD,+BAK1C,8CALM,WAAqCxB,GAAI,+FACrCJ,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,iEAAD,OAAmEG,GACtEF,OAAQ,SACV,4CACL,sB,8UCjIM,SAAeJ,EAAkB,GAAD,+BAQtC,8CARM,WAAiCC,GAAM,+FACnCC,EAAAA,EAAAA,UAAqB,CAGxBC,IAAI,mBACJC,OAAQ,MACRH,OAAAA,KACF,4CACL,sBAEM,SAAeI,EAAqB,GAAD,+BAMzC,8CANM,WAAoCC,GAAI,+FACpCJ,EAAAA,EAAAA,UAAqB,CACxBC,IAAK,+BACLC,OAAQ,SACRE,KAAAA,KACF,4CACL,sBAUM,SAAeyB,EAAiB,GAAD,+BAiBrC,8CAjBM,WAAgCzB,GAAI,uGAEhBJ,EAAAA,EAAAA,UAAqB,CACpCC,IAAK,mBACLC,OAAQ,OACRE,KAAAA,IACF,OAJQ,OAAJE,EAAI,yBAKH,CACHC,OAAQ,UACRH,KAAME,IACT,yDAEM,CACHC,OAAQ,SACRC,SAAS,4BAAgB,QAAhB,OAAQC,gBAAQ,WAAhB,IAAkBL,OAAQ,KAAOM,aAC7C,0DAER,sBAEM,SAAeoB,EAAiB,GAAD,+BAkBrC,8CAlBM,WAAgC1B,GAAI,uGAEhBJ,EAAAA,EAAAA,UAAqB,CACpCC,IAAK,mBACLC,OAAQ,MACRE,KAAAA,IACF,OAJQ,OAAJE,EAAI,yBAMH,CACHC,OAAQ,UACRH,KAAME,IACT,yDAEM,CACHC,OAAQ,SACRC,SAAS,4BAAgB,QAAhB,OAAQC,gBAAQ,WAAhB,IAAkBL,OAAQ,KAAOM,aAC7C,0DAER,sBAEM,SAAeqB,EAA0B,EAAD,kCAK9C,8CALM,WAAyCnC,EAAIW,GAAM,+FAC/CP,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,6BAAD,OAA+BL,EAAE,uBAAeW,GACnDL,OAAQ,WACV,4CACL,sBAEM,SAAe8B,EAAsB,GAAD,+BAK1C,8CALM,WAAqC5B,GAAI,+FACrCJ,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,sCAAD,OAAwCG,EAAKU,cAChDZ,OAAQ,SACV,4CACL,sBAEM,SAAe+B,EAA2B,GAAD,+BAK/C,8CALM,WAA0C7B,GAAI,+FAC1CJ,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,mCAAD,OAAqCG,EAAKU,cAC7CZ,OAAQ,SACV,4CACL,sBAEM,SAAegC,EAA0B,GAAD,+BAK9C,8CALM,WAAyC9B,GAAI,+FACzCJ,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,qDAAD,OAAuDG,EAAKU,aAAY,YAC3EZ,OAAQ,SACV,4CACL,sBAEM,SAAec,EAAiB,GAAD,+BAMrC,8CANM,WAAgCZ,GAAI,+FAChCJ,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,yCAAD,OAA2CG,EAAKa,uBAEnDf,OAAQ,SACV,4CACL,sBAEM,SAAe0B,EAAsB,GAAD,+BAK1C,8CALM,WAAqCxB,GAAI,+FACrCJ,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,iEAAD,OAAmEG,GACtEF,OAAQ,SACV,4CACL,sBAEM,SAAekB,EAAe,EAAD,oCAoBnC,8CApBM,WAA8BC,EAAKC,EAAMC,GAAI,gFAGd,OAHc,UAEtCC,EAAW,IAAIC,UACZC,OAAO,OAAQL,GAAM,SACXrB,EAAAA,EAAAA,UAAqB,CACpCC,IAAI,UAAD,OAAYqB,EAAI,YAAIC,GACvBrB,OAAQ,OACRE,KAAMoB,EACNG,QAAQ,CAAC,eAAgB,yBAC3B,OALQ,OAAJrB,EAAI,yBAMH,CACHC,OAAQ,UACRH,KAAME,EAAKF,OACd,yDAEM,CACHG,OAAQ,SACRC,SAAS,4BAAgB,QAAhB,OAAQC,gBAAQ,WAAhB,IAAkBL,OAAQ,KAAOM,aAC7C,0DAER,sB,kDChKD,IAhBA,WAA6C,IAAlByB,EAAQ,uDAAG,IAClC,GAA8BC,EAAAA,EAAAA,UAAS,IAAG,eAAnC5B,EAAO,KAAE6B,EAAU,KAY1B,OAVAC,EAAAA,EAAAA,YAAU,WACN,GAAI9B,EAAS,CACT,IAAI+B,EAAUC,YAAW,kBAAMH,EAAW,GAAG,GAAEF,GAC/C,OAAO,WACHM,aAAaF,EACjB,CACJ,CAEJ,GAAG,CAAC/B,IAEG,CAACA,EAAS6B,EACrB,C,mQCyBMK,EAAc,CAEhB,CAAEC,MAAO,mBAAoB9C,MAAO,oBACpC,CAAE8C,MAAO,oBAAqB9C,MAAO,qBACrC,CAAE8C,MAAO,0BAA2B9C,MAAO,4BAGzC+C,EAAW,CACb,CAAED,MAAO,UAAW9C,MAAO,GAC3B,CAAE8C,MAAO,UAAW9C,MAAO,GAC3B,CAAE8C,MAAO,SAAU9C,MAAO,GAC1B,CAAE8C,MAAO,YAAa9C,MAAO,IA2B3BgD,EAAkB,CACpB,CAAEF,MAAO,gBAAiB9C,MAAO,OACjC,CAAE8C,MAAO,gBAAiB9C,MAAO,QAkB/BiD,EAAsCC,EAAAA,KAAaC,MAAM,CAE3DC,QAASF,EAAAA,KAAaG,IAAI,EAAG,uCAAuCC,IAAI,KAAKC,SAAS,sCAAsCC,WAC5HC,SAAUP,EAAAA,KAAaK,SAAS,0BAA0BC,WAC1DE,YAAaR,EAAAA,KAAaG,IAAI,EAAG,sCAAsCC,IAAI,KAAKC,SAAS,6BAA6BC,WACtHG,YAAaT,EAAAA,KAAaK,SAAS,iCAAiCC,WACpEI,SAAUV,EAAAA,KAAaG,IAAI,GAAGC,IAAI,IAAIC,SAAS,uBAAuBC,WACrEX,YAAcK,EAAAA,KAAaK,SAAS,8CAA8CC,WACnFK,YAAaX,EAAAA,KAAaK,SAAS,2BAA2BC,WAC9DM,YAAaZ,EAAAA,KAAaK,SAAS,0BAA0BC,WAC7DO,QAASb,EAAAA,KAAaK,SAAS,0BAA0BC,WACzDQ,UAAWd,EAAAA,KAAaK,SAAS,qCAAqCC,aA4a1E,EAva2B,SAAH,GAAc,EAARS,SAAiC,IAAvBC,EAAK,EAALA,MAAUC,GAAK,YAE7CC,GAAeC,EAAAA,EAAAA,KAAY,SAACC,GAAK,eAAsB,QAAtB,EAAKA,EAAMC,mBAAW,OAAM,QAAN,EAAjB,EAAmBhE,YAAI,WAAN,EAAjB,EAAyB6D,YAAY,IAC3EI,GAAoBH,EAAAA,EAAAA,KAAY,SAACC,GAAK,eAAsB,QAAtB,EAAKA,EAAMC,mBAAW,OAAM,QAAN,EAAjB,EAAmBhE,YAAI,WAAN,EAAjB,EAAyBiE,iBAAiB,IACrFC,GAAaJ,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMI,OAAOD,UAAU,IAK3DE,EAAuB,OAAR7E,EAAAA,QAAQ,IAARA,EAAAA,OAAQ,EAARA,EAAAA,EAAAA,KAAc,SAAC8E,GAAQ,MAAM,CAC9C5E,MAAO4E,EAAS7E,GAChB+C,MAAO8B,EAAS5E,MACnB,IAED,GAAkCuC,EAAAA,EAAAA,WAAS,GAAM,eAA1CsC,EAAY,KAAEC,EAAS,KAC9B,GAAgCvC,EAAAA,EAAAA,UAAS,IAAG,eAArCwC,EAAQ,KAAEC,EAAW,KAKtBC,EAAgB,SAACC,GACnBJ,GAAU,EACd,EAWA,OACI,iCAEI,eAAIK,UAAU,iBAAgB,2BAE9B,SAAC,KAAM,CACHC,SAAUlB,EACVmB,cAAelB,EAAMmB,oBAAoBC,QACzCC,iBAAkBvC,EAClBwC,SAAU,SAACC,EAAO,IACdC,EAD8B,EAAbA,gBACH,GACd,IAAIC,GAAc,kBAAQzB,EAAM0B,cAAiBH,GAEjDvB,EAAM2B,gBAAgBF,GAEtB,IAAIG,EAAc5B,EAAMmB,oBACxBS,EAAYR,QAAUG,EACtBvB,EAAM6B,uBAAuBD,EAEjC,EAAE,SAED,YAAgD,IAAD,EAA5CL,EAAM,EAANA,OAAQO,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAoB,EAAZC,aACzB,OACI,UAAC,KAAI,YACD,SAAC,KAAa,WACV,iBAAKhB,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CACLrC,OAAO,2CAAiB,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SACxDC,QAASJ,EAAO9C,SAAW6C,EAAQ7C,QACnCmD,aAAcL,EAAO9C,QAAQ,UAE7B,SAAC,KAAK,CACFoD,KAAK,OACLC,aAAa,MACbC,KAAK,UACLC,YAAY,sBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAO,sCAAY,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SACnDC,QACIJ,EAAOzC,UAAYwC,EAAQxC,SAE/B8C,aAAcL,EAAOzC,SAAS,UAE9B,SAAC,KAAK,CAACiD,KAAK,WAAU,SACjB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACHJ,YAAY,kBACZG,MAAOA,EACPC,KAAMA,EACNC,QAASxC,EACTxE,MAAwB,OAAjBwE,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmByC,QACtB,SAACnE,GAAK,OACFA,EAAM9C,QACN0F,EAAOjC,QAAQ,IAEvBQ,SAAU,SAACnB,GAAK,OACZiE,EAAKG,cACDJ,EAAMJ,KACN5D,EAAM9C,MACT,GAEP,OAId,SAAC,KAAQ,CACL8C,OAAO,0CAAgB,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SACvDC,QAASJ,EAAOxC,aAAeuC,EAAQvC,YACvC6C,aAAcL,EAAOxC,YAAY,UAEjC,SAAC,KAAK,CACF8C,KAAK,OACLC,aAAa,MACbC,KAAK,cACLC,YAAY,qBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAO,gDAAsB,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SAC7DC,QAASJ,EAAOvC,aAAesC,EAAQtC,YACvC4C,aAAcL,EAAOvC,YAAY,UAEjC,SAAC,KAAK,CAAC+C,KAAK,cAAa,SACpB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAU,CACPJ,YAAY,cACZG,MAAOA,EACPC,KAAMA,EACN/G,MAAO8G,EAAM9G,MACbiE,SAAU,SAACkD,GACPJ,EAAKG,cACDJ,EAAMJ,KACNS,EAER,EACAC,QAAS,IAAIC,KACbC,YAAc7C,GAChB,OAId,SAAC,KAAQ,CACL3B,MAAM,SACNwD,QAASJ,EAAOtC,UAAYqC,EAAQrC,SACpC2C,aAAcL,EAAOtC,SAAS,UAE9B,SAAC,KAAK,CACF4C,KAAK,OACLC,aAAa,MACbC,KAAK,WACLC,YAAY,eACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CAEL/D,OAAO,yCAAe,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SAC1DC,QACIJ,EAAOrD,aAAeoD,EAAQpD,YAElC0D,aAAcL,EAAOrD,YAAY,UAE7B,SAAC,KAAK,CAAC6D,KAAK,cAAa,SACpB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACHJ,YAAY,sBACZG,MAAOA,EACPC,KAAMA,EACNC,QAASnE,EACT7C,MAAO6C,EAAYoE,QACf,SAACnE,GAAK,OACFA,EAAM9C,QACN0F,EAAO7C,WAAW,IAE1BoB,SAAU,SAACnB,GAAK,OACZiE,EAAKG,cACDJ,EAAMJ,KACN5D,EAAM9C,MACT,GAKP,OAKd,SAAC,KAAQ,CACL8C,OAAO,uCAAa,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SACpDC,QAASJ,EAAOrC,aAAeoC,EAAQpC,YACvC0C,aAAcL,EAAOrC,YAAY,UAEjC,SAAC,KAAK,CAAC6C,KAAK,cAAa,SACpB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACHJ,YAAY,mBACZG,MAAOA,EACPC,KAAMA,EACNC,QAASrC,EACT3E,MAAmB,OAAZ2E,QAAY,IAAZA,OAAY,EAAZA,EAAcsC,QACjB,SAACnE,GAAK,OACFA,EAAM9C,QACN0F,EAAO7B,WAAW,IAE1BI,SAAU,SAACnB,GAAK,OACZiE,EAAKG,cACDJ,EAAMJ,KACN5D,EAAM9C,MACT,GAEP,OAId,SAAC,KAAQ,CACL8C,OAAO,sCAAY,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SACnDC,QAASJ,EAAOpC,aAAemC,EAAQnC,YACvCyC,aAAcL,EAAOpC,YAAY,UAEjC,SAAC,KAAK,CAAC4C,KAAK,cAAa,SACpB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACHJ,YAAY,kBACZG,MAAOA,EACPC,KAAMA,EACNC,QAAS5C,EACTpE,MAAmB,OAAZoE,QAAY,IAAZA,OAAY,EAAZA,EAAc6C,QACjB,SAACnE,GAAK,OACFA,EAAM9C,QACN0F,EAAO5B,WAAW,IAE1BG,SAAU,SAACnB,GAAK,OACZiE,EAAKG,cACDJ,EAAMJ,KACN5D,EAAM9C,MACT,GAEP,OAId,SAAC,KAAQ,CACL8C,OAAO,sCAAY,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SACnDC,QAASJ,EAAOnC,SAAWkC,EAAQlC,QACnCwC,aAAcL,EAAOnC,QAAQ,UAE7B,SAAC,KAAK,CAAC2C,KAAK,UAAS,SAChB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACHJ,YAAY,kBACZG,MAAOA,EACPC,KAAMA,EACNC,QAASjE,EACT/C,MAAO+C,EAASkE,QACZ,SAACnE,GAAK,OACFA,EAAM9C,QACN0F,EAAO3B,OAAO,IAEtBE,SAAU,SAACnB,GAAK,OACZiE,EAAKG,cACDJ,EAAMJ,KACN5D,EAAM9C,MACT,GAEP,OAId,SAAC,KAAQ,CACL8C,OAAO,iDAAuB,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SAC9DC,QAASJ,EAAOlC,WAAaiC,EAAQjC,UACrCuC,aAAcL,EAAOlC,UAAU,UAE/B,SAAC,KAAK,CAAC0C,KAAK,YAAW,SAClB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACHJ,YAAY,qBACZG,MAAOA,EACPC,KAAMA,EACNC,QAAShE,EACThD,MAAOgD,EAAgBiE,QACnB,SAACM,GAAM,OACHA,EAAOvH,QACP0F,EAAO1B,SAAS,IAExBC,SAAU,SAACsD,GAAM,OACbR,EAAKG,cACDJ,EAAMJ,KACNa,EAAOvH,MACV,GAEP,OAgCd,SAAC,KAAU,CAAC0G,KAAK,SAAQ,SACpB,gBAAGc,EAAI,EAAJA,KAAMC,EAAM,EAANA,OAAM,OACZ,gCAEK/B,EAAOgC,OAAOC,KAAI,SAACC,EAAMC,GACtB,OAGI,SAAC,KAAQ,CACL/E,OACI,iBAAKsD,MAAO,CAAE0B,QAAS,OAAQC,WAAY,SAAUC,SAAU,QAAS,WACpE,cAAG5B,MAAO,CAAE6B,YAAa,QAAS,SAAEL,EAAKM,eACzC,SAAC,IAAO,CAACC,MAAK,SAAW,UACrB,iBACIhD,UAAS,+BAA0B,OAAM,mBAAmB,OAAM,QAClEiD,QAAS,kBAAMX,EAAOI,EAAM,EAC5BzB,MAAO,CAAEiC,WAAY,QAAS,UAE9B,SAAC,MAAiB,WAKjC,UAGD,SAAC,KAAK,CACF7B,KAAK,OACLC,aAAa,MACbE,YAAY,GACZC,UAAWC,EAAAA,GACXH,KAAI,iBAAYmB,EAAK,oBAMrC,KAIA,UAAC,KAAM,CACHS,OAAQzD,EACR0D,QAAStD,EACTuD,eAAgBvD,EAChBwD,2BAA2B,EAC3BC,kBAAkB,EAAM,WAExB,SAAC,KAAQ,CACL5F,MAAM,cAAa,UAEnB,SAAC,KAAK,CACF0D,KAAK,OACLE,KAAK,QACLC,YAAY,kCACZC,UAAWC,EAAAA,GACX7G,MAAO+E,EACPd,SAAU,SAACiB,GAAC,OAAKF,EAAYE,EAAEyD,OAAO3I,MAAM,OAGpD,iBAAKmF,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACHA,UAAU,oBACVyD,QAAQ,QACRR,QAASnD,EAAc,qBAI3B,SAAC,KAAM,CAAC2D,QAAQ,QAAQR,QAAS,kBA9WlE,SAACZ,EAAM9B,GACL,KAAbX,IACAyC,EAAK,CAAEU,YAAanD,EAAU8D,YAAa,KAC3C7D,EAAY,IACZF,GAAU,GAElB,CAwW2FgE,CAAWtB,EAAc,EAAC,0BAM1E,UAMnB,gBAAKrC,UAAU,OAAM,UACjB,SAAC,KAAM,CACHqB,KAAK,SACLoC,QAAQ,QACRzD,UAAU,YACViB,MAAO,CAAEC,MAAO,WAChB+B,QAAS,WAtYrCtD,GAAU,EAsY6C,EAC3BiE,SAAqE,KAAjB,QAAxC,EAAArD,EAAOgC,OAAOhC,EAAOgC,OAAOsB,OAAS,UAAG,aAAxC,EAA0CH,aACtDI,MAAM,SAAC,MAAoB,CAACC,KAAK,UAAU/D,UAAU,KAAM,kCAO/E,MAKhB,E,kCC1fQgE,EAAiCjG,EAAAA,KAAaC,MAAM,CACxDiG,aAAclG,EAAAA,KAEbK,SAAS,2BAA2BC,WAGrC6F,YAAcnG,EAAAA,KAAaG,IAAI,EAAE,0CAA0CC,IAAI,GAAG,8BAA8BC,SAAS,0BAA0BC,WACnJ8F,WAAapG,EAAAA,KAAaG,IAAI,EAAE,0CAA0CC,IAAI,IAAIiG,MAAM,+BAA+BhG,SAAS,yBAAyBC,WACzJgG,YAAgBtG,EAAAA,KAAaG,IAAI,EAAE,uCAAuCC,IAAI,GAAG,iCAChFC,SAAS,6BAA6BC,aA4Q3C,EAxQ2B,SAAH,GAAc,EAARS,SAAiC,IAAvBC,EAAK,EAALA,MAAUC,GAAK,YAEnD,GAAkC5B,EAAAA,EAAAA,WAAS,GAAM,eAA1CsC,EAAY,KAAEC,EAAS,KAC9B,GAAgCvC,EAAAA,EAAAA,UAAS,IAAG,eAArCwC,EAAQ,KAAEC,EAAW,KAKtBC,EAAgB,SAACC,GACnBJ,GAAU,EACd,EAUA,OACI,iCAEI,eAAIK,UAAU,iBAAgB,2BAE9B,SAAC,KAAM,CACHC,SAAUlB,EACVmB,cAAelB,EAAMmB,oBAAoBmE,YACzCjE,iBAAkB2D,EAClB1D,SAAU,SAACC,EAAO,IACdC,EAD8B,EAAbA,gBACH,GACd,IAAIC,GAAc,kBAAMzB,EAAM0B,cAAiBH,GAE/CvB,EAAM2B,gBAAgBF,GAEtB,IAAIG,EAAc5B,EAAMmB,oBACxBS,EAAY0D,YAAc/D,EAC1BvB,EAAM6B,uBAAuBD,EACjC,EAAE,SAED,YAAgD,IAAD,EAA5CL,EAAM,EAANA,OAAQO,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAoB,EAAZC,aACzB,OACI,UAAC,KAAI,YACD,SAAC,KAAa,WACV,iBAAKhB,UAAU,iCAAgC,WAE/C,SAAC,KAAQ,CAEDrC,OAAO,uCAAa,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SACpDC,QAASJ,EAAOkD,cAAgBnD,EAAQmD,aACxC7C,aAAcL,EAAOkD,aAAa,UAElC,SAAC,KAAK,CACF1D,OAAQA,EAAO0D,aACf5C,KAAK,OACLC,aAAa,MACbC,KAAK,eACLC,YAAY,mBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CAEL/D,MAAM,cAAa,UAEnB,SAAC,KAAK,CACF4C,OAAQA,EAAOgE,cACflD,KAAK,OACLC,aAAa,MACbC,KAAK,gBACLC,YAAY,oBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CAEL/D,OAAO,sCAAY,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SACnDC,QAASJ,EAAOmD,aAAepD,EAAQoD,YACvC9C,aAAcL,EAAOmD,YAAY,UAEjC,SAAC,KAAK,CACF3D,OAAQA,EAAO2D,YACf7C,KAAK,OACLC,aAAa,MACbC,KAAK,cACLC,YAAY,kBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAO,sCAAY,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACjDC,QAASJ,EAAOoD,YAAcrD,EAAQqD,WACtC/C,aAAcL,EAAOoD,WAAW,UAEhC,SAAC,KAAK,CACF9C,KAAK,QACLC,aAAa,MACbC,KAAK,aACLC,YAAY,iBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAO,0CAAgB,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACrDC,QAASJ,EAAOsD,aAAevD,EAAQuD,YACvCjD,aAAcL,EAAOsD,YAAY,UAEjC,SAAC,KAAK,CACFhD,KAAK,OACLC,aAAa,MACbC,KAAK,cACLC,YAAY,qBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,MAAM,yBACNwD,QAASJ,EAAOyD,YAAc1D,EAAQ0D,WACtCpD,aAAcL,EAAOyD,WAAW,UAEhC,SAAC,KAAK,CACFnD,KAAK,MACLC,aAAa,MACbC,KAAK,aACLC,YAAY,qBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,MAAM,aACNwD,QAASJ,EAAO0D,QAAU3D,EAAQ2D,OAClCrD,aAAcL,EAAO0D,OAAO,UAE5B,SAAC,KAAK,CACFpD,KAAK,OACLC,aAAa,MACbC,KAAK,SACLC,YAAY,mBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,MAAM,cACNwD,QAASJ,EAAO2D,WAAa5D,EAAQ4D,UACrCtD,aAAcL,EAAO2D,UAAU,UAE/B,SAAC,KAAK,CACFrD,KAAK,OACLC,aAAa,MACbC,KAAK,YACLC,YAAY,oBACZC,UAAWC,EAAAA,GACXiD,SAAUC,EAAAA,QAKlB,SAAC,KAAU,CAACrD,KAAK,SAAQ,SACpB,gBAAGc,EAAI,EAAJA,KAAMC,EAAM,EAANA,OAAM,OACZ,gCAEK/B,EAAOgC,OAAOC,KAAI,SAACC,EAAMC,GACtB,OAGI,SAAC,KAAQ,CACL/E,OACI,iBAAKsD,MAAO,CAAE0B,QAAS,OAAQC,WAAY,SAAUC,SAAU,QAAS,WACpE,cAAG5B,MAAO,CAAE6B,YAAa,QAAS,SAAEL,EAAKM,eACzC,SAAC,IAAO,CAACC,MAAK,SAAW,UACrB,iBACIhD,UAAS,+BAA0B,OAAM,mBAAmB,OAAM,QAClEiD,QAAS,kBAAMX,EAAOI,EAAM,EAC5BzB,MAAO,CAAEiC,WAAY,QAAS,UAE9B,SAAC,MAAiB,WAKjC,UAGD,SAAC,KAAK,CACF7B,KAAK,OACLC,aAAa,MACbE,YAAY,GACZC,UAAWC,EAAAA,GACXH,KAAI,iBAAYmB,EAAK,oBAMrC,KAIA,UAAC,KAAM,CACHS,OAAQzD,EACR0D,QAAStD,EACTuD,eAAgBvD,EAChBwD,2BAA2B,EAC3BC,kBAAkB,EAAM,WAExB,SAAC,KAAQ,CACL5F,MAAM,cAAa,UAEnB,SAAC,KAAK,CACF0D,KAAK,OACLE,KAAK,QACLC,YAAY,kCACZC,UAAWC,EAAAA,GACX7G,MAAO+E,EACPd,SAAU,SAACiB,GAAC,OAAKF,EAAYE,EAAEyD,OAAO3I,MAAM,OAGpD,iBAAKmF,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACHA,UAAU,oBACVyD,QAAQ,QACRR,QAASnD,EAAc,qBAI3B,SAAC,KAAM,CAAC2D,QAAQ,QAAQR,QAAS,kBAtNlE,SAACZ,EAAM9B,GACL,KAAbX,IACAyC,EAAK,CAAEU,YAAanD,EAAU8D,YAAa,KAC3C7D,EAAY,IACZF,GAAU,GAElB,CAgN2FgE,CAAWtB,EAAc,EAAC,0BAM1E,UAUnB,gBAAKrC,UAAU,OAAM,UACjB,SAAC,KAAM,CACHqB,KAAK,SACLoC,QAAQ,QACRzD,UAAU,YACViB,MAAO,CAAEC,MAAO,WAChB+B,QAAS,WAlPrCtD,GAAU,EAkP6C,EAC3BiE,SAAqE,KAAjB,QAAxC,EAAArD,EAAOgC,OAAOhC,EAAOgC,OAAOsB,OAAS,UAAG,aAAxC,EAA0CH,aACtDI,MAAM,SAAC,MAAoB,CAACC,KAAK,UAAU/D,UAAU,KAAM,kCAO/E,MAMhB,E,6FCjRMK,EAAmBtC,EAAAA,KAAaC,MAAM,CACxC6G,WAAY9G,EAAAA,KAAaG,IAAI,EAAE,yCAAyCE,SAAS,wBAAwBC,WACzGyG,SAAU/G,EAAAA,KAAaG,IAAI,EAAE,yCAAyCC,IAAI,KAAKC,SAAS,wBAAwBC,WAEhH0G,QAAShH,EAAAA,KAAaG,IAAI,EAAE,sCAAsCC,IAAI,IAAIC,SAAS,qBAAqBC,WACxG2G,SAAUjH,EAAAA,KAAaG,IAAI,EAAE,uCAAuCE,SAAS,sBAAsBC,aAkKvG,EA1I2B,SAAH,GAAa,EAARS,SAA0E,IAAjEC,EAAK,EAALA,MAAqDC,GAAnC,EAAZiG,aAAyB,EAAZC,aAA8B,EAAjBC,mBAA0B,aAc5F,OACI,iCACI,eAAInF,UAAU,iBAAgB,sBAC9B,SAAC,KAAM,CAACC,SAAWlB,EACfmB,cAAelB,EAAMmB,oBAAoBiF,QACzC/E,iBAAkBA,EAClBC,SAAU,SAACC,EAAO,IACdC,EAD8B,EAAbA,gBACH,GACd,IAAIC,GAAc,kBAAMzB,EAAM0B,cAAiBH,GAE/CvB,EAAM2B,gBAAgBF,GAEtB,IAAIG,EAAc5B,EAAMmB,oBACxBS,EAAYwE,QAAU7E,EACtBvB,EAAM6B,uBAAuBD,EACjC,EAAE,SAED,YAAS,EAANL,OAA4D,IAApDO,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAqB,EAAbgB,cAA2B,EAAZf,aACxC,OACI,SAAC,KAAI,WACD,UAAC,KAAa,YACV,iBAAKhB,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CACLrC,OAAO,4CAAkB,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACvDC,QAASJ,EAAO+D,UAAWhE,EAAQgE,SACnC1D,aAAcL,EAAO+D,SAAS,UAE9B,SAAC,KAAK,CACFzD,KAAK,OACLC,aAAa,MACbC,KAAK,WACLC,YAAY,0BACZC,UAAWC,EAAAA,QAInB,SAAC,KAAQ,CACL/D,MAAM,iBAEN,UAEA,SAAC,KAAK,CACF0D,KAAK,OACLC,aAAa,MACbC,KAAM,WACNC,YAAY,0BACZC,UAAWC,EAAAA,WAIvB,iBAAK1B,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CACLrC,OAAO,kCAAQ,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SAC7CC,QAASJ,EAAOgE,SAAWjE,EAAQiE,QACnC3D,aAAcL,EAAOgE,QAAQ,UAE7B,SAAC,KAAK,CACF1D,KAAK,OACLC,aAAa,MACbC,KAAM,UACNC,YAAY,OACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAO,mCAAS,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SAC9CC,QAASJ,EAAOiE,UAAWlE,EAAQkE,SACnC5D,aAAcL,EAAOiE,SAAS,UAE9B,SAAC,KAAK,CACF3D,KAAK,OACLC,aAAa,MACbC,KAAM,WACNC,YAAY,QACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAO,qCAAW,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SAChDC,QAASJ,EAAO8D,YAAa/D,EAAQ+D,WACrCzD,aAAcL,EAAO8D,WAAW,UAEhC,SAAC,KAAK,CACFxD,KAAK,OACLC,aAAa,MACbC,KAAM,aACNC,YAAY,UACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,MAAM,WAEN,UAEA,SAAC,KAAK,CACF0D,KAAK,OACLC,aAAa,MACbC,KAAM,aACNC,YAAY,WACZC,UAAWC,EAAAA,cAkBvC,MAIhB,E,2CC2DA,EAxOmC,SAAC1C,GACyBA,EAAjD+B,OAAiD/B,EAAzC8B,QAAyC9B,EAAhCuB,OAAgCvB,EAAxB+C,cAAjC,IAAgDsD,EAASrG,EAATqG,KAChD,GAAsCnG,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMmG,KAAKC,IAAI,IAAtDC,GAAF,EAAZ1J,aAAyB,EAAX0J,aAChBC,EAAY,yCAAG,WAAOC,EAAUC,GAAK,6FACpBvJ,EAAAA,EAAAA,IAAesJ,EAAS,GAAIF,EAL3B,GAK4D,OAAtE,OAAJI,EAAI,yBACHA,GAAI,2CACd,gBAHiB,wCAKlB,GAAsCxI,EAAAA,EAAAA,WAAS,GAAM,eAA9CyI,EAAW,KAAEC,EAAc,KAClC,GAA8B1I,EAAAA,EAAAA,UAAS,MAAK,eAArC2I,EAAO,KAAEC,EAAU,KACpBC,EAAc,SAACC,GACjBJ,GAAe,GACfE,EAAWE,EACf,EACA,OACI,+BACI,gBAAKlG,UAAU,OAAOiB,MAAO,CAAEkF,gBAAiB,WAAY,UACxD,iBAAKnG,UAAU,4BAA2B,WACtC,UAAC,KAAa,YACV,eAAIA,UAAU,kBAAiB,2BAC/B,SAAC,KAAM,CACHC,SAAUjB,EAAMD,MAChBmB,cAAelB,EAAMmB,oBACrBG,SAAU,SAACC,EAAO,IACdC,EAD8B,EAAbA,gBACH,GACd,IAAIC,GAAc,kBAAQzB,EAAM0B,cAAY,IAAE0F,YAAc7F,EAAO6F,cACnEpH,EAAM2B,gBAAgBF,GACtB,IAAIG,EAAc5B,EAAMmB,oBACxBS,EAAYwF,YAAc7F,EAAO6F,YACjCpH,EAAM6B,uBAAuBD,EACjC,EAAE,SAED,YAA+D,IAAD,EAA3DL,EAAM,EAANA,OAAuCwB,GAAxB,EAAPjB,QAAe,EAANC,OAAoB,EAAZC,aAA2B,EAAbe,eACvC,OACI,SAAC,KAAI,WACD,SAAC,KAAa,WACV,gBAAK/B,UAAU,iCAAgC,SACpC,OAANO,QAAM,IAANA,GAAmB,QAAb,EAANA,EAAQ6F,mBAAW,WAAb,EAAN,EAAqB5D,KAAI,SAAC6D,EAAKC,GAAO,IAAD,EAC9BC,EACJ,IACIA,EAAc,OAAHF,QAAG,IAAHA,OAAG,EAAHA,EAAKE,QAGpB,CAFE,MAAOC,GACLC,QAAQD,MAAM,gBAAiBH,EAAIE,SACvC,CACA,OAAO,SAAC,KAAQ,CACZ5I,OAAO,yBAAO,OAAH0I,QAAG,IAAHA,OAAG,EAAHA,EAAKK,SAAQ,KAAE,iBAAMzF,MAAO,CAAEC,MAAO,OAAQ,SAAU,QAAR,EAAAqF,SAAQ,OAAR,EAAUI,aAAe,IAAM,QAAe,UAGxG,gBAAK3G,UAAU,4BAA2B,UACtC,SAAC,KAAa,WACV,4BACI,SAAC,KAAM,CACH4G,WAAS,EACTnB,aAAcA,EACd3G,SAAU,SAAC+H,EAAclB,EAAOmB,EAAWC,GACvChF,EAAc,eAAD,OAAgBuE,EAAC,cAAuB,OAATQ,QAAS,IAATA,OAAS,EAATA,EAAW1L,KAAK4L,WAC5DjF,EAAc,eAAD,OAAgBuE,EAAC,eAAwB,OAATQ,QAAS,IAATA,OAAS,EAATA,EAAW1L,KAAK6L,UAC7DlF,EAAc,eAAD,OAAgBuE,EAAC,eAAe,UAC7CvE,EAAc,eAAD,OAAgBuE,EAAC,cAAiB,OAAHD,QAAG,IAAHA,OAAG,EAAHA,EAAKK,SACrD,EAGA1G,UAAU,gCAAgCiB,MAAO,CAAEiG,UAAW,QAAU3F,KAAI,sBAAiB+E,EAAC,cAAa,UAC3G,gBAAKtG,UAAU,oBAAmB,UAC9B,eAAGA,UAAU,gBAAe,WACxB,kBAAMA,UAAU,gCAA+B,UAC1CO,EAAO6F,YAAYE,GAAGa,SAAY,gBAAmB,oBAAmB,KAAI,QAEjF,iBAAMnH,UAAU,gBAAe,2BAM1CO,EAAO6F,YAAYE,GAAGa,WACnB,iBAAKnH,UAAU,6BAA4B,WACvC,gBAAKA,UAAU,mBAAmBiD,QAAS,kBAAMgD,EAAY1F,EAAO6F,YAAYE,GAAG,EAAC,UAChF,eAAItG,UAAU,mBAAkB,SAAEO,EAAO6F,YAAYE,GAAGc,UAAUC,UAAU,EAAG,SAGnF,SAACC,EAAA,EAAW,CACRtH,UAAU,sBACViD,QAAS,WACLlB,EAAc,eAAD,OAAgBuE,EAAC,cAAc,IAC5CvE,EAAc,eAAD,OAAgBuE,EAAC,eAAe,IAC7CvE,EAAc,eAAD,OAAgBuE,EAAC,eAAe,UAC7CvE,EAAc,eAAD,OAAgBuE,EAAC,cAAiB,OAAHD,QAAG,IAAHA,OAAG,EAAHA,EAAKK,SACrD,eAzCnBJ,EAgDb,SAMpB,QAGR,UAAC,KAAa,YACV,eAAItG,UAAU,kBAAiB,+BAC/B,SAAC,KAAM,CAACC,SAAUjB,EAAMuI,SACpBrH,cAAelB,EAAMmB,oBACrBG,SAAU,SAACC,EAAO,GAAwB,IAAD,EAGrC,IAFAC,EAD8B,EAAbA,gBACH,GACwC,QAAxC,EAAGxB,EAAMmB,oBAAoBiG,mBAAW,aAArC,EAAuCtE,QAAO,SAAA/B,GAAC,OAAgC,IAA5BA,EAAEwG,SAASI,YAAqB,IAAEa,OAAM,SAAAzH,GAAC,MAAoB,KAAhBA,EAAEqH,SAAgB,IACrH,CACV,IAAI3G,GAAc,kBAAQzB,EAAM0B,cAAY,IAAE+G,gBAAiBlH,EAAOkH,kBACtEzI,EAAM2B,gBAAgBF,GACtB,IAAIG,EAAc5B,EAAMmB,oBACxBS,EAAY6G,gBAAkBlH,EAAOkH,gBACrCzI,EAAM6B,uBAAuBD,GAClB,OAARyE,EACCrG,EAAM0I,QAAQ1I,EAAM2I,KAAO,GAE3B3I,EAAM0I,QAAQ1I,EAAM2I,KAAO,EAEnC,MACIC,EAAAA,EAAAA,IAAiB,UAAW,uCAEpC,EAAE,SAED,YAA+D,IAA5DrH,EAAM,EAANA,OAAuCwB,GAAxB,EAAPjB,QAAe,EAANC,OAAoB,EAAZC,aAA2B,EAAbe,eACvC,OACI,SAAC,KAAI,WACD,SAAC,KAAU,CAACR,KAAK,kBAAiB,SAC7B,gBAAGc,EAAI,EAAJA,KAAMC,EAAM,EAANA,OAAM,OACZ,+BACW,OAAN/B,QAAM,IAANA,OAAM,EAANA,EAAQkH,mBAAyB,OAANlH,QAAM,IAANA,OAAM,EAANA,EAAQkH,gBAAgBjF,KAAI,SAACnG,EAAMqG,GAAK,eAChE,iCACI,iBAAK1C,UAAU,sCAAqC,WAChD,0BACI,SAAC,KAAK,CACFqB,KAAK,OACLC,aAAa,MACbC,KAAI,0BAAqBmB,EAAK,cAC9BlB,YAAY,cACZC,UAAWC,EAAAA,QAInB,4BACI,SAAC,KAAM,CACHkF,WAAS,EACT5G,UAAU,qCACViB,MAAO,CAAEiG,UAAW,QACpBzB,aAAcA,EACd3G,SAAU,SAAC+H,EAAclB,EAAOmB,EAAWC,GACvChF,EAAc,mBAAD,OAAoBW,EAAK,cAAuB,OAAToE,QAAS,IAATA,OAAS,EAATA,EAAW1L,KAAK4L,WACpEjF,EAAc,mBAAD,OAAoBW,EAAK,eAAwB,OAAToE,QAAS,IAATA,OAAS,EAATA,EAAW1L,KAAK6L,UACrElF,EAAc,mBAAD,OAAoBW,EAAK,eAAe,aACzD,EAAE,UAEF,gBAAK1C,UAAU,oBAAmB,UAC9B,eAAGA,UAAU,gBAAe,WACxB,kBAAMA,UAAU,gCAA+B,WACpC,OAANO,QAAM,IAANA,GAA8B,QAAxB,EAANA,EAAQkH,gBAAgB/E,UAAM,WAAxB,EAAN,EAAgCyE,UAAY,gBAAmB,oBAAmB,KAAI,QAE3F,iBAAMnH,UAAU,gBAAe,4BAIpC,OAANO,QAAM,IAANA,GAA8B,QAAxB,EAANA,EAAQkH,gBAAgB/E,UAAM,WAAxB,EAAN,EAAgCyE,YAC7B,iBAAKnH,UAAU,sCAAqC,WAChD,gBAAKA,UAAU,mBAAmBiD,QAAS,kBAAMgD,EAAY1F,EAAOkH,gBAAgB/E,GAAO,EAAC,UACxF,eAAI1C,UAAU,mBAAkB,SAAEO,EAAOkH,gBAAgB/E,GAAO0E,UAAUC,UAAU,EAAG,SAG3F,SAACC,EAAA,EAAW,CACRtH,UAAU,qBACViD,QAAS,WACLlB,EAAc,mBAAD,OAAoBW,EAAK,cAAc,IACpDX,EAAc,mBAAD,OAAoBW,EAAK,eAAe,IACrDX,EAAc,mBAAD,OAAoBW,EAAK,eAAe,GACzD,YA5CsCA,IAkD1D,iBAAK1C,UAAU,mBAAkB,WAC7B,SAAC,KAAM,CACHyD,QAAQ,QACRpC,KAAK,SACLrB,UAAU,gBACViB,MAAO,CAAEC,MAAO,WAChB4C,MAAM,SAAC,MAAoB,CAACC,KAAK,YACjCd,QAAS,kBAAMZ,EAAK,CAAE+E,UAAW,GAAID,SAAU,GAAIU,UAAW,IAAM,EAAC,uBAKrE,SAAC,KAAM,CACHpE,QAAQ,QACRpC,KAAK,SACLrB,UAAU,gBACViB,MAAO,CAAEC,MAAO,WACf0C,SAAoB,IAAVlB,EAEXoB,MAAM,SAAC,MAAoB,CAACC,KAAK,YACjCd,QAAS,kBAAMX,EAAOI,EAAM,EAAC,6BAKzC,SAAC,KAAM,CAACS,OAAQ0C,EACZzC,QAAS,kBAAM0C,GAAe,EAAM,EAAC,UACrC,iBAAK9F,UAAU,MAAK,WAChB,gBAAK8H,IAAG,UAAKC,EAAAA,EAAAA,UAAmB,yBAAwB,OAAPhC,QAAO,IAAPA,OAAO,EAAPA,EAASoB,UAAYa,IAAI,aAC1E,SAAC,KAAM,CAAC/E,QAAS,kBAAMgF,OAAOC,KAAK,GAAD,OAAIH,EAAAA,EAAAA,UAAmB,yBAAwB,OAAPhC,QAAO,IAAPA,OAAO,EAAPA,EAASoB,UAAY,SAAS,EAAEnH,UAAU,OAAOyD,QAAQ,QAAO,6BAInJ,MAER,KAKvB,aAO5B,E,uBCnOM0E,EAAiB,CACnB,CAAExK,MAAO,YAAa9C,MAAO,aAC7B,CAAE8C,MAAO,SAAU9C,MAAO,WAGtBuN,EAAmB,CACvB,CAAEzK,MAAO,QAAS9C,MAAO,SACzB,CAAE8C,MAAO,SAAU9C,MAAO,UAC1B,CAAE8C,MAAO,UAAW9C,MAAO,WAC3B,CAAE8C,MAAO,YAAa9C,MAAO,aAC7B,CAAE8C,MAAO,cAAe9C,MAAO,cAC/B,CAAE8C,MAAO,SAAU9C,MAAO,WAgBxBwN,EAAoCtK,EAAAA,KAAaC,MAAM,CACzDsK,UAAWvK,EAAAA,KAAaK,SAAS,iCAAiCC,WAElEkK,aAAcxK,EAAAA,KAAaG,IAAI,GAAGC,IAAI,EAAE,uCAAuCC,SAAS,4BAA4BC,WACpHmK,eAAgBzK,EAAAA,KAAaK,SAAS,gCAAgCC,WACtEoK,SAAW1K,EAAAA,KAAaG,IAAI,EAAE,+BAA+BC,IAAI,GAAG,8BAA8BC,SAAS,0BAC3GsK,SAAW3K,EAAAA,KAAaG,IAAI,EAAE,+BAA+BC,IAAI,IAAI,+BAA+BC,SAAS,0BAC7GuK,WAAa5K,EAAAA,KAAaG,IAAI,EAAE,+BAA+BC,IAAI,GAAG,8BAA8BC,SAAS,iCAC7GwK,eAAiB7K,EAAAA,KAAaG,IAAI,EAAE,+BAA+BC,IAAI,IAAI,+BAA+BC,SAAS,iCACnHyK,SAAW9K,EAAAA,KAAaG,IAAI,EAAE,+BAA+BC,IAAI,GAAG,8BAA8BC,SAAS,4BAGzG0K,EAAqB,CACvB,CAACnL,MAAM,SAAS9C,MAAM,UACtB,CAAC8C,MAAM,SAAS9C,MAAM,UACtB,CAAC8C,MAAM,UAAU9C,MAAM,WACvB,CAAC8C,MAAM,YAAY9C,MAAM,aACzB,CAAC8C,MAAM,WAAW9C,MAAM,YACxB,CAAC8C,MAAM,SAAS9C,MAAM,UACtB,CAAC8C,MAAM,WAAW9C,MAAM,aAGpBkO,EAAe,CACnB,CAACpL,MAAQ,IAAI9C,MAAQ,KAAK,CAAC8C,MAAQ,IAAI9C,MAAQ,KAC/C,CAAC8C,MAAQ,IAAI9C,MAAQ,KAAK,CAAC8C,MAAQ,IAAI9C,MAAQ,KAC/C,CAAC8C,MAAQ,IAAI9C,MAAQ,KAAK,CAAC8C,MAAQ,IAAI9C,MAAQ,KAC/C,CAAC8C,MAAQ,IAAI9C,MAAQ,KAAK,CAAC8C,MAAQ,IAAI9C,MAAQ,KAC/C,CAAC8C,MAAQ,IAAI9C,MAAQ,KAAK,CAAC8C,MAAQ,KAAK9C,MAAQ,MAChD,CAAC8C,MAAQ,KAAK9C,MAAQ,MAAM,CAAC8C,MAAQ,KAAK9C,MAAQ,MAClD,CAAC8C,MAAQ,KAAK9C,MAAQ,MAAM,CAAC8C,MAAQ,KAAK9C,MAAQ,MAClD,CAAC8C,MAAQ,KAAK9C,MAAQ,MAAM,CAAC8C,MAAQ,KAAK9C,MAAQ,MAClD,CAAC8C,MAAQ,KAAK9C,MAAQ,MAAM,CAAC8C,MAAQ,KAAK9C,MAAQ,MAClD,CAAC8C,MAAQ,KAAK9C,MAAQ,MAAM,CAAC8C,MAAQ,KAAK9C,MAAQ,MAClD,CAAC8C,MAAQ,KAAK9C,MAAQ,MAAM,CAAC8C,MAAQ,KAAK9C,MAAQ,MAClD,CAAC8C,MAAQ,KAAK9C,MAAQ,MAAM,CAAC8C,MAAQ,KAAK9C,MAAQ,MAClD,CAAC8C,MAAQ,KAAK9C,MAAQ,MAAM,CAAC8C,MAAQ,KAAK9C,MAAQ,MAClD,CAAC8C,MAAQ,KAAK9C,MAAQ,MAAM,CAAC8C,MAAQ,KAAK9C,MAAQ,OAG9CmO,EAAsB,CAC1B,CAACrL,MAAM,UAAU9C,MAAM,WACvB,CAAC8C,MAAM,WAAW9C,MAAM,YACxB,CAAC8C,MAAM,QAAQ9C,MAAM,SACrB,CAAC8C,MAAM,QAAQ9C,MAAM,SACrB,CAAC8C,MAAM,MAAM9C,MAAM,OACnB,CAAC8C,MAAM,OAAO9C,MAAM,QACpB,CAAC8C,MAAM,OAAO9C,MAAM,QACpB,CAAC8C,MAAM,SAAS9C,MAAM,UACtB,CAAC8C,MAAM,YAAY9C,MAAM,aACzB,CAAC8C,MAAM,UAAU9C,MAAM,WACvB,CAAC8C,MAAM,WAAW9C,MAAM,YACxB,CAAC8C,MAAM,WAAW9C,MAAM,aAgU5B,EAtT8B,SAAH,GAAc,EAARiE,SAAiC,IAAvBC,EAAK,EAALA,MAAUC,GAAK,YAEtD,GAAmEE,EAAAA,EAAAA,KAC/D,SAACC,GAAK,OAAKA,EAAMmG,KAAKC,IAAI,IADRC,GAAF,EAAZ1J,aAAyB,EAAX0J,aAIhBC,GAJuC,EAAVwD,WAA2B,EAAfC,gBAI7B,yCAAG,WAAOxD,EAAUC,GAAK,8EAEU,GAD3CtJ,EAAOqJ,EAAS,GACD,CAAC,aAAc,aAElByD,SAAS9M,EAAKgF,MAAM,CAAD,eAC6B,OAA9DuG,EAAAA,EAAAA,IAAiB,UAAW,mCAAkC,mBACzD,GAAK,iCAGSxL,EAAAA,EAAAA,IAAesJ,EAAS,GAAIF,EAhBtB,GAgBgE,OAA/E,OAAJI,EAAI,yBACHA,GAAI,QAEqC,OAFrC,0BAEba,QAAQD,MAAM,4BAA4B,EAAD,IAAS,mBAC3C,GAAK,0DAEjB,gBAfiB,yCAgBlB,GAAsCpJ,EAAAA,EAAAA,WAAS,GAAM,eAA9CyI,EAAW,KAAEC,EAAc,KAClC,GAA8B1I,EAAAA,EAAAA,UAAS,MAAK,eAArC2I,EAAO,KAAEC,EAAU,MACP9G,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMI,OAAOD,UAAU,IAMjE,OACI,iCAEA,eAAIU,UAAU,iBAAgB,8BAE9B,SAAC,KAAM,CAACC,SAAUlB,EACdmB,cAAelB,EAAMmB,oBAAoBiJ,eACzC/I,iBAAkBgI,EAClB/H,SAAU,SAACC,EAAO,IACdC,EAD8B,EAAbA,gBACH,GACd,IAAIC,GAAc,kBAAMzB,EAAM0B,cAAiBH,GAE/CvB,EAAM2B,gBAAgBF,GACtB,IAAIG,EAAc5B,EAAMmB,oBACxBS,EAAYwI,eAAiB7I,EAC7BvB,EAAM6B,uBAAuBD,EACjC,EAAE,SAED,YAA+D,IAA5DL,EAAM,EAANA,OAAQO,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAoB,EAAZC,aAA2B,EAAbe,cACvC,OACI,SAAC,KAAI,WACD,SAAC,KAAa,WACV,iBAAK/B,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CACDrC,OAAO,sDAA4B,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACjEC,QAASJ,EAAOyH,gBAAkB1H,EAAQ0H,eAC1CpH,aAAcL,EAAOyH,eAAe,UAEpC,SAAC,KAAK,CAACjH,KAAK,iBAAgB,SACvB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACHJ,YAAY,yBACZG,MAAOA,EACPC,KAAMA,EACNC,QAASsG,EACTtN,MAAOsN,EAAerG,QAClB,SAACnE,GAAK,OACFA,EAAM9C,QACN0F,EAAOiI,cAAc,IAE7B1J,SAAU,SAACnB,GAAK,OACZiE,EAAKG,cACDJ,EAAMJ,KACN5D,EAAM9C,MACT,GAEP,OAIlB,SAAC,KAAQ,CACD8C,OAAO,8CAAoB,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACzDC,QAASJ,EAAOuH,WAAaxH,EAAQwH,UACrClH,aAAcL,EAAOuH,UAAU,UAE/B,SAAC,KAAK,CAAC/G,KAAK,YAAW,SAClB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACHJ,YAAY,0BACZG,MAAOA,EACPC,KAAMA,EACNC,QAASuG,EACTvN,MAAOuN,EAAiBtG,QACpB,SAACnE,GAAK,OACFA,EAAM9C,QACN0F,EAAO+H,SAAS,IAExBxJ,SAAU,SAACnB,GACPiE,EAAKG,cAAc,kBAAkB,IACrCH,EAAKG,cAAc,mBAAmB,IACtCH,EAAKG,cAAc,kBAAkB,IACrCH,EAAKG,cAAcJ,EAAMJ,KAAK5D,EAAM9C,MACxC,GACF,MAII,WAArB0F,EAAO+H,YACJ,SAAC,KAAQ,CACP3K,OAAO,4CAAkB,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACrDC,QAASJ,EAAOsI,iBAAmBvI,EAAQuI,gBAC3CjI,aAAcL,EAAOsI,gBAAgB,UAErC,SAAC,KAAK,CAAC9H,KAAK,kBAAkBoD,SAAQ,yCAAI,WAAM2E,GAAC,yEACjB,WAArB/I,EAAO+H,UAAsB,yCAClBvK,EAAAA,KAAaK,SAAS,sBAAsBuG,SAAS2E,GAAE,+EAC7C,KAAM9N,SAAO,wDACvC,mDAJgC,GAI/B,SAEF,gBAAGmG,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CAACC,QAASiH,EAAoBtH,YAAY,yBAAyBG,MAAOA,EAAOC,KAAMA,EAC9F/G,MAAOiO,EAAmBhH,QAAO,SAACyH,GAAI,OAAIA,EAAK1O,QAAS0F,EAAO8I,eAAe,IAC9EvK,SAAU,SAACyK,GAAI,OAAK3H,EAAKG,cAAcJ,EAAMJ,KAAKgI,EAAK1O,MAAM,GAC/D,OAIa,cAArB0F,EAAO+H,WAAkD,eAArB/H,EAAO+H,WAAkD,WAArB/H,EAAO+H,aACjF,SAAC,KAAQ,CACP3K,OAAO,6CAAmB,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACtDC,QAASJ,EAAOyI,kBAAoB1I,EAAQ0I,iBAC5CpI,aAAcL,EAAOyI,iBAAiB,UAEtC,SAAC,KAAK,CAACjI,KAAK,mBAAmBoD,SAAQ,yCAAI,WAAM2E,GAAC,yEAClB,cAArB/I,EAAO+H,WAAkD,eAArB/H,EAAO+H,WAAkD,WAArB/H,EAAO+H,UAAsB,yCAC1FvK,EAAAA,KAAaK,SAAS,uBAAuBuG,SAAS2E,GAAE,+EAC9C,KAAM9N,SAAO,wDACvC,mDAJiC,GAIhC,SAEF,gBAAGmG,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CAACC,QAASmH,EAAqBxH,YAAY,0BAA0BG,MAAOA,EAAOC,KAAMA,EAChG/G,MAAOmO,EAAoBlH,QAAO,SAACyH,GAAI,OAAIA,EAAK1O,QAAS0F,EAAOiJ,gBAAgB,IAChF1K,SAAU,SAACyK,GAAI,OAAK3H,EAAKG,cAAcJ,EAAMJ,KAAKgI,EAAK1O,MAAM,GAC/D,OAIa,YAArB0F,EAAO+H,WAA+C,cAArB/H,EAAO+H,WAAkD,eAArB/H,EAAO+H,WAAkD,WAArB/H,EAAO+H,aAClH,SAAC,KAAQ,CACP3K,OAAO,4CAAkB,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACrDC,QAASJ,EAAO0I,iBAAmB3I,EAAQ2I,gBAC3CrI,aAAcL,EAAO0I,gBAAgB,UAErC,SAAC,KAAK,CAAClI,KAAK,kBAAkBoD,SAAQ,yCAAI,WAAM2E,GAAC,yEACjB,YAArB/I,EAAO+H,WAAgD,cAArB/H,EAAO+H,WAAkD,eAArB/H,EAAO+H,WAAmD,WAArB/H,EAAO+H,UAAsB,yCAC7HvK,EAAAA,KAAaK,SAAS,sBAAsBuG,SAAS2E,GAAE,+EAC7C,KAAM9N,SAAO,wDACvC,mDAJgC,GAI/B,SAEF,gBAAGmG,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CAACC,QAASkH,EAAcvH,YAAY,yBAAyBG,MAAOA,EAAOC,KAAMA,EACxF/G,MAAOkO,EAAajH,QAAO,SAACyH,GAAI,OAAIA,EAAK1O,QAAU0F,EAAOkJ,eAAe,IACzE3K,SAAU,SAACyK,GAAI,OAAK3H,EAAKG,cAAcJ,EAAMJ,KAAKgI,EAAK1O,MAAM,GAC/D,OA2Bd,SAAC,KAAQ,CACD8C,OAAO,yCAAe,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACpDC,QAASJ,EAAOwH,cAAgBzH,EAAQyH,aACxCnH,aAAcL,EAAOwH,aAAa,UAEtC,SAAC,KAAK,CACFlH,KAAK,OACLC,aAAa,MACbC,KAAK,eACLC,YAAY,oBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAO,iDAAuB,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SAC5DC,QAASJ,EAAO4H,YAAc7H,EAAQ6H,WACtCvH,aAAcL,EAAO4H,WAAW,UAEhC,SAAC,KAAK,CACFtH,KAAK,OACLC,aAAa,MACbC,KAAK,aACLC,YAAY,uBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAO,uCAAa,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SAClDC,QAASJ,EAAO2H,UAAY5H,EAAQ4H,SACpCtH,aAAcL,EAAO2H,SAAS,UAE9B,SAAC,KAAK,CACFrH,KAAK,OACLC,aAAa,MACbC,KAAK,WACLC,YAAY,kBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAO,yCAAe,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACpDC,QAASJ,EAAO6H,gBAAkB9H,EAAQ8H,eAC1CxH,aAAcL,EAAO6H,eAAe,UAEpC,SAAC,KAAK,CACFvH,KAAK,OACLC,aAAa,MACbC,KAAK,iBACLC,YAAY,oBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAO,uCAAa,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SAClDC,QAASJ,EAAO0H,UAAY3H,EAAQ2H,SACpCrH,aAAcL,EAAO0H,SAAS,UAE9B,SAAC,KAAK,CACFpH,KAAK,OACLC,aAAa,MACbC,KAAK,WACLC,YAAY,kBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAO,uCAAa,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SAClDC,QAASJ,EAAO8H,UAAY/H,EAAQ+H,SACpCzH,aAAcL,EAAO8H,SAAS,UAE9B,SAAC,KAAK,CACFxH,KAAK,OACLC,aAAa,MACbC,KAAK,WACLC,YAAY,aACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CAAC/D,MAAM,0BAAyB,UACjC,SAAC,KAAK,CAAC4D,KAAK,wBAAuB,SAClC,gBAAEI,EAAK,EAALA,MAAMC,EAAI,EAAJA,KAAI,OACb,4BACI,SAAC,KAAM,CAAC6D,aAAcA,EAAcmB,WAAS,EAAC5G,UAAU,gCAAgCiB,MAAO,CAAEiG,UAAW,QACxGpI,SAAU,SAAC+H,EAAclB,EAAOmB,EAAWC,GAAkB,IAAD,EAACnF,EAAKG,cAAcJ,EAAMJ,KAAc,OAATuF,QAAS,IAATA,GAAe,QAAN,EAATA,EAAW1L,YAAI,WAAN,EAAT,EAAiB4L,UAAU,EAAE,UACxH,gBAAKhH,UAAU,oBAAmB,UAC9B,eAAGA,UAAU,gBAAe,WACxB,iBAAMA,UAAU,gCAA+B,SAAEO,EAAOmJ,sBAAwB,kBAAoB,yBACpG,iBAAM1J,UAAU,gBAAe,2BAI1CO,EAAOmJ,wBACR,iBAAK1J,UAAU,wCAAuC,WAClD,gBAAKA,UAAU,mBAAmBiD,QAAS,kBAjQlEiD,EAiQoF3F,EAAOmJ,sBAhQ5G5D,GAAe,QACfE,EAAWE,GAFK,IAACA,CAiQiH,EAAC,UACvF,eAAIlG,UAAU,mBAAkB,SAAEO,EAAOmJ,sBAAsBrC,UAAU,EAAG,SAEhF,SAACC,EAAA,EAAW,CAACtH,UAAU,sBAAsBiD,QAAS,WAAOrB,EAAKG,cAAcJ,EAAMJ,KAAM,GAAI,SAElG,YAQlC,KAEJ,SAAC,KAAM,CAAC4B,OAAQ0C,EACJzC,QAAS,kBAAM0C,GAAe,EAAM,EAAC,UACrC,iBAAK9F,UAAU,MAAK,WAChB,gBAAK8H,IAAG,UAAKC,EAAAA,EAAAA,UAAmB,yBAAiBhC,GAAWiC,IAAI,aAChE,SAAC,KAAM,CAAC/E,QAAS,kBAAMgF,OAAOC,KAAK,GAAD,OAAIH,EAAAA,EAAAA,UAAmB,yBAAiBhC,GAAW,SAAS,EAAE/F,UAAU,OAAOyD,QAAQ,QAAO,6BAMxJ,EC/ZMkG,GAAiBC,EAAAA,EAAAA,aAAW,SAAC5K,EAAO6K,GAEtC,OAAgCzM,EAAAA,EAAAA,UAAS,CACrC0M,mBAAoB,CAAEvJ,OAAQ,KAAMwJ,WAAW,GAC/CC,mBAAoB,CAAEzJ,OAAQ,KAAMwJ,WAAW,GAC/CE,mBAAoB,CAAE1J,OAAQ,KAAMwJ,WAAW,GAC/CG,sBAAuB,CAAE3J,OAAQ,KAAMwJ,WAAW,GAClDI,2BAA6B,CAAE5J,OAAQ,KAAMwJ,WAAW,GACxDK,0BAA4B,CAAE7J,OAAQ,KAAMwJ,WAAW,KACzD,eAPKvN,EAAQ,KAAE6N,EAAW,KAStBC,EAAwBC,EAAAA,SACxBC,EAAwBD,EAAAA,SACxBE,EAAwBF,EAAAA,SACxBG,EAA2BH,EAAAA,SAC3BI,EAA4BJ,EAAAA,SAC5BK,EAA+BL,EAAAA,SAAc,SAEpCM,IAAY,4CAiE1B,OAjE0B,0BAA3B,qGAEgC,OAAxBC,GAAmB,EAAM,EAAD,OAEO,QAFP,EAEtBR,EAAsBS,eAAO,aAA7B,EAA+BC,eAAeC,MAAK,SAAAlK,GACjDA,GAAUmK,OAAOC,KAAKpK,GAAQ8C,OAAS,IACvCyG,EAAsBS,QAAQK,WAAWrK,GAAQ,GACnD+J,GAAmB,EAEvB,IAAG,KAAD,kBAC+B,QAD/B,EACEN,EAAsBO,eAAO,aAA7B,EAA+BC,eAAeC,MAAK,SAAAlK,GAEjDA,GAAUmK,OAAOC,KAAKpK,GAAQ8C,OAAS,IACvC2G,EAAsBO,QAAQK,WAAWrK,GAAQ,GACnD+J,GAAmB,EAGvB,IAAG,KAAD,kBAC+B,QAD/B,EACEL,EAAsBM,eAAO,aAA7B,EAA+BC,eAAeC,MAAK,SAAAlK,GAEjDA,GAAUmK,OAAOC,KAAKpK,GAAQ8C,OAAS,IACvC4G,EAAsBM,QAAQK,WAAWrK,GAAQ,GACnD+J,GAAmB,EAIvB,IAAG,KAAD,kBACkC,QADlC,EACEJ,EAAyBK,eAAO,aAAhC,EAAkCC,eAAeC,MAAK,SAAAlK,GAEpDA,GAAUmK,OAAOC,KAAKpK,GAAQ8C,OAAS,IACvC6G,EAAyBK,QAAQK,WAAWrK,GAAQ,GACtD+J,GAAmB,EAIvB,IAAG,KAAD,mBAEqC,QAFrC,EAEIH,EAA0BI,eAAO,aAAjC,EAAmCC,eAAeC,MAAK,SAAAlK,GAEvDA,GAAUmK,OAAOC,KAAKpK,GAAQ8C,OAAS,IACvC8G,EAA0BI,QAAQK,WAAWrK,GAAQ,GACvD+J,GAAmB,EAIvB,IAAG,KAAD,oBACwC,QADxC,EACIF,EAA6BG,eAAO,aAApC,EAAsCC,eAAeC,MAAK,SAAAlK,GAE1DA,GAAUmK,OAAOC,KAAKpK,GAAQ8C,OAAS,IACvC+G,EAA6BG,QAAQK,WAAWrK,GAAQ,GAC1D+J,GAAmB,EAIvB,IAAG,KAAD,MAEGA,EAAiB,CAAD,iCACQ,OAArBR,QAAqB,IAArBA,OAAqB,EAArBA,EAAuBS,QAAQM,aAAY,yBACtB,OAArBb,QAAqB,IAArBA,OAAqB,EAArBA,EAAuBO,QAAQM,aAAY,yBACtB,OAArBZ,QAAqB,IAArBA,OAAqB,EAArBA,EAAuBM,QAAQM,aAAY,yBACnB,OAAxBX,QAAwB,IAAxBA,OAAwB,EAAxBA,EAA0BK,QAAQM,aAAY,yBACrB,OAAzBV,QAAyB,IAAzBA,OAAyB,EAAzBA,EAA2BI,QAAQM,aAAY,yBACnB,OAA5BT,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BG,QAAQM,aAAY,6CAG/D,sBAiCD,OARAC,EAAAA,EAAAA,qBAAoBzB,GAAK,WACrB,MAAO,CACH0B,uBAAsB,WAClBV,GACJ,EAER,KAGI,+BACI,iBAAK5J,MAAO,CAACkF,gBAAgB,WAAYnG,UAAU,OAAM,WACrD,SAAC,KAAa,CAACA,UAAU,SAASwL,UAAU,SAASC,SAAO,YACxD,SAAC,EAAkB,CAClBZ,aAAcA,EACd/L,SArCjB,SAAwC1D,GACpCiP,GAAY,kBAAK7N,GAAQ,IAAEsN,mBAAoB1O,IACnD,EAoCiB2D,MAAOuL,EACP5J,aAAc1B,EAAM0B,aACpBC,gBAAiB3B,EAAM2B,gBACvBR,oBAAqBnB,EAAMmB,oBAC3BU,uBAAwB7B,EAAM6B,4BAGnC,SAAC,KAAa,CAACb,UAAU,SAASwL,UAAU,SAASC,SAAO,YACxD,SAAC,EAAkB,CAClBZ,aAAcA,EACd/L,SA5CjB,SAAwC1D,GACpCiP,GAAY,kBAAK7N,GAAQ,IAAEwN,mBAAoB5O,IACnD,EA2CiB2D,MAAOyL,EACP9J,aAAc1B,EAAM0B,aACpBC,gBAAiB3B,EAAM2B,gBACvBR,oBAAqBnB,EAAMmB,oBAC3BU,uBAAwB7B,EAAM6B,4BAGnC,SAAC,KAAa,CAACb,UAAU,SAASwL,UAAU,SAASC,SAAO,YACxD,SAAC,EAAkB,CACnBZ,aAAcA,EACd/L,SAnDhB,SAAwC1D,GACpCiP,GAAY,kBAAK7N,GAAQ,IAAEyN,mBAAoB7O,IACnD,EAkDgB2D,MAAO0L,EACP/J,aAAc1B,EAAM0B,aACpBC,gBAAiB3B,EAAM2B,gBACvBR,oBAAqBnB,EAAMmB,oBAC1BU,uBAAwB7B,EAAM6B,4BAGnC,SAAC,KAAa,CAACb,UAAU,SAASwL,UAAU,SAASC,SAAO,YACxD,SAAC,EAAqB,CACtBZ,aAAcA,EACd/L,SA1DhB,SAA2C1D,GACvCiP,GAAY,kBAAK7N,GAAQ,IAAE0N,sBAAuB9O,IACtD,EAyDgB2D,MAAO2L,EACPhK,aAAc1B,EAAM0B,aACpBC,gBAAiB3B,EAAM2B,gBACvB+G,QAAS1I,EAAM0I,QACfC,KAAM3I,EAAM2I,KACZxH,oBAAqBnB,EAAMmB,oBAC3BU,uBAAwB7B,EAAM6B,4BAItC,SAAC,KAAa,CAACb,UAAU,SAASwL,UAAU,SAAQ,UAChD,SAACE,EAAkB,CACfb,aAAcA,EACd/L,SApEhB,SAAuC1D,GACnCiP,GAAY,kBAAK7N,GAAQ,IAAE2N,2BAA4B/O,IAC3D,EAmEgBuQ,YAlEhB,SAA0CvQ,GACtCiP,GAAY,kBAAK7N,GAAQ,IAAE4N,0BAA2BhP,IAC1D,EAiEgB2D,MAAO4L,EACPpD,SAAUqD,EACVlK,aAAc1B,EAAM0B,aACpBC,gBAAiB3B,EAAM2B,gBACvB+G,QAAS1I,EAAM0I,QACfC,KAAM3I,EAAM2I,KACZxH,oBAAqBnB,EAAMmB,oBAC3BU,uBAAwB7B,EAAM6B,uBAC9BwE,KAAMrG,EAAMqG,aAMhC,IAEA,I,uBCnKMuG,EAAuB7N,EAAAA,KAAaC,MAAM,CAE5C6N,UAAW9N,EAAAA,KAAaG,IAAI,EAAE,sCAAsCC,IAAI,KAAKC,SAAS,2BAA2BC,WACjHyN,SAAW/N,EAAAA,KAAaG,IAAI,EAAE,sCAAsCC,IAAI,KAAKC,SAAS,0BAA0BC,WAChH0N,QAAUhO,EAAAA,KAAaG,IAAI,EAAE,0CAA0CC,IAAI,IAAIiG,MAAM,+BAA+BhG,SAAS,yBAAyBC,WACtJ2N,YAAajO,EAAAA,KAAaG,IAAI,EAAE,uCAAuCC,IAAI,GAAG,iCAC7EC,SAAS,6BAA6BC,aA8I3C,EA1IwB,SAAH,GAAc,EAARS,SAAiC,IAAvBC,EAAK,EAALA,MAAUC,GAAK,YAGhD,OACI,iCAEI,eAAIgB,UAAU,iBAAgB,0BAE9B,SAAC,KAAM,CACHC,SAAUlB,EACVmB,cAAelB,EAAMmB,oBAAoB8L,SACzC5L,iBAAkBuL,EAClBtL,SAAU,SAACC,EAAO,IAElBC,EAFkC,EAAbA,gBAEP,GACd,IAAIC,GAAc,kBAAQzB,EAAM0B,cAAY,IAAEuL,SAAU1L,IACxDvB,EAAM2B,gBAAgBF,GAEtB,IAAIG,EAAc5B,EAAMmB,oBACxBS,EAAYqL,SAAW1L,EACvBvB,EAAM6B,uBAAuBD,EAC7B,EAAE,SAED,YAAS,EAANL,OAA6C,IAArCO,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAoB,EAAZC,aACzB,OACI,UAAC,KAAI,YACD,SAAC,KAAa,WACV,gBAAKhB,UAAU,sCA8BnB,SAAC,KAAa,WACV,iBAAKA,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CACLrC,OAAS,wCAAc,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACrDC,QAASJ,EAAO8K,WAAY/K,EAAQ+K,UACpCzK,aAAcL,EAAO8K,UAAU,UAE/B,SAAC,KAAK,CACFxK,KAAK,OACLC,aAAa,MACbC,KAAK,YACLC,YAAY,mBACZC,UAAWC,EAAAA,QAInB,SAAC,KAAQ,CACL/D,MAAM,cAAa,UAGnB,SAAC,KAAK,CACF0D,KAAK,OACLC,aAAa,MACbC,KAAK,aACLC,YAAY,oBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAS,uCAAa,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACpDC,QAASJ,EAAO+K,UAAWhL,EAAQgL,SACnC1K,aAAcL,EAAO+K,SAAS,UAE9B,SAAC,KAAK,CACFzK,KAAK,OACLC,aAAa,MACbC,KAAK,WACLC,YAAY,kBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAS,sCAAY,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACnDC,QAASJ,EAAOgL,SAAUjL,EAAQiL,QAClC3K,aAAcL,EAAOgL,QAAQ,UAE7B,SAAC,KAAK,CACF1K,KAAK,OACLC,aAAa,MACbC,KAAK,UACLC,YAAY,iBACZC,UAAWC,EAAAA,QAGnB,SAAC,KAAQ,CACL/D,OAAS,0CAAgB,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SACvDC,QAASJ,EAAOiL,aAAclL,EAAQkL,YACtC5K,aAAcL,EAAOiL,YAAY,UAEjC,SAAC,KAAK,CACF3K,KAAK,OACLC,aAAa,MACbC,KAAK,cACLC,YAAY,qBACZC,UAAWC,EAAAA,cASvC,MAMhB,E,iCChJMwK,EAAiB,CACnB,CAAEvO,MAAO,SAAU9C,MAAO,UAC1B,CAAE8C,MAAO,YAAa9C,MAAO,aAC7B,CAAE8C,MAAO,mBAAoB9C,MAAO,qBAKlCsR,EAA+BpO,EAAAA,KAAaC,MAAM,CACpDoO,aAAcrO,EAAAA,KAAaK,SAAS,6CAA6CC,WACjFgO,WAAYtO,EAAAA,KAAaK,SAAS,+BAA+BC,WACjEiO,gBAAkBvO,EAAAA,KAAaK,SAAS,oCAAoCC,WAC5EkO,gBAAkBxO,EAAAA,KAAaK,SAAS,oCAAoCC,WAC5E6N,eAAgBnO,EAAAA,KAAaK,SAAS,mCAAmCC,aAiP7E,EA9O4B,SAAH,GAAc,EAARS,SAAiC,IAAvBC,EAAK,EAALA,MAAUC,GAAK,YAE9CwN,GAAWC,EAAAA,EAAAA,MACXC,GAAmBxN,EAAAA,EAAAA,KAAY,SAACC,GAAK,eAAsB,QAAtB,EAAKA,EAAMC,mBAAW,OAAM,QAAN,EAAjB,EAAmBhE,YAAI,WAAN,EAAjB,EAAyBsR,gBAAgB,IACnFpN,GAAaJ,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMI,OAAOD,UAAU,IAEjE,GACIJ,EAAAA,EAAAA,KACH,SAACC,GAAK,OAAKA,EAAMmG,KAAKC,IAAI,IAFpBzJ,EAAY,EAAZA,aAAc0J,EAAW,EAAXA,YAAsB,EAAVyD,WAA0B,EAAfC,iBAI9C5L,EAAAA,EAAAA,YAAU,WACRkP,GAASG,EAAAA,EAAAA,IAAgB,CAAC7Q,aAAAA,IAC7B,GAAG,CAAC0Q,EAAU1Q,IAEd,IAAM2J,EAAY,yCAAG,WAAOC,EAAUC,GAAK,8EAES,GAD3CtJ,EAAOqJ,EAAS,GACD,CAAC,aAAc,aAElByD,SAAS9M,EAAKgF,MAAM,CAAD,eAC6B,OAA9DuG,EAAAA,EAAAA,IAAiB,UAAW,mCAAkC,mBACzD,GAAK,iCAGSxL,EAAAA,EAAAA,IAAesJ,EAAS,GAAIF,EAxBhB,GAwB4D,OAAjF,OAAJI,EAAI,yBACHA,GAAI,QAEqC,OAFrC,0BAEba,QAAQD,MAAM,4BAA4B,EAAD,IAAS,mBAC3C,GAAK,0DAEjB,gBAfkB,wCAgBnB,GAAsCpJ,EAAAA,EAAAA,WAAS,GAAM,eAA9CyI,EAAW,KAAEC,EAAc,KAClC,GAA8B1I,EAAAA,EAAAA,UAAS,MAAK,eAArC2I,EAAO,KAAEC,EAAU,KAMtB,OACI,iCAEI,eAAIhG,UAAU,iBAAgB,4BAE9B,SAAC,KAAM,CACHC,SAAUlB,EACVmB,cAAelB,EAAMmB,oBAAoByM,aACzCvM,iBAAkB8L,EAClB7L,SAAU,SAACC,EAAO,IACdC,EAD8B,EAAbA,gBACH,GACd,IAAIC,GAAc,kBAAQzB,EAAM0B,cAAY,IAAEkM,aAAcrM,IAC5DvB,EAAM2B,gBAAgBF,GAEtB,IAAIG,EAAc5B,EAAMmB,oBACxBS,EAAYgM,aAAerM,EAC3BvB,EAAM6B,uBAAuBD,GAE7B5B,EAAM0I,QAAQ1I,EAAM2I,KAAO,EAC/B,EAAE,SAED,YAAgD,IAA7CpH,EAAM,EAANA,OAAQO,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAoB,EAAZC,aACzB,OACI,SAAC,KAAI,WACD,SAAC,KAAa,WACV,iBAAKhB,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CACNrC,OAAO,0CAAgB,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SACtDC,QAASJ,EAAOqL,cAAgBtL,EAAQsL,aACxChL,aAAcL,EAAOqL,aAAa,UAElC,SAAC,KAAK,CAAC7K,KAAK,eAAc,SACrB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KACG,CACAJ,YAAY,uBACZG,MAAOA,EACPC,KAAMA,EACNC,QAAS6K,EACT7R,MAAO6R,EAAiB5K,QACpB,SAACM,GAAM,OACHA,EAAOvH,QACP0F,EAAO6L,YAAY,IAE3BtN,SAAU,SAACsD,GAAM,OACbR,EAAKG,cACDJ,EAAMJ,KACNa,EAAOvH,MACV,GAEP,OAId,SAAC,KAAQ,CAAC8C,MAAM,cAAa,UACzB,SAAC,KAAK,CAAC4D,KAAK,eAAc,SACzB,gBAAEI,EAAK,EAALA,MAAMC,EAAI,EAAJA,KAAI,OACb,4BACI,SAAC,KAAM,CAAC6D,aAAcA,EAAcmB,WAAS,EAAC5G,UAAU,gCAAgCiB,MAAO,CAAEiG,UAAW,QACxGpI,SAAU,SAAC+H,EAAclB,EAAOmB,EAAWC,GAAkB,IAAD,EAACnF,EAAKG,cAAcJ,EAAMJ,KAAc,OAATuF,QAAS,IAATA,GAAe,QAAN,EAATA,EAAW1L,YAAI,WAAN,EAAT,EAAiB4L,UAAU,EAAE,UACxH,gBAAKhH,UAAU,oBAAmB,UAC9B,eAAGA,UAAU,gBAAe,WACxB,iBAAMA,UAAU,gCAA+B,SAAEO,EAAOsM,aAAe,kBAAoB,yBAC3F,iBAAM7M,UAAU,gBAAe,2BAI1CO,EAAOsM,eACR,iBAAK7M,UAAU,wCAAuC,WAClD,gBAAKA,UAAU,mBAAmBiD,QAAS,kBA1EtEiD,EA0EwF3F,EAAOsM,aAzEhH/G,GAAe,QACfE,EAAWE,GAFK,IAACA,CA0E4G,EAAC,UAC9E,eAAIlG,UAAU,mBAAkB,SAAEO,EAAOsM,aAAaxF,UAAU,EAAG,SAEvE,SAACC,EAAA,EAAW,CAACtH,UAAU,sBAAsBiD,QAAS,WAAOrB,EAAKG,cAAcJ,EAAMJ,KAAM,GAAI,SAElG,OAIV,SAAC,KAAQ,CACL5D,OAAO,wCAAc,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SACrDC,QACIJ,EAAOsL,YAAcvL,EAAQuL,WAEjCjL,aAAcL,EAAOsL,WAAW,UAEhC,SAAC,KAAK,CAAC9K,KAAK,aAAY,SACnB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAU,CACPJ,YAAY,qBACZG,MAAOA,EACPC,KAAMA,EACN/G,MAAO8G,EAAM9G,MACbiE,SAAU,SAACkD,GACPJ,EAAKG,cACDJ,EAAMJ,KACNS,EAER,EACAG,YAAc7C,GAChB,OAId,SAAC,KAAQ,CACJ3B,OAAO,6CAAmB,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SAC3DC,QACIJ,EAAOwL,iBAAmBzL,EAAQyL,gBAEtCnL,aAAcL,EAAOwL,gBAAgB,UAErC,SAAC,KAAK,CAAChL,KAAK,kBAAiB,SACxB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAU,CACPJ,YAAY,0BACZG,MAAOA,EACPC,KAAMA,EACN/G,MAAO8G,EAAM9G,MACbiE,SAAU,SAACkD,GACPJ,EAAKG,cACDJ,EAAMJ,KACNS,EAER,EACAG,YAAc7C,GAChB,OAKd,SAAC,KAAQ,CACL3B,OAAO,6CAAmB,iBAAMsD,MAAO,CAAEC,MAAO,OAAQ,SAAE,SAC1DC,QACIJ,EAAOwL,iBAAmBzL,EAAQyL,gBAEtCnL,aAAcL,EAAOwL,gBAAgB,UAErC,SAAC,KAAK,CAAChL,KAAK,kBAAiB,SACxB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAU,CACPJ,YAAY,0BACZG,MAAOA,EACPC,KAAMA,EACN/G,MAAO8G,EAAM9G,MACbiE,SAAU,SAACkD,GACPJ,EAAKG,cACDJ,EAAMJ,KACNS,EAER,EACAG,YAAc7C,GAChB,OAId,SAAC,KAAQ,CACL3B,OAAS,6CAAmB,iBAAMsD,MAAO,CAACC,MAAO,OAAO,SAAE,SAC1DC,QAASJ,EAAOmL,gBAAkBpL,EAAQoL,eAC1C9K,aAAcL,EAAOmL,eAAe,UAEpC,SAAC,KAAK,CAAC3K,KAAK,iBAAgB,SACvB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACHJ,YAAY,yBACZG,MAAOA,EACPC,KAAMA,EACNC,QAASqK,EACTrR,MAAOqR,EAAepK,QAClB,SAACnE,GAAK,OACFA,EAAM9C,QACN0F,EAAO2L,cAAc,IAE7BpN,SAAU,SAACnB,GAAK,OACZiE,EAAKG,cACDJ,EAAMJ,KACN5D,EAAM9C,MACT,GAEP,YAUlC,KAEJ,SAAC,KAAM,CAACsI,OAAQ0C,EACRzC,QAAS,kBAAM0C,GAAe,EAAM,EAAC,UACrC,iBAAK9F,UAAU,MAAK,WAChB,gBAAK8H,IAAG,UAAKC,EAAAA,EAAAA,UAAmB,yBAAiBhC,GAAWiC,IAAI,aAChE,SAAC,KAAM,CAAC/E,QAAS,kBAAMgF,OAAOC,KAAK,GAAD,OAAIH,EAAAA,EAAAA,UAAmB,yBAAiBhC,GAAW,SAAS,EAAE/F,UAAU,OAAOyD,QAAQ,QAAO,6BAMxJ,E,wBCvRMqJ,GAAmC/O,EAAAA,KAAaC,MAAM,CACxD+O,WAAYhP,EAAAA,KAAaK,SAAS,4BAA4BC,WAC9D2O,SAAUjP,EAAAA,KAAaK,SAAS,gCAAgCC,aA6IpE,GA1IgC,SAAH,GAAc,EAARS,SAAiC,IAAD,EAAtBC,EAAK,EAALA,MAAUC,GAAK,aAClDwN,GAAWC,EAAAA,EAAAA,MACjB,GAMIvN,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMmG,KAAKC,IAAI,IALtCzJ,EAAY,EAAZA,aAIAG,GAHQ,EAARgR,SACU,EAAVhE,WACe,EAAfC,gBACqB,EAArBjN,uBAEEiR,GAAkBhO,EAAAA,EAAAA,KACpB,SAACC,GAAK,eAAsB,QAAtB,EAAKA,EAAMC,mBAAW,OAAM,QAAN,EAAjB,EAAmBhE,YAAI,WAAN,EAAjB,EAAyB8R,eAAe,IAMvD,OAHA5P,EAAAA,EAAAA,YAAU,WACNkP,GAASW,EAAAA,EAAAA,IAAe,CAAElR,sBAAAA,IAC9B,GAAG,CAACuQ,EAAU1Q,KAEV,iCACI,eAAIkE,UAAU,iBAAgB,qCAE9B,SAAC,KAAM,CACHC,SAAUlB,EACVmB,cAAwC,QAA3B,EAAElB,EAAMmB,2BAAmB,aAAzB,EAA2BiN,qBAC1C/M,iBAAkByM,GAClBxM,SAAU,SAACC,EAAO,IACdC,EAD8B,EAAbA,gBACH,GACd,IAAIC,GAAc,kBAAQzB,EAAM0B,cAAiBH,GAEjDvB,EAAM2B,gBAAgBF,GACtB,IAAIG,EAAc5B,EAAMmB,oBACxBS,EAAYwM,qBAAuB7M,EACnCvB,EAAM6B,uBAAuBD,GAE7B6F,QAAQ4G,IAAI5M,EAAgB,SAChC,EAAE,SAED,YAAgD,IAA7CF,EAAM,EAANA,OAAQO,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAoB,EAAZC,aACzB,OACI,SAAC,KAAI,WACD,SAAC,KAAa,WACV,iBAAKhB,UAAU,qBAAoB,WAC/B,iBAAKA,UAAU,4BAA2B,WACtC,SAAC,KAAQ,CACLrC,OACI,uCACgB,KACZ,iBACIsD,MAAO,CAAEC,MAAO,OAAQ,SAEvB,SAIbC,QACIJ,EAAOgM,YACPjM,EAAQiM,WAEZ3L,aAAcL,EAAOgM,WAAW,UAEhC,SAAC,KAAK,CAACxL,KAAK,aAAY,SACnB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACHJ,YAAY,qBACZG,MAAOA,EACPC,KAAMA,EACNC,QACIqL,EAEJrS,MAAsB,OAAfqS,QAAe,IAAfA,OAAe,EAAfA,EAAiBpL,QACpB,SAACnE,GAAK,OACFA,EAAM9C,QACN0F,EAAOwM,UAAU,IAEzBjO,SAAU,SACNnB,EACAgE,GAAK,OAELC,EAAKG,cACDJ,EAAMJ,KACN5D,EAAM9C,MACT,GAEP,OAId,SAAC,KAAQ,CACL8C,OACI,2CACoB,KAChB,iBACIsD,MAAO,CAAEC,MAAO,OAAQ,SAEvB,SAIbC,QACIJ,EAAOiM,UACPlM,EAAQkM,SAEZ5L,aAAcL,EAAOiM,SAAS,UAE9B,SAAC,KAAK,CACF3L,KAAK,OACLC,aAAa,MACbC,KAAK,WACLC,YAAY,aACZC,UAAWC,EAAAA,WAIvB,SAAC,KAAQ,CAAC/D,MAAM,cAAa,UACzB,SAAC,KAAK,CAAC4D,KAAK,cAAa,SACpB,gBAAGI,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAc,CACXX,MAAO,CAAEqM,MAAO,OAChBzS,MAAO8G,EAAM9G,MACbiE,SAAU,SAACyO,GAAG,OACV3L,EAAKG,cACDJ,EAAMJ,KACNgM,EACH,GAEP,YAQlC,MAIhB,EC9IMC,IAAuB5D,EAAAA,EAAAA,aAAW,SAAC5K,EAAO6K,GAG9C,OAAgCzM,EAAAA,EAAAA,UAAS,CACvCqQ,gBAAiB,CAAElN,OAAQ,KAAMwJ,WAAW,GAC5C2D,oBAAqB,CAAEnN,OAAQ,KAAMwJ,WAAW,GAChD4D,sBAAuB,CAAEpN,OAAQ,KAAMwJ,WAAW,KAClD,eAJKvN,EAAQ,KAAE6N,EAAW,KAMtBuD,EAAqBrD,EAAAA,SACrBsD,EAAyBtD,EAAAA,SACzBuD,EAAwBvD,EAAAA,SAQ9B,SAEeM,IAAY,4CAqC1B,OArC0B,0BAA3B,+FAC8B,OAAxBC,GAAmB,EAAM,EAAD,OAGC,OAAvBgD,QAAuB,IAAvBA,GAAgC,QAAT,EAAvBA,EAAyB/C,eAAO,WAAT,EAAvB,EAAkCC,eAAeC,MAAK,SAAAlK,GACtDA,GAAUmK,OAAOC,KAAKpK,GAAQ8C,OAAS,IACzCiK,EAAwB/C,QAAQK,WAAWrK,GAAQ,GACnD+J,GAAmB,EAEvB,IAAG,KAAD,kBAE8B,QAF9B,EAEI8C,EAAmB7C,eAAO,aAA1B,EAA4BC,eAAeC,MAAK,SAAAlK,GAEhDA,GAAUmK,OAAOC,KAAKpK,GAAQ8C,OAAS,IACzC+J,EAAmB7C,QAAQK,WAAWrK,GAAQ,GAC9C+J,GAAmB,EAGvB,IAAG,KAAD,kBACkC,QADlC,EACI+C,EAAuB9C,eAAO,aAA9B,EAAgCC,eAAeC,MAAK,SAAAlK,GAEpDA,GAAUmK,OAAOC,KAAKpK,GAAQ8C,OAAS,IACzCgK,EAAuB9C,QAAQK,WAAWrK,GAAQ,GAClD+J,GAAmB,EAIvB,IAAG,KAAD,KAGGA,EAAiB,CAAD,iCACU,OAAvBgD,QAAuB,IAAvBA,OAAuB,EAAvBA,EAAyB/C,QAAQM,aAAY,yBAC3B,OAAlBuC,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoB7C,QAAQM,aAAY,yBAClB,OAAtBwC,QAAsB,IAAtBA,OAAsB,EAAtBA,EAAwB9C,QAAQM,aAAY,6CAIrD,sBA2BD,OARAC,EAAAA,EAAAA,qBAAoBzB,GAAK,WACvB,MAAO,CACL0B,uBAAsB,WACpBV,GACF,EAEJ,KAGE,+BACE,iBAAK5J,MAAO,CAAEkF,gBAAiB,WAAanG,UAAU,OAAM,WAE1D,SAAC,KAAa,CAACA,UAAU,SAASwL,UAAU,SAASC,SAAO,YAC1D,SAAC,GAAuB,CACtBZ,aAAcA,EACd/L,SArBZ,SAAiD1D,GAC/CiP,GAAY,kBAAK7N,GAAQ,IAAGmR,sBAAuBvS,IACrD,EAoBY2D,MAAO+O,EACPpN,aAAc1B,EAAM0B,aACpBC,gBAAiB3B,EAAM2B,gBACvBR,oBAAqBnB,EAAMmB,oBAC3BU,uBAAwB7B,EAAM6B,4BAGlC,SAAC,KAAa,CAACb,UAAU,SAASwL,UAAU,SAASC,SAAO,YAC1D,SAAC,EAAe,CACdZ,aAAcA,EACd/L,SA3CV,SAAqC1D,GACnCiP,GAAY,kBAAK7N,GAAQ,IAAEiR,gBAAiBrS,IAC9C,EA0CU2D,MAAO6O,EACPlN,aAAc1B,EAAM0B,aACpBC,gBAAiB3B,EAAM2B,gBACvBR,oBAAqBnB,EAAMmB,oBAC3BU,uBAAwB7B,EAAM6B,4BAGlC,SAAC,KAAa,CAACb,UAAU,SAASwL,UAAU,SAASC,SAAO,YAC1D,SAAC,EAAmB,CAClBZ,aAAcA,EACd/L,SAlDV,SAAyC1D,GACvCiP,GAAY,kBAAK7N,GAAQ,IAAEkR,oBAAqBtS,IAClD,EAiDU2D,MAAO8O,EACPnN,aAAc1B,EAAM0B,aACpBC,gBAAiB3B,EAAM2B,gBACvB+G,QAAS1I,EAAM0I,QACfC,KAAM3I,EAAM2I,KACZxH,oBAAqBnB,EAAMmB,oBAC3BU,uBAAwB7B,EAAM6B,+BAM1C,IAEA,M,sEC3HMkN,GAAU,CACZ,CAAEpQ,MAAO,mBAAoB9C,MAAO,GACpC,CAAE8C,MAAO,oBAAqB9C,MAAO,IAiBnCmT,GAAc,CAChB,CAAErQ,MAAO,gBAAiB9C,MAAO,OACjC,CAAE8C,MAAO,gBAAiB9C,MAAO,QAE/B+C,GAAW,CACb,CAAED,MAAO,UAAW9C,MAAO,GAC3B,CAAE8C,MAAO,UAAW9C,MAAO,GAC3B,CAAE8C,MAAO,SAAU9C,MAAO,GAC1B,CAAE8C,MAAO,YAAa9C,MAAO,IAG3BsN,GAAiB,CACnB,CAAExK,MAAO,YAAa9C,MAAO,aAC7B,CAAE8C,MAAO,SAAU9C,MAAO,WAGxBuN,GAAmB,CACrB,CAAEzK,MAAO,QAAS9C,MAAO,SACzB,CAAE8C,MAAO,SAAU9C,MAAO,UAC1B,CAAE8C,MAAO,UAAW9C,MAAO,WAC3B,CAAE8C,MAAO,YAAa9C,MAAO,aAC7B,CAAE8C,MAAO,cAAe9C,MAAO,cAC/B,CAAE8C,MAAO,SAAU9C,MAAO,WAUxBqR,GAAiB,CACnB,CAAEvO,MAAO,SAAU9C,MAAO,UAC1B,CAAE8C,MAAO,YAAa9C,MAAO,aAC7B,CAAE8C,MAAO,mBAAoB9C,MAAO,qBAElCoT,GAAmB,CACrB,CAAEtQ,MAAO,YAAa9C,MAAO,cAC7B,CAAE8C,MAAO,SAAU9C,MAAO,WA2R9B,OAlRA,SAAyB,GAAiD,IAAD,4BAA9C6F,EAAY,EAAZA,aAAoBgH,GAAF,EAAJC,KAAa,EAAPD,SAASlM,EAAO,EAAPA,QAAS6J,EAAI,EAAJA,KAE7D,GAAsCjI,EAAAA,EAAAA,WAAS,GAAM,eAA9CyI,EAAW,KAAEC,EAAc,KAClC,GAA8B1I,EAAAA,EAAAA,UAAS,MAAK,eAArC2I,EAAO,KAAEC,EAAU,KAE1BS,QAAQ4G,IAAI3M,EAAc,gBAQ1B,IAAMwM,GAAkBhO,EAAAA,EAAAA,KACpB,SAACC,GAAK,eAAsB,QAAtB,EAAKA,EAAMC,mBAAW,OAAM,QAAN,EAAjB,EAAmBhE,YAAI,WAAN,EAAjB,EAAyB8R,eAAe,IAEjDjO,GAAeC,EAAAA,EAAAA,KAAY,SAACC,GAAK,eAAsB,QAAtB,EAAKA,EAAMC,mBAAW,OAAM,QAAN,EAAjB,EAAmBhE,YAAI,WAAN,EAAjB,EAAyB6D,YAAY,IAC3EI,GAAoBH,EAAAA,EAAAA,KAAY,SAACC,GAAK,eAAsB,QAAtB,EAAKA,EAAMC,mBAAW,OAAM,QAAN,EAAjB,EAAmBhE,YAAI,WAAN,EAAjB,EAAyBiE,iBAAiB,IACrFC,GAAaJ,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMI,OAAOD,UAAU,IAE3DE,EAAuB,OAAR7E,EAAAA,QAAQ,IAARA,EAAAA,OAAQ,EAARA,EAAAA,EAAAA,KAAc,SAAC8E,GAAQ,MAAM,CAC9C5E,MAAO4E,EAAS7E,GAChB+C,MAAO8B,EAAS5E,MACnB,IAEK6R,GAAmBxN,EAAAA,EAAAA,KAAY,SAACC,GAAK,eAAsB,QAAtB,EAAKA,EAAMC,mBAAW,OAAM,QAAN,EAAjB,EAAmBhE,YAAI,WAAN,EAAjB,EAAyBsR,gBAAgB,IASnFwB,EAAc,SAAChI,GACjBJ,GAAe,GACfE,EAAWE,EACf,EACA,OACI,gCAGK1K,IACG,SAAC,KAAK,CAACwE,UAAU,OAAOqB,KAAK,SAAS8M,UAAQ,WACzCC,MAAMC,QAAQ7S,GAAWA,EAAQ8S,KAAK,MAAQ9S,KAGvD,eAAIwE,UAAU,iBAAgB,sBAC9B,UAAC,KAAI,CAACA,UAAU,iBAAgB,WAC5B,iBAAKA,UAAU,sBAAqB,WAChC,gBAAIA,UAAU,yCAAwC,4BAAiB,QACvE,gBAAKA,UAAU,yCAAwC,UACnD,mBAAQiD,QAAS,WAAQyE,EAAQ,EAAG,EAAE,UAClC,iBAAK1H,UAAU,OAAM,WACjB,SAAC,OAAU,CAACA,UAAU,UACtB,cAAGA,UAAU,OAAM,6BAKnC,iBAAKA,UAAU,sBAAqB,WAChC,iBAAKA,UAAU,0BAAyB,WACpC,gBAAKA,UAAU,oDAAmD,4BAClE,iBAAKA,UAAU,uCAAsC,WAEjD,cAAGA,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAczC,WAC7C,cAAG+B,UAAU,iBAAgB,UAAEuO,EAAAA,EAAAA,IAA6B,OAAZ7N,QAAY,IAAZA,OAAY,EAAZA,EAAchC,YAAac,MAC3E,cAAGQ,UAAU,iBAAgB,UAAEuO,EAAAA,EAAAA,IAA6B,OAAZ7N,QAAY,IAAZA,OAAY,EAAZA,EAAcpC,SAAUe,MACxE,cAAGW,UAAU,iBAAgB,UAAEuO,EAAAA,EAAAA,IAA6B,OAAZ7N,QAAY,IAAZA,OAAY,EAAZA,EAAchD,YAAaqQ,OAC3E,iBAAK/N,UAAU,OAAM,WACjB,cAAGA,UAAU,oCAAmC,yBAChD,cAAGA,UAAU,YAAW,SAInB,QAJmB,EACnBwO,KACe,OAAZ9N,QAAY,IAAZA,OAAY,EAAZA,EAAclC,YACdc,UACH,aAHA,EAGEmP,OAAOnP,SAGlB,cAAGU,UAAU,iBAAgB,UAAEuO,EAAAA,EAAAA,IAA6B,OAAZ7N,QAAY,IAAZA,OAAY,EAAZA,EAAc/B,YAAaM,MAC3E,cAAGe,UAAU,iBAAgB,UAAEuO,EAAAA,EAAAA,IAA6B,OAAZ7N,QAAY,IAAZA,OAAY,EAAZA,EAAc9B,QAAShB,OACvE,eAAGoC,UAAU,iBAAgB,kBAAmB,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAcjC,aAClD,cAAGuB,UAAU,iBAAgB,UAAEuO,EAAAA,EAAAA,IAA6B,OAAZ7N,QAAY,IAAZA,OAAY,EAAZA,EAAc7B,UAAWmP,OACzE,cAAGhO,UAAU,iBAAgB,UAAEuO,EAAAA,EAAAA,IAA6B,OAAZ7N,QAAY,IAAZA,OAAY,EAAZA,EAAcgO,UAAWT,aAKjF,4BACI,gBAAKjO,UAAU,oDAAmD,2BAClE,iBAAKA,UAAU,4BAA2B,WACtC,eAAGA,UAAU,iBAAgB,mBAAoB,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAciO,oBACnD,cAAG3O,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAcyD,cAC7C,cAAGnE,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAc2D,eAC7C,cAAGrE,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAc8D,cAC7C,cAAGxE,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAcgE,mBAGrD,4BACI,gBAAK1E,UAAU,oDAAmD,sBAClE,iBAAKA,UAAU,4BAA2B,WACtC,cAAGA,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAcoE,YAC7C,cAAG9E,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAcqE,WAC7C,cAAG/E,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAcsE,YAC7C,cAAGhF,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAcmE,cAC7C,cAAG7E,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAckO,oBAGrD,4BACI,gBAAK5O,UAAU,oDAAmD,8BAClE,iBAAKA,UAAU,4BAA2B,WAGtC,cAAGA,UAAU,iBAAgB,UAAEuO,EAAAA,EAAAA,IAA6B,OAAZ7N,QAAY,IAAZA,OAAY,EAAZA,EAAc8H,eAAgBL,OAC9E,cAAGnI,UAAU,iBAAgB,UAAEuO,EAAAA,EAAAA,IAA6B,OAAZ7N,QAAY,IAAZA,OAAY,EAAZA,EAAc4H,UAAWF,OAEzE,cAAGpI,UAAU,mCAAkC,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAciI,cAC/D,cAAG3I,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAcgI,YAC7C,cAAG1I,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAckI,kBAC7C,cAAG5I,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAc6H,gBAC7C,cAAGvI,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAc+H,YAC7C,cAAGzI,UAAU,iBAAgB,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAcmI,YAE7C,uBAIK,QAJL,EACK2F,KACe,OAAZ9N,QAAY,IAAZA,OAAY,EAAZA,EAAcmO,SACdvP,UACH,aAHA,EAGEmP,OAAOnP,YAItB,4BACI,gBAAKU,UAAU,oDAAmD,mBACrD,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAc0F,YAAY5D,KAAI,SAAAzC,GAC3B,GAAoB,KAAhBA,EAAEqH,UACF,OACI,+BACI,gBAAKpH,UAAU,4BAA4BiD,QAAS,kBAAMiL,EAAYnO,EAAE,EAAC,UACrE,cAAGC,UAAU,uDAAsD,SAAED,EAAE2G,cAK3F,IACa,OAAZhG,QAAY,IAAZA,OAAY,EAAZA,EAAc+G,gBAAgBjF,KAAI,SAAAzC,GAC/B,GAAoB,KAAhBA,EAAEqH,UACF,OACI,+BACI,gBAAKpH,UAAU,4BAA4BiD,QAAS,kBAAMiL,EAAYnO,EAAE,EAAC,UACrE,cAAGC,UAAU,uDAAsD,SAAED,EAAE2G,cAK3F,aAIH,OAARrB,IAAiB,UAAC,KAAI,CAACrF,UAAU,iBAAgB,WAC9C,iBAAKA,UAAU,sBAAqB,WAChC,gBAAIA,UAAU,yCAAwC,+BAAoB,OACjE,OAARqF,IAAiB,gBAAKrF,UAAU,yCAAwC,UACrE,SAAC,MAAI,CAACiD,QAAS,WAAQyE,EAAQ,EAAG,EAAE,UAChC,iBAAK1H,UAAU,OAAM,WACjB,SAAC,OAAU,CAACA,UAAU,UACtB,cAAGA,UAAU,OAAM,6BAMnC,iBAAKA,UAAU,uBAAsB,WACjC,iBAAKA,UAAU,0BAAyB,WACpC,cAAGA,UAAU,qCAAoC,yBACjD,cAAGA,UAAU,YAAW,UAAEuO,EAAAA,EAAAA,IAA6B,OAAZ7N,QAAY,IAAZA,OAAY,EAAZA,EAAcqM,WAAYG,SAEzE,iBAAKlN,UAAU,0BAAyB,WACpC,cAAGA,UAAU,qCAAoC,uBACjD,cAAGA,UAAU,YAAW,SAAc,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAcsM,eAE5C,iBAAKhN,UAAU,0BAAyB,WACpC,cAAGA,UAAU,qCAAoC,0BACjD,cAAGA,UAAU,YAAW,UAAE8O,EAAAA,GAAAA,IAA4B,OAAZpO,QAAY,IAAZA,OAAY,EAAZA,EAAcqO,wBAK3D,OAAR1J,IAAiB,UAAC,KAAI,CAACrF,UAAU,iBAAgB,WAC9C,iBAAKA,UAAU,sBAAqB,WAChC,gBAAIA,UAAU,yCAAwC,sBAAW,OACxD,OAARqF,IAAiB,gBAAKrF,UAAU,yCAAwC,UACrE,SAAC,MAAI,CAACiD,QAAS,WAAQyE,EAAQ,EAAG,EAAE,UAChC,iBAAK1H,UAAU,OAAM,WACjB,SAAC,OAAU,CAACA,UAAU,UACtB,cAAGA,UAAU,OAAM,6BAKnC,iBAAKA,UAAU,GAAE,WACb,iBAAKA,UAAU,uBAAsB,WACjC,iBAAKA,UAAU,0BAAyB,WACpC,cAAGA,UAAU,qCAAoC,wBACjD,cAAGA,UAAU,YAAW,SAAc,OAAZU,QAAY,IAAZA,GAAsB,QAAV,EAAZA,EAAcuL,gBAAQ,WAAV,EAAZ,EAAwBJ,gBAEtD,iBAAK7L,UAAU,0BAAyB,WACpC,cAAGA,UAAU,qCAAoC,uBACjD,cAAGA,UAAU,YAAW,SAAc,OAAZU,QAAY,IAAZA,GAAsB,QAAV,EAAZA,EAAcuL,gBAAQ,WAAV,EAAZ,EAAwBH,eAMtD,iBAAK9L,UAAU,0BAAyB,WACpC,cAAGA,UAAU,qCAAoC,wBACjD,cAAGA,UAAU,YAAW,SAAc,OAAZU,QAAY,IAAZA,GAAsB,QAAV,EAAZA,EAAcuL,gBAAQ,WAAV,EAAZ,EAAwBF,cAEtD,iBAAK/L,UAAU,0BAAyB,WACpC,cAAGA,UAAU,qCAAoC,2BACjD,cAAGA,UAAU,YAAW,SAAc,OAAZU,QAAY,IAAZA,GAAsB,QAAV,EAAZA,EAAcuL,gBAAQ,WAAV,EAAZ,EAAwBD,qBAG1D,iBAAKhM,UAAU,uBAAsB,WACjC,iBAAKA,UAAU,+BAA8B,WACzC,cAAGA,UAAU,qCAAoC,4BACjD,cAAGA,UAAU,YAAW,UAAEuO,EAAAA,EAAAA,IAA6B,OAAZ7N,QAAY,IAAZA,GAA0B,QAAd,EAAZA,EAAckM,oBAAY,WAAd,EAAZ,EAA4BR,aAAcM,SAEzF,iBAAK1M,UAAU,+BAA8B,WACzC,cAAGA,UAAU,qCAAoC,0BAEjD,cAAGA,UAAU,YAAW,SAInB,QAJmB,EACnBwO,KACe,OAAZ9N,QAAY,IAAZA,GAA0B,QAAd,EAAZA,EAAckM,oBAAY,WAAd,EAAZ,EAA4BP,WAC5B/M,UACH,aAHA,EAGEmP,OAAOnP,SAGlB,iBAAKU,UAAU,+BAA8B,WACzC,cAAGA,UAAU,qCAAoC,+BAEjD,cAAGA,UAAU,YAAW,SAInB,QAJmB,EACnBwO,KACe,OAAZ9N,QAAY,IAAZA,GAA0B,QAAd,EAAZA,EAAckM,oBAAY,WAAd,EAAZ,EAA4BN,gBAC5BhN,UACH,aAHA,EAGEmP,OAAOnP,SAGlB,iBAAKU,UAAU,+BAA8B,WACzC,cAAGA,UAAU,qCAAoC,+BAEjD,cAAGA,UAAU,YAAW,SAInB,QAJmB,EACnBwO,KACe,OAAZ9N,QAAY,IAAZA,GAA0B,QAAd,EAAZA,EAAckM,oBAAY,WAAd,EAAZ,EAA4BL,gBAC5BjN,UACH,aAHA,EAGEmP,OAAOnP,SAGlB,iBAAKU,UAAU,+BAA8B,WACzC,cAAGA,UAAU,qCAAoC,qBACjD,cAAGA,UAAU,YAAW,UAAEuO,EAAAA,EAAAA,IAA6B,OAAZ7N,QAAY,IAAZA,GAA0B,QAAd,EAAZA,EAAckM,oBAAY,WAAd,EAAZ,EAA4BV,eAAgBA,mBAKvG,SAAC,KAAM,CAAC/I,OAAQ0C,EACZzC,QAAS,kBAAM0C,GAAe,EAAM,EAAC,UACrC,iBAAK9F,UAAU,MAAK,WAChB,gBAAK8H,IAAG,UAAKC,EAAAA,EAAAA,UAAmB,yBAAwB,OAAPhC,QAAO,IAAPA,OAAO,EAAPA,EAASoB,UAAYa,IAAI,aAC1E,SAAC,KAAM,CAAC/E,QAAS,kBAAMgF,OAAOC,KAAK,GAAD,OAAIH,EAAAA,EAAAA,UAAmB,yBAAwB,OAAPhC,QAAO,IAAPA,OAAO,EAAPA,EAASoB,UAAY,SAAS,EAAEnH,UAAU,OAAOyD,QAAQ,QAAO,6BAK9J,E,oECmYA,GA9sBmB,WAAO,IAAD,YAEf+I,GAAWC,EAAAA,EAAAA,MACjB,GACIvN,EAAAA,EAAAA,KACA,SAACC,GAAK,OAAKA,EAAMmG,KAAKC,IAAI,IAFtBzJ,EAAY,EAAZA,aAAqDkT,GAA/B,EAAR/B,SAAoB,EAAVhE,WAA2B,EAAfC,gBAA2B,EAAV8F,YAAmCC,GAAF,EAArBhT,sBAAwC,EAAjBgT,mBAK1FC,GAAWC,EAAAA,GAAAA,MACXC,EAA2B,QAAjB,EAAGF,EAAS/P,aAAK,aAAd,EAAgB/D,KAC7BiK,EAAqB,QAAd,EAAA6J,EAAS/P,aAAK,OAAd,EAAgBkG,KAAO6J,EAAS/P,MAAMkG,KAAO,MAE1D,GAAwCjI,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA7CsD,EAAY,KAAEC,EAAe,KACpC,GAAwBvD,EAAAA,EAAAA,UAAS,GAAE,eAA5BuK,EAAI,KAAED,EAAO,KACd2H,GAAWC,EAAAA,GAAAA,MACjB,GAA8BC,EAAAA,GAAAA,KAAmB,eAA1C/T,EAAO,KAAE6B,EAAU,KAEtBmS,EAAqB,CACrBpP,QAAS,CAELnC,QAAS,GACTK,SAAU,GACVC,YAAa,GACbC,YAAa,GACbC,SAAU,GACVf,YAAa,GACbgB,YAAa,GACbC,YAAa,GACbC,QAAS,GACTC,UAAW,GACX6P,UAAW,GACXnM,OAAQ,IAEZ+B,YAAa,CACTL,aAAc,GACdwL,aAAc,GACdlL,cAAe,GACfJ,WAAY,GACZE,YAAa,GACbG,WAAY,GACZC,OAAQ,GACRC,UAAW,GACXnC,OAAQ,IAEZ6C,QAAS,CACLP,WAAY,GACZC,SAAU,GACV4K,SAAU,GACV3K,QAAS,GACTC,SAAU,GACV4J,WAAY,IAEhBxF,eAAgB,CACZZ,eAAgB,GAChBF,UAAW,GAEXC,aAAc,GACdI,WAAY,GACZD,SAAU,GACVE,eAAgB,GAChBH,SAAU,GACVI,SAAU,GACVa,sBAAuB,GAEvBL,gBAAkB,GAClBG,iBAAiB,GACjBC,gBAAgB,IAEpBwC,SAAU,CACN9P,OAAQ,GACR0P,UAAW,GACXC,SAAU,GACVC,QAAS,GACTC,YAAa,GACb2D,WAAY,IAEhB/C,aAAc,CACVR,aAAc,GACdC,WAAY,GACZC,gBAAiB,GACjBC,gBAAiB,GACjBL,eAAgB,GAChBW,aAAc,IAElBO,qBAAsB,CAClBL,WAAY,GACZC,SAAU,GACV+B,YAAa,IAGjB3I,YAAa,GAEbqB,gBAAiB,CACb,CACIL,UAAW,GACXD,SAAU,GACVU,UAAW,GACX+H,eAAgB,QAM5B,GAAsDxS,EAAAA,EAAAA,YAAU,eAAzD+C,EAAmB,KAAEU,EAAsB,KAC5CgP,GAAoB3Q,EAAAA,EAAAA,KAAY,SAAAC,GAAK,eAAqB,QAArB,EAAIA,EAAMC,mBAAW,OAAM,QAAN,EAAjB,EAAmBhE,YAAI,WAAN,EAAjB,EAAyB0U,QAAQ,KAChFxS,EAAAA,EAAAA,YAAU,WACNkP,GAASuD,EAAAA,EAAAA,IAAkBjU,GAC/B,GAAG,KACHwB,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACS,OAAjBuS,QAAiB,IAAjBA,GAAsB,QAAL,EAAjBA,EAAmBG,WAAG,OAAtB,EAAwBnM,OAAS,WAEjC,IADA,IAAIoM,EAAc,GACT3J,EAAI,EAAGA,GAAqB,OAAjBuJ,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBG,IAAInM,QAAQyC,IACJ,aAAtB,OAAjBuJ,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBG,IAAI1J,GAAG4J,WAAyB,WACnD,IAAMC,EAAUC,KAAKC,MAAuB,OAAjBR,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBG,IAAI1J,GAAGC,UACrD4J,EAAQ3N,KAAI,SAACC,EAAMC,GACfuN,EAAY5N,KAAK,CACb,SAAY8N,EAAQzN,GACpB,SAAYyN,EAAQzN,GAAO4N,cAC3B,UAAa,GACb,SAAY,GACZ,UAAa,UAErB,GAAE,CAViD,GAa3Dd,EAAmBpJ,YAAc6J,EACjCpP,EAAuB2O,EAAmB,CAjBT,GAmBjC3O,EAAuB2O,EAE/B,GAAG,CAACK,IAEJ,IAqDMU,GAAWC,EAAAA,EAAAA,UACXC,GAAYD,EAAAA,EAAAA,UAEZ1R,EAAW,SAAC4R,GAEVhJ,EADAgJ,EAAW,EACH,EACDA,EAAW,EACV,EAEAA,EAEhB,EAkFMC,EAAS,yCAAG,6GAGW,GAFrBC,GAAmBC,EAAAA,GAAAA,QAAmB,OAAZnQ,QAAY,IAAZA,OAAY,EAAZA,EAAc0F,YAAyB,OAAZ1F,QAAY,IAAZA,OAAY,EAAZA,EAAc+G,iBAEvEhB,QAAQ4G,IAAI3M,GACC,QAAT2E,EAAc,iBA6FT,OAlFLuL,GAVAA,EAAmBA,EAAiBpO,KAAI,SAACnG,GACrC,GAAsB,KAAd,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAM8K,UACN,MAAO,CACH,SAAgB,OAAJ9K,QAAI,IAAJA,OAAI,EAAJA,EAAMqK,SAClB,UAAiB,OAAJrK,QAAI,IAAJA,OAAI,EAAJA,EAAM+K,UACnB,SAAgB,OAAJ/K,QAAI,IAAJA,OAAI,EAAJA,EAAM8K,SAClB,UAAiB,OAAJ9K,QAAI,IAAJA,OAAI,EAAJA,EAAMwL,UAG/B,KACoC/F,QAAO,SAAAW,GAAI,YAAaqO,IAATrO,GAA+B,OAATA,CAAa,IACxE,GACV,eAAkBwM,EAClB,SAAYvO,EAAazC,QACzB,WAAcyC,EAAapC,SAC3B,cAAiBoC,EAAanC,YAC9B,cAAiBmC,EAAalC,YAC9B,WAAckC,EAAajC,SAC3B,cAAiBiC,EAAahC,YAC9B,aAAgBgC,EAAa/B,YAC7B,SAAY+B,EAAa9B,QACzB,WAAc8B,EAAa7B,UAC3B,aAAgB6B,EAAahD,YAC7B,0BAA6BgD,EAAa6B,OAC1C,cAAiB7B,EAAaiO,gBAC9B,aAAgBjO,EAAayD,WAC7B,UAAazD,EAAa2D,YAC1B,aAAgB3D,EAAa8D,WAC7B,QAAW9D,EAAa+D,OACxB,YAAe/D,EAAagE,UAC5B,WAAchE,EAAaoE,SAC3B,WAAcpE,EAAagP,SAC3B,SAAYhP,EAAaqE,QACzB,UAAarE,EAAasE,SAC1B,YAAetE,EAAamE,WAC5B,YAAenE,EAAakO,WAC5B,iBAAoBlO,EAAa8H,eACjC,WAAc9H,EAAa4H,UAE3B,eAAkB5H,EAAa6H,aAC/B,iBAAoB7H,EAAakI,eACjC,aAAgBlI,EAAaiI,WAC7B,UAAajI,EAAagI,SAC1B,UAAahI,EAAa+H,SAC1B,UAAa/H,EAAamI,SAC1B,qBAAwBnI,EAAagJ,sBACrC,eAAkBhJ,EAAagO,UAC/B,cAAiBhO,EAAawD,YAC9B,gBAAmBxD,EAAa6D,cAChC,eAAkB7D,EAAauD,aAC/B,WAAc,SACd,SAAY,UACZ,cAAiB2M,EACjB,cAAiB,CACb,CACI,WAAclQ,EAAauL,SAASJ,UACpC,UAAanL,EAAauL,SAASH,SACnC,MAASpL,EAAauL,SAASF,QAC/B,MAASrL,EAAauL,SAASD,YAC/B,OAAU,SACV,aAAgB,QAChB,YAAe,cACf,UAAa,YACb,UAAa,WACb,YAAetL,EAAauL,SAAS0D,aAG7C,UAAa,CACT,CACI,UAAyB,OAAZjP,QAAY,IAAZA,OAAY,EAAZA,EAAcsM,SAC3B,UAAyB,OAAZtM,QAAY,IAAZA,OAAY,EAAZA,EAAcqO,YAC3B,YAAe,cACf,OAAU,EACV,eAA8B,OAAZrO,QAAY,IAAZA,OAAY,EAAZA,EAAcqM,WAChC,eAAkBiC,MAEzB,sBACa,WAAQ,oBACV,YAAS,SACrB,gBAAiB,CACb,CACI,cAAiB,mBACjB,cAAiBtO,EAAakM,aAAaC,aAC3C,WAAc,uBACd,aAAgBnM,EAAakM,aAAaN,gBAC1C,YAAe5L,EAAakM,aAAaP,WACzC,OAAU3L,EAAakM,aAAaV,eACpC,eAAkBxL,EAAakM,aAAaL,gBAC5C,eAAkByC,EAClB,wBAA2BtO,EAAakM,aAAaR,aACrD,gCAAmC,KA/E3C2E,EAiFC,YAEclU,EAAAA,EAAAA,IAAiBkU,GAAW,OAE3B,aAFdzV,EAAI,QAEDC,UAGLqM,EAAAA,EAAAA,IAAiB,UAAW,yBAC5ByH,EAAS,8BAIO,WAAhB/T,EAAKC,QACL8B,GAAW2T,EAAAA,EAAAA,IAAY1V,IAC1B,2BACe,SAAT+J,EAAe,iBAqGrB,OAnGDoB,QAAQ4G,IAAI3M,EAAc,gBAY1BkQ,GAXAA,EAAmBA,EAAiBpO,KAAI,SAACnG,GACrC,GAAsB,KAAd,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAM8K,UACN,MAAO,CACH,GAAM9K,EAAKzB,GACX,SAAgB,OAAJyB,QAAI,IAAJA,OAAI,EAAJA,EAAMqK,SAClB,UAAiB,OAAJrK,QAAI,IAAJA,OAAI,EAAJA,EAAM+K,UACnB,SAAgB,OAAJ/K,QAAI,IAAJA,OAAI,EAAJA,EAAM8K,SAClB,UAAiB,OAAJ9K,QAAI,IAAJA,OAAI,EAAJA,EAAMwL,UAG/B,KACoC/F,QAAO,SAAAW,GAAI,YAAaqO,IAATrO,GAA+B,OAATA,CAAa,IAElFwO,EAAa,CACb,GAAgB,OAAV7B,QAAU,IAAVA,OAAU,EAAVA,EAAYxU,GAClB,eAAkBqU,EAClB,SAAYvO,EAAazC,QACzB,WAAcyC,EAAapC,SAC3B,cAAiBoC,EAAanC,YAC9B,cAAiBmC,EAAalC,YAC9B,WAAckC,EAAajC,SAC3B,cAAiBiC,EAAahC,YAC9B,aAAgBgC,EAAa/B,YAC7B,SAAY+B,EAAa9B,QACzB,WAAc8B,EAAa7B,UAC3B,aAAgB6B,EAAahD,YAC7B,eAAkBgD,EAAagO,UAC/B,0BAA6BhO,EAAa6B,OAC1C,cAAiB7B,EAAaiO,gBAC9B,aAAgBjO,EAAayD,WAC7B,UAAazD,EAAa2D,YAC1B,aAAgB3D,EAAa8D,WAC7B,QAAW9D,EAAa+D,OACxB,YAAe/D,EAAagE,UAE5B,WAAchE,EAAaoE,SAC3B,WAAcpE,EAAagP,SAC3B,SAAYhP,EAAaqE,QACzB,UAAarE,EAAasE,SAC1B,YAAetE,EAAamE,WAC5B,YAAenE,EAAakO,WAC5B,iBAAoBlO,EAAa8H,eACjC,WAAc9H,EAAa4H,UAE3B,eAAkB5H,EAAa6H,aAC/B,aAAgB7H,EAAaiI,WAC7B,UAAajI,EAAagI,SAC1B,iBAAoBhI,EAAakI,eACjC,UAAalI,EAAa+H,SAC1B,UAAa/H,EAAamI,SAC1B,qBAAwB,KACxB,cAAiBnI,EAAawD,YAC9B,gBAAmBxD,EAAa6D,cAChC,eAAkB7D,EAAauD,aAC/B,cAAiB2M,EACjB,UAAuB,OAAVxB,QAAU,IAAVA,OAAU,EAAVA,EAAY8B,UACzB,cAAiB,CACb,CACI,GAAgB,OAAV9B,QAAU,IAAVA,GAA4B,QAAlB,EAAVA,EAAY+B,cAAc,UAAE,WAAlB,EAAV,EAA8BvW,GACpC,gBAA6B,OAAVwU,QAAU,IAAVA,GAA4B,QAAlB,EAAVA,EAAY+B,cAAc,UAAE,WAAlB,EAAV,EAA8BC,gBACjD,WAAc1Q,EAAauL,SAASJ,UACpC,UAAanL,EAAauL,SAASH,SACnC,MAASpL,EAAauL,SAASF,QAC/B,MAASrL,EAAauL,SAASD,YAC/B,YAAetL,EAAauL,SAAS0D,WACrC,YAAe,cACf,UAAa,YACb,UAAa,WACb,KAAQ,KACR,MAAS,KACT,QAAW,KACX,QAAW,KACX,OAAU,SACV,eAAkB,KAClB,aAAgB,KAChB,aAAgB,yEAGxB,WAAwB,OAAVP,QAAU,IAAVA,OAAU,EAAVA,EAAYiC,WAC1B,WAAwB,OAAVjC,QAAU,IAAVA,OAAU,EAAVA,EAAYkC,WAC1B,SAAY,UACZ,cAAiB,CACb,CACI,GAAgB,OAAVlC,QAAU,IAAVA,GAA4B,QAAlB,EAAVA,EAAYmC,cAAc,UAAE,WAAlB,EAAV,EAA8B3W,GACpC,cAAiB,mBACjB,OAAU8F,EAAakM,aAAaV,eACpC,gBAA6B,OAAVkD,QAAU,IAAVA,GAA4B,QAAlB,EAAVA,EAAYmC,cAAc,UAAE,WAAlB,EAAV,EAA8BC,gBACjD,cAAiB,aACjB,YAAe9Q,EAAakM,aAAaP,WACzC,aAAgB3L,EAAakM,aAAaN,gBAC1C,eAAkB5L,EAAakM,aAAaL,gBAC5C,WAAc,uBACd,eAA4B,OAAV6C,QAAU,IAAVA,GAA4B,QAAlB,EAAVA,EAAYmC,cAAc,UAAE,WAAlB,EAAV,EAA8B3B,eAChD,gCAAmC,EACnC,wBAA2BlP,EAAakM,aAAaR,gBAIhE,WACkBtP,EAAAA,EAAAA,IAAiBmU,GAAW,QAG3B,aAHd3V,EAAI,QAGDC,UACLqM,EAAAA,EAAAA,IAAiB,UAAW,yBAC5ByH,EAAS,8BAIO,WAAhB/T,EAAKC,QACL8B,GAAW2T,EAAAA,EAAAA,IAAY1V,IAC1B,4CAGR,kBApOc,mCAwOTmW,EAAa,WAEX3S,EADQ,QAARuG,EACSsC,EAAO,EAEPA,EAAO,EAExB,GAEArK,EAAAA,EAAAA,YAAU,WACN,GAAI8R,EAAY,CAEZ,IAAMsC,GAAiBC,EAAAA,GAAAA,IAAmBnC,EAAoBJ,GAC9DsC,EAAetL,YAAY5D,KAAI,SAAAzC,GAC3B,IAAM6R,EAAaxC,EAAWyC,cAAcC,MAAK,SAAAC,GAAC,OAAIA,EAAErL,WAAa3G,EAAE2G,QAAQ,IAC3EkL,IACA7R,EAAEqH,UAAYwK,EAAWxK,UACzBrH,EAAEoH,SAAWyK,EAAWzK,SACxBpH,EAAE8H,UAAY+J,EAAW/J,UACzB9H,EAAE2G,SAAWkL,EAAWlL,SACxB3G,EAAEnF,GAAKgX,EAAWhX,GAE1B,IACA+F,EAAgB+Q,EACpB,CAEJ,GAAG,CAACvR,EAAqBiP,KAEzB9R,EAAAA,EAAAA,YAAU,WAENkP,GAASwF,EAAAA,EAAAA,IAAY,CAAElW,aAAAA,KACvB0Q,GAASyF,EAAAA,EAAAA,IAAiB,CAAEnW,aAAAA,IAMhC,GAAG,CAAC0Q,EAAU1Q,IAEd,IAAIoW,EAAiB,CAAC,CAClB3Q,KAAM,YAEP,CACCA,KAAM,WACN4Q,KAAM,6BACP,CACC5Q,KAAK,mBAwBT,MAtBa,SAAT8D,IACA6M,EAAiB,CACb,CACI3Q,KAAM,YAGV,CACIA,KAAM,WACN4Q,KAAM,6BAEV,CACI5Q,KAAgB,OAAV6N,QAAU,IAAVA,OAAU,EAAVA,EAAYgD,SAClBD,KAAM,4BACNhT,MAAMiQ,GAEV,CACI7N,KAAM,kBAOdpB,IAAuB,4BAEnB,SAAC,KAAiB,CAACkS,KAAMH,IACf,QAAT7M,GAAiB,UAAC,KAAK,CAAC0F,QAASpD,EAAK,WACnC,SAAC,UAAU,CAAC3E,MAAM,qBAClB,SAAC,UAAU,CAACA,MAAM,iBAClB,SAAC,UAAU,CAACA,MAAM,gBACX,UAAC,KAAK,CAAC+H,QAASpD,EAAK,WAC5B,SAAC,UAAU,CAAC3E,MAAM,qBAClB,SAAC,UAAU,CAACA,MAAM,gBAGtB,iBAAKhD,UAAU,6CAA4C,UAK7C,IAAT2H,IACG,SAAC,EAAc,CACXkC,IAAK0G,EACL7P,aAAcA,EACdC,gBAAiBA,EACjB+G,QAASA,EACTC,KAAMA,EACNxH,oBAAqBA,EACrBU,uBAAwBA,EACxBwE,KAAMA,IAGJ,IAATsC,IACG,SAAC,KAAa,CAAC3H,UAAU,SAASwL,UAAU,SAAQ,UAChD,SAAC8G,GAAoB,CACjBzI,IAAK4G,EACL/P,aAAcA,EACdC,gBAAiBA,EACjB+G,QAASA,EACTC,KAAMA,EACNxH,oBAAqBA,EACrBU,uBAAwBA,MAK1B,IAAT8G,IAEG,SAAC,KAAa,CAAC3H,UAAU,SAASwL,UAAU,SAAQ,UAIhD,SAAC,GAAe,CAAC9K,aAAcA,EAAciH,KAAMA,EAAMD,QAASA,EAASlM,QAASA,EAAS6J,KAAMA,UAI/G,iBAAKrF,UAAU,6BAA4B,WAEvC,yBACK2H,EAAO,IAAK,SAAC,KAAM,CAChB3H,UAAU,UACViB,OAAK,GACDkF,gBAAiB,UACjBoM,UAAW,SACXC,SAAU,MAAG,oBAAY,SAAM,iBACxB,SAAO,GAElBvP,QAASwO,EACTpQ,KAAK,SAAQ,yBAMrB,iBAAKrB,UAAU,OAAM,UAChB2H,GAAQ,IACL,+BACI,SAAC,MAAI,CACD3H,UAAU,iCACVyS,GAAG,4BAA2B,UAE9B,SAAC,KAAM,CACHzS,UAAU,OACViD,QAASwO,EACThO,QAAQ,QACRxC,OAAK,GACDkF,gBAAiB,UACjBoM,UAAW,SACXC,SAAU,MAAG,oBAAY,SAAM,iBACxB,SAAO,GAChB,wBAOjB7K,EAAO,IACJ,SAAC,KAAM,CACHlE,QAAQ,QACRR,QA/dT,SAAC1C,GACK,IAAD,EAGA,EAHH,IAAToH,IACgB,QAAhB,EAAA4I,EAASxF,eAAO,OAAhB,EAAkBQ,0BAET,IAAT5D,IACiB,QAAjB,EAAA8I,EAAU1F,eAAO,OAAjB,EAAmBQ,yBAE3B,EAydwB3H,SAAmB,IAAT+D,EACV1G,OAAK,GAEDsR,UAAW,SACXC,SAAU,MAAG,oBAAY,SAAM,iBACxB,SAAO,GAChB,SAEQ,IAAT7K,EAAa,YAAc,SAI1B,IAATA,IACG,+BAKI,SAAC,KAAM,CAAC1E,QAAS0N,EAAWlN,QAAQ,QAAQxC,OAAK,GAE7CsR,UAAW,SACXC,SAAU,MAAG,oBAAY,SAAM,iBACxB,SAAO,GAChB,SACG,kCAcjC,EC5tBe,SAASE,KAEtB,OACE,+BAEA,0BACA,SAACC,GAAc,OAInB,C,4RCDaC,GAAYC,EAAAA,EAAAA,IACrB,6BAA4B,yCAC5B,WAAOzX,GAAI,6FACgBN,EAAAA,EAAAA,IAAkBM,GAAK,OAAhC,OAARK,EAAQ,yBAEPA,EAASL,MAAI,2CACvB,mDAL2B,IAQnB0X,EAAY,yCAAG,WAAO1X,GAAI,6FACZD,EAAAA,EAAAA,IAAqBC,GAAK,OAAnC,OAARK,EAAQ,yBACPA,EAASL,MAAI,2CACvB,gBAHwB,sCAKZ4W,GAAca,EAAAA,EAAAA,IACvB,+BAA8B,yCAC9B,WAAOzX,GAAI,6FACgB4B,EAAAA,EAAAA,IAAsB5B,GAAK,OAApC,OAARK,EAAQ,yBAEPA,EAASL,MAAI,2CACvB,mDAL6B,IAQrB6W,GAAmBY,EAAAA,EAAAA,IAC5B,oCAAmC,yCACnC,WAAOzX,GAAI,6FACgB6B,EAAAA,EAAAA,IAA2B7B,GAAK,OAAzC,OAARK,EAAQ,yBAEPA,EAASL,MAAI,2CACvB,mDALkC,IAS1BuR,GAAkBkG,EAAAA,EAAAA,IAC3B,mCAAkC,yCAClC,WAAOzX,GAAI,6FAEgB8B,EAAAA,EAAAA,IAA0B9B,GAAK,OAAxC,OAARK,EAAQ,yBAEPA,EAASL,MAAI,2CACvB,mDANiC,IAUzB+R,GAAiB0F,EAAAA,EAAAA,IAC1B,kCAAiC,yCAEjC,WAAOzX,GAAI,6FACgBY,EAAAA,EAAAA,IAAiBZ,GAAK,OAA/B,OAARK,EAAQ,yBAGPA,EAASL,MAAI,2CACvB,mDAPgC,IAUxB2U,GAAoB8C,EAAAA,EAAAA,IAC7B,qCAAoC,yCACpC,WAAOzX,GAAI,6FACgBwB,EAAAA,EAAAA,IAAsBxB,GAAK,OAApC,OAARK,EAAQ,yBACPA,EAASL,MAAI,2CACvB,mDAJmC,IAMlC2X,GAAYC,EAAAA,EAAAA,IAAY,CAC1BzR,KAAM,mBACN0R,aAAc,CACVC,SAAS,EACTC,UAAW,GACXC,UA9EwB,CAC5BC,MAAO,EACPC,UAAW,EACXC,SAAU,GACVC,MAAO,GACPC,KAAM,CACFC,MAAO,GACPC,IAAK,KAwEL1U,aAAa,GACbI,kBAAkB,GACjBqN,iBAAiB,GACjBQ,gBAAkB,IAEvB0G,SAAU,CACNC,aAAc,SAAC1U,EAAO2U,GAClB3U,EAAMgU,UAAYW,EAAOC,OAC7B,EACAC,aAAc,SAAC7U,EAAO2U,GAClB3U,EAAMiU,UAAYU,EAAOC,OAC7B,EACAE,gBAAiB,SAAC9U,EAAO2U,GACrB3U,EAAMF,aAAe6U,EAAOC,OAChC,EACAG,qBAAsB,SAAC/U,EAAO2U,GAC1B3U,EAAME,kBAAoByU,EAAOC,OACrC,EAIAI,oBAAqB,SAAChV,EAAO2U,GACzB3U,EAAMuN,iBAAmBoH,EAAOC,OACpC,EAEAK,cAAgB,SAACjV,EAAM2U,GACnB3U,EAAM+N,gBAAkB4G,EAAOC,OACnC,GAEJM,eAAa,eACRzB,EAAU0B,WAAY,SAACnV,EAAO2U,GAC3B3U,EAAMgU,UAAYW,EAAOC,QACzB5U,EAAMiU,UAAUC,MAAQS,EAAOC,QAAQV,MACvClU,EAAM+T,SAAU,CACpB,KAAC,SACAN,EAAU2B,SAAU,SAACpV,GAClBA,EAAM+T,SAAU,CACpB,KAAC,SAEAlB,EAAYsC,WAAY,SAACnV,EAAO2U,GAAY,IAAD,EAGxC3U,EAAMF,aAAoC,QAAxB,EAAC6U,EAAOC,QAAQtY,gBAAQ,aAAvB,EAAyB+G,KAAI,SAACgS,GAAQ,MAAM,CAC3D3Z,MAAO2Z,EAAS5Z,GAChB+C,MAAO6W,EAASC,UACnB,IAEDtV,EAAM+T,SAAU,CACpB,KAAC,SACAlB,EAAYuC,SAAU,SAACpV,GACpBA,EAAM+T,SAAU,CACpB,KAAC,SAEAjB,EAAiBqC,WAAY,SAACnV,EAAO2U,GAAY,IAAD,EAE7C3U,EAAME,kBAAkC,QAAjB,EAAGyU,EAAOC,eAAO,aAAd,EAAgBvR,KAAI,SAACkS,GAAM,MAAM,CACvD7Z,MAAO6Z,EAAO9Z,GACd+C,MAAO+W,EAAOtC,SACjB,IAEDjT,EAAM+T,SAAU,CACpB,KAAC,SACAjB,EAAiBsC,SAAU,SAACpV,GACzBA,EAAM+T,SAAU,CACpB,KAAC,SAIAvG,EAAgB2H,WAAY,SAACnV,EAAO2U,GAAY,IAAD,EAG5C3U,EAAMuN,iBAAwC,QAAxB,EAACoH,EAAOC,QAAQtY,gBAAQ,aAAvB,EAAyB+G,KAAI,SAACmS,GAAQ,MAAM,CAC/D9Z,MAAO8Z,EAAS/Z,GAChB+C,MAAOgX,EAASC,oBACnB,IAEDzV,EAAM+T,SAAU,CACpB,KAAC,SACAvG,EAAgB4H,SAAU,SAACpV,GACxBA,EAAM+T,SAAU,CACpB,KAAC,SACA/F,EAAemH,WAAY,SAACnV,EAAM2U,GAAY,IAAD,IAC1C3U,EAAM+N,gBAAgC,QAAjB,EAAG4G,EAAOC,eAAO,OAAK,QAAL,EAAd,EAAgB/D,WAAG,WAAL,EAAd,EAAqBxN,KAAI,SAACkS,GAAM,MAAM,CAC1D7Z,MAAO6Z,EAAO9Z,GACd+C,MAAO+W,EAAOnT,KACjB,GACL,KAAC,SACA4L,EAAeoH,SAAS,SAACpV,EAAM2U,GAC5B3U,EAAM+T,SAAU,CACpB,KAAC,SACAnD,EAAkBuE,WAAY,SAACnV,EAAO2U,GACnC3U,EAAM2Q,SAAWgE,EAAOC,QAExB5U,EAAM+T,SAAU,CACpB,KAAC,SACAnD,EAAkBwE,SAAU,SAACpV,GAC1BA,EAAM+T,SAAU,CACpB,IAAC,KAKF,EAA8GH,EAAU8B,QAAlGb,GAAF,EAAZH,aAA0B,EAAZG,cAA4B,EAAfC,gBAAoC,EAApBC,qBAAwC,EAAnBC,oBAAiC,EAAbC,cAEnG,KAAerB,EAAiB,O","sources":["mock/data/timezones.js","services/OperatorsService.js","services/PartnersService.js","utils/hooks/useTimeOutMessage.js","views/accounts/Partners/components/PartnerAccountInfo.js","views/accounts/Partners/components/PartnerContactInfo.js","views/accounts/Partners/components/PartnerAddressInfo.js","views/accounts/Partners/components/PartnerUploadFiles.js","views/accounts/Partners/components/PartnerSettlementInfo.js","views/accounts/Partners/components/PartnerDetails.js","views/accounts/Partners/components/PartnerUserInfo.js","views/accounts/Partners/components/PartnersContractInfo.js","views/accounts/Partners/components/PatnerMasterPermissions.js","views/accounts/Partners/components/PartnersMainUserInfo.js","views/accounts/Partners/components/PartnersPreview.js","views/accounts/Partners/components/StepControlled.js","views/accounts/Partners/components/NewPartners.js","views/accounts/Partners/store/dataSlice.js"],"sourcesContent":["export const timeZone = [\r\n    { id: 1, value: '(UTC-10:00) Hawaii' },\r\n    { id: 2, value: '(UTC-09:00) Alaska' },\r\n    { id: 3, value: '(UTC-08:00) Baja California' },\r\n    { id: 4, value: '(UTC-08:00) Pacific Time (US & Canada)' },\r\n    { id: 5, value: '(UTC-07:00) Arizona' },\r\n    { id: 6, value: '(UTC-07:00) Chihuahua, La Paz, Mazatlan' },\r\n    { id: 7, value: '(UTC-07:00) Mountain Time (US & Canada)' },\r\n    { id: 8, value: '(UTC-06:00) Central America' },\r\n    { id: 9, value: '(UTC-06:00) Central Time (US & Canada)' },\r\n    { id: 10, value: '(UTC-06:00) Guadalajara, Mexico City, Monterrey' },\r\n    { id: 11, value: '(UTC-06:00) Saskatchewan' },\r\n    { id: 12, value: '(UTC-05:00) Bogota, Lima, Quito, Rio Branco' },\r\n    { id: 13, value: '(UTC-05:00) Eastern Time (US & Canada)' },\r\n    { id: 14, value: '(UTC-05:00) Indiana (East)' },\r\n    { id: 15, value: '(UTC-04:30) Caracas' },\r\n    { id: 16, value: '(UTC-04:00) Asuncion' },\r\n    { id: 17, value: '(UTC-04:00) Atlantic Time (Canada)' },\r\n    { id: 18, value: '(UTC-04:00) Cuiaba' },\r\n    { id: 19, value: '(UTC-04:00) Georgetown, La Paz, Manaus, San Juan' },\r\n    { id: 20, value: '(UTC-04:00) Santiago' },\r\n    { id: 21, value: '(UTC-03:30) Newfoundland' },\r\n    { id: 22, value: '(UTC-03:00) Brasilia' },\r\n    { id: 23, value: '(UTC-03:00) Buenos Aires' },\r\n    { id: 24, value: '(UTC-03:00) Cayenne, Fortaleza' },\r\n    { id: 25, value: '(UTC-03:00) Greenland' },\r\n    { id: 26, value: '(UTC-03:00) Montevideo' },\r\n    { id: 27, value: '(UTC-03:00) Salvador' },\r\n    { id: 28, value: '(UTC-02:00) Coordinated Universal Time-02' },\r\n    { id: 29, value: '(UTC-01:00) Azores' },\r\n    { id: 30, value: '(UTC-01:00) Cape Verde Is.' },\r\n    { id: 31, value: '(UTC) Casablanca' },\r\n    { id: 32, value: '(UTC) Coordinated Universal Time' },\r\n    { id: 33, value: '(UTC) Dublin, Edinburgh, Lisbon, London' },\r\n    { id: 34, value: '(UTC) Monrovia, Reykjavik' },\r\n    {\r\n        id: 35,\r\n        value: '(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna',\r\n    },\r\n    {\r\n        id: 36,\r\n        value: '(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague',\r\n    },\r\n    { id: 37, value: '(UTC+01:00) Brussels, Copenhagen, Madrid, Paris' },\r\n    { id: 38, value: '(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb' },\r\n    { id: 39, value: '(UTC+01:00) West Central Africa' },\r\n    { id: 40, value: '(UTC+01:00) Windhoek' },\r\n    { id: 41, value: '(UTC+02:00) Amman' },\r\n    { id: 42, value: '(UTC+02:00) Athens, Bucharest' },\r\n    { id: 43, value: '(UTC+02:00) Beirut' },\r\n    { id: 44, value: '(UTC+02:00) Cairo' },\r\n    { id: 45, value: '(UTC+02:00) Damascus' },\r\n    { id: 46, value: '(UTC+02:00) E. Europe' },\r\n    { id: 47, value: '(UTC+02:00) Harare, Pretoria' },\r\n    {\r\n        id: 48,\r\n        value: '(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius',\r\n    },\r\n    { id: 49, value: '(UTC+02:00) Istanbul' },\r\n    { id: 50, value: '(UTC+02:00) Jerusalem' },\r\n    { id: 51, value: '(UTC+02:00) Kaliningrad (RTZ 1)' },\r\n    { id: 52, value: '(UTC+02:00) Tripoli' },\r\n    { id: 53, value: '(UTC+03:00) Baghdad' },\r\n    { id: 54, value: '(UTC+03:00) Kuwait, Riyadh' },\r\n    { id: 55, value: '(UTC+03:00) Minsk' },\r\n    { id: 56, value: '(UTC+03:00) Moscow, St. Petersburg, Volgograd (RTZ 2)' },\r\n    { id: 57, value: '(UTC+03:00) Nairobi' },\r\n    { id: 58, value: '(UTC+03:30) Tehran' },\r\n    { id: 59, value: '(UTC+04:00) Abu Dhabi, Muscat' },\r\n    { id: 60, value: '(UTC+04:00) Baku' },\r\n    { id: 61, value: '(UTC+04:00) Izhevsk, Samara (RTZ 3)' },\r\n    { id: 62, value: '(UTC+04:00) Port Louis' },\r\n    { id: 63, value: '(UTC+04:00) Tbilisi' },\r\n    { id: 64, value: '(UTC+04:00) Yerevan' },\r\n    { id: 65, value: '(UTC+04:30) Kabul' },\r\n    { id: 66, value: '(UTC+05:00) Ashgabat, Tashkent' },\r\n    { id: 67, value: '(UTC+05:00) Ekaterinburg (RTZ 4)' },\r\n    { id: 68, value: '(UTC+05:00) Islamabad, Karachi' },\r\n    { id: 69, value: '(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi' },\r\n    { id: 70, value: '(UTC+05:30) Sri Jayawardenepura' },\r\n    { id: 71, value: '(UTC+05:45) Kathmandu' },\r\n    { id: 72, value: '(UTC+06:00) Astana' },\r\n    { id: 73, value: '(UTC+06:00) Dhaka' },\r\n    { id: 74, value: '(UTC+06:00) Novosibirsk (RTZ 5)' },\r\n    { id: 75, value: '(UTC+06:30) Yangon (Rangoon)' },\r\n    { id: 76, value: '(UTC+07:00) Bangkok, Hanoi, Jakarta' },\r\n    { id: 77, value: '(UTC+07:00) Krasnoyarsk (RTZ 6)' },\r\n    { id: 78, value: '(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi' },\r\n    { id: 79, value: '(UTC+08:00) Irkutsk (RTZ 7)' },\r\n    { id: 80, value: '(UTC+08:00) Kuala Lumpur, Singapore' },\r\n    { id: 81, value: '(UTC+08:00) Perth' },\r\n    { id: 82, value: '(UTC+08:00) Taipei' },\r\n    { id: 83, value: '(UTC+08:00) Ulaanbaatar' },\r\n    { id: 84, value: '(UTC+09:00) Osaka, Sapporo, Tokyo' },\r\n    { id: 85, value: '(UTC+09:00) Seoul' },\r\n    { id: 86, value: '(UTC+09:00) Yakutsk (RTZ 8)' },\r\n    { id: 87, value: '(UTC+09:30) Adelaide' },\r\n    { id: 88, value: '(UTC+09:30) Darwin' },\r\n    { id: 89, value: '(UTC+10:00) Brisbane' },\r\n    { id: 90, value: '(UTC+10:00) Canberra, Melbourne, Sydney' },\r\n    { id: 91, value: '(UTC+10:00) Guam, Port Moresby' },\r\n    { id: 92, value: '(UTC+10:00) Hobart' },\r\n    { id: 93, value: '(UTC+10:00) Magadan' },\r\n    { id: 94, value: '(UTC+10:00) Vladivostok, Magadan (RTZ 9)' },\r\n    { id: 95, value: '(UTC+11:00) Chokurdakh (RTZ 10)' },\r\n    { id: 96, value: '(UTC+11:00) Solomon Is., New Caledonia' },\r\n    { id: 97, value: '(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky (RTZ 11)' },\r\n    { id: 98, value: '(UTC+12:00) Auckland, Wellington' },\r\n    { id: 99, value: '(UTC+12:00) Coordinated Universal Time+12' },\r\n    { id: 100, value: '(UTC+12:00) Fiji' },\r\n    { id: 101, value: '(UTC+12:00) Petropavlovsk-Kamchatsky - Old' },\r\n    { id: 102, value: \"(UTC+13:00) Nuku'alofa\" },\r\n    { id: 103, value: '(UTC+13:00) Samoa' },\r\n    { id: 104, value: '(UTC+14:00) Kiritimati Island' },\r\n]\r\n","import ApiService from './ApiService'\r\nimport axios from 'axios'\r\n\r\nexport async function apiGetSalesDashboardData(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/dashboard',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProduct(params) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/product',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiPutSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products/update',\r\n        method: 'put',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiCreateSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products/create',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesOrders(params) {\r\n    return ApiService.fetchData({\r\n        url: `/account/acc-operators`,\r\n        //url: `/account/acc-operators?page_no=0&page_size=1000&sort_field=id`,\r\n\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesOrders(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/orders/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesOrderDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/orders-details',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiSubmitOperator(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/account/acc-operators',\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\n\r\nexport async function apiUpdateOperator(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/account/acc-operators',\r\n            method: 'put',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\n\r\nexport async function apiUpdateOpAccStatus(id, status) {\r\n    return ApiService.fetchData({\r\n        url: `/account/acc-operators?id=${id}&acc_status=${status}`,\r\n        method: 'patch',\r\n    })\r\n}\r\n\r\nexport async function apiGetCurrency(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/currency/unq-id/drop-down/${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetParentAccount(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/acc-operators/dropdown/${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetPublicRole(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/roles/master-roles/drop-down/${data.acc_mno_parent_unq_id}`,\r\n        //url: `/account/roles/master-roles/GL1`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetRolePermissions(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/role-permissions/role/${data.roleId}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiUploadFiles(file,loc1, loc2) {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        const resp = await ApiService.fetchData({\r\n            url: `/media/${loc1}/${loc2}`,\r\n            method: 'post',\r\n            data: formData,\r\n            headers:{'Content-Type': 'multipart/form-data'}\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp.data,\r\n        };\r\n\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n}\r\n\r\nexport async function apiGetUploadFileTypes(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/doc-pol?page_no=0&page_size=100&sort_feild=id&unq_id=${data}`,\r\n        method: 'get',\r\n    })\r\n}","import ApiService from './ApiService'\r\n\r\nexport async function apiGetSalesDashboardData(data) {\r\n    return ApiService.fetchData({\r\n        url: '/partner/sales/dashboard',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/partner/sales/products',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/partner/sales/products/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProduct(params) {\r\n    return ApiService.fetchData({\r\n        url: '/partner/sales/product',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiPutSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/partner/sales/products/update',\r\n        method: 'put',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiCreateSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/partner/sales/products/create',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesOrders(params) {\r\n    return ApiService.fetchData({\r\n        //url: `/account/partner?page_no=${params.pageIndex}&page_size=${params.pageSize}&sort_feild=${params.sort.key}`,\r\n\r\n        url: `/account/partner`,\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesOrders(data) {\r\n    return ApiService.fetchData({\r\n        url: '/partner/sales/orders/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesOrderDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/partner/sales/orders-details',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiSubmitPartner(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/account/partner',\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\n\r\nexport async function apiUpdatePartner(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/account/partner',\r\n            method: 'put',\r\n            data,\r\n        })\r\n\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\n\r\nexport async function apiUpdateAccPartnerStatus(id, status) {\r\n    return ApiService.fetchData({\r\n        url: `/account/acc-operators?id=${id}&acc_status=${status}`,\r\n        method: 'patch',\r\n    })\r\n}\r\n\r\nexport async function apiGetCurrencyPartner(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/currency/unq-id/drop-down/${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetParentAccountPartner(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/acc-operators/dropdown/${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetContractTypePartner(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/contract-types/unq-id-acc-type/drop-down/${data.enterAccount}/Partner`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetPublicRole(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/roles/master-roles/drop-down/${data.acc_mno_parent_unq_id}`,\r\n        //url: `/account/roles/master-roles/GL1`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetUploadFileTypes(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/doc-pol?page_no=0&page_size=100&sort_feild=id&unq_id=${data}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiUploadFiles(file,loc1, loc2) {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        const resp = await ApiService.fetchData({\r\n            url: `/media/${loc1}/${loc2}`,\r\n            method: 'post',\r\n            data: formData,\r\n            headers:{'Content-Type': 'multipart/form-data'}\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp.data,\r\n        };\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n}","import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Tooltip,\r\n    Dialog,\r\n} from 'components/ui'\r\nimport { BsFillPlusCircleFill } from 'react-icons/bs'\r\n\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useSelector } from 'react-redux'\r\nimport { timeZone } from '../../../../mock/data/timezones'\r\nimport { RiCloseCircleFill } from 'react-icons/ri'\r\nimport { useState } from 'react'\r\n\r\n\r\n\r\nexport const statusOptions = [\r\n    { label: 'Married', value: 'M' },\r\n    { label: 'Widowed', value: 'W' },\r\n    { label: 'Separated', value: 'S' },\r\n    { label: 'Divorced', value: 'D' },\r\n    { label: 'Single ', value: 'S' },\r\n]\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: 0 },\r\n    { label: 'Airtel Inc.', value: 1 },\r\n    { label: 'Airtel India', value: 2 },\r\n]\r\n\r\n\r\nconst apiConfiguration = [\r\n    { label: 'AUTOMATIC', value: 'AUTOMATIC' },\r\n    { label: 'MANUAL', value: 'MANUAL' },\r\n]\r\n\r\nconst partnerType = [\r\n\r\n    { label: 'Shipping Partner', value: 'SHIPPING_PARTNER' },\r\n    { label: 'Warehouse Partner', value: 'WAREHOUSE_PARTNER' },\r\n    { label: 'Payment Gateway partner', value: 'PAYMENT_GATEWAY_PARTNER' },\r\n]\r\n\r\nconst language = [\r\n    { label: 'English', value: 1 },\r\n    { label: 'Spanish', value: 2 },\r\n    { label: 'Arabic', value: 3 },\r\n    { label: 'Portugese', value: 4 },\r\n\r\n]\r\n\r\n// const currency = [\r\n//     { label: 'USD', value: 0 },\r\n//     { label: 'EUR', value: 1 },\r\n//     { label: 'CAD', value: 2 },\r\n//     { label: 'KWD', value: 3 },\r\n//     { label: 'INR', value: 4 },\r\n// ]\r\n\r\nconst timeZonee = [\r\n    { label: 'India (GMT+5:30)', value: 0 },\r\n    { label: 'USA (GMT-4)', value: 1 },\r\n    { label: 'Chicago (GMT-5)', value: 2 },\r\n    { label: 'Phoenix (GMT-7)', value: 3 },\r\n    { label: 'Los Angeles (GMT-7)', value: 4 },\r\n]\r\n\r\nconst custOperator = [\r\n    { label: 'Airtel Telangana', value: 0 },\r\n    { label: 'Airtel Mumbai', value: 1 },\r\n    { label: 'Airtel Rajasthan ', value: 2 },\r\n\r\n]\r\n\r\nconst orientationtype = [\r\n    { label: 'Right to Left', value: \"RTL\" },\r\n    { label: 'Left to Right', value: \"LTR\" },\r\n]\r\n\r\nconst oparatorAccountInfoInitialValues = {\r\n    partnerId: \"\",//not in api\r\n    partnerTitle: \"\",//not in api\r\n    operater: \"\", //not in api\r\n    accCompName: \"\",\r\n    accIncorpDt: \"\",\r\n    accTaxId: \"\",\r\n    partnerType: \"\",//not in api\r\n    accTimeZone: '',\r\n    accCurrency: '',\r\n    accLang: '',\r\n    accOrient: '',\r\n    apiConfig: \"\",//not in api\r\n}\r\n\r\nconst operaterAccountInfoValidationSchema = Yup.object().shape({\r\n    //partnerId: Yup.string().required('Please Enter Title'),\r\n    accName: Yup.string().min(2, \"Title must be at least 2 characters\").max(100).required('Please enter a valid partner title').nullable(),\r\n    operater: Yup.string().required('Please select operator').nullable(),\r\n    accCompName: Yup.string().min(2, \"Name must be at least 2 characters\").max(100).required('Please enter company name').nullable(),\r\n    accIncorpDt: Yup.string().required('Please enter incorporate date').nullable(),\r\n    accTaxId: Yup.string().min(1).max(50).required('Please enter tax id').nullable(),\r\n     partnerType : Yup.string().required('Please select a partner type from the list').nullable(),\r\n    accTimeZone: Yup.string().required('Please select time zone').nullable(),\r\n    accCurrency: Yup.string().required('Please select currency').nullable(),\r\n    accLang: Yup.string().required('Please select language').nullable(),\r\n    accOrient: Yup.string().required('Please select display orientation').nullable(),\r\n    // apiConfig : Yup.string().required('Please select API configuration from the list').nullable()\r\n})\r\n\r\n\r\nconst PartnerAccountInfo = ({ onChange, refId, ...props }) => {\r\n\r\n    const currencyList = useSelector((state) => state.partnerList?.data?.currencyList)\r\n    const parentAccountList = useSelector((state) => state.partnerList?.data?.parentAccountList)\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n\r\n\r\n\r\n\r\n    const timeZoneList = timeZone?.map((timezone) => ({\r\n        value: timezone.id,\r\n        label: timezone.value,\r\n    }))\r\n\r\n    const [dialogIsOpen, setIsOpen] = useState(false)\r\n    const [newLabel, setNewLabel] = useState('')\r\n    const openDialog = () => {\r\n        setIsOpen(true)\r\n    }\r\n\r\n    const onDialogClose = (e) => {\r\n        setIsOpen(false)\r\n    }\r\n    const onDialogOk = (push, values) => {\r\n        if (newLabel !== '') {\r\n            push({ field_title: newLabel, field_value: '' })\r\n            setNewLabel('')\r\n            setIsOpen(false)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">ACCOUNT INFO</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.partnerIntialValues.accInfo}\r\n                validationSchema={operaterAccountInfoValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.partnerState, ...values }\r\n\r\n                    props.setPartnerState(updatedPayload)\r\n\r\n                    let dataToStore = props.partnerIntialValues\r\n                    dataToStore.accInfo = values\r\n                    props.setPartnerIntialValues(dataToStore)\r\n\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        label={<p>Partner Title <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accName && touched.accName}\r\n                                        errorMessage={errors.accName}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accName\"\r\n                                            placeholder=\"Enter partner title\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Operator <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.operater && touched.operater\r\n                                        }\r\n                                        errorMessage={errors.operater}\r\n                                    >\r\n                                        <Field name=\"operater\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Operator\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={parentAccountList}\r\n                                                    value={parentAccountList?.filter(\r\n                                                        (label) =>\r\n                                                            label.value ===\r\n                                                            values.operater\r\n                                                    )}\r\n                                                    onChange={(label) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            label.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Company Name <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accCompName && touched.accCompName}\r\n                                        errorMessage={errors.accCompName}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accCompName\"\r\n                                            placeholder=\"Enter Company Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Incorporation Date <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accIncorpDt && touched.accIncorpDt}\r\n                                        errorMessage={errors.accIncorpDt}\r\n                                    >\r\n                                        <Field name=\"accIncorpDt\" >\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    placeholder=\"Select Date\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    maxDate={new Date()}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Tax ID\"\r\n                                        invalid={errors.accTaxId && touched.accTaxId}\r\n                                        errorMessage={errors.accTaxId}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accTaxId\"\r\n                                            placeholder=\"Enter Tax ID\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                      \r\n                                        label={<p>Partner Typ <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                    invalid={\r\n                                        errors.partnerType && touched.partnerType\r\n                                    }\r\n                                    errorMessage={errors.partnerType}\r\n                                    >\r\n                                        <Field name=\"partnerType\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select partner type\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={partnerType}\r\n                                                    value={partnerType.filter(\r\n                                                        (label) =>\r\n                                                            label.value ===\r\n                                                            values.partnerType\r\n                                                    )}\r\n                                                    onChange={(label) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            label.value\r\n                                                        )\r\n                                                    }\r\n\r\n                                                   \r\n\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n\r\n                                    <FormItem\r\n                                        label={<p>Time zone <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accTimeZone && touched.accTimeZone}\r\n                                        errorMessage={errors.accTimeZone}\r\n                                    >\r\n                                        <Field name=\"accTimeZone\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Time zone\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={timeZoneList}\r\n                                                    value={timeZoneList?.filter(\r\n                                                        (label) =>\r\n                                                            label.value ===\r\n                                                            values.accTimeZone\r\n                                                    )}\r\n                                                    onChange={(label) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            label.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Currency <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accCurrency && touched.accCurrency}\r\n                                        errorMessage={errors.accCurrency}\r\n                                    >\r\n                                        <Field name=\"accCurrency\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Currency\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={currencyList}\r\n                                                    value={currencyList?.filter(\r\n                                                        (label) =>\r\n                                                            label.value ===\r\n                                                            values.accCurrency\r\n                                                    )}\r\n                                                    onChange={(label) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            label.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Language <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accLang && touched.accLang}\r\n                                        errorMessage={errors.accLang}\r\n                                    >\r\n                                        <Field name=\"accLang\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Language\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={language}\r\n                                                    value={language.filter(\r\n                                                        (label) =>\r\n                                                            label.value ===\r\n                                                            values.accLang\r\n                                                    )}\r\n                                                    onChange={(label) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            label.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Display Orientation <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accOrient && touched.accOrient}\r\n                                        errorMessage={errors.accOrient}\r\n                                    >\r\n                                        <Field name=\"accOrient\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Orientation\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={orientationtype}\r\n                                                    value={orientationtype.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.accOrient\r\n                                                    )}\r\n                                                    onChange={(gender) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            gender.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    {/* <FormItem\r\n                                        label='API Configuration '\r\n                                    // invalid={errors.apiConfig && touched.apiConfig}\r\n                                    // errorMessage={errors.apiConfig}\r\n                                    >\r\n                                        <Field name=\"apiConfig\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select API configuration\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={apiConfiguration}\r\n                                                    value={apiConfiguration.filter(\r\n                                                        (label) =>\r\n                                                            label.value ===\r\n                                                            values.apiConfig\r\n                                                    )}\r\n                                                    onChange={(label) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            label.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem> */}\r\n\r\n                                    <FieldArray name=\"fields\">\r\n                                        {({ push, remove }) => (\r\n                                            <>\r\n\r\n                                                {values.fields.map((item, index) => {\r\n                                                    return (\r\n\r\n\r\n                                                        <FormItem\r\n                                                            label={\r\n                                                                <div style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                                                                    <p style={{ marginRight: '20px' }}>{item.field_title}</p>\r\n                                                                    <Tooltip title={`Remove`}>\r\n                                                                        <span\r\n                                                                            className={`cursor-pointer  text-${'rose'}-800 hover:text-${'rose'}-800`}\r\n                                                                            onClick={() => remove(index)}\r\n                                                                            style={{ marginLeft: 'auto' }}\r\n                                                                        >\r\n                                                                            <RiCloseCircleFill />\r\n                                                                        </span>\r\n                                                                    </Tooltip>\r\n                                                                </div>\r\n\r\n                                                            }\r\n                                                        >\r\n\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                placeholder=\"\"\r\n                                                                component={Input}\r\n                                                                name={`fields[${index}].field_value`}\r\n                                                            />\r\n\r\n                                                        </FormItem>\r\n\r\n                                                    )\r\n                                                })}\r\n\r\n\r\n\r\n                                                <Dialog\r\n                                                    isOpen={dialogIsOpen}\r\n                                                    onClose={onDialogClose}\r\n                                                    onRequestClose={onDialogClose}\r\n                                                    shouldCloseOnOverlayClick={false}\r\n                                                    shouldCloseOnEsc={false}\r\n                                                >\r\n                                                    <FormItem\r\n                                                        label=\"Field Title\"\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"title\"\r\n                                                            placeholder=\"Please enter Custom Field Title\"\r\n                                                            component={Input}\r\n                                                            value={newLabel}\r\n                                                            onChange={(e) => setNewLabel(e.target.value)}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <div className=\"text-right mt-6\">\r\n                                                        <Button\r\n                                                            className=\"ltr:mr-2 rtl:ml-2\"\r\n                                                            variant=\"plain\"\r\n                                                            onClick={onDialogClose}\r\n                                                        >\r\n                                                            Cancel\r\n                                                        </Button>\r\n                                                        <Button variant=\"solid\" onClick={() => onDialogOk(push, values,)}>\r\n                                                            Okay\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </Dialog>\r\n\r\n                                            </>\r\n                                        )}\r\n                                    </FieldArray>\r\n                                </div>\r\n\r\n                            </FormContainer>\r\n                            <div className=\"mt-2\">\r\n                                <Button\r\n                                    type=\"button\"\r\n                                    variant=\"plain\"\r\n                                    className=\"font-bold\"\r\n                                    style={{ color: '#004D99' }}\r\n                                    onClick={() => openDialog()}\r\n                                    disabled = {values.fields[values.fields.length - 1 ]?.field_value == '' ? true : false}\r\n                                    icon={<BsFillPlusCircleFill fill=\"#004D99\" className='' />}\r\n                                >\r\n                                    ADD CUSTOM FIELD\r\n                                </Button>\r\n                            </div>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PartnerAccountInfo\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Tooltip,\r\n    Dialog,\r\n} from 'components/ui'\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport * as Yup from \"yup\";\r\nimport { validateURL } from 'views/Servicefile';\r\nimport { RiCloseCircleFill } from 'react-icons/ri';\r\nimport { BsFillPlusCircleFill } from 'react-icons/bs';\r\nimport { useState } from 'react';\r\n\r\n\r\nconst partnerContactInitValues = {\r\n    accFirstName : \"\",//not in api\r\n    accLastName : \"\",\r\n    accMiddleName:'',\r\n    accEmailId:\"\",\r\n    accPrimCont : \"\", \r\n    accAltCont : \"\",\r\n    accFax : \"\",\r\n    accWebUrl : \"\",\r\n  }\r\n\r\n  const partnerContactValidationSchema = Yup.object().shape({\r\n    accFirstName: Yup\r\n    .string()\r\n    .required(\"Please enter first name\").nullable(),\r\n    // accPrimContName : Yup.string().min(2,\"Number must be at least 2 Characters\").max(100).required('Please Enter Primary Contact'),\r\n    //accPrimContName : Yup.string().required(\"Mobile number is required\").matches(/^(\\+\\d{1,3}[- ]?)?\\d{10}$/, \"Invalid number\"),\r\n    accLastName : Yup.string().min(5,\"LastName must be at least 5 characters\").max(50,\"max. 50 characters allowed\").required('Please enter last name').nullable(),\r\n    accEmailId : Yup.string().min(5,\"Email id must be at least 5 characters\").max(50).email('Please enter valid email id').required('Please enter email id').nullable(),\r\n    accPrimCont :   Yup.string().min(5,\"Number must be atleast 5 characters\").max(20,\"Max 20 characters are allowed\")\r\n    .required(\"Please enter phone number\").nullable(),\r\n}) \r\n\r\n\r\nconst PartnerContactInfo = ({ onChange, refId, ...props }) => { \r\n\r\n    const [dialogIsOpen, setIsOpen] = useState(false)\r\n    const [newLabel, setNewLabel] = useState('')\r\n    const openDialog = () => {\r\n        setIsOpen(true)\r\n    }\r\n\r\n    const onDialogClose = (e) => {\r\n        setIsOpen(false)\r\n    }\r\n    const onDialogOk = (push, values) => {\r\n        if (newLabel !== '') {\r\n            push({ field_title: newLabel, field_value: '' })\r\n            setNewLabel('')\r\n            setIsOpen(false)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">CONTACT INFO</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.partnerIntialValues.ContactInfo}\r\n                validationSchema={partnerContactValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    let updatedPayload ={...props.partnerState, ...values}\r\n                    \r\n                    props.setPartnerState(updatedPayload)\r\n\r\n                    let dataToStore = props.partnerIntialValues\r\n                    dataToStore.ContactInfo = values\r\n                    props.setPartnerIntialValues(dataToStore)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n\r\n                                <FormItem\r\n                                        \r\n                                        label={<p>First Name<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accFirstName && touched.accFirstName}\r\n                                        errorMessage={errors.accFirstName}\r\n                                    >\r\n                                        <Field\r\n                                            values={values.accFirstName}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accFirstName\"\r\n                                            placeholder=\"Enter First Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        \r\n                                        label=\"Middle Name\"\r\n                                    >\r\n                                        <Field\r\n                                            values={values.accMiddleName}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accMiddleName\"\r\n                                            placeholder=\"Enter Middle Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        \r\n                                        label={<p>Last Name<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accLastName && touched.accLastName}\r\n                                        errorMessage={errors.accLastName}\r\n                                    >\r\n                                        <Field\r\n                                            values={values.accLastName}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accLastName\"\r\n                                            placeholder=\"Enter Last Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Email ID <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.accEmailId && touched.accEmailId}\r\n                                        errorMessage={errors.accEmailId}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"email\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accEmailId\"\r\n                                            placeholder=\"Enter Email ID\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Phone Number <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.accPrimCont && touched.accPrimCont}\r\n                                        errorMessage={errors.accPrimCont}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accPrimCont\"\r\n                                            placeholder=\"Enter Phone Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Alternate Phone Number\"\r\n                                        invalid={errors.accAltCont && touched.accAltCont}\r\n                                        errorMessage={errors.accAltCont}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"tel\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accAltCont\"\r\n                                            placeholder=\"Enter Phone Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Fax Number\"\r\n                                        invalid={errors.accFax && touched.accFax}\r\n                                        errorMessage={errors.accFax}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accFax\"\r\n                                            placeholder=\"Enter Fax Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>   \r\n                                    <FormItem\r\n                                        label=\"Website URL\"\r\n                                        invalid={errors.accWebUrl && touched.accWebUrl}\r\n                                        errorMessage={errors.accWebUrl}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accWebUrl\"\r\n                                            placeholder=\"Enter Website URL\"\r\n                                            component={Input}\r\n                                            validate={validateURL}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n\r\n                                    <FieldArray name=\"fields\">\r\n                                        {({ push, remove }) => (\r\n                                            <>\r\n\r\n                                                {values.fields.map((item, index) => {\r\n                                                    return (\r\n\r\n\r\n                                                        <FormItem\r\n                                                            label={\r\n                                                                <div style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                                                                    <p style={{ marginRight: '20px' }}>{item.field_title}</p>\r\n                                                                    <Tooltip title={`Remove`}>\r\n                                                                        <span\r\n                                                                            className={`cursor-pointer  text-${'rose'}-800 hover:text-${'rose'}-800`}\r\n                                                                            onClick={() => remove(index)}\r\n                                                                            style={{ marginLeft: 'auto' }}\r\n                                                                        >\r\n                                                                            <RiCloseCircleFill />\r\n                                                                        </span>\r\n                                                                    </Tooltip>\r\n                                                                </div>\r\n\r\n                                                            }\r\n                                                        >\r\n\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                placeholder=\"\"\r\n                                                                component={Input}\r\n                                                                name={`fields[${index}].field_value`}\r\n                                                            />\r\n\r\n                                                        </FormItem>\r\n\r\n                                                    )\r\n                                                })}\r\n\r\n\r\n\r\n                                                <Dialog\r\n                                                    isOpen={dialogIsOpen}\r\n                                                    onClose={onDialogClose}\r\n                                                    onRequestClose={onDialogClose}\r\n                                                    shouldCloseOnOverlayClick={false}\r\n                                                    shouldCloseOnEsc={false}\r\n                                                >\r\n                                                    <FormItem\r\n                                                        label=\"Field Title\"\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"title\"\r\n                                                            placeholder=\"Please enter Custom Field Title\"\r\n                                                            component={Input}\r\n                                                            value={newLabel}\r\n                                                            onChange={(e) => setNewLabel(e.target.value)}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <div className=\"text-right mt-6\">\r\n                                                        <Button\r\n                                                            className=\"ltr:mr-2 rtl:ml-2\"\r\n                                                            variant=\"plain\"\r\n                                                            onClick={onDialogClose}\r\n                                                        >\r\n                                                            Cancel\r\n                                                        </Button>\r\n                                                        <Button variant=\"solid\" onClick={() => onDialogOk(push, values,)}>\r\n                                                            Okay\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </Dialog>\r\n\r\n                                            </>\r\n                                        )}\r\n                                    </FieldArray>\r\n                                 \r\n\r\n                                </div>\r\n                                \r\n\r\n                            </FormContainer>\r\n\r\n                            <div className=\"mt-2\">\r\n                                <Button\r\n                                    type=\"button\"\r\n                                    variant=\"plain\"\r\n                                    className=\"font-bold\"\r\n                                    style={{ color: '#004D99' }}\r\n                                    onClick={() => openDialog()}\r\n                                    disabled = {values.fields[values.fields.length - 1 ]?.field_value == '' ? true : false}\r\n                                    icon={<BsFillPlusCircleFill fill=\"#004D99\" className='' />}\r\n                                >\r\n                                    ADD CUSTOM FIELD\r\n                                </Button>\r\n                            </div>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PartnerContactInfo","import React, { useCallback } from 'react'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport get from 'lodash/get'\r\nimport { countryList } from 'constants/countries.constant'\r\nimport * as Yup from 'yup'\r\n\r\nconst addressFields = {\r\n    accCountry: '',\r\n    accAddL1: '',\r\n    accAddL2: '',\r\n    accCity: '',\r\n    accState: '',\r\n    accZipcode: '',\r\n    // sameCorrespondenceAddress: true,\r\n    // correspondenceAddress: {\r\n    //     accCountry: '',\r\n    //     accAddL1: '',\r\n    //     accAddL2: '',\r\n    //     accCity: '',\r\n    //     accState: '',\r\n    //     accZipcode: '',\r\n    // },\r\n}\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    accCountry: Yup.string().min(3,\"Country must be at least 3 characters\").required('Please enter country').nullable(),\r\n    accAddL1: Yup.string().min(3,\"Address must be at least 3 characters\").max(255).required('Please enter address').nullable(),\r\n    // accAddL2: Yup.string(),\r\n    accCity: Yup.string().min(3,\"City must be at least 3 characters\").max(50).required('Please enter city').nullable(),\r\n    accState: Yup.string().min(3,\"State must be at least 3 characters\").required('Please enter state').nullable(),\r\n    //accZipcode: Yup.string().required('Please enter zip code'),\r\n    // sameCorrespondenceAddress: Yup.bool(),\r\n    // correspondenceAddress: Yup.object().when('sameCorrespondenceAddress', {\r\n    //     is: false,\r\n    //     then: Yup.object().shape({\r\n    //         accCountry: Yup.string().required('Please select accCountry'),\r\n    //         accAddL1: Yup.string().required('Please enter your address'),\r\n    //         accAddL2: Yup.string(),\r\n    //         accCity: Yup.string().required('Please enter your accCity'),\r\n    //         accState: Yup.string().required('Please enter your accState'),\r\n    //         accZipcode: Yup.string().required('Please enter zip code'),\r\n    //     }),\r\n    //     otherwise: (schema) => schema,\r\n    // }),\r\n})\r\n\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: '1' },\r\n    { label: 'Airtel Inc.', value: '2' },\r\n    { label: 'Airtel India', value: '3' },\r\n]\r\n\r\n\r\nconst PartnerAddressInfo = ({onChange,refId,onNextChange,onBackChange,currentStepStatus,...props}) => {\r\n\r\n    const onNext = (values, setSubmitting) => {\r\n        onNextChange?.(values, 'addressInformation', setSubmitting)\r\n    }\r\n\r\n    const onCheck = (value, field, form) => {\r\n        form.setFieldValue(field.name, value)\r\n    }\r\n\r\n    const onBack = () => {\r\n        onBackChange?.()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"mx-4 mb-4 mt-2\">ADDRESS</h3>\r\n            <Formik innerRef ={refId}\r\n                initialValues={props.partnerIntialValues.address}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    let updatedPayload ={...props.partnerState, ...values}\r\n                    \r\n                    props.setPartnerState(updatedPayload)\r\n\r\n                    let dataToStore = props.partnerIntialValues\r\n                    dataToStore.address = values\r\n                    props.setPartnerIntialValues(dataToStore)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, setFieldValue, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        label={<p>Address Line 1 <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.accAddL1 &&touched.accAddL1}\r\n                                        errorMessage={errors.accAddL1}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name='accAddL1'\r\n                                            placeholder=\"Enter Address Line 1...\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n                                    <FormItem\r\n                                        label=\"Address Line 2\"\r\n                                        // invalid={errors.accAddL2 && touched.accAddL2}\r\n                                        // errorMessage={errors.accAddL2}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'accAddL2'}\r\n                                            placeholder=\"Enter Address Line 2...\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                </div>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        label={<p>City <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.accCity && touched.accCity}\r\n                                        errorMessage={errors.accCity}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'accCity'}\r\n                                            placeholder=\"City\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>State <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.accState &&touched.accState}\r\n                                        errorMessage={errors.accState}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'accState'}\r\n                                            placeholder=\"State\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Country <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.accCountry &&touched.accCountry}\r\n                                        errorMessage={errors.accCountry}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'accCountry'}\r\n                                            placeholder=\"Country\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Zip Code\"\r\n                                        //invalid={errors.accZipcode && touched.accZipcode}\r\n                                        //errorMessage={errors.accZipcode}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'accZipcode'}\r\n                                            placeholder=\"Zip Code\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                </div>\r\n\r\n                                {/* <AddressForm\r\n                                    countryName=\"accCountry\"\r\n                                    addressLine1Name=\"accAddL1\"\r\n                                    addressLine2Name=\"accAddL2\"\r\n                                    cityName=\"accCity\"\r\n                                    stateName=\"accState\"\r\n                                    zipCodeName=\"accZipcode\"\r\n                                    {...formProps}\r\n                                />\r\n                               */}\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PartnerAddressInfo\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n    AdaptableCard,\r\n} from 'components/shared'\r\nimport {\r\n\r\n    FormItem,\r\n    FormContainer,\r\n    Button,\r\n    Upload,\r\n    Input,\r\n    Tooltip,\r\n    Dialog\r\n} from 'components/ui'\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport { BsFillDashCircleFill, BsFillPlusCircleFill } from 'react-icons/bs'\r\nimport { useSelector } from 'react-redux'\r\nimport { apiUploadFiles } from 'services/PartnersService'\r\nimport CloseButton from 'components/ui/CloseButton'\r\nimport appConfig from 'configs/app.config'\r\nimport { OpenNotification } from 'views/Servicefile'\r\n\r\n\r\nconst saveFilesInAccounts = 1\r\nconst PartenrOperatorUploadFiles = (props) => {\r\n    const { errors, touched, values, setFieldValue, mode } = props\r\n    const { enterAccount, acc_user_id } = useSelector((state) => state.auth.user)\r\n    const beforeUpload = async (newFiles, files) => {\r\n        const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInAccounts)\r\n        return ress\r\n    }\r\n\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n    const onClickView = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='py-5' style={{ backgroundColor: \"#f5f5f5\" }}>\r\n                <div className=\"md:grid grid-cols-2 gap-4\">\r\n                    <AdaptableCard>\r\n                        <h3 className=\" mb-4 mt-4 mx-4\">UPLOAD FILES</h3>\r\n                        <Formik\r\n                            innerRef={props.refId}\r\n                            initialValues={props.partnerIntialValues}\r\n                            onSubmit={(values, { setSubmitting }) => {\r\n                                setSubmitting(true)\r\n                                let updatedPayload = { ...props.partnerState, uploadFiles : values.uploadFiles }\r\n                                props.setPartnerState(updatedPayload)\r\n                                let dataToStore = props.partnerIntialValues\r\n                                dataToStore.uploadFiles = values.uploadFiles\r\n                                props.setPartnerIntialValues(dataToStore)\r\n                            }}\r\n                        >\r\n                            {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                                return (\r\n                                    <Form>\r\n                                        <FormContainer>\r\n                                            <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                                                {values?.uploadFiles?.map((fil, i) => {\r\n                                                    let doc_type;\r\n                                                    try {\r\n                                                        doc_type = fil?.doc_type\r\n                                                    } catch (error) {\r\n                                                        console.error('Invalid JSON:', fil.doc_type);\r\n                                                    }\r\n                                                    return <FormItem\r\n                                                        label={<p>{fil?.doc_name} <span style={{ color: \"red\" }}>{doc_type?.is_mandatory ? '*' : ''}</span></p>}\r\n                                                        key={i}\r\n                                                    >\r\n                                                        <div className=\"md:grid grid-cols-1 gap-3\">\r\n                                                            <AdaptableCard>\r\n                                                                <div>\r\n                                                                    <Upload\r\n                                                                        draggable\r\n                                                                        beforeUpload={beforeUpload}\r\n                                                                        onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                                            setFieldValue(`uploadFiles[${i}].file_url`, uploadRes?.data.fileUnqId);\r\n                                                                            setFieldValue(`uploadFiles[${i}].file_name`, uploadRes?.data.fileName);\r\n                                                                            setFieldValue(`uploadFiles[${i}].file_type`, \"upload\");\r\n                                                                            setFieldValue(`uploadFiles[${i}].doc_name`, fil?.doc_name);\r\n                                                                        }\r\n                                                                        }\r\n\r\n                                                                        className='border-gray-200 w-[500] h-[0]' style={{ minHeight: '3rem' }} name={`uploadFiles[${i}].file_url`}>\r\n                                                                        <div className=\"my-10 text-center\">\r\n                                                                            <p className=\"font-semibold\">\r\n                                                                                <span className=\"text-gray-400 dark:text-white\">\r\n                                                                                    {values.uploadFiles[i].file_url && 'File Uploaded' || \"No Files Uploaded\"} ,{' '}\r\n                                                                                </span>\r\n                                                                                <span className=\"text-blue-700\">\r\n                                                                                    Browse\r\n                                                                                </span>\r\n                                                                            </p>\r\n                                                                        </div>\r\n                                                                    </Upload>\r\n                                                                    {values.uploadFiles[i].file_url &&\r\n                                                                        <div className=\"upload-file cursor-pointer\" >\r\n                                                                            <div className=\"upload-file-info\" onClick={() => onClickView(values.uploadFiles[i])}>\r\n                                                                                <h6 className=\"upload-file-name\">{values.uploadFiles[i].file_name.substring(0, 15)}</h6>\r\n                                                                            </div>\r\n\r\n                                                                            <CloseButton\r\n                                                                                className=\"upload-file-remove \"\r\n                                                                                onClick={() => {\r\n                                                                                    setFieldValue(`uploadFiles[${i}].file_url`, '');\r\n                                                                                    setFieldValue(`uploadFiles[${i}].file_name`, '');\r\n                                                                                    setFieldValue(`uploadFiles[${i}].file_type`, \"upload\");\r\n                                                                                    setFieldValue(`uploadFiles[${i}].doc_name`, fil?.doc_name);\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        </div>}\r\n                                                                </div>\r\n                                                            </AdaptableCard>\r\n                                                        </div>\r\n                                                    </FormItem>\r\n                                                })}\r\n                                            </div>\r\n\r\n                                        </FormContainer>\r\n                                    </Form>\r\n                                )\r\n                            }}\r\n                        </Formik>\r\n                    </AdaptableCard>\r\n                    <AdaptableCard>\r\n                        <h3 className=\" mb-4 mt-4 mx-4\">ADDITIONAL FILES</h3>\r\n                        <Formik innerRef={props.refIdAdd}\r\n                            initialValues={props.partnerIntialValues}\r\n                            onSubmit={(values, { setSubmitting }) => {\r\n                                setSubmitting(true)\r\n                                let isUploaded = props.partnerIntialValues.uploadFiles?.filter(e => e.doc_type.is_mandatory === true).every(e => e.file_name !== \"\")\r\n                                if(isUploaded){\r\n                                    let updatedPayload = { ...props.partnerState, additionalFiles: values.additionalFiles }\r\n                                    props.setPartnerState(updatedPayload)\r\n                                    let dataToStore = props.partnerIntialValues\r\n                                    dataToStore.additionalFiles = values.additionalFiles\r\n                                    props.setPartnerIntialValues(dataToStore)\r\n                                    if(mode == \"ADD\"){\r\n                                        props.setStep(props.step + 1)\r\n                                    }else{\r\n                                        props.setStep(props.step + 2)\r\n                                    }\r\n                                }else{\r\n                                    OpenNotification('warning', 'Please upload the required documents')\r\n                                }\r\n                            }}\r\n                        >\r\n                            {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                                return (\r\n                                    <Form>\r\n                                        <FieldArray name=\"additionalFiles\">\r\n                                            {({ push, remove }) => (\r\n                                                <>\r\n                                                    {values?.additionalFiles && values?.additionalFiles.map((file, index) => (\r\n                                                        <>\r\n                                                            <div className=\"md:grid grid-cols-2 gap-2 mx-4 my-1\" key={index}>\r\n                                                                <div>\r\n                                                                    <Field\r\n                                                                        type=\"text\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        name={`additionalFiles[${index}].doc_name`}\r\n                                                                        placeholder=\"Enter Title\"\r\n                                                                        component={Input}\r\n                                                                        // className=\"w-64\"\r\n                                                                    />\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                    <Upload\r\n                                                                        draggable\r\n                                                                        className=\"border-gray-200 w-[500] h-[0] px-6\"\r\n                                                                        style={{ minHeight: \"3rem\" }}\r\n                                                                        beforeUpload={beforeUpload}\r\n                                                                        onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                                            setFieldValue(`additionalFiles[${index}].file_url`, uploadRes?.data.fileUnqId);\r\n                                                                            setFieldValue(`additionalFiles[${index}].file_name`, uploadRes?.data.fileName);\r\n                                                                            setFieldValue(`additionalFiles[${index}].file_type`, \"additional\");\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <div className=\"my-10 text-center\">\r\n                                                                            <p className=\"font-semibold\">\r\n                                                                                <span className=\"text-gray-400 dark:text-white\">\r\n                                                                                    {values?.additionalFiles[index]?.file_url && 'File Uploaded' || \"No Files Uploaded\"} ,{' '}\r\n                                                                                </span>\r\n                                                                                <span className=\"text-blue-700\">Browse</span>\r\n                                                                            </p>\r\n                                                                        </div>\r\n                                                                    </Upload>\r\n                                                                    {values?.additionalFiles[index]?.file_url &&\r\n                                                                        <div className=\"upload-file cursor-pointer truncate\">\r\n                                                                            <div className=\"upload-file-info\" onClick={() => onClickView(values.additionalFiles[index])}>\r\n                                                                                <h6 className=\"upload-file-name\">{values.additionalFiles[index].file_name.substring(0, 15)}</h6>\r\n                                                                            </div>\r\n\r\n                                                                            <CloseButton\r\n                                                                                className=\"upload-file-remove\"\r\n                                                                                onClick={() => {\r\n                                                                                    setFieldValue(`additionalFiles[${index}].file_url`, '');\r\n                                                                                    setFieldValue(`additionalFiles[${index}].file_name`, '');\r\n                                                                                    setFieldValue(`additionalFiles[${index}].file_type`, \"\");\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        </div>}\r\n\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"grid grid-cols-2\">\r\n                                                                <Button\r\n                                                                    variant=\"plain\"\r\n                                                                    type=\"button\"\r\n                                                                    className=\"font-bold m-2\"\r\n                                                                    style={{ color: \"#004D99\" }}\r\n                                                                    icon={<BsFillPlusCircleFill fill=\"#004D99\" />}\r\n                                                                    onClick={() => push({ file_name: \"\", file_url: \"\", file_type: \"\", })}\r\n                                                                >\r\n                                                                    ADD FILE\r\n                                                                </Button>\r\n                                                               \r\n                                                                    <Button\r\n                                                                        variant=\"plain\"\r\n                                                                        type=\"button\"\r\n                                                                        className=\"font-bold m-2\"\r\n                                                                        style={{ color: \"#FF0000\" }}\r\n                                                                         disabled={index === 0 ? true : false}\r\n\r\n                                                                        icon={<BsFillDashCircleFill fill=\"#FF0000\" />}\r\n                                                                        onClick={() => remove(index)}\r\n                                                                    >\r\n                                                                        DELETE FILE\r\n                                                                    </Button>\r\n                                                            </div>\r\n                                                            <Dialog isOpen={showContent}\r\n                                                                onClose={() => setShowContent(false)}>\r\n                                                                <div className='p-5'>\r\n                                                                    <img src={`${appConfig.apiPrefix}/media/uniqid/${content?.file_url}`} alt=\"Content\" />\r\n                                                                    <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content?.file_url}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                                                                </div>\r\n\r\n                                                            </Dialog>\r\n                                                        </>\r\n                                                    ))}\r\n                                                </>\r\n                                            )}\r\n                                        </FieldArray>\r\n                                    </Form>\r\n                                )\r\n                            }}\r\n                        </Formik>\r\n                    </AdaptableCard>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default PartenrOperatorUploadFiles\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Checkbox,\r\n    Dialog\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { Upload } from 'components/ui'\r\nimport {\r\n    AdaptableCard,\r\n} from 'components/shared'\r\nimport * as Yup from 'yup'\r\nimport { apiUploadFiles } from 'services/PartnersService'\r\nimport { OpenNotification } from 'views/Servicefile'\r\nimport { useEffect, useState } from 'react'\r\nimport appConfig from 'configs/app.config'\r\nimport { useSelector } from 'react-redux'\r\nimport CloseButton from 'components/ui/CloseButton'\r\n\r\nconst onCheck = (value, field, form) => {\r\n    form.setFieldValue(field.name, value)\r\n}\r\n\r\nconst settlementType = [\r\n    { label: 'Automatic', value: 'AUTOMATIC' },\r\n    { label: 'Manual', value: 'MANUAL' },\r\n  ];\r\n\r\n  const settelementCycle = [\r\n    { label: 'Daily', value: 'DAILY' },\r\n    { label: 'Weekly', value: 'WEEKLY' },\r\n    { label: 'Monthly', value: 'MONTHLY' },\r\n    { label: 'Quarterly', value: 'QUARTERLY' },\r\n    { label: 'Half-Yearly', value: 'HALFYEARLY' },\r\n    { label: 'Yearly', value: 'YEARLY' },\r\n  ];\r\n\r\n\r\nconst partnerSettlementInitValues = {\r\n    prefSettleType: \"\",\r\n    billCycle: \"\",\r\n    billDate: \"\",\r\n    billDueTenor: \"\",\r\n    bankAccNum: \"\",\r\n    bankName: \"\",\r\n    bankBranchName: \"\",\r\n    ifscCode: \"\",\r\n    micrCode: \"\",\r\n}\r\n\r\nconst partnerSettlementValidationSchema = Yup.object().shape({\r\n    billCycle: Yup.string().required('Please enter settlement cycle').nullable(),\r\n    // billDate: Yup.string().required('Please select settlement date').nullable(),\r\n    billDueTenor: Yup.string().min(1).max(2,\"Offset must be at most 2 characters\").required('Please enter offset days').nullable(),\r\n    prefSettleType: Yup.string().required('Please enter settlement type').nullable(),\r\n    ifscCode : Yup.string().min(3,\"mini. 3 characters required\").max(20,\"max. 20 characters allowed\").required(\"Please enter IFSC Code\"),\r\n    bankName : Yup.string().min(3,\"mini. 3 characters required\").max(100,\"max. 100 characters allowed\").required(\"Please enter Bank Name\"),\r\n    bankAccNum : Yup.string().min(1,\"mini. 1 characters required\").max(20,\"max. 20 characters allowed\").required(\"Please enter Bank Account no.\"),\r\n    bankBranchName : Yup.string().min(3,\"mini. 3 characters required\").max(100,\"max. 100 characters allowed\").required(\"Please enter Bank Branch Name\"),\r\n    micrCode : Yup.string().min(3,\"mini. 3 characters required\").max(20,\"max. 20 characters allowed\").required(\"Please enter MICR Code\"),\r\n})\r\n\r\nconst settelementWeekOpt = [\r\n    {label:'Sunday',value:\"sunday\"},\r\n    {label:'Monday',value:\"monday\"},\r\n    {label:'Tuesday',value:\"tuesday\"},\r\n    {label:'Wednesday',value:\"wednesday\"},\r\n    {label:'Thursday',value:\"thursday\"},\r\n    {label:'Friday',value:\"friday\"},\r\n    {label:'Saturday',value:\"saturday\"},\r\n  ]\r\n\r\n  const monthOptions = [\r\n    {label : \"1\",value : \"1\"},{label : \"2\",value : \"2\"},\r\n    {label : \"3\",value : \"3\"},{label : \"4\",value : \"4\"},\r\n    {label : \"5\",value : \"5\"},{label : \"6\",value : \"6\"},\r\n    {label : \"7\",value : \"7\"},{label : \"8\",value : \"8\"},\r\n    {label : \"9\",value : \"9\"},{label : \"10\",value : \"10\"},\r\n    {label : \"11\",value : \"11\"},{label : \"12\",value : \"12\"},\r\n    {label : \"13\",value : \"13\"},{label : \"14\",value : \"14\"},\r\n    {label : \"15\",value : \"15\"},{label : \"16\",value : \"16\"},\r\n    {label : \"17\",value : \"17\"},{label : \"18\",value : \"18\"},\r\n    {label : \"19\",value : \"19\"},{label : \"20\",value : \"20\"},\r\n    {label : \"21\",value : \"21\"},{label : \"22\",value : \"22\"},\r\n    {label : \"23\",value : \"23\"},{label : \"24\",value : \"24\"},\r\n    {label : \"25\",value : \"25\"},{label : \"26\",value : \"26\"},\r\n    {label : \"27\",value : \"27\"},{label : \"28\",value : \"28\"},\r\n  ]\r\n\r\n  const settelementMonthOpt = [\r\n    {label:'January',value:\"january\"},\r\n    {label:'February',value:\"february\"},\r\n    {label:'March',value:\"march\"},\r\n    {label:'April',value:\"april\"},\r\n    {label:'May',value:\"may\"},\r\n    {label:'June',value:\"june\"},\r\n    {label:'July',value:\"july\"},\r\n    {label:'August',value:\"august\"},\r\n    {label:'September',value:\"september\"},\r\n    {label:'October',value:\"october\"},\r\n    {label:'November',value:\"november\"},\r\n    {label:'December',value:\"december\"}\r\n  ]\r\n\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: '1' },\r\n    { label: 'Airtel Inc.', value: '2' },\r\n    { label: 'Airtel India', value: '3' },\r\n]\r\n\r\nconst saveFilesInPartnerSettlement = 1\r\nconst PartnerSettlementInfo = ({ onChange, refId, ...props }) => {\r\n\r\n    const { enterAccount, acc_user_id, rememberMe, usernameOrEmail } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n\r\n    const beforeUpload = async (newFiles, files) => {\r\n        const file = newFiles[0];\r\n        const allowedTypes = ['image/jpeg', 'image/png'];\r\n    \r\n        if (!allowedTypes.includes(file.type)) {\r\n            OpenNotification('warning', 'JPG/PNG files are allowed only!')\r\n          return false;\r\n        } \r\n        try { \r\n            const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInPartnerSettlement)\r\n            return ress\r\n        } catch (error) {\r\n          console.error('Error during file upload:', error);\r\n          return false;\r\n        }\r\n    }\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n\r\n    const onClickView = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n    return (\r\n        <>\r\n\r\n        <h3 className=\"mx-4 mb-4 mt-2\">SETTLEMENT INFO</h3>\r\n\r\n        <Formik innerRef={refId}\r\n            initialValues={props.partnerIntialValues.settlementInfo}\r\n            validationSchema={partnerSettlementValidationSchema}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                setSubmitting(true)\r\n                let updatedPayload ={...props.partnerState, ...values}\r\n                \r\n                props.setPartnerState(updatedPayload)\r\n                let dataToStore = props.partnerIntialValues\r\n                dataToStore.settlementInfo = values\r\n                props.setPartnerIntialValues(dataToStore)\r\n            }}\r\n        >\r\n            {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                return (\r\n                    <Form>\r\n                        <FormContainer>\r\n                            <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                <FormItem\r\n                                        label={<p>Prefferd Settlement Type <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.prefSettleType && touched.prefSettleType}\r\n                                        errorMessage={errors.prefSettleType}\r\n                                    >\r\n                                        <Field name=\"prefSettleType\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Settlement Type\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={settlementType}\r\n                                                    value={settlementType.filter(\r\n                                                        (label) =>\r\n                                                            label.value ===\r\n                                                            values.prefSettleType\r\n                                                    )}\r\n                                                    onChange={(label) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            label.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                </FormItem>\r\n                                <FormItem\r\n                                        label={<p>Settlement Cycle <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.billCycle && touched.billCycle}\r\n                                        errorMessage={errors.billCycle}\r\n                                    >\r\n                                        <Field name=\"billCycle\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Settlement Cycle\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={settelementCycle}\r\n                                                    value={settelementCycle.filter(\r\n                                                        (label) =>\r\n                                                            label.value ===\r\n                                                            values.billCycle\r\n                                                    )}\r\n                                                    onChange={(label) =>{\r\n                                                        form.setFieldValue(\"settelementWeek\",'')\r\n                                                        form.setFieldValue(\"settelementMonth\",'')\r\n                                                        form.setFieldValue(\"settelementDate\",'')\r\n                                                        form.setFieldValue(field.name,label.value)\r\n                                                    }}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                </FormItem>\r\n                                {values.billCycle === \"WEEKLY\" && \r\n                                    <FormItem\r\n                                      label={<p>Settlement Week<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.settelementWeek && touched.settelementWeek}\r\n                                        errorMessage={errors.settelementWeek}\r\n                                    >\r\n                                        <Field name=\"settelementWeek\" validate = {async(v) => {\r\n                                                if(values.billCycle === \"WEEKLY\"){\r\n                                                    try{await Yup.string().required(\"Please select week\").validate(v)}\r\n                                                    catch(error){return error.message}\r\n                                            }}}\r\n                                        >\r\n                                            {({ field, form }) => (\r\n                                                <Select options={settelementWeekOpt} placeholder=\"Select settlement week\" field={field} form={form}\r\n                                                value={settelementWeekOpt.filter((week) =>week.value ===values.settelementWeek)}\r\n                                                onChange={(week) => form.setFieldValue(field.name,week.value)}\r\n                                            />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>}\r\n                                    {(values.billCycle === \"QUARTERLY\" || values.billCycle === \"HALFYEARLY\" ||values.billCycle === \"YEARLY\") && \r\n                                    <FormItem\r\n                                      label={<p>Settlement Month<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.settelementMonth && touched.settelementMonth}\r\n                                        errorMessage={errors.settelementMonth}\r\n                                    >\r\n                                        <Field name=\"settelementMonth\" validate = {async(v) => {\r\n                                                if(values.billCycle === \"QUARTERLY\" || values.billCycle === \"HALFYEARLY\" ||values.billCycle === \"YEARLY\"){\r\n                                                    try{await Yup.string().required(\"Please select month\").validate(v)}\r\n                                                    catch(error){return error.message}\r\n                                            }}}\r\n                                        >\r\n                                            {({ field, form }) => (\r\n                                                <Select options={settelementMonthOpt} placeholder=\"Select settlement month\" field={field} form={form}\r\n                                                value={settelementMonthOpt.filter((week) =>week.value ===values.settelementMonth)}\r\n                                                onChange={(week) => form.setFieldValue(field.name,week.value)}\r\n                                            />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>}\r\n                                    {(values.billCycle === \"MONTHLY\"|| values.billCycle === \"QUARTERLY\" || values.billCycle === \"HALFYEARLY\" ||values.billCycle === \"YEARLY\") && \r\n                                    <FormItem\r\n                                      label={<p>Settlement Date<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.settelementDate && touched.settelementDate}\r\n                                        errorMessage={errors.settelementDate}\r\n                                    >\r\n                                        <Field name=\"settelementDate\" validate = {async(v) => {\r\n                                                if(values.billCycle === \"MONTHLY\" || values.billCycle === \"QUARTERLY\" || values.billCycle === \"HALFYEARLY\" || values.billCycle === \"YEARLY\"){\r\n                                                    try{await Yup.string().required(\"Please select date\").validate(v)}\r\n                                                    catch(error){return error.message}\r\n                                            }}}\r\n                                        >\r\n                                            {({ field, form }) => (\r\n                                                <Select options={monthOptions} placeholder=\"Select settlement date\" field={field} form={form}\r\n                                                value={monthOptions.filter((week) =>week.value === values.settelementDate)}\r\n                                                onChange={(week) => form.setFieldValue(field.name,week.value)}\r\n                                            />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>}\r\n                                {/* <FormItem\r\n                                        label={<p>Settlement Date <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.billDate && touched.billDate}\r\n                                        errorMessage={errors.billDate}\r\n                                    >\r\n                                        <Field name=\"billDate\">\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    placeholder=\"Select Date\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                </FormItem> */}\r\n                                <FormItem\r\n                                        label={<p>Offset Days <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.billDueTenor && touched.billDueTenor}\r\n                                        errorMessage={errors.billDueTenor}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"billDueTenor\"\r\n                                        placeholder=\"Enter Offset Days\"\r\n                                        component={Input}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    label={<p>Bank Account Number <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                    invalid={errors.bankAccNum && touched.bankAccNum}\r\n                                    errorMessage={errors.bankAccNum}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"bankAccNum\"\r\n                                        placeholder=\"Enter Account Number\"\r\n                                        component={Input}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    label={<p>Bank Name <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                    invalid={errors.bankName && touched.bankName}\r\n                                    errorMessage={errors.bankName}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"bankName\"\r\n                                        placeholder=\"Enter Bank Name\"\r\n                                        component={Input}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    label={<p>Branch Name <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                    invalid={errors.bankBranchName && touched.bankBranchName}\r\n                                    errorMessage={errors.bankBranchName}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"bankBranchName\"\r\n                                        placeholder=\"Enter Branch Name\"\r\n                                        component={Input}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    label={<p>IFSC Code <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                    invalid={errors.ifscCode && touched.ifscCode}\r\n                                    errorMessage={errors.ifscCode}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"ifscCode\"\r\n                                        placeholder=\"Enter IFSC Code\"\r\n                                        component={Input}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    label={<p>MICR Code <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                    invalid={errors.micrCode && touched.micrCode}\r\n                                    errorMessage={errors.micrCode}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"micrCode\"\r\n                                        placeholder=\"Enter Code\"\r\n                                        component={Input}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem label=\"Upload Cancelled Cheque\">\r\n                                        <Field name='uploadCancelledCheque'>\r\n                                        {({field,form}) => (\r\n                                        <div>\r\n                                            <Upload beforeUpload={beforeUpload} draggable className='border-gray-200 w-[500] h-[0]' style={{ minHeight: \"3rem\"}}\r\n                                                onChange={(updatedFiles, files, uploadRes, filesDetails) => {form.setFieldValue(field.name,uploadRes?.data?.fileUnqId)}}>\r\n                                                <div className=\"my-10 text-center\">\r\n                                                    <p className=\"font-semibold\">\r\n                                                        <span className=\"text-gray-400 dark:text-white\">{values.uploadCancelledCheque ? \"File uploaded, \" : 'No Files Uploaded, '}</span>\r\n                                                        <span className=\"text-blue-700\">Browse</span>\r\n                                                    </p>\r\n                                                </div>\r\n                                            </Upload>\r\n                                            {values.uploadCancelledCheque &&\r\n                                            <div className=\"upload-file cursor-pointer h-12 w-120\" >\r\n                                                <div className=\"upload-file-info\" onClick={() => onClickView(values.uploadCancelledCheque)}>\r\n                                                    <h6 className=\"upload-file-name\">{values.uploadCancelledCheque.substring(0, 15)}</h6>\r\n                                                </div>\r\n                                                <CloseButton className=\"upload-file-remove \" onClick={() => {form.setFieldValue(field.name, '');}}/>\r\n                                            </div>}\r\n                                        </div>\r\n                                        )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                </div>\r\n                            </FormContainer>\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n        <Dialog isOpen={showContent}\r\n                    onClose={() => setShowContent(false)}>\r\n                    <div className='p-5'>\r\n                        <img src={`${appConfig.apiPrefix}/media/uniqid/${content}`} alt=\"Content\" />\r\n                        <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                    </div>\r\n            </Dialog>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default PartnerSettlementInfo\r\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport PartnerAccountInfo from './PartnerAccountInfo'\r\nimport PartnerContactInfo from './PartnerContactInfo'\r\nimport PartnerAddressInfo from './PartnerAddressInfo'\r\nimport PartnerUploadFiles from './PartnerUploadFiles'\r\nimport PartnerSettlementInfo from './PartnerSettlementInfo'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport { useFormikContext } from 'formik'\r\n\r\nconst PartnerDetails = forwardRef((props, ref) => {\r\n\r\n    const [formData, setFormData] = useState({\r\n        PartnerAccountInfo: { values: null, validated: false },\r\n        PartnerContactInfo: { values: null, validated: false },\r\n        PartnerAddressInfo: { values: null, validated: false },\r\n        PartnerSettlementInfo: { values: null, validated: false },\r\n        PartnerUploladFileFileInfo : { values: null, validated: false },\r\n        PartnerAdditionalFileInfo : { values: null, validated: false },\r\n    })\r\n\r\n    const partnerAccountInforef = React.useRef()\r\n    const partnerContactInforef = React.useRef()\r\n    const partnerAddressInforef = React.useRef()\r\n    const partnerSettlementInforef = React.useRef()\r\n    const partnerUploladFileInforef = React.useRef()\r\n    const partnerAdditionalFileInforef = React.useRef()\r\n\r\n    async function handleSubmit() {\r\n\r\n        let validationErrors = false;\r\n\r\n        await partnerAccountInforef.current?.validateForm().then(errors => {\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                partnerAccountInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n          });\r\n        await partnerContactInforef.current?.validateForm().then(errors => {\r\n\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                partnerContactInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n      \r\n          });\r\n        await partnerAddressInforef.current?.validateForm().then(errors => {\r\n\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                partnerAddressInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n      \r\n           \r\n          });\r\n        await partnerSettlementInforef.current?.validateForm().then(errors => {\r\n\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                partnerSettlementInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n      \r\n           \r\n          });\r\n\r\n          await partnerUploladFileInforef.current?.validateForm().then(errors => {\r\n\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                partnerUploladFileInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n      \r\n           \r\n          });\r\n          await partnerAdditionalFileInforef.current?.validateForm().then(errors => {\r\n\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                partnerAdditionalFileInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n      \r\n           \r\n          });\r\n\r\n          if (!validationErrors) {\r\n            await partnerAccountInforef?.current.submitForm()\r\n            await partnerContactInforef?.current.submitForm()\r\n            await partnerAddressInforef?.current.submitForm()\r\n            await partnerSettlementInforef?.current.submitForm()\r\n            await partnerUploladFileInforef?.current.submitForm()\r\n            await partnerAdditionalFileInforef?.current.submitForm()\r\n      \r\n          }\r\n    }\r\n\r\n    function handleChangePartnerAccountInfo(data) {\r\n        setFormData({ ...formData, PartnerAccountInfo: data })\r\n    }\r\n\r\n    function handleChangePartnerContactInfo(data) {\r\n        setFormData({ ...formData, PartnerContactInfo: data })\r\n    }\r\n\r\n    function handleChangePartnerAddressInfo(data) {\r\n        setFormData({ ...formData, PartnerAddressInfo: data })\r\n    }\r\n\r\n    function handleChangePartnerSettlementInfo(data) {\r\n        setFormData({ ...formData, PartnerSettlementInfo: data })\r\n    }\r\n\r\n    function handleChangePartnerUploadInfo(data) {\r\n        setFormData({ ...formData, PartnerUploladFileFileInfo: data })\r\n    }\r\n    function handleChangePartnerAdditinalInfo(data) {\r\n        setFormData({ ...formData, PartnerAdditionalFileInfo: data })\r\n    }\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            handleSubmitFromParent() {\r\n                handleSubmit()\r\n            },\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div style={{backgroundColor:\"#F5F5F5\"}} className=\" p-5\">\r\n                <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider>\r\n                    <PartnerAccountInfo \r\n                     handleSubmit={handleSubmit}\r\n                     onChange={handleChangePartnerAccountInfo}\r\n                     refId={partnerAccountInforef}\r\n                     partnerState={props.partnerState}\r\n                     setPartnerState={props.setPartnerState}\r\n                     partnerIntialValues={props.partnerIntialValues}\r\n                     setPartnerIntialValues={props.setPartnerIntialValues}\r\n                    />\r\n                </AdaptableCard>\r\n                <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider>\r\n                    <PartnerContactInfo \r\n                     handleSubmit={handleSubmit}\r\n                     onChange={handleChangePartnerContactInfo}\r\n                     refId={partnerContactInforef}\r\n                     partnerState={props.partnerState}\r\n                     setPartnerState={props.setPartnerState}\r\n                     partnerIntialValues={props.partnerIntialValues}\r\n                     setPartnerIntialValues={props.setPartnerIntialValues}\r\n                    />\r\n                </AdaptableCard>\r\n                <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider>\r\n                    <PartnerAddressInfo \r\n                    handleSubmit={handleSubmit}\r\n                    onChange={handleChangePartnerAddressInfo}\r\n                    refId={partnerAddressInforef}\r\n                    partnerState={props.partnerState}\r\n                    setPartnerState={props.setPartnerState}\r\n                    partnerIntialValues={props.partnerIntialValues}\r\n                     setPartnerIntialValues={props.setPartnerIntialValues}\r\n                    />\r\n                </AdaptableCard>\r\n                <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider>\r\n                    <PartnerSettlementInfo \r\n                    handleSubmit={handleSubmit}\r\n                    onChange={handleChangePartnerSettlementInfo}\r\n                    refId={partnerSettlementInforef}\r\n                    partnerState={props.partnerState}\r\n                    setPartnerState={props.setPartnerState}\r\n                    setStep={props.setStep}\r\n                    step={props.step}\r\n                    partnerIntialValues={props.partnerIntialValues}\r\n                    setPartnerIntialValues={props.setPartnerIntialValues}\r\n                    />\r\n                </AdaptableCard>\r\n           \r\n            <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n                <PartnerUploadFiles \r\n                    handleSubmit={handleSubmit}\r\n                    onChange={handleChangePartnerUploadInfo}\r\n                    onChangeAdd={handleChangePartnerAdditinalInfo}\r\n                    refId={partnerUploladFileInforef}\r\n                    refIdAdd={partnerAdditionalFileInforef}\r\n                    partnerState={props.partnerState}\r\n                    setPartnerState={props.setPartnerState}\r\n                    setStep={props.setStep}\r\n                    step={props.step}\r\n                    partnerIntialValues={props.partnerIntialValues}\r\n                    setPartnerIntialValues={props.setPartnerIntialValues}\r\n                    mode={props.mode}\r\n                />\r\n            </AdaptableCard>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default PartnerDetails\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nexport const statusOptions = [\r\n    { label: 'Married', value: 'M' },\r\n    { label: 'Widowed', value: 'W' },\r\n    { label: 'Separated', value: 'S' },\r\n    { label: 'Divorced', value: 'D' },\r\n    { label: 'Single ', value: 'S' },\r\n]\r\nconst genderOptions = [\r\n    { label: 'Super Admin', value: 0 },\r\n    { label: 'User', value: 1 },\r\n    { label: 'Admin', value: 2 },\r\n]\r\n\r\nconst userInitValues= {\r\n    roleId : \"\",\r\n    firstName : \"\",\r\n    lastName : \"\",\r\n    emailId : \"\",\r\n    phoneNumber : \"\",\r\n}\r\n\r\nconst userValidationSchema = Yup.object().shape({\r\n    //roleId: Yup.string().required('Please Select Role'),\r\n    firstName: Yup.string().min(2,\"Name must be at least 2 characters\").max(100).required('Please enter first name').nullable(),\r\n    lastName : Yup.string().min(2,\"Name must be at least 2 characters\").max(100).required('Please enter last name').nullable(),\r\n    emailId : Yup.string().min(5,\"Email id must be at least 5 characters\").max(50).email('Please enter valid email id').required('Please enter email id').nullable(),\r\n    phoneNumber: Yup.string().min(5,\"Number must be atleast 5 characters\").max(20,\"Max 20 characters are allowed\")\r\n    .required(\"Please enter phone number\").nullable(),\r\n})\r\n\r\n\r\nconst PartnerUserInfo = ({ onChange, refId, ...props }) => {\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">MASTER USER</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.partnerIntialValues.userInfo}\r\n                validationSchema={userValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                \r\n                setSubmitting(true)\r\n                let updatedPayload = { ...props.partnerState, userInfo: values }\r\n                props.setPartnerState(updatedPayload)\r\n\r\n                let dataToStore = props.partnerIntialValues\r\n                dataToStore.userInfo = values\r\n                props.setPartnerIntialValues(dataToStore)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    {/* <FormItem\r\n                                        label = {<p>User Role <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.roleId &&touched.roleId}\r\n                                        errorMessage={errors.roleId}\r\n                                    >\r\n                                        <Field name=\"roleId\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Super Admin\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={genderOptions}\r\n                                                    value={genderOptions.filter(\r\n                                                        (roleId) =>\r\n                                                            roleId.value ===\r\n                                                            values.roleId\r\n                                                    )}\r\n                                                    onChange={(roleId) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            roleId.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem> */}\r\n                                </div>\r\n                            </FormContainer>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        label = {<p>First Name <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.firstName &&touched.firstName}\r\n                                        errorMessage={errors.firstName}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"firstName\"\r\n                                            placeholder=\"Enter First Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n                                    <FormItem\r\n                                        label='Middle Name'\r\n                                       \r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"middleName\"\r\n                                            placeholder=\"Enter Middle Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label = {<p>Last Name <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.lastName &&touched.lastName}\r\n                                        errorMessage={errors.lastName}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"lastName\"\r\n                                            placeholder=\"Enter Last Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label = {<p>Email ID <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.emailId &&touched.emailId}\r\n                                        errorMessage={errors.emailId}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"emailId\"\r\n                                            placeholder=\"Enter Email ID\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem> \r\n                                    <FormItem\r\n                                        label = {<p>Phone Number <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.phoneNumber &&touched.phoneNumber}\r\n                                        errorMessage={errors.phoneNumber}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"phoneNumber\"\r\n                                            placeholder=\"Enter Phone Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem> \r\n                                </div>\r\n\r\n                            </FormContainer>\r\n                            \r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PartnerUserInfo\r\n","import {\r\n   DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Upload,\r\n    Dialog,\r\n    Button,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getContractType } from '../store/dataSlice'\r\n\r\nimport { useEffect, useState } from 'react'\r\n\r\nimport * as Yup from 'yup'\r\nimport { apiUploadFiles } from 'services/PartnersService'\r\nimport { OpenNotification } from 'views/Servicefile'\r\nimport CloseButton from 'components/ui/CloseButton'\r\nimport appConfig from 'configs/app.config'\r\n\r\nexport const statusOptions = [\r\n    { label: 'Married', value: 'M' },\r\n    { label: 'Widowed', value: 'W' },\r\n    { label: 'Separated', value: 'S' },\r\n    { label: 'Divorced', value: 'D' },\r\n    { label: 'Single ', value: 'S' },\r\n]\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: 0 },\r\n    { label: 'Airtel Inc.', value: 1 },\r\n    { label: 'Airtel India', value: 2 },\r\n]\r\n\r\n\r\nconst contractStatus = [\r\n    { label: 'ACTIVE', value: 'ACTIVE' },\r\n    { label: 'IN_ACTIVE', value: 'IN_ACTIVE' },\r\n    { label: 'PENDING_APPROVAL', value: 'PENDING_APPROVAL' }\r\n]\r\n\r\n\r\n\r\nconst userContractValidationSchema = Yup.object().shape({\r\n    contractType: Yup.string().required('Please select contract type from the list').nullable(),\r\n    signedDate: Yup.string().required('Please select a signed date').nullable(),\r\n    enforcementDate : Yup.string().required('Please select a enforcement date').nullable(),\r\n    terminationDate : Yup.string().required('Please select a termination date').nullable(),\r\n    contractStatus: Yup.string().required('Please select a contract status').nullable(),\r\n})\r\nconst saveFilesInPartnerContractInfo = 1\r\nconst PartnerContractInfo = ({ onChange, refId, ...props }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const contractTypeList = useSelector((state) => state.partnerList?.data?.contractTypeList)\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n\r\n    const {enterAccount, acc_user_id,rememberMe,usernameOrEmail\r\n    } = useSelector(\r\n     (state) => state.auth.user\r\n )\r\n  useEffect(() => {\r\n    dispatch(getContractType({enterAccount}))\r\n }, [dispatch, enterAccount])\r\n\r\n const beforeUpload = async (newFiles, files) => {\r\n    const file = newFiles[0];\r\n    const allowedTypes = ['image/jpeg', 'image/png'];\r\n\r\n    if (!allowedTypes.includes(file.type)) {\r\n        OpenNotification('warning', 'JPG/PNG files are allowed only!')\r\n      return false;\r\n    } \r\n    try { \r\n        const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInPartnerContractInfo)\r\n        return ress\r\n    } catch (error) {\r\n      console.error('Error during file upload:', error);\r\n      return false;\r\n    }\r\n}\r\nconst [showContent, setShowContent] = useState(false)\r\nconst [content, setContent] = useState(null)\r\nconst onClickView = (fileInfo) => {\r\n    setShowContent(true)\r\n    setContent(fileInfo)\r\n}\r\n\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">CONTRACT INFO</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.partnerIntialValues.contractInfo}\r\n                validationSchema={userContractValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.partnerState, contractInfo: values }\r\n                    props.setPartnerState(updatedPayload)\r\n                    \r\n                    let dataToStore = props.partnerIntialValues\r\n                    dataToStore.contractInfo = values\r\n                    props.setPartnerIntialValues(dataToStore)\r\n\r\n                    props.setStep(props.step + 1)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                       label={<p>Contract Type<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.contractType && touched.contractType}\r\n                                        errorMessage={errors.contractType}\r\n                                    >\r\n                                        <Field name=\"contractType\">\r\n                                            {({ field, form }) => (\r\n                                                <Select \r\n                                                    // isDisabled = {true}  \r\n                                                    placeholder=\"Select contract type\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={contractTypeList}\r\n                                                    value={contractTypeList.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.contractType\r\n                                                    )}\r\n                                                    onChange={(gender) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            gender.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem label=\"Upload file\">\r\n                                        <Field name='contractFile'>\r\n                                        {({field,form}) => (\r\n                                        <div>\r\n                                            <Upload beforeUpload={beforeUpload} draggable className='border-gray-200 w-[500] h-[0]' style={{ minHeight: \"3rem\"}}\r\n                                                onChange={(updatedFiles, files, uploadRes, filesDetails) => {form.setFieldValue(field.name,uploadRes?.data?.fileUnqId)}}>\r\n                                                <div className=\"my-10 text-center\">\r\n                                                    <p className=\"font-semibold\">\r\n                                                        <span className=\"text-gray-400 dark:text-white\">{values.contractFile ? \"File uploaded, \" : 'No Files Uploaded, '}</span>\r\n                                                        <span className=\"text-blue-700\">Browse</span>\r\n                                                    </p>\r\n                                                </div>\r\n                                            </Upload>\r\n                                            {values.contractFile &&\r\n                                            <div className=\"upload-file cursor-pointer h-12 w-120\" >\r\n                                                <div className=\"upload-file-info\" onClick={() => onClickView(values.contractFile)}>\r\n                                                    <h6 className=\"upload-file-name\">{values.contractFile.substring(0, 15)}</h6>\r\n                                                </div>\r\n                                                <CloseButton className=\"upload-file-remove \" onClick={() => {form.setFieldValue(field.name, '');}}/>\r\n                                            </div>}\r\n                                        </div>\r\n                                        )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Signed Date<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.signedDate && touched.signedDate\r\n                                        }\r\n                                        errorMessage={errors.signedDate}\r\n                                    >\r\n                                        <Field name=\"signedDate\" >\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    placeholder=\"Select signed date\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                         label={<p>Enforcement Date<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.terminationDate && touched.terminationDate\r\n                                        }\r\n                                        errorMessage={errors.terminationDate}\r\n                                    >\r\n                                        <Field name=\"enforcementDate\" >\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    placeholder=\"Select enforcement date\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                  \r\n                                    <FormItem\r\n                                        label={<p>Termination date<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.terminationDate && touched.terminationDate\r\n                                        }\r\n                                        errorMessage={errors.terminationDate}\r\n                                    >\r\n                                        <Field name=\"terminationDate\" >\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    placeholder=\"Select termination date\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem> \r\n                                    <FormItem\r\n                                        label = {<p>Contract Status <span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.contractStatus && touched.contractStatus}\r\n                                        errorMessage={errors.contractStatus}\r\n                                    >\r\n                                        <Field name=\"contractStatus\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select contract status\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={contractStatus}\r\n                                                    value={contractStatus.filter(\r\n                                                        (label) =>\r\n                                                            label.value ===\r\n                                                            values.contractStatus\r\n                                                    )}\r\n                                                    onChange={(label) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            label.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                </div>\r\n\r\n                            </FormContainer>\r\n                            \r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n            <Dialog isOpen={showContent}\r\n                    onClose={() => setShowContent(false)}>\r\n                    <div className='p-5'>\r\n                        <img src={`${appConfig.apiPrefix}/media/uniqid/${content}`} alt=\"Content\" />\r\n                        <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                    </div>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PartnerContractInfo\r\n","import { Select, FormItem, FormContainer, Input } from 'components/ui'\r\nimport { RichTextEditor } from 'components/shared'\r\nimport { Field, Formik, Form } from 'formik'\r\nimport { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport * as Yup from 'yup'\r\nimport { getPublicRoles } from '../store/dataSlice'\r\n\r\nconst masterPermissionValidationSchema = Yup.object().shape({\r\n    publicRole: Yup.string().required('Please enter master role').nullable(),\r\n    userRole: Yup.string().required('Please enter user role title').nullable(),\r\n})\r\n\r\nconst PatnerMasterPermissions = ({ onChange, refId, ...props }) => {\r\n    const dispatch = useDispatch()\r\n    const {\r\n        enterAccount,\r\n        password,\r\n        rememberMe,\r\n        usernameOrEmail,\r\n        acc_mno_parent_unq_id,\r\n    } = useSelector((state) => state.auth.user)\r\n    const publicRolesList = useSelector(\r\n        (state) => state.partnerList?.data?.publicRolesList\r\n    )\r\n\r\n    useEffect(() => {\r\n        dispatch(getPublicRoles({ acc_mno_parent_unq_id }))\r\n    }, [dispatch, enterAccount])\r\n    return (\r\n        <>\r\n            <h3 className=\"mx-4 mb-4 mt-2\">MASTER PERMISSION INFO</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.partnerIntialValues?.masterInfoPermission}\r\n                validationSchema={masterPermissionValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.partnerState, ...values }\r\n\r\n                    props.setPartnerState(updatedPayload)\r\n                    let dataToStore = props.partnerIntialValues\r\n                    dataToStore.masterInfoPermission = values\r\n                    props.setPartnerIntialValues(dataToStore)\r\n\r\n                    console.log(updatedPayload, 'update')\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid gap-4 mx-4\">\r\n                                    <div className=\"md:grid grid-cols-2 gap-4\">\r\n                                        <FormItem\r\n                                            label={\r\n                                                <p>\r\n                                                    Master Role{' '}\r\n                                                    <span\r\n                                                        style={{ color: 'red' }}\r\n                                                    >\r\n                                                        {'*'}\r\n                                                    </span>\r\n                                                </p>\r\n                                            }\r\n                                            invalid={\r\n                                                errors.publicRole &&\r\n                                                touched.publicRole\r\n                                            }\r\n                                            errorMessage={errors.publicRole}\r\n                                        >\r\n                                            <Field name=\"publicRole\">\r\n                                                {({ field, form }) => (\r\n                                                    <Select\r\n                                                        placeholder=\"Select Master Role\"\r\n                                                        field={field}\r\n                                                        form={form}\r\n                                                        options={\r\n                                                            publicRolesList\r\n                                                        }\r\n                                                        value={publicRolesList?.filter(\r\n                                                            (label) =>\r\n                                                                label.value ===\r\n                                                                values.publicRole\r\n                                                        )}\r\n                                                        onChange={(\r\n                                                            label,\r\n                                                            field\r\n                                                        ) =>\r\n                                                            form.setFieldValue(\r\n                                                                field.name,\r\n                                                                label.value\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                )}\r\n                                            </Field>\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            label={\r\n                                                <p>\r\n                                                    User Role Title{' '}\r\n                                                    <span\r\n                                                        style={{ color: 'red' }}\r\n                                                    >\r\n                                                        {'*'}\r\n                                                    </span>\r\n                                                </p>\r\n                                            }\r\n                                            invalid={\r\n                                                errors.userRole &&\r\n                                                touched.userRole\r\n                                            }\r\n                                            errorMessage={errors.userRole}\r\n                                        >\r\n                                            <Field\r\n                                                type=\"text\"\r\n                                                autoComplete=\"off\"\r\n                                                name=\"userRole\"\r\n                                                placeholder=\"Enter Role\"\r\n                                                component={Input}\r\n                                            />\r\n                                        </FormItem>\r\n                                    </div>\r\n                                    <FormItem label=\"Description\">\r\n                                        <Field name=\"description\">\r\n                                            {({ field, form }) => (\r\n                                                <RichTextEditor\r\n                                                    style={{ width: '60%' }}\r\n                                                    value={field.value}\r\n                                                    onChange={(val) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            val\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                </div>\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PatnerMasterPermissions\r\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport PartnerUserInfo from './PartnerUserInfo'\r\nimport PartnerContractInfo from './PartnersContractInfo'\r\nimport PatnerMasterPermissions from './PatnerMasterPermissions'\r\n\r\n\r\nconst ProviderMainUserInfo = forwardRef((props, ref) => {\r\n\r\n  \r\n  const [formData, setFormData] = useState({\r\n    PartnerUserInfo: { values: null, validated: false },\r\n    PartnerContractInfo: { values: null, validated: false },\r\n    PartnerPermissionInfo: { values: null, validated: false },\r\n  })\r\n\r\n  const partnerUserInforef = React.useRef()\r\n  const partnerContractInforef = React.useRef()\r\n  const PatnerPermissionInforef=React.useRef()\r\n\r\n  // React.useEffect(() => {\r\n  //   if (\r\n  //     formData.PartnerUserInfo.validated\r\n  //   ) {\r\n  //     alert('Ready to save')\r\n  //   }\r\n  // }, [formData])\r\n\r\n  async function handleSubmit() {\r\n    let validationErrors = false;\r\n\r\n\r\n    await PatnerPermissionInforef?.current?.validateForm().then(errors => {\r\n      if (errors && Object.keys(errors).length > 0) {\r\n        PatnerPermissionInforef.current.setTouched(errors, true);\r\n        validationErrors = true;\r\n      }\r\n    });\r\n\r\n    await partnerUserInforef.current?.validateForm().then(errors => {\r\n\r\n      if (errors && Object.keys(errors).length > 0) {\r\n        partnerUserInforef.current.setTouched(errors, true);\r\n        validationErrors = true;\r\n      }\r\n\r\n    });\r\n    await partnerContractInforef.current?.validateForm().then(errors => {\r\n\r\n      if (errors && Object.keys(errors).length > 0) {\r\n        partnerContractInforef.current.setTouched(errors, true);\r\n        validationErrors = true;\r\n      }\r\n\r\n     \r\n    });\r\n\r\n    \r\n    if (!validationErrors) {\r\n      await PatnerPermissionInforef?.current.submitForm()\r\n      await partnerUserInforef?.current.submitForm()\r\n      await partnerContractInforef?.current.submitForm()\r\n\r\n    }\r\n\r\n  }\r\n\r\n  function handleChangePartnerUserInfo(data) {\r\n    setFormData({ ...formData, PartnerUserInfo: data })\r\n  }\r\n\r\n  function handleChangePartnerContractInfo(data) {\r\n    setFormData({ ...formData, PartnerContractInfo: data })\r\n  }\r\n\r\n\r\n   \r\n \r\nfunction handleChangePartnerMasterPermissionInfo(data) {\r\n  setFormData({ ...formData,  PartnerPermissionInfo: data })\r\n}\r\n\r\n\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      handleSubmitFromParent() {\r\n        handleSubmit()\r\n      },\r\n    }\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <div style={{ backgroundColor: \"#F5F5F5\" }} className=\" p-5\">\r\n\r\n        <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider >\r\n          <PatnerMasterPermissions\r\n            handleSubmit={handleSubmit}\r\n            onChange={handleChangePartnerMasterPermissionInfo}\r\n            refId={PatnerPermissionInforef}\r\n            partnerState={props.partnerState}\r\n            setPartnerState={props.setPartnerState}\r\n            partnerIntialValues={props.partnerIntialValues}\r\n            setPartnerIntialValues={props.setPartnerIntialValues}\r\n          />\r\n        </AdaptableCard>\r\n        <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider >\r\n          <PartnerUserInfo\r\n            handleSubmit={handleSubmit}\r\n            onChange={handleChangePartnerUserInfo}\r\n            refId={partnerUserInforef}\r\n            partnerState={props.partnerState}\r\n            setPartnerState={props.setPartnerState}\r\n            partnerIntialValues={props.partnerIntialValues}\r\n            setPartnerIntialValues={props.setPartnerIntialValues}\r\n          />\r\n        </AdaptableCard>\r\n        <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider >\r\n          <PartnerContractInfo\r\n            handleSubmit={handleSubmit}\r\n            onChange={handleChangePartnerContractInfo}\r\n            refId={partnerContractInforef}\r\n            partnerState={props.partnerState}\r\n            setPartnerState={props.setPartnerState}\r\n            setStep={props.setStep}\r\n            step={props.step}\r\n            partnerIntialValues={props.partnerIntialValues}\r\n            setPartnerIntialValues={props.setPartnerIntialValues}\r\n          />\r\n        </AdaptableCard>\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default ProviderMainUserInfo\r\n","import { pathForOrientation } from '@visx/pattern/lib/patterns/Lines';\r\nimport { Alert, Button, Card, Dialog } from 'components/ui'\r\nimport React, { useState } from 'react'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { Link } from 'react-router-dom';\r\nimport GetDropdownLabel from 'views/Servicefile';\r\nimport { timeZone } from '../../../../mock/data/timezones'\r\nimport { useSelector } from 'react-redux';\r\nimport appConfig from 'configs/app.config';\r\nimport DateFormat from 'components/template/DateFormat';\r\nimport dayjs from 'dayjs';\r\nimport ReactHtmlParser from 'html-react-parser'\r\n\r\nconst partner = [\r\n    { label: 'Shipping Partner', value: 0 },\r\n    { label: 'Warehouse Partner', value: 1 },\r\n]\r\n// const currency = [\r\n//     { label: 'USD', value: 0 },\r\n//     { label: 'EUR', value: 1 },\r\n//     { label: 'CAD', value: 2 },\r\n//     { label: 'KWD', value: 3 },\r\n//     { label: 'INR', value: 4 },\r\n// ]\r\n\r\n// const timeZone = [\r\n//     { label: 'India (GMT+5:30)', value: 0 },\r\n//     { label: 'USA (GMT-4)', value: 1 },\r\n//     { label: 'Chicago (GMT-5)', value: 2 },\r\n//     { label: 'Phoenix (GMT-7)', value: 3 },\r\n//     { label: 'Los Angeles (GMT-7)', value: 4},\r\n// ] \r\nconst orientation = [\r\n    { label: 'Right to Left', value: \"RTL\" },\r\n    { label: 'Left to Right', value: \"LTR\" },\r\n]\r\nconst language = [\r\n    { label: 'English', value: 1 },\r\n    { label: 'Spanish', value: 2 },\r\n    { label: 'Arabic', value: 3 },\r\n    { label: 'Portugese', value: 4 },\r\n\r\n]\r\nconst settlementType = [\r\n    { label: 'Automatic', value: 'AUTOMATIC' },\r\n    { label: 'Manual', value: 'MANUAL' },\r\n];\r\n\r\nconst settelementCycle = [\r\n    { label: 'Daily', value: 'DAILY' },\r\n    { label: 'Weekly', value: 'WEEKLY' },\r\n    { label: 'Monthly', value: 'MONTHLY' },\r\n    { label: 'Quarterly', value: 'QUARTERLY' },\r\n    { label: 'Half-Yearly', value: 'HALFYEARLY' },\r\n    { label: 'Yearly', value: 'YEARLY' },\r\n];\r\n\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: 0 },\r\n    { label: 'Airtel Inc.', value: 1 },\r\n    { label: 'Airtel India', value: 2 },\r\n]\r\n\r\n\r\nconst contractStatus = [\r\n    { label: 'ACTIVE', value: 'ACTIVE' },\r\n    { label: 'IN_ACTIVE', value: 'IN_ACTIVE' },\r\n    { label: 'PENDING_APPROVAL', value: 'PENDING_APPROVAL' }\r\n]\r\nconst apiConfiguration = [\r\n    { label: 'AUTOMATIC', value: 'AUTOMATIC,' },\r\n    { label: 'MANUAL', value: 'MANUAL' },\r\n]\r\nconst custOperator = [\r\n    { label: 'Airtel Telangana', value: 0 },\r\n    { label: 'Airtel Mumbai', value: 1 },\r\n    { label: 'Airtel Rajasthan ', value: 2 },\r\n\r\n]\r\n\r\nfunction PartnersPreview({ partnerState, step, setStep, message, mode }) {\r\n\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n\r\n    console.log(partnerState, \"partnerState\")\r\n    //  partnerState = {\r\n    //     ...partnerState,\r\n    //     ...partnerState.accInfo,\r\n    //     ...partnerState.ContactInfo,\r\n    //     ...partnerState.address,\r\n    //     ...partnerState.settlementInfo,\r\n    // };\r\n    const publicRolesList = useSelector(\r\n        (state) => state.partnerList?.data?.publicRolesList\r\n    )\r\n    const currencyList = useSelector((state) => state.partnerList?.data?.currencyList)\r\n    const parentAccountList = useSelector((state) => state.partnerList?.data?.parentAccountList)\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n\r\n    const timeZoneList = timeZone?.map((timezone) => ({\r\n        value: timezone.id,\r\n        label: timezone.value,\r\n    }))\r\n\r\n    const contractTypeList = useSelector((state) => state.partnerList?.data?.contractTypeList)\r\n\r\n    function convert(str) {\r\n        var date = new Date(str),\r\n            mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\r\n            day = (\"0\" + date.getDate()).slice(-2);\r\n        return [day, mnth, date.getFullYear()].join(\"/\");\r\n    }\r\n\r\n    const onClickFile = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n    return (\r\n        <>\r\n\r\n\r\n            {message && (\r\n                <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                    {Array.isArray(message) ? message.join(\", \") : message}\r\n                </Alert>\r\n            )}\r\n            <h3 className=\"mx-4 mb-4 mt-2\">Preview</h3>\r\n            <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2\">\r\n                    <h6 className=\"mx-2 mb-4 mt-1 font-bold text-cyan-500\">PARTNER DETAILS{' '}</h6>\r\n                    <div className=\" text-base  font-bold flex justify-end\">\r\n                        <button onClick={() => { setStep(0) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"md:grid grid-cols-6\">\r\n                    <div className=\"col-span-2 md:gird mx-2\">\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">Accounts Info</div>\r\n                        <div className=\"col-span-6 md:grid grid-cols-2 gap-2\">\r\n\r\n                            <p className=\"mt-2 text-base\">{partnerState?.accName}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(partnerState?.accTimeZone, timeZoneList)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(partnerState?.operater, parentAccountList)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(partnerState?.partnerType, partner)}</p>\r\n                            <div className='flex'>\r\n                                <p className=\"mt-2 text-base  whitespace-nowrap\">Inc Date: </p>\r\n                                <p className='mt-[11px]'>\r\n                                    {dayjs(\r\n                                        partnerState?.accIncorpDt,\r\n                                        dateFormat\r\n                                    )?.format(dateFormat)}\r\n                                </p>\r\n                            </div>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(partnerState?.accCurrency, currencyList)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(partnerState?.accLang, language)}</p>\r\n                            <p className=\"mt-2 text-base\">Tax: {partnerState?.accTaxId}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(partnerState?.accOrient, orientation)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(partnerState?.apiConfig, apiConfiguration)}</p>\r\n\r\n                            {/* <p className=\"mt-2 text-base\">Sensors</p> */}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">Contact Info</div>\r\n                        <div className='md:grid grid-cols-1 gap-2'>\r\n                            <p className=\"mt-2 text-base\">CXO : {partnerState?.accPrimContName}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.accEmailId}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.accPrimCont}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.accAltCont}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.accWebUrl}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">Address</div>\r\n                        <div className='md:grid grid-cols-1 gap-2'>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.accAddL1}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.accCity}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.accState}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.accCountry}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.accZipcode}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">Settlement Info</div>\r\n                        <div className='md:grid grid-cols-1 gap-2'>\r\n\r\n\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(partnerState?.prefSettleType, settlementType)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(partnerState?.billCycle, settelementCycle)}</p>\r\n\r\n                            <p className=\"mt-2 text-base whitespace-nowrap\">{partnerState?.bankAccNum}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.bankName}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.bankBranchName}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.billDueTenor}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.ifscCode}</p>\r\n                            <p className=\"mt-2 text-base\">{partnerState?.micrCode}</p>\r\n                            {/* <p className=\"mt-2 text-base\">{convert(partnerState?.billDate)}</p> */}\r\n                            <p>\r\n                                {dayjs(\r\n                                    partnerState?.billDate,\r\n                                    dateFormat\r\n                                )?.format(dateFormat)}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">Files</div>\r\n                        {partnerState?.uploadFiles.map(e => {\r\n                            if (e.file_name !== \"\") {\r\n                                return (\r\n                                    <>\r\n                                        <div className='md:grid grid-cols-1 gap-2' onClick={() => onClickFile(e)}>\r\n                                            <p className='mt-2 text-base underline text-sky-500 cursor-pointer'>{e.doc_name}</p>\r\n                                        </div>\r\n                                    </>\r\n                                )\r\n                            }\r\n                        })}\r\n                        {partnerState?.additionalFiles.map(e => {\r\n                            if (e.file_name !== \"\") {\r\n                                return (\r\n                                    <>\r\n                                        <div className='md:grid grid-cols-1 gap-2' onClick={() => onClickFile(e)}>\r\n                                            <p className='mt-2 text-base underline text-sky-500 cursor-pointer'>{e.doc_name}</p>\r\n                                        </div>\r\n                                    </>\r\n                                )\r\n                            }\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n            {mode == 'ADD' && <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2\">\r\n                    <h6 className=\"mx-2 mb-4 mt-1 font-bold text-cyan-500\">MASTER PERMISSIONS{' '}</h6>\r\n                    {mode == 'ADD' && <div className=\" text-base  font-bold flex justify-end\">\r\n                        <Link onClick={() => { setStep(1) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </Link>\r\n                    </div>}\r\n                </div>\r\n\r\n                <div className=\"md:grid grid-cols-12\">\r\n                    <div className='col-span-2 md:gird mx-2'>\r\n                        <p className='text-base underline font-bold mb-2'>PublicRole</p>\r\n                        <p className='text-base'>{GetDropdownLabel(partnerState?.publicRole, publicRolesList)}</p>\r\n                    </div>\r\n                    <div className='col-span-2 md:gird mx-2'>\r\n                        <p className='text-base underline font-bold mb-2'>UserRole</p>\r\n                        <p className='text-base'>{partnerState?.userRole}</p>\r\n                    </div>\r\n                    <div className='col-span-2 md:gird mx-2'>\r\n                        <p className='text-base underline font-bold mb-2'>Description</p>\r\n                        <p className='text-base'>{ReactHtmlParser(partnerState?.description)}</p>\r\n                    </div>\r\n\r\n                </div>\r\n            </Card>}\r\n            {mode == 'ADD' && <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2\">\r\n                    <h6 className=\"mx-2 mb-4 mt-1 font-bold text-cyan-500\">USER INFO{' '}</h6>\r\n                    {mode == \"ADD\" && <div className=\" text-base  font-bold flex justify-end\">\r\n                        <Link onClick={() => { setStep(0) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </Link>\r\n                    </div>}\r\n                </div>\r\n                <div className=\"\">\r\n                    <div className='md:grid grid-cols-12'>\r\n                        <div className='col-span-2 md:gird mx-2'>\r\n                            <p className='text-base underline font-bold mb-2'>FirstName</p>\r\n                            <p className='text-base'>{partnerState?.userInfo?.firstName}</p>\r\n                        </div>\r\n                        <div className='col-span-2 md:gird mx-2'>\r\n                            <p className='text-base underline font-bold mb-2'>LastName</p>\r\n                            <p className='text-base'>{partnerState?.userInfo?.lastName}</p>\r\n                        </div>\r\n                        {/* <div className='col-span-2 md:gird mx-2'>\r\n                        <p className='text-base underline font-bold mb-2'>Register Id:</p>\r\n                        <p className='text-base'>4679812656_Ajjas</p>\r\n                    </div> */}\r\n                        <div className='col-span-2 md:gird mx-2'>\r\n                            <p className='text-base underline font-bold mb-2'>Email ID:</p>\r\n                            <p className='text-base'>{partnerState?.userInfo?.emailId}</p>\r\n                        </div>\r\n                        <div className='col-span-4 md:gird mx-2'>\r\n                            <p className='text-base underline font-bold mb-2'>Phone Number</p>\r\n                            <p className='text-base'>{partnerState?.userInfo?.phoneNumber}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className='md:grid grid-cols-12'>\r\n                        <div className='col-span-2 md:gird mx-2 mt-4'>\r\n                            <p className='text-base underline font-bold mb-2'>Contract Type</p>\r\n                            <p className='text-base'>{GetDropdownLabel(partnerState?.contractInfo?.contractType, contractTypeList)}</p>\r\n                        </div>\r\n                        <div className='col-span-2 md:gird mx-2 mt-4'>\r\n                            <p className='text-base underline font-bold mb-2'>Signed Date</p>\r\n                            {/* <p className='text-base'>{convert(partnerState?.contractInfo?.signedDate)}</p> */}\r\n                            <p className='text-base'>\r\n                                {dayjs(\r\n                                    partnerState?.contractInfo?.signedDate,\r\n                                    dateFormat\r\n                                )?.format(dateFormat)}\r\n                            </p>\r\n                        </div>\r\n                        <div className='col-span-2 md:gird mx-2 mt-4'>\r\n                            <p className='text-base underline font-bold mb-2'>Enforcement Date</p>\r\n                            {/* <p className='text-base'>{convert(partnerState?.contractInfo?.enforcementDate)}</p> */}\r\n                            <p className='text-base'>\r\n                                {dayjs(\r\n                                    partnerState?.contractInfo?.enforcementDate,\r\n                                    dateFormat\r\n                                )?.format(dateFormat)}\r\n                            </p>\r\n                        </div>\r\n                        <div className='col-span-2 md:gird mx-2 mt-4'>\r\n                            <p className='text-base underline font-bold mb-2'>Termination Date</p>\r\n                            {/* <p className='text-base'>{convert(partnerState?.contractInfo?.terminationDate)}</p> */}\r\n                            <p className='text-base'>\r\n                                {dayjs(\r\n                                    partnerState?.contractInfo?.terminationDate,\r\n                                    dateFormat\r\n                                )?.format(dateFormat)}\r\n                            </p>\r\n                        </div>\r\n                        <div className='col-span-2 md:gird mx-2 mt-4'>\r\n                            <p className='text-base underline font-bold mb-2'>status</p>\r\n                            <p className='text-base'>{GetDropdownLabel(partnerState?.contractInfo?.contractStatus, contractStatus)}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card>}\r\n            <Dialog isOpen={showContent}\r\n                onClose={() => setShowContent(false)}>\r\n                <div className='p-5'>\r\n                    <img src={`${appConfig.apiPrefix}/media/uniqid/${content?.file_url}`} alt=\"Content\" />\r\n                    <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content?.file_url}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PartnersPreview\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { Steps, Button, Alert } from 'components/ui'\r\nimport NewOperators from './NewPartners'\r\nimport PartnerDetails from './PartnerDetails'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport PartnersMainUserInfo from './PartnersMainUserInfo'\r\nimport PartnersPreview from './PartnersPreview'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport { apiSubmitOperator } from 'services/OperatorsService'\r\nimport { BiArrowBack } from 'react-icons/bi'\r\nimport campareandCopy, { PartnerEditandCopy, PartnersPayload } from 'utils/campareandCopy'\r\nimport { apiSubmitPartner, apiUpdatePartner } from 'services/PartnersService'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getContractType, getCurrency, getParentAccount, getUploadFileType, } from '../store/dataSlice'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { GetErrorMsg, OpenNotification } from 'views/Servicefile'\r\nimport { concat } from 'lodash'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\n\r\n\r\n\r\nconst Controlled = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const { enterAccount, password, rememberMe, usernameOrEmail, acc_mno_id, acc_mno_parent_unq_id, acc_mno_parent_id\r\n    } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n\r\n    const location = useLocation();\r\n    const rowForEdit = location.state?.data;\r\n    const mode = location.state?.mode ? location.state.mode : \"ADD\";\r\n\r\n    const [partnerState, setPartnerState] = useState({})\r\n    const [step, setStep] = useState(0)\r\n    const navigate = useNavigate()\r\n    const [message, setMessage] = useTimeOutMessage()\r\n\r\n    let prtnerIntialValues = {\r\n        accInfo: {\r\n\r\n            accName: \"\",//not in api\r\n            operater: \"\", //not in api\r\n            accCompName: \"\",\r\n            accIncorpDt: \"\",\r\n            accTaxId: \"\",\r\n            partnerType: \"\",//not in api\r\n            accTimeZone: '',\r\n            accCurrency: '',\r\n            accLang: '',\r\n            accOrient: '',\r\n            apiConfig: \"\",//not in api,\r\n            fields: []\r\n        },\r\n        ContactInfo: {\r\n            accFirstName: \"\",\r\n            acctLastName: \"\",\r\n            accMiddleName: \"\",\r\n            accEmailId: \"\",\r\n            accPrimCont: \"\",\r\n            accAltCont: \"\",\r\n            accFax: \"\",\r\n            accWebUrl: \"\",\r\n            fields: []\r\n        },\r\n        address: {\r\n            accCountry: '',\r\n            accAddL1: '',\r\n            accAddL2: '',\r\n            accCity: '',\r\n            accState: '',\r\n            accZipcode: '',\r\n        },\r\n        settlementInfo: {\r\n            prefSettleType: \"\",\r\n            billCycle: \"\",\r\n            // billDate: \"\",\r\n            billDueTenor: \"\",\r\n            bankAccNum: \"\",\r\n            bankName: \"\",\r\n            bankBranchName: \"\",\r\n            ifscCode: \"\",\r\n            micrCode: \"\",\r\n            uploadCancelledCheque: '',\r\n\r\n            settelementWeek : \"\",\r\n            settelementMonth:\"\",\r\n            settelementDate:\"\"\r\n        },\r\n        userInfo: {\r\n            roleId: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            emailId: '',\r\n            phoneNumber: '',\r\n            middleName: ''\r\n        },\r\n        contractInfo: {\r\n            contractType: \"\",//not in api\r\n            signedDate: \"\",//not in api\r\n            enforcementDate: \"\",//not in api\r\n            terminationDate: \"\",//not in api\r\n            contractStatus: \"\",//not in api\r\n            contractFile: ''\r\n        },\r\n        masterInfoPermission: {\r\n            publicRole: '', //not in api\r\n            userRole: '', //not in api\r\n            description: '', //not in api\r\n\r\n        },\r\n        uploadFiles: [\r\n        ],\r\n        additionalFiles: [\r\n            {\r\n                file_name: \"\",\r\n                file_url: \"\",\r\n                file_type: \"\",\r\n                dgl_acc_mno_id: null\r\n            }\r\n        ]\r\n\r\n    }\r\n\r\n    const [partnerIntialValues, setPartnerIntialValues] = useState()\r\n    const operatorFileTypes = useSelector(state => state.partnerList?.data?.fileList)\r\n    useEffect(() => {\r\n        dispatch(getUploadFileType(enterAccount))\r\n    }, [])\r\n    useEffect(() => {\r\n        if (operatorFileTypes?.res?.length) {\r\n            let uploadArray = []\r\n            for (let i = 0; i < operatorFileTypes?.res.length; i++) {\r\n                if (operatorFileTypes?.res[i].acc_type === 'Partner') {\r\n                    const docType = JSON.parse(operatorFileTypes?.res[i].doc_type);\r\n                    docType.map((item, index) => {\r\n                        uploadArray.push({\r\n                            \"doc_type\": docType[index],\r\n                            \"doc_name\": docType[index].doc_type_name,\r\n                            \"file_name\": \"\",\r\n                            \"file_url\": \"\",\r\n                            \"file_type\": \"upload\"\r\n                        })\r\n                    })\r\n                }\r\n            }\r\n            prtnerIntialValues.uploadFiles = uploadArray\r\n            setPartnerIntialValues(prtnerIntialValues)\r\n        } else {\r\n            setPartnerIntialValues(prtnerIntialValues)\r\n        }\r\n    }, [operatorFileTypes])\r\n\r\n    const newvalue = {\r\n        \"accName\": \"fdgfdhgfh\",\r\n        \"operater\": 379,\r\n        \"accCompName\": \"gfhgfh\",\r\n        \"accIncorpDt\": \"2023-06-06T18:30:00.000Z\",\r\n        \"accTaxId\": \"12321313\",\r\n        \"partnerType\": 0,\r\n        \"accTimeZone\": 2,\r\n        \"accCurrency\": 15,\r\n        \"accLang\": 2,\r\n        \"accOrient\": \"RTL\",\r\n        \"apiConfig\": \"AUTOMATIC\",\r\n        \"accFirstName\": \"rgerttrytr\",\r\n        \"acctLastName\": \"\",\r\n        \"accMiddleName\": \"etytrytry\",\r\n        \"accEmailId\": \"yttryttr@gmail.com\",\r\n        \"accPrimCont\": \"1234567891\",\r\n        \"accAltCont\": \"3216549871\",\r\n        \"accFax\": \"trtryty\",\r\n        \"accWebUrl\": \"trytrytr\",\r\n        \"accLastName\": \"fdgfdgfd\",\r\n        \"accCountry\": \"dfgdfgfdgd\",\r\n        \"accAddL1\": \"dfgdfgfdgd\",\r\n        \"accAddL2\": \"fgdfgfdgfdg\",\r\n        \"accCity\": \"fdgfgdfg\",\r\n        \"accState\": \"gfdgdfgfdg\",\r\n        \"accZipcode\": \"gfdgfdgg\",\r\n        \"prefSettleType\": \"AUTOMATIC\",\r\n        \"billCycle\": \"WEEKLY\",\r\n        \"billDate\": \"2023-06-01T18:30:00.000Z\",\r\n        \"billDueTenor\": \"12\",\r\n        \"bankAccNum\": \"dsvfdsfdsf\",\r\n        \"bankName\": \"dsfdsfds\",\r\n        \"bankBranchName\": \"fdsfdsf\",\r\n        \"ifscCode\": \"dsfdsfdf\",\r\n        \"micrCode\": \"2134234\",\r\n        \"userInfo\": {\r\n            \"roleId\": \"\",\r\n            \"firstName\": \"fdgdfg\",\r\n            \"lastName\": \"gfdgdfgg\",\r\n            \"emailId\": \"fdgfdggfd@gmail.com\",\r\n            \"phoneNumber\": \"7896541231\",\r\n            \"middleName\": \"dfgfdgfd\"\r\n        },\r\n        \"contractInfo\": {\r\n            \"contractType\": 5,\r\n            \"signedDate\": \"2023-06-09T18:30:00.000Z\",\r\n            \"enforcementDate\": \"2023-06-07T18:30:00.000Z\",\r\n            \"terminationDate\": \"2023-06-07T18:30:00.000Z\",\r\n            \"contractStatus\": \"ACTIVE\"\r\n        }\r\n    }\r\n\r\n    const childRef = useRef()\r\n    const childRef2 = useRef()\r\n\r\n    const onChange = (nextStep) => {\r\n        if (nextStep < 0) {\r\n            setStep(0)\r\n        } else if (nextStep > 3) {\r\n            setStep(3)\r\n        } else {\r\n            setStep(nextStep)\r\n        }\r\n    }\r\n\r\n    const onNext = (values) => {\r\n        if (step === 0) {\r\n            childRef.current?.handleSubmitFromParent()\r\n        }\r\n        if (step === 1) {\r\n            childRef2.current?.handleSubmitFromParent()\r\n        }\r\n    }\r\n\r\n    const onPreviousold = () => {\r\n\r\n\r\n        if (mode === \"EDIT\") {\r\n            onChange(0)\r\n        } else\r\n            onChange(step - 1)\r\n    }\r\n\r\n\r\n    const convertKeysToCamelCase = obj => {\r\n        if (typeof obj !== \"object\" || obj === null) {\r\n            return obj;\r\n        }\r\n\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(convertKeysToCamelCase);\r\n        }\r\n\r\n        const camelCaseObj = {};\r\n        for (let key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                const camelCaseKey = key.replace(/_([a-z])/g, function (match, letter) {\r\n                    return letter.toUpperCase();\r\n                });\r\n                camelCaseObj[camelCaseKey] = convertKeysToCamelCase(obj[key]);\r\n            }\r\n        }\r\n\r\n        return camelCaseObj;\r\n    }\r\n\r\n    const onNextold = (values) => {\r\n        console.log(\"onNextonNext\", values, step)\r\n\r\n        switch (mode) {\r\n            case \"ADD\":\r\n                if (step === 0) {\r\n                    childRef.current?.handleSubmitFromParent()\r\n                }\r\n                if (step === 1) {\r\n                    childRef2.current?.handleSubmitFromParent()\r\n                }\r\n                break;\r\n\r\n            case \"EDIT\":\r\n                if (step === 0) {\r\n\r\n\r\n                    console.log(rowForEdit);\r\n                    let comp = convertKeysToCamelCase(rowForEdit);\r\n\r\n                    let temporary = campareandCopy(newvalue, comp);\r\n\r\n\r\n                    setPartnerState(temporary);\r\n\r\n                    childRef.current?.handleSubmitFromParent()\r\n\r\n                    // childRef2.current?.handleSubmitFromParent()\r\n                    onChange(step + 2)\r\n                }\r\n\r\n                break;\r\n\r\n            default:\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const submitApi = async () => {\r\n        let uploadEdDocument = concat(partnerState?.uploadFiles, partnerState?.additionalFiles)\r\n\r\n        console.log(partnerState)\r\n        if (mode === \"ADD\") {\r\n            uploadEdDocument = uploadEdDocument.map((file) => {\r\n                if (file?.file_url != '') {\r\n                    return {\r\n                        \"doc_name\": file?.doc_name,\r\n                        \"file_name\": file?.file_name,\r\n                        \"file_url\": file?.file_url,\r\n                        \"file_type\": file?.file_type,\r\n                    }\r\n                }\r\n            })\r\n            uploadEdDocument = uploadEdDocument.filter(item => item !== undefined && item !== null);\r\n            let createbody = {\r\n                \"acc_mno_parent\": acc_mno_parent_id,\r\n                \"acc_name\": partnerState.accName,\r\n                \"acc_parent\": partnerState.operater,\r\n                \"acc_comp_name\": partnerState.accCompName,\r\n                \"acc_incorp_dt\": partnerState.accIncorpDt,\r\n                \"acc_tax_id\": partnerState.accTaxId,\r\n                \"acc_time_zone\": partnerState.accTimeZone,\r\n                \"acc_currency\": partnerState.accCurrency,\r\n                \"acc_lang\": partnerState.accLang,\r\n                \"acc_orient\": partnerState.accOrient,\r\n                \"partner_type\": partnerState.partnerType,\r\n                \"dgl_acc_mno_custom_fields\": partnerState.fields,\r\n                \"acc_prim_cont\": partnerState.accPrimContName,\r\n                \"acc_email_id\": partnerState.accEmailId,\r\n                \"acc_phone\": partnerState.accPrimCont,\r\n                \"acc_alt_cont\": partnerState.accAltCont,\r\n                \"acc_fax\": partnerState.accFax,\r\n                \"acc_web_url\": partnerState.accWebUrl,\r\n                \"acc_add_l1\": partnerState.accAddL1,\r\n                \"acc_add_l2\": partnerState.accAddL2,\r\n                \"acc_city\": partnerState.accCity,\r\n                \"acc_state\": partnerState.accState,\r\n                \"acc_country\": partnerState.accCountry,\r\n                \"acc_zipcode\": partnerState.accZipcode,\r\n                \"pref_settle_type\": partnerState.prefSettleType,\r\n                \"bill_cycle\": partnerState.billCycle,\r\n                // \"bill_date\": \"2023-06-30T18:30:00.000Z\",\r\n                \"bill_due_tenor\": partnerState.billDueTenor,\r\n                \"bank_branch_name\": partnerState.bankBranchName,\r\n                \"bank_acc_num\": partnerState.bankAccNum,\r\n                \"bank_name\": partnerState.bankName,\r\n                \"ifsc_code\": partnerState.ifscCode,\r\n                \"micr_code\": partnerState.micrCode,\r\n                \"upload_cancel_cheque\": partnerState.uploadCancelledCheque,\r\n                \"acc_api_config\": partnerState.apiConfig,\r\n                \"acc_last_name\": partnerState.accLastName,\r\n                \"acc_middle_name\": partnerState.accMiddleName,\r\n                \"acc_first_name\": partnerState.accFirstName,\r\n                \"acc_status\": \"ACTIVE\",\r\n                \"acc_type\": \"Partner\",\r\n                \"dgl_mno_files\": uploadEdDocument,\r\n                \"dgl_acc_users\": [\r\n                    {\r\n                        \"first_name\": partnerState.userInfo.firstName,\r\n                        \"last_name\": partnerState.userInfo.lastName,\r\n                        \"email\": partnerState.userInfo.emailId,\r\n                        \"phone\": partnerState.userInfo.phoneNumber,\r\n                        \"status\": \"ACTIVE\",\r\n                        \"acc_password\": \"12345\",\r\n                        \"profile_img\": \"profile_img\",\r\n                        \"add_line1\": \"hyderabad\",\r\n                        \"add_line2\": \"Banglore\",\r\n                        \"middle_name\": partnerState.userInfo.middleName,\r\n                    }\r\n                ],\r\n                \"dgl_roles\": [\r\n                    {\r\n                        \"role_name\": partnerState?.userRole,\r\n                        \"role_desc\": partnerState?.description,\r\n                        \"permissions\": \"json string\",\r\n                        \"status\": 1,\r\n                        \"public_role_id\": partnerState?.publicRole,\r\n                        \"dgl_acc_mno_id\": acc_mno_id,\r\n                    }\r\n                ],\r\n                \"acc_status\": \"ACTIVE\",\r\n                \"acc_type\": \"Partner\",\r\n                \"dgl_contracts\": [\r\n                    {\r\n                        \"contract_name\": \"Provide Contract\",\r\n                        \"contract_file\": partnerState.contractInfo.contractFile,\r\n                        \"contr_desc\": \"Provider Description\",\r\n                        \"enforce_date\": partnerState.contractInfo.enforcementDate,\r\n                        \"signed_date\": partnerState.contractInfo.signedDate,\r\n                        \"status\": partnerState.contractInfo.contractStatus,\r\n                        \"terminate_date\": partnerState.contractInfo.terminationDate,\r\n                        \"dgl_acc_mno_id\": acc_mno_id,\r\n                        \"dgl_md_contract_type_id\": partnerState.contractInfo.contractType,\r\n                        \"dgl_contracts_receiving_parties\": 1\r\n                    }\r\n                ]\r\n            }\r\n            const resp = await apiSubmitPartner(createbody)\r\n\r\n            if (resp.status === 'success') {\r\n\r\n\r\n                OpenNotification('success', 'Created successfully ')\r\n                navigate('/account-menu-item-view-4');\r\n\r\n            }\r\n\r\n            if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n        } else if (mode === \"EDIT\") {\r\n\r\n            console.log(partnerState, \"partnerState\")\r\n            uploadEdDocument = uploadEdDocument.map((file) => {\r\n                if (file?.file_url != '') {\r\n                    return {\r\n                        \"id\": file.id,\r\n                        \"doc_name\": file?.doc_name,\r\n                        \"file_name\": file?.file_name,\r\n                        \"file_url\": file?.file_url,\r\n                        \"file_type\": file?.file_type,\r\n                    }\r\n                }\r\n            })\r\n            uploadEdDocument = uploadEdDocument.filter(item => item !== undefined && item !== null);\r\n\r\n            let updatebody = {\r\n                \"id\": rowForEdit?.id,\r\n                \"acc_mno_parent\": acc_mno_parent_id,\r\n                \"acc_name\": partnerState.accName,\r\n                \"acc_parent\": partnerState.operater,\r\n                \"acc_comp_name\": partnerState.accCompName,\r\n                \"acc_incorp_dt\": partnerState.accIncorpDt,\r\n                \"acc_tax_id\": partnerState.accTaxId,\r\n                \"acc_time_zone\": partnerState.accTimeZone,\r\n                \"acc_currency\": partnerState.accCurrency,\r\n                \"acc_lang\": partnerState.accLang,\r\n                \"acc_orient\": partnerState.accOrient,\r\n                \"partner_type\": partnerState.partnerType,\r\n                \"acc_api_config\": partnerState.apiConfig,\r\n                \"dgl_acc_mno_custom_fields\": partnerState.fields,\r\n                \"acc_prim_cont\": partnerState.accPrimContName,\r\n                \"acc_email_id\": partnerState.accEmailId,\r\n                \"acc_phone\": partnerState.accPrimCont,\r\n                \"acc_alt_cont\": partnerState.accAltCont,\r\n                \"acc_fax\": partnerState.accFax,\r\n                \"acc_web_url\": partnerState.accWebUrl,\r\n\r\n                \"acc_add_l1\": partnerState.accAddL1,\r\n                \"acc_add_l2\": partnerState.accAddL2,\r\n                \"acc_city\": partnerState.accCity,\r\n                \"acc_state\": partnerState.accState,\r\n                \"acc_country\": partnerState.accCountry,\r\n                \"acc_zipcode\": partnerState.accZipcode,\r\n                \"pref_settle_type\": partnerState.prefSettleType,\r\n                \"bill_cycle\": partnerState.billCycle,\r\n                // \"bill_date\": \"2023-06-30T18:30:00.000Z\",\r\n                \"bill_due_tenor\": partnerState.billDueTenor,\r\n                \"bank_acc_num\": partnerState.bankAccNum,\r\n                \"bank_name\": partnerState.bankName,\r\n                \"bank_branch_name\": partnerState.bankBranchName,\r\n                \"ifsc_code\": partnerState.ifscCode,\r\n                \"micr_code\": partnerState.micrCode,\r\n                \"upload_cancel_cheque\": null,\r\n                \"acc_last_name\": partnerState.accLastName,\r\n                \"acc_middle_name\": partnerState.accMiddleName,\r\n                \"acc_first_name\": partnerState.accFirstName,\r\n                \"dgl_mno_files\": uploadEdDocument,\r\n                \"dgl_roles\": rowForEdit?.dgl_roles,\r\n                \"dgl_acc_users\": [\r\n                    {\r\n                        \"id\": rowForEdit?.dgl_acc_users[0]?.id,\r\n                        \"acc_user_unq_id\": rowForEdit?.dgl_acc_users[0]?.acc_user_unq_id,\r\n                        \"first_name\": partnerState.userInfo.firstName,\r\n                        \"last_name\": partnerState.userInfo.lastName,\r\n                        \"email\": partnerState.userInfo.emailId,\r\n                        \"phone\": partnerState.userInfo.phoneNumber,\r\n                        \"middle_name\": partnerState.userInfo.middleName,\r\n                        \"profile_img\": \"profile_img\",\r\n                        \"add_line1\": \"hyderabad\",\r\n                        \"add_line2\": \"Banglore\",\r\n                        \"city\": null,\r\n                        \"state\": null,\r\n                        \"country\": null,\r\n                        \"zipcode\": null,\r\n                        \"status\": \"ACTIVE\",\r\n                        \"dgl_acc_mno_id\": null,\r\n                        \"dgl_roles_id\": null,\r\n                        \"acc_password\": \"{bcrypt}$2a$10$yDuEijEUe5smrgUjV/n5kOH3qXxCn9rrFCy7Tpgvrh91prTThU.pq\"\r\n                    }\r\n                ],\r\n                \"acc_status\": rowForEdit?.acc_status,\r\n                \"acc_unq_id\": rowForEdit?.acc_unq_id,\r\n                \"acc_type\": \"Partner\",\r\n                \"dgl_contracts\": [\r\n                    {\r\n                        \"id\": rowForEdit?.dgl_contracts[0]?.id,\r\n                        \"contract_name\": \"Provide Contract\",\r\n                        \"status\": partnerState.contractInfo.contractStatus,\r\n                        \"contract_unq_id\": rowForEdit?.dgl_contracts[0]?.contract_unq_id,\r\n                        \"contract_file\": \"http://Url\",\r\n                        \"signed_date\": partnerState.contractInfo.signedDate,\r\n                        \"enforce_date\": partnerState.contractInfo.enforcementDate,\r\n                        \"terminate_date\": partnerState.contractInfo.terminationDate,\r\n                        \"contr_desc\": \"Provider Description\",\r\n                        \"dgl_acc_mno_id\": rowForEdit?.dgl_contracts[0]?.dgl_acc_mno_id,\r\n                        \"dgl_contracts_receiving_parties\": 1,\r\n                        \"dgl_md_contract_type_id\": partnerState.contractInfo.contractType\r\n                    }\r\n                ]\r\n\r\n            }\r\n            const resp = await apiUpdatePartner(updatebody)\r\n\r\n\r\n            if (resp.status === 'success') {\r\n                OpenNotification('success', 'Updated successfully ')\r\n                navigate('/account-menu-item-view-4');\r\n\r\n            }\r\n\r\n            if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const onPrevious = () => {\r\n        if (mode == 'EDIT') {\r\n            onChange(step - 2)\r\n        } else {\r\n            onChange(step - 1)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (rowForEdit) {\r\n\r\n            const ptIntialValues = PartnerEditandCopy(prtnerIntialValues, rowForEdit)\r\n            ptIntialValues.uploadFiles.map(e => {\r\n                const matcheDobj = rowForEdit.dgl_mno_files.find(f => f.doc_name === e.doc_name)\r\n                if (matcheDobj) {\r\n                    e.file_name = matcheDobj.file_name\r\n                    e.file_url = matcheDobj.file_url\r\n                    e.file_type = matcheDobj.file_type\r\n                    e.doc_name = matcheDobj.doc_name\r\n                    e.id = matcheDobj.id\r\n                }\r\n            })\r\n            setPartnerState(ptIntialValues);\r\n        }\r\n\r\n    }, [partnerIntialValues, rowForEdit])\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(getCurrency({ enterAccount }))\r\n        dispatch(getParentAccount({ enterAccount }))\r\n\r\n\r\n\r\n\r\n\r\n    }, [dispatch, enterAccount])\r\n\r\n    let breadCrumbList = [{\r\n        name: 'Accounts',\r\n        // link:\"/Accounts\"\r\n    }, {\r\n        name: 'Partners',\r\n        link: \"/account-menu-item-view-4\"\r\n    }, {\r\n        name: `Create Partner`,\r\n    }]\r\n    if (mode === \"EDIT\") {\r\n        breadCrumbList = [\r\n            {\r\n                name: 'Accounts',\r\n                // link: '/home',\r\n            },\r\n            {\r\n                name: 'Partners',\r\n                link: '/account-menu-item-view-4',\r\n            },\r\n            {\r\n                name: rowForEdit?.acc_name,\r\n                link: '/account-menu-item-view-4',\r\n                state:rowForEdit\r\n            },\r\n            {\r\n                name: \"Edit Partner\" \r\n            },\r\n        ]\r\n    }\r\n\r\n\r\n    return (\r\n        partnerIntialValues && <div>\r\n            {/* <div className='mb-5'>Accounts/Partners/{mode === \"EDIT\" ? \"Edit\" : \"Create\"} Partner</div> */}\r\n            <CustomBreadcrumbs list={breadCrumbList} />\r\n            {mode === \"ADD\" ? <Steps current={step}>\r\n                <Steps.Item title=\"PARTNER DETAILS\" />\r\n                <Steps.Item title=\"MASTER USER\" />\r\n                <Steps.Item title=\"PREVIEW\" />\r\n            </Steps> : <Steps current={step}>\r\n                <Steps.Item title=\"PARTNER DETAILS\" />\r\n                <Steps.Item title=\"PREVIEW\" />\r\n            </Steps>}\r\n\r\n            <div className=\"mt-6  bg-gray-50 dark:bg-gray-700 rounded \">\r\n                {/* <h6>Step {`${step + 1}`}\r\n                    content\r\n   </h6> */}\r\n\r\n                {step === 0 && (\r\n                    <PartnerDetails\r\n                        ref={childRef}\r\n                        partnerState={partnerState}\r\n                        setPartnerState={setPartnerState}\r\n                        setStep={setStep}\r\n                        step={step}\r\n                        partnerIntialValues={partnerIntialValues}\r\n                        setPartnerIntialValues={setPartnerIntialValues}\r\n                        mode={mode}\r\n                    />\r\n                )}\r\n                {step === 1 && (\r\n                    <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n                        <PartnersMainUserInfo\r\n                            ref={childRef2}\r\n                            partnerState={partnerState}\r\n                            setPartnerState={setPartnerState}\r\n                            setStep={setStep}\r\n                            step={step}\r\n                            partnerIntialValues={partnerIntialValues}\r\n                            setPartnerIntialValues={setPartnerIntialValues}\r\n                        />\r\n                    </AdaptableCard>\r\n                )}\r\n\r\n                {step === 2 && (\r\n\r\n                    <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n\r\n\r\n\r\n                        <PartnersPreview partnerState={partnerState} step={step} setStep={setStep} message={message} mode={mode} />\r\n                    </AdaptableCard>\r\n                )}\r\n            </div>\r\n            <div className=\"mt-4  flex justify-between\">\r\n\r\n                <div>\r\n                    {step > 0 && <Button\r\n                        className=\"mx-2   \"\r\n                        style={{\r\n                            backgroundColor: \"#4D4D4D\", \r\n                            fontStyle: 'normal',\r\n                            fontSize: 500, fontSize: '18px',\r\n                            color: \"white\"\r\n                        }}\r\n                        onClick={onPrevious}\r\n                        type=\"button\"\r\n\r\n                    >\r\n                        Previous\r\n                    </Button>}\r\n                </div>\r\n                <div className='flex'>\r\n                    {step >= 0 && (\r\n                        <>\r\n                            <Link\r\n                                className=\"block lg:inline-block md:mb-0 \"\r\n                                to=\"/account-menu-item-view-4\"\r\n                            >\r\n                                <Button\r\n                                    className=\"mx-2\"\r\n                                    onClick={onPrevious}\r\n                                    variant=\"solid\"\r\n                                    style={{\r\n                                        backgroundColor: \"#4D4D4D\", \r\n                                        fontStyle: 'normal',\r\n                                        fontSize: 500, fontSize: '18px',\r\n                                        color: \"white\"\r\n                                    }}\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                            </Link>\r\n                        </>\r\n                    )}\r\n                    {step < 2 && (\r\n                        <Button\r\n                            variant='solid'\r\n                            onClick={onNext}\r\n                            disabled={step === 2}\r\n                            style={{\r\n                                \r\n                                fontStyle: 'normal',\r\n                                fontSize: 500, fontSize: '18px',\r\n                                color: \"white\"\r\n                            }}\r\n                        >\r\n                            {step === 2 ? 'Completed' : 'Next'}\r\n                        </Button>\r\n                    )}\r\n\r\n                    {step === 2 && (\r\n                        <>\r\n                            {/* <Link\r\n                            className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                            to=\"/account-menu-item-view-4\"\r\n                        > */}\r\n                            <Button onClick={submitApi} variant=\"solid\" style={{\r\n                                \r\n                                fontStyle: 'normal',\r\n                                fontSize: 500, fontSize: '18px',\r\n                                color: \"white\"\r\n                            }}>\r\n                                {'Submit for Approval'}\r\n                            </Button>\r\n                            {/* </Link> */}\r\n                        </>\r\n                    )}\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controlled\r\n","import React from 'react'\r\nimport StepControlled from './StepControlled'\r\nimport { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport { Input, FormItem } from 'components/ui'\r\nimport { Field } from 'formik'\r\nexport default function NewPartners() {\r\n   \r\n  return (\r\n    <>\r\n    {/* <div>Accounts/Partners/Create Partner</div> */}\r\n    <div >\r\n    <StepControlled />\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { apiGetSalesOrders, apiDeleteSalesOrders, apiGetCurrencyPartner, apiGetProductCatPartner,apiGetContractTypePartner, apiGetParentAccountPartner, apiGetPublicRole, apiGetUploadFileTypes} from 'services/PartnersService'\r\n\r\nexport const initialTableData = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    query: '',\r\n    sort: {\r\n        order: '',\r\n        key: '',\r\n    },\r\n}\r\n\r\nexport const getOrders = createAsyncThunk(\r\n    'partnerList/data/getOrders',\r\n    async (data) => {\r\n        const response = await apiGetSalesOrders(data)\r\n        \r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const deleteOrders = async (data) => {\r\n    const response = await apiDeleteSalesOrders(data)\r\n    return response.data\r\n}\r\n\r\nexport const getCurrency = createAsyncThunk(\r\n    'partnerList/data/getCurrency',\r\n    async (data) => {\r\n        const response = await apiGetCurrencyPartner(data)\r\n        \r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const getParentAccount = createAsyncThunk(\r\n    'partnerList/data/getParentAccount',\r\n    async (data) => {\r\n        const response = await apiGetParentAccountPartner(data)\r\n        \r\n        return response.data\r\n    }\r\n)\r\n\r\n\r\nexport const getContractType = createAsyncThunk(\r\n    'partnerList/data/getContractType',\r\n    async (data) => {\r\n       \r\n        const response = await apiGetContractTypePartner(data)\r\n        \r\n        return response.data\r\n    }\r\n)\r\n\r\n\r\nexport const getPublicRoles = createAsyncThunk(\r\n    'partnerList/data/getPublicRoles',\r\n    \r\n    async (data) => {\r\n        const response = await apiGetPublicRole(data)\r\n        \r\n        \r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const getUploadFileType = createAsyncThunk(\r\n    'partnerList/data/getUploadFileType',\r\n    async (data) => {\r\n        const response = await apiGetUploadFileTypes(data)\r\n        return response.data\r\n    }\r\n)\r\nconst dataSlice = createSlice({\r\n    name: 'partnerList/data',\r\n    initialState: {\r\n        loading: false,\r\n        orderList: [],\r\n        tableData: initialTableData,\r\n        currencyList:[],\r\n        parentAccountList:[],\r\n         contractTypeList:[],\r\n         publicRolesList : [],\r\n    },\r\n    reducers: {\r\n        setOrderList: (state, action) => {\r\n            state.orderList = action.payload\r\n        },\r\n        setTableData: (state, action) => {\r\n            state.tableData = action.payload\r\n        },\r\n        setCurrencyData: (state, action) => {\r\n            state.currencyList = action.payload\r\n        },\r\n        setParentAccountData: (state, action) => {\r\n            state.parentAccountList = action.payload\r\n        },\r\n\r\n      \r\n\r\n        setContractTypeData: (state, action) => {\r\n            state.contractTypeList = action.payload\r\n        },\r\n\r\n        setPublicRole : (state,action) => {\r\n            state.publicRolesList = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [getOrders.fulfilled]: (state, action) => {\r\n            state.orderList = action.payload\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getOrders.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n\r\n        [getCurrency.fulfilled]: (state, action) => {\r\n           \r\n            \r\n            state.currencyList=action.payload.response?.map((currency) => ({\r\n                value: currency.id,\r\n                label: currency.cur_title,\r\n            }));\r\n\r\n            state.loading = false\r\n        },\r\n        [getCurrency.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n\r\n        [getParentAccount.fulfilled]: (state, action) => {\r\n            \r\n            state.parentAccountList = action.payload?.map((parent) => ({\r\n                value: parent.id,\r\n                label: parent.acc_name,\r\n            }))\r\n           \r\n            state.loading = false\r\n        },\r\n        [getParentAccount.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n\r\n        \r\n       \r\n        [getContractType.fulfilled]: (state, action) => {\r\n         \r\n            \r\n            state.contractTypeList=action.payload.response?.map((contract) => ({\r\n                value: contract.id,\r\n                label: contract.contract_type_title,\r\n            }));\r\n            \r\n            state.loading = false\r\n        },\r\n        [getContractType.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getPublicRoles.fulfilled]: (state,action) => {\r\n            state.publicRolesList = action.payload?.res?.map((parent) => ({\r\n                value: parent.id,\r\n                label: parent.name,\r\n            }))\r\n        },\r\n        [getPublicRoles.pending]:(state,action)=> {\r\n            state.loading = true\r\n        },\r\n        [getUploadFileType.fulfilled]: (state, action) => {\r\n            state.fileList = action.payload\r\n          \r\n            state.loading = false\r\n        },\r\n        [getUploadFileType.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        \r\n    },\r\n})\r\n\r\nexport const { setOrderList, setTableData,setCurrencyData,setParentAccountData,setContractTypeData,setPublicRole } = dataSlice.actions\r\n\r\nexport default dataSlice.reducer\r\n"],"names":["timeZone","id","value","apiGetSalesOrders","params","ApiService","url","method","apiDeleteSalesOrders","data","apiSubmitOperator","resp","status","message","response","toString","apiUpdateOperator","apiUpdateOpAccStatus","apiGetCurrency","enterAccount","apiGetParentAccount","apiGetPublicRole","acc_mno_parent_unq_id","apiGetRolePermissions","roleId","apiUploadFiles","file","loc1","loc2","formData","FormData","append","headers","apiGetUploadFileTypes","apiSubmitPartner","apiUpdatePartner","apiUpdateAccPartnerStatus","apiGetCurrencyPartner","apiGetParentAccountPartner","apiGetContractTypePartner","interval","useState","setMessage","useEffect","timeout","setTimeout","clearTimeout","partnerType","label","language","orientationtype","operaterAccountInfoValidationSchema","Yup","shape","accName","min","max","required","nullable","operater","accCompName","accIncorpDt","accTaxId","accTimeZone","accCurrency","accLang","accOrient","onChange","refId","props","currencyList","useSelector","state","partnerList","parentAccountList","dateFormat","locale","timeZoneList","timezone","dialogIsOpen","setIsOpen","newLabel","setNewLabel","onDialogClose","e","className","innerRef","initialValues","partnerIntialValues","accInfo","validationSchema","onSubmit","values","setSubmitting","updatedPayload","partnerState","setPartnerState","dataToStore","setPartnerIntialValues","touched","errors","isSubmitting","style","color","invalid","errorMessage","type","autoComplete","name","placeholder","component","Input","field","form","options","filter","setFieldValue","date","maxDate","Date","inputFormat","gender","push","remove","fields","map","item","index","display","alignItems","flexWrap","marginRight","field_title","title","onClick","marginLeft","isOpen","onClose","onRequestClose","shouldCloseOnOverlayClick","shouldCloseOnEsc","target","variant","field_value","onDialogOk","disabled","length","icon","fill","partnerContactValidationSchema","accFirstName","accLastName","accEmailId","email","accPrimCont","ContactInfo","accMiddleName","accAltCont","accFax","accWebUrl","validate","validateURL","accCountry","accAddL1","accCity","accState","onNextChange","onBackChange","currentStepStatus","address","mode","auth","user","acc_user_id","beforeUpload","newFiles","files","ress","showContent","setShowContent","content","setContent","onClickView","fileInfo","backgroundColor","uploadFiles","fil","i","doc_type","error","console","doc_name","is_mandatory","draggable","updatedFiles","uploadRes","filesDetails","fileUnqId","fileName","minHeight","file_url","file_name","substring","CloseButton","refIdAdd","every","additionalFiles","setStep","step","OpenNotification","file_type","src","appConfig","alt","window","open","settlementType","settelementCycle","partnerSettlementValidationSchema","billCycle","billDueTenor","prefSettleType","ifscCode","bankName","bankAccNum","bankBranchName","micrCode","settelementWeekOpt","monthOptions","settelementMonthOpt","rememberMe","usernameOrEmail","includes","settlementInfo","settelementWeek","v","week","settelementMonth","settelementDate","uploadCancelledCheque","PartnerDetails","forwardRef","ref","PartnerAccountInfo","validated","PartnerContactInfo","PartnerAddressInfo","PartnerSettlementInfo","PartnerUploladFileFileInfo","PartnerAdditionalFileInfo","setFormData","partnerAccountInforef","React","partnerContactInforef","partnerAddressInforef","partnerSettlementInforef","partnerUploladFileInforef","partnerAdditionalFileInforef","handleSubmit","validationErrors","current","validateForm","then","Object","keys","setTouched","submitForm","useImperativeHandle","handleSubmitFromParent","bodyClass","divider","PartnerUploadFiles","onChangeAdd","userValidationSchema","firstName","lastName","emailId","phoneNumber","userInfo","contractStatus","userContractValidationSchema","contractType","signedDate","enforcementDate","terminationDate","dispatch","useDispatch","contractTypeList","getContractType","contractInfo","contractFile","masterPermissionValidationSchema","publicRole","userRole","password","publicRolesList","getPublicRoles","masterInfoPermission","log","width","val","ProviderMainUserInfo","PartnerUserInfo","PartnerContractInfo","PartnerPermissionInfo","partnerUserInforef","partnerContractInforef","PatnerPermissionInforef","partner","orientation","apiConfiguration","onClickFile","showIcon","Array","isArray","join","GetDropdownLabel","dayjs","format","apiConfig","accPrimContName","accZipcode","billDate","ReactHtmlParser","description","acc_mno_id","acc_mno_parent_id","location","useLocation","rowForEdit","navigate","useNavigate","useTimeOutMessage","prtnerIntialValues","acctLastName","accAddL2","middleName","dgl_acc_mno_id","operatorFileTypes","fileList","getUploadFileType","res","uploadArray","acc_type","docType","JSON","parse","doc_type_name","childRef","useRef","childRef2","nextStep","submitApi","uploadEdDocument","concat","undefined","createbody","GetErrorMsg","updatebody","dgl_roles","dgl_acc_users","acc_user_unq_id","acc_status","acc_unq_id","dgl_contracts","contract_unq_id","onPrevious","ptIntialValues","PartnerEditandCopy","matcheDobj","dgl_mno_files","find","f","getCurrency","getParentAccount","breadCrumbList","link","acc_name","list","PartnersMainUserInfo","fontStyle","fontSize","to","NewPartners","StepControlled","getOrders","createAsyncThunk","deleteOrders","dataSlice","createSlice","initialState","loading","orderList","tableData","total","pageIndex","pageSize","query","sort","order","key","reducers","setOrderList","action","payload","setTableData","setCurrencyData","setParentAccountData","setContractTypeData","setPublicRole","extraReducers","fulfilled","pending","currency","cur_title","parent","contract","contract_type_title","actions"],"sourceRoot":""}