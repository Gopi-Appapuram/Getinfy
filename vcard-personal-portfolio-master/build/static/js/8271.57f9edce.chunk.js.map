{"version":3,"file":"static/js/8271.57f9edce.chunk.js","mappings":"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","sources":["services/EnterpriseService.js","services/ItemsService.js","services/ProvidersService.js","views/catalogue/Items/components/ItemAddressInfo.js","views/catalogue/Items/components/ItemProductCategorySelection.js","views/catalogue/Items/components/ItemFeatures.js","views/catalogue/Items/components/ItemBasicDetails.js","views/catalogue/Items/components/ItemDetails.js","views/catalogue/Items/components/MasterPermissionBox.js","views/catalogue/Items/components/ItemTemplate.js","views/catalogue/Items/components/ItemPreview.js","views/catalogue/Items/components/ItemVariantDetails.js","views/catalogue/Items/components/ItemVariants.js","views/catalogue/Items/components/StepControlled.js","views/catalogue/Items/components/NewItems.js","views/catalogue/Items/store/dataSlice.js","views/catalogue/Items/store/index.js","views/catalogue/Items/store/stateSlice.js"],"sourcesContent":["import ApiService from './ApiService'\r\n\r\nexport async function apiGetSalesDashboardData(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/dashboard',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/products',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/products/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProduct(params) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/product',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiPutSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/products/update',\r\n        method: 'put',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiCreateSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/products/create',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\n/* export async function apiGetSalesOrders(params) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/orders',\r\n        method: 'get',\r\n        params,\r\n    })\r\n} */\r\n\r\nexport async function apiGetSalesOrders(params) {\r\n\r\n    return ApiService.fetchData({\r\n        //url: `account/enterprise-customers?page_no=${params.pageIndex}&page_size=${params.pageSize}&sort_field=${params.sort.key}`,\r\n        // url: '/sales/orders',\r\n        url: `/account/enterprise-customers`,\r\n\r\n        method: 'get',\r\n        params\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesOrders(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/orders/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesOrderDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/orders-details',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiSubmitEnterprise(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/account/enterprise-customers',\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        };\r\n\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n}\r\n\r\nexport async function apiUpdateEnterpriseAccStatus(id, status) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/enterprise-customers?id=${id}&cust_status=${status}`,\r\n        method: 'patch',\r\n\r\n    })\r\n}\r\n\r\nexport async function apiUpdateEnterprise(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/account/enterprise-customers',\r\n            method: 'put',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        };\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n\r\n}\r\n\r\nexport async function apiGetParentAccountEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/enterprise-customers/parent/${data.accMnoParentId}`,\r\n        //url: `/account/acc-operators/dropdown/${data.enterAccount}`,    \r\n        method: 'get',\r\n\r\n    })\r\n}\r\n\r\n\r\nexport async function apiGetOperatorAccountEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n        //url: `/account/enterprise-customers/parent/${data.accMnoParentId}`,   \r\n        url: `/account/acc-operators/dropdown/${data.enterAccount}`,\r\n        method: 'get',\r\n\r\n    })\r\n}\r\n\r\n\r\nexport async function apiGetCurrencyEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/currency/unq-id/drop-down/${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\n\r\n\r\nexport async function apiGetCustomerCatEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n\r\n        url: `/account/cust-cats/unq-id-cust-type/drop-down/${data.enterAccount}/EnterpriseCustomer`,\r\n        method: 'get',\r\n\r\n    })\r\n}\r\n\r\n\r\nexport async function apiGetContractTypeEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/contract-types/unq-id-acc-type/drop-down/${data.enterAccount}/EnterpriseCustomer`,\r\n        method: 'get',\r\n\r\n    })\r\n}\r\nexport async function apiGetUploadFileTypes(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/doc-pol?page_no=0&page_size=100&sort_feild=id&unq_id=${data}`,\r\n        method: 'get',\r\n    })\r\n}\r\nexport async function apiUploadFiles(file,loc1, loc2) {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        const resp = await ApiService.fetchData({\r\n            url: `/media/${loc1}/${loc2}`,\r\n            method: 'post',\r\n            data: formData,\r\n            headers:{'Content-Type': 'multipart/form-data'}\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp.data,\r\n        };\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n}","import ApiService from './ApiService'\r\n\r\nexport async function apiGetSalesDashboardData(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/dashboard',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProduct(params) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/product',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiPutSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products/update',\r\n        method: 'put',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiCreateSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products/create',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesItems(params) {\r\n    return ApiService.fetchData({\r\n        url: '/catalogs/dgl-cat-items-info',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesItemVariants(id) {\r\n    return ApiService.fetchData({\r\n        url: `catalogs/admin/items/${id}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesItemVariantsByItemId(id) {\r\n    return ApiService.fetchData({\r\n        url: `catalogs/admin/item/variant/${id}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\n\r\nexport async function apiDeleteSalesItems(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/orders/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesItemDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/orders-details',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiCreateItem(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/catalogs/dgl-cat-items-info',\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp,\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\n\r\nexport async function apiGetTemplates(params) {\r\n    return ApiService.fetchData({\r\n        url: '/catalogs/cat-tp-info',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiProductCategoryItems(params) {\r\n    return ApiService.fetchData({\r\n        url: '/catalogs/cat-items-info/items',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiGetProductCategory(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/prod-cats?page_no=1&page_size=4`,\r\n        method: 'get',\r\n        data\r\n    })\r\n}\r\n\r\nexport async function apiUpdateItemAccStatus(params,status) {\r\n    return ApiService.fetchData({\r\n        url: `/catalogs/dgl-cat-items-info/${params}/${status}`,\r\n        method: 'patch',\r\n    })\r\n}\r\n\r\nexport async function apiGetItemsTableData(params) {\r\n    return ApiService.fetchData({\r\n        url: `/catalogs/admin/items-pageable`,\r\n        method: 'get',\r\n        params\r\n    })\r\n}\r\n\r\nexport async function apiGetProductCategoryData(params) {\r\n    \r\n    return ApiService.fetchData({\r\n        url: `/account/prod-cats/unq-id/drop-down/${params.unq_id}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetTemplatesInItems(params) {\r\n    return ApiService.fetchData({\r\n        url: `/catalogs/admin/templates/${params.unq_id}/${params.category}/${params.type}?tpStatus=ACTIVE`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetItemsTemplateComponents(params) {\r\n    return ApiService.fetchData({\r\n        url: `/catalogs/admin/items-tax/${params}`,\r\n        method: 'get',\r\n    })\r\n}","import ApiService from './ApiService'\r\n\r\nexport async function apiGetSalesDashboardData(data) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/dashboard',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/products',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/products/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProduct(params) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/product',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiPutSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/products/update',\r\n        method: 'put',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiCreateSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/products/create',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesOrders(params) {\r\n    return ApiService.fetchData({\r\n        url: `account/provider`,\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesOrders(data) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/orders/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesOrderDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/orders-details',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiSubmitProvider(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: `account/provider`,\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\n\r\nexport async function apiUpdateProvider(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: `account/provider`,\r\n            method: 'put',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\n\r\nexport async function apiUpdateProviderAccStatus(id, status) {\r\n    return ApiService.fetchData({\r\n        url: `/account/acc-operators?id=${id}&acc_status=${status}`,\r\n        method: 'patch',\r\n    })\r\n}\r\n\r\nexport async function apiGetCurrencyProvider(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/currency/unq-id/drop-down/${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetParentAccountProvider(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/acc-operators/dropdown/${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetProductCatProvider(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/prod-cats/unq-id/drop-down/${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetContractTypeProvider(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/contract-types/unq-id-acc-type/drop-down/${data.enterAccount}/Provider`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetPublicRole(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/roles/master-roles/drop-down/${data.acc_mno_parent_unq_id}`,\r\n        //url: `/account/roles/master-roles/GL1`,\r\n        method: 'get',\r\n    })\r\n}\r\nexport async function apiGetUploadFileTypes(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/doc-pol?page_no=0&page_size=100&sort_feild=id&unq_id=${data}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiUploadFiles(file,loc1, loc2) {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        const resp = await ApiService.fetchData({\r\n            url: `/media/${loc1}/${loc2}`,\r\n            method: 'post',\r\n            data: formData,\r\n            headers:{'Content-Type': 'multipart/form-data'}\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp.data,\r\n        };\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n}","import React, { useCallback } from 'react'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport get from 'lodash/get'\r\nimport { countryList } from 'constants/countries.constant'\r\nimport * as Yup from 'yup'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    country: Yup.string().required('Please select country'),\r\n    addressLine1: Yup.string().required('Please enter your address'),\r\n    addressLine2: Yup.string(),\r\n    city: Yup.string().required('Please enter your city'),\r\n    state: Yup.string().required('Please enter your state'),\r\n    zipCode: Yup.string().required('Please enter zip code'),\r\n    sameCorrespondenceAddress: Yup.bool(),\r\n    correspondenceAddress: Yup.object().when('sameCorrespondenceAddress', {\r\n        is: false,\r\n        then: Yup.object().shape({\r\n            country: Yup.string().required('Please select country'),\r\n            addressLine1: Yup.string().required('Please enter your address'),\r\n            addressLine2: Yup.string(),\r\n            city: Yup.string().required('Please enter your city'),\r\n            state: Yup.string().required('Please enter your state'),\r\n            zipCode: Yup.string().required('Please enter zip code'),\r\n        }),\r\n        otherwise: (schema) => schema,\r\n    }),\r\n})\r\n\r\nconst AddressForm = (props) => {\r\n    const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        countryName,\r\n        addressLine1Name,\r\n        addressLine2Name,\r\n        cityName,\r\n        stateName,\r\n        zipCodeName,\r\n    } = props\r\n\r\n    const getError = useCallback(\r\n        (name) => {\r\n            return get(errors, name)\r\n        },\r\n        [errors]\r\n    )\r\n\r\n    const getTouched = useCallback(\r\n        (name) => {\r\n            return get(touched, name)\r\n        },\r\n        [touched]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n               \r\n                <FormItem\r\n                    label=\"Address Line 1\"\r\n                    invalid={\r\n                        getError(addressLine1Name) &&\r\n                        getTouched(addressLine1Name)\r\n                    }\r\n                    errorMessage={getError(addressLine1Name)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={addressLine1Name}\r\n                        placeholder=\"Address Line 1\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n\r\n                <FormItem\r\n                    label=\"Address Line 2\"\r\n                    invalid={\r\n                        getError(addressLine2Name) &&\r\n                        getTouched(addressLine2Name)\r\n                    }\r\n                    errorMessage={getError(addressLine2Name)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={addressLine2Name}\r\n                        placeholder=\"Address Line 2\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n            </div>\r\n            <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n              \r\n                <FormItem\r\n                    label=\"City\"\r\n                    invalid={getError(cityName) && getTouched(cityName)}\r\n                    errorMessage={getError(cityName)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={cityName}\r\n                        placeholder=\"City\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n                <FormItem\r\n                    label=\"State\"\r\n                    invalid={getError(stateName) && getTouched(stateName)}\r\n                    errorMessage={getError(stateName)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={stateName}\r\n                        placeholder=\"State\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n                <FormItem\r\n                    label=\"Country\"\r\n                    invalid={getError(countryName) && getTouched(countryName)}\r\n                    errorMessage={getError(countryName)}\r\n                >\r\n                    <Field name={countryName}>\r\n                        {({ field, form }) => (\r\n                            <Select\r\n                                placeholder=\"Country\"\r\n                                field={field}\r\n                                form={form}\r\n                                options={countryList}\r\n                                value={countryList.filter(\r\n                                    (c) => c.value === get(values, countryName)\r\n                                )}\r\n                                onChange={(c) =>\r\n                                    form.setFieldValue(field.name, c.value)\r\n                                }\r\n                            />\r\n                        )}\r\n                    </Field>\r\n                </FormItem>\r\n                <FormItem\r\n                    label=\"Zip Code\"\r\n                    invalid={getError(zipCodeName) && getTouched(zipCodeName)}\r\n                    errorMessage={getError(zipCodeName)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={zipCodeName}\r\n                        placeholder=\"Zip Code\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n            </div>\r\n           \r\n              \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nconst ItemAddressInfo = ({\r\n    data = {\r\n        country: '',\r\n        addressLine1: '',\r\n        addressLine2: '',\r\n        city: '',\r\n        state: '',\r\n        zipCode: '',\r\n        sameCorrespondenceAddress: true,\r\n        correspondenceAddress: {\r\n            country: '',\r\n            addressLine1: '',\r\n            addressLine2: '',\r\n            city: '',\r\n            state: '',\r\n            zipCode: '',\r\n        },\r\n    },\r\n    onNextChange,\r\n    onBackChange,\r\n    currentStepStatus,\r\n}) => {\r\n    const onNext = (values, setSubmitting) => {\r\n        onNextChange?.(values, 'addressInformation', setSubmitting)\r\n    }\r\n\r\n    const onCheck = (value, field, form) => {\r\n        form.setFieldValue(field.name, value)\r\n    }\r\n\r\n    const onBack = () => {\r\n        onBackChange?.()\r\n    }\r\n\r\n    return (\r\n        <>\r\n             <h3 className=\"mx-4 mb-4 mt-2\">ADDRESS</h3>\r\n            <Formik\r\n                initialValues={data}\r\n                enableReinitialize\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    setTimeout(() => {\r\n                        onNext(values, setSubmitting)\r\n                    }, 1000)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, setFieldValue, isSubmitting }) => {\r\n                    const formProps = { values, touched, errors }\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                               \r\n                                <AddressForm\r\n                                    countryName=\"country\"\r\n                                    addressLine1Name=\"addressLine1\"\r\n                                    addressLine2Name=\"addressLine2\"\r\n                                    cityName=\"city\"\r\n                                    stateName=\"state\"\r\n                                    zipCodeName=\"zipCode\"\r\n                                    {...formProps}\r\n                                />\r\n                              \r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemAddressInfo\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Card,\r\n    Radio,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { useEffect, useCallback, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport * as Yup from 'yup'\r\nimport { apiGetTemplateByItemType, getProductCatgeory, setTableData, } from '../store/dataSlice'\r\nimport { OpenNotification } from 'views/Servicefile'\r\nimport { HiOutlineFilter, HiOutlineSearch } from 'react-icons/hi'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nexport const productCategoryOptions = [\r\n    { label: 'GPS TRACKERS', value: '1' },\r\n    { label: 'SMART SECURITY SYSTEMS', value: '2' },\r\n    { label: 'SMART MOBILES', value: '3' },\r\n\r\n]\r\nexport const tempItemTypeOptions = [\r\n    { label: \"Product\", value: 'P' },\r\n    { label: \"Data Paln\", value: 'D' },\r\n    { label: \"Service Plan\", value: 'S' }\r\n]\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: 'M' },\r\n    { label: 'Airtel Inc.', value: 'F' },\r\n    { label: 'Airtel India', value: 'O' },\r\n]\r\n\r\nconst validateSchemaP = Yup.object().shape({\r\n    productCat: Yup.string().required('Product category is required').nullable(),\r\n    tempItemType: Yup.string().required('Item type is required').nullable(),\r\n})\r\n\r\nconst initialValues = {\r\n    productCat : \"\",\r\n    selectedTemplate: \"\",\r\n    tempItemType: \"\",\r\n}\r\n\r\nconst ItemProductCategorySelection = ({ onChange, refId, ...props }) => {\r\n    const location = useLocation();\r\n    const rowForEdit = location.state?.data\r\n    const dispatch = useDispatch()\r\n    const itemsProductcat = useSelector((state) => state?.itemsCreateList?.data?.itemsProductCatList)\r\n    const templatesArr = useSelector((state) => state?.itemsCreateList?.data?.setTemplatesForItems)\r\n    const {unq_id, enterAccount, password, rememberMe, usernameOrEmail} = useSelector((state) => state.auth.user)\r\n    const { pageIndex, pageSize, sort, query, total, sort_field } = useSelector(\r\n        (state) => state.itemsCreateList.data.tableData\r\n    )\r\n    const [category,setCategory] = useState(props.itemIntials.itemTemplate.productCat)\r\n    const [itemType,setItemType] = useState(props.itemIntials.itemTemplate.tempItemType)\r\n    const [templates,setTemplates] = useState(templatesArr)\r\n    const [itemTypeOpt,setItemTypeOpt] = useState()\r\n\r\n    const [itemInitValues,setItemInitValues] = useState(initialValues)\r\n\r\n    const fetchProductCategory = () => {\r\n        dispatch(getProductCatgeory({unq_id: unq_id,}))\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchProductCategory()\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if(category && itemType) {\r\n            setTemplates(templatesArr)\r\n        }\r\n    },[templatesArr,itemType])\r\n\r\n    useEffect(()=>{\r\n        if(rowForEdit){\r\n            let a = {}\r\n            a.category = props.itemIntials?.itemTemplate?.productCat\r\n            a.type = props.itemIntials?.itemTemplate?.tempItemType\r\n            a.unq_id = unq_id\r\n            if(a.type !== \"\"){\r\n                dispatch(apiGetTemplateByItemType(a))\r\n            }\r\n            setCategory(rowForEdit.rel_prod_cat_id)\r\n            setItemType(rowForEdit.item_type)\r\n        }\r\n    },[])\r\n\r\n    const onChangeDropdown = (form,field,obj,bool,values) => {\r\n        form.setFieldValue(field.name, obj.value)\r\n        if(bool){\r\n            setItemType(obj.value)\r\n            let a = {}\r\n            a.category = values.productCat\r\n            a.type = obj.value\r\n            a.unq_id = unq_id\r\n            if(obj.value !== \"\"){\r\n                values.selectedTemplate = ''\r\n                dispatch(apiGetTemplateByItemType(a))\r\n            }\r\n        }else{\r\n            setCategory(obj.value)\r\n            form.setFieldValue('tempItemType', '')\r\n            form.setFieldValue('selectedTemplate', '')\r\n            setTemplates([])\r\n        }\r\n    }\r\n\r\n    const onChangeTemplateRadio =(form,field,e,values) => {\r\n        form.setFieldValue(field.name,e)\r\n        let selectedTemplateName \r\n        templates.map((ele,inde)=>{\r\n            if(ele.id == e){\r\n                selectedTemplateName = ele.tp_title\r\n            }\r\n        })\r\n        values.selectedTemplateName = selectedTemplateName\r\n    }\r\n\r\n    const onChangeSearch = (e)=>{\r\n        let str = e.target.value.toLowerCase()\r\n        if(e.target.value != ''){\r\n            let temps = []\r\n            templates.map((i)=>{\r\n                let flag = i?.tp_title?.toLowerCase().includes(str)\r\n                if(flag){\r\n                    temps.push(i)\r\n                }\r\n            })\r\n            setTemplates(temps)\r\n        }else{\r\n            setTemplates(templatesArr)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={props.itemIntials.itemTemplate}\r\n                innerRef={refId}\r\n                validationSchema={validateSchemaP}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    if(!values.selectedTemplate){\r\n                        OpenNotification(\"warning\", \"Please select a template\")\r\n                    }else{\r\n                        setSubmitting(true)\r\n                        let dataToStore = props.itemIntials\r\n                        if(rowForEdit){\r\n                            let selectedTemplateName = ''\r\n                            templates.map((ele)=>{\r\n                                if(values.selectedTemplate === ele.id){\r\n                                    selectedTemplateName = ele.tp_title\r\n                                }\r\n                            })\r\n                            values.selectedTemplateName = selectedTemplateName\r\n                        }\r\n                        dataToStore.itemTemplate = values\r\n                        props.setItemInitials(dataToStore)\r\n                        props.setStep(props.step + 1)\r\n                    }\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <AdaptableCard className=\"h-full mb-6\" bodyClass=\"h-full\" divider >\r\n                                <div className=\"md:grid grid-cols-3 gap-4 mx-3\">\r\n                                    <FormItem\r\n                                        label={<p>Item Category<span style={{ color: 'red' }}>*</span></p>}\r\n                                        invalid={errors.productCat && touched.productCat}\r\n                                        errorMessage={errors.productCat}\r\n                                    >\r\n                                        <Field name=\"productCat\">\r\n                                            {({ field, form }) => (\r\n                                                <Select placeholder=\"Select Product Category\" field={field} form={form}\r\n                                                    options={itemsProductcat}\r\n                                                    value={itemsProductcat?.filter((category) =>category.value ===values.productCat)}\r\n                                                    onChange={(category) => onChangeDropdown(form,field,category,false,values)}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Item Type<span style={{ color: 'red' }}>*</span></p>}\r\n                                        invalid={errors.tempItemType && touched.tempItemType}\r\n                                        errorMessage={errors.tempItemType}\r\n                                    >\r\n                                        <Field name=\"tempItemType\">\r\n                                            {({ field, form }) => (\r\n                                                <Select placeholder=\"Select Item Type\" field={field} form={form}\r\n                                                    options={values.productCat !== \"\" ? tempItemTypeOptions : []}\r\n                                                    value={tempItemTypeOptions?.filter((itemType) => itemType.value === values.tempItemType)}\r\n                                                    onChange={(itemType) => onChangeDropdown(form,field,itemType,true,values)}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                </div> \r\n                                </AdaptableCard>\r\n                                <div className=\"flex justify-between mx-6\">\r\n                                    <Input\r\n                                        // ref={searchInput}\r\n                                        className=\"lg:w-52\"\r\n                                        size=\"sm\"\r\n                                        placeholder=\"Search Templates\"\r\n                                        prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n                                        onChange={(e) => onChangeSearch(e) }\r\n                                    />\r\n                                    <Button\r\n                                        size=\"sm\"\r\n                                        className=\"w-32\"\r\n                                        icon={<HiOutlineFilter />}\r\n                                        onClick={() => { }}\r\n                                        disabled\r\n                                    >\r\n                                        Filter\r\n                                    </Button>\r\n                                </div>\r\n                                <div className=\"md:grid grid-cols-3 gap-3 mx-3\">\r\n                                    {templates?.map((item,index) => (\r\n                                        <Card className=\"mx-3 mb-4 mt-4\" key={item.id}>\r\n                                        <div className=\"md:grid grid-cols-2\">\r\n                                            <h6 className=\"mx-2 mb-4 mt-1 font-bold text-cyan-500\">\r\n                                                {item.tp_title}{' '}\r\n                                            </h6>\r\n                                            <div className=\" text-base text-black font-bold flex justify-end\" >\r\n                                            <FormItem>\r\n                                                <Field name ='selectedTemplate'>\r\n                                                    {({field,form}) => (\r\n                                                        <Radio value={item.id} type='radio' key={index} \r\n                                                        onChange={(e)=> {onChangeTemplateRadio(form,field,e,values)}}\r\n                                                        checked = {values.selectedTemplate === item.id ? true : false}\r\n                                                        />\r\n                                                    )}\r\n                                                </Field>\r\n                                            </FormItem>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"md:grid grid-cols-1\">\r\n                                            <div className=\"col-span-2 md:gird mx-2\">\r\n                                                <div className=\"col-span-1 md:grid grid-cols-1 gap-1\">\r\n                                                    <div className='flex flex-col'>\r\n                                                        {/* <p className=\"mt-2 text-black font-bold text-base\">{item.tp_desc}</p> */}\r\n                                                        <p className=\"mt-2 text-base\">{item.tp_desc}</p>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </Card>\r\n                                        \r\n                                    ))}\r\n                                    </div>\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemProductCategorySelection\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Checkbox\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { Upload } from 'components/ui'\r\nimport { RichTextEditor } from 'components/shared'\r\nimport * as Yup from 'yup'\r\n\r\nconst validationSchemaF = Yup.object().shape({\r\n    itemColour: Yup.string().required('Item colour is required'),\r\n    itemFeatureDec : Yup.string().required('Feature is required')\r\n})\r\n\r\n\r\nconst ItemFeatures = ({ onChange, refId, ...props }) => {\r\n\r\n    return (\r\n      \r\n           \r\n            <Formik\r\n                initialValues={props.itemIntials.itemBasicDetailsOther}\r\n                innerRef={refId}\r\n                validationSchema={validationSchemaF}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    let dataToStore = props.itemIntials\r\n                    dataToStore.itemBasicDetailsOther =values\r\n                    props.setItemInitials(dataToStore)\r\n                    props.setStep(props.step + 1)\r\n                 }}\r\n            >\r\n\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className='p-2'>\r\n                                <h3 className=\"mx-4 mb-4 mt-2\">ITEM FEATUERS</h3>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n\r\n                                    <FormItem label=\"Item Colour\"\r\n                                        invalid={errors.itemColour && touched.itemColour}\r\n                                        errorMessage={errors.itemColour}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"itemColour\"\r\n                                            placeholder=\"Enter Item Colour\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                </div>\r\n\r\n                                <div className=\"mx-4 my-4\">\r\n                                    <FormItem label=\"Features 1\"\r\n                                        invalid={errors.itemFeatureDec && touched.itemFeatureDec}\r\n                                        errorMessage={errors.itemFeatureDec}\r\n                                    >\r\n                                        <Field name=\"itemFeatureDec\" >\r\n                                            {({ field, form }) => (\r\n                                                <RichTextEditor\r\n                                                    value={field.value}\r\n                                                    onChange={(val) =>\r\n                                                        form.setFieldValue(field.name, val)\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                </div>\r\n                                </div>\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n\r\n\r\n\r\n       \r\n\r\n    )\r\n}\r\n\r\nexport default ItemFeatures\r\n","import { RichTextEditor } from 'components/shared'\r\nimport {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Upload,\r\n    Card,\r\n    Dialog,\r\n} from 'components/ui'\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport TaxComponents from './TaxComponents'\r\nimport { HiMinus, HiOutlineCloudUpload, HiPlus } from 'react-icons/hi'\r\nimport { useSelector } from 'react-redux'\r\nimport { useMemo, useState } from 'react'\r\nimport { apiUploadFiles } from 'services/ProvidersService'\r\nimport CloseButton from 'components/ui/CloseButton'\r\nimport appConfig from 'configs/app.config'\r\nimport { cloneDeep } from 'lodash'\r\nimport { OpenNotification } from 'views/Servicefile'\r\nexport const statusOptions = [\r\n    { label: 'Married', value: 'M' },\r\n    { label: 'Widowed', value: 'W' },\r\n    { label: 'Separated', value: 'S' },\r\n    { label: 'Divorced', value: 'D' },\r\n    { label: 'Single ', value: 'S' },\r\n]\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: 'M' },\r\n    { label: 'Airtel Inc.', value: 'F' },\r\n    { label: 'Airtel India', value: 'O' },\r\n]\r\n\r\nconst itemTypeOptions = [\r\n    { label: 'Product', value: '1' },\r\n    { label: 'Date Plan', value: '2' },\r\n    { label: 'Service Plan', value: '3' },\r\n]\r\n\r\nconst taxComponentsOptions = [\r\n    { label: 'Tax 1', value: '1' },\r\n    { label: 'Tax 2', value: '2' },\r\n    { label: 'Tax 3', value: '3' },\r\n]\r\n\r\nconst InitValues = {\r\n    itemType: '',\r\n    itemTitle: '',\r\n}\r\n\r\nconst validationSchemaB = Yup.object().shape({\r\n    itemDesc: Yup.string().trim().max(1000,\"Description allowed 1000 characters only\").required('Please select item description'),\r\n    itemTitle: Yup.string().trim().required('Please enter item title'),\r\n    taxData : Yup.array().of(\r\n        Yup.object().shape({\r\n            taxComponents : Yup.string().trim().required('Please select tax component'),\r\n            taxAmount : Yup.string().trim().required('Please select tax percentage'),\r\n        })\r\n    ),\r\n})\r\nconst saveFilesInCatalog = 2\r\nconst ItemBasicDetails = ({ onChange, refId, ...props }) => {\r\n    const itemsTaxComponents = useSelector((state) => state?.itemsCreateList?.data?.setTemplateComponents)\r\n    const itemMemoTaxComponentOptiosn = useMemo(() => {\r\n        if (Array.isArray(itemsTaxComponents) && itemsTaxComponents.length > 0) {\r\n            return itemsTaxComponents?.map((vl) => {\r\n                return { ...vl, value: vl?.tax_comp_title, label: vl?.tax_comp_title }\r\n            })\r\n        }\r\n    }, [itemsTaxComponents?.length])\r\n    const { enterAccount, password, rememberMe, usernameOrEmail, user_type, acc_mno_parent_unq_id, acc_user_id } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n    const beforeUpload = async (newFiles, files) => {\r\n\r\n        const file = newFiles[0];\r\n        const allowedTypes = ['image/jpeg', 'image/png'];\r\n\r\n        if (!allowedTypes.includes(file.type)) {\r\n            OpenNotification('warning', 'JPG/PNG files are allowed only!')\r\n          return false;\r\n        } \r\n        try { \r\n            const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInCatalog)\r\n            return ress\r\n        } catch (error) {\r\n          console.error('Error during file upload:', error);\r\n          return false;\r\n        }\r\n        \r\n    }\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n    const onClickView = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n\r\n    const setTaxDrpdown = (values,form,field,label,i) => {\r\n        let flag = values?.taxData?.some(item => item.taxComponents === label.id)\r\n        if(!flag){\r\n         form.setFieldValue(field.name, label.id)\r\n         form.setFieldValue(`taxData[${i}].taxType`, label.tax_comp_ded_type)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n\r\n\r\n        <Formik\r\n            initialValues={props.itemIntials.itemBasicDetails}\r\n            validationSchema={validationSchemaB}\r\n            innerRef={refId}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                if(!values.uploadImageUrl){\r\n                    OpenNotification(\"warning\",\"Please upload required fields\")\r\n                }else{\r\n                    setSubmitting(true)\r\n                    let dataToStore = props.itemIntials\r\n                    dataToStore.itemBasicDetails = values\r\n                    props.setItemInitials(dataToStore)\r\n                    props.setStep(props.step + 1)\r\n                }\r\n            }}\r\n        >\r\n            {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                return (\r\n                    <Form>\r\n                        <FormContainer>\r\n                            <div className='p-2'>\r\n                                <h3 className=\"mx-4 mb-4 mt-2\">BASIC DETAILS</h3>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem label={<p>Item Title<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.itemTitle && touched.itemTitle}\r\n                                        errorMessage={errors.itemTitle}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"itemTitle\"\r\n                                            placeholder=\"Enter Title\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                </div>\r\n                                <div className=\"mx-4 my-4\">\r\n                                    <FormItem label={<p>Item Description<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.itemDesc && touched.itemDesc}\r\n                                        errorMessage={errors.itemDesc}\r\n                                    >\r\n                                        <Field name=\"itemDesc\">\r\n                                            {({ field, form }) => (\r\n                                                <RichTextEditor\r\n                                                    value={field.value}\r\n                                                    onChange={(val) =>\r\n                                                        form.setFieldValue(field.name, val)\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                </div>\r\n                                <div className=\"md:grid grid-cols-2\">\r\n                                    <div className='mx-4 w-500'>\r\n                                        <h6 className=\"mx-4 mb-4 mt-2\">Sop File Uploads</h6>\r\n\r\n                                        <FormItem label=\"\">\r\n\r\n                                            <Field name=\"sopFileUrl\">\r\n                                                {({ field, form }) => (\r\n                                                    <div className='mx-4'>\r\n                                                        <Upload beforeUpload={beforeUpload} draggable className='border-blue-500 bg-blue-50 w-96 h-36'\r\n                                                            onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                                setFieldValue(`sopFileUrl`, uploadRes?.data?.fileUnqId);\r\n                                                            }\r\n                                                            }\r\n                                                        >\r\n                                                            <div className=\"my-10 text-center\">\r\n                                                                <div className=\"text-6xl mb-4 flex justify-center\">\r\n                                                                    <HiOutlineCloudUpload className=\"h-10\" style={{ color: \"#2563eb\" }} />\r\n                                                                </div>\r\n                                                                <p className=\"font-semibold\">\r\n                                                                    <span className=\"text-gray-800 dark:text-white\">\r\n                                                                        Upload Files Here or{' '}\r\n                                                                    </span>\r\n                                                                    <span className=\"text-blue-500\">\r\n                                                                        browse\r\n                                                                    </span>\r\n                                                                </p>\r\n                                                                <p className=\"mt-1 opacity-60 dark:text-white\">\r\n                                                                    JPG/PNG are allowed\r\n                                                                </p>\r\n                                                            </div>\r\n                                                        </Upload>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Field>\r\n                                            {values?.sopFileUrl &&\r\n                                                <div className=\"upload-file cursor-pointer\" >\r\n                                                    <div className=\"upload-file-info\" onClick={() => onClickView(values?.sopFileUrl)}>\r\n                                                        <h6 className=\"upload-file-name\">{values?.sopFileUrl.substring(0, 15)}</h6>\r\n                                                    </div>\r\n\r\n                                                    <CloseButton\r\n                                                        className=\"upload-file-remove \"\r\n                                                        onClick={() => {\r\n                                                            setFieldValue(`sopFileUrl`, '');\r\n                                                        }}\r\n                                                    />\r\n                                                </div>}\r\n                                        </FormItem>\r\n                                    </div>\r\n\r\n\r\n                                    <div className='mx-4 w-500'>\r\n                                        <h6 className=\"mx-4 mb-4 mt-2\">Upload Image<span style={{ color: 'red' }}>{'*'}</span></h6>\r\n                                        <FormItem label=\"\">\r\n\r\n                                            <Field name=\"uploadImageUrl\">\r\n                                                {({ field, form }) => (\r\n                                                    <div className='mx-4'>\r\n                                                        <Upload beforeUpload={beforeUpload} draggable className='border-blue-500 bg-blue-50 w-96 h-36'\r\n                                                            onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                                setFieldValue(`uploadImageUrl`, uploadRes?.data?.fileUnqId);\r\n                                                            }\r\n                                                            }\r\n                                                        >\r\n                                                            <div className=\"my-10 text-center\">\r\n                                                                <div className=\"text-6xl mb-4 flex justify-center\">\r\n                                                                    <HiOutlineCloudUpload className=\"h-10\" style={{ color: \"#2563eb\" }} />\r\n                                                                </div>\r\n                                                                <p className=\"font-semibold\">\r\n                                                                    <span className=\"text-gray-800 dark:text-white\">\r\n                                                                        Upload Files Here or{' '}\r\n                                                                    </span>\r\n                                                                    <span className=\"text-blue-500\">\r\n                                                                        browse\r\n                                                                    </span>\r\n                                                                </p>\r\n                                                                <p className=\"mt-1 opacity-60 dark:text-white\">\r\n                                                                    JPG/PNG are allowed\r\n                                                                </p>\r\n                                                            </div>\r\n                                                        </Upload>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Field>\r\n                                            {values?.uploadImageUrl &&\r\n                                                <div className=\"upload-file cursor-pointer\" >\r\n                                                    <div className=\"upload-file-info\" onClick={() => onClickView(values?.uploadImageUrl)}>\r\n                                                        <h6 className=\"upload-file-name\">{values?.uploadImageUrl.substring(0, 15)}</h6>\r\n                                                    </div>\r\n\r\n                                                    <CloseButton\r\n                                                        className=\"upload-file-remove \"\r\n                                                        onClick={() => {\r\n                                                            setFieldValue(`uploadImageUrl`, '');\r\n                                                        }}\r\n                                                    />\r\n                                                </div>}\r\n                                        </FormItem>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <Card className=\"bg-zinc-100 m-4\">\r\n                                    <Card>\r\n                                        <h6 className=\"mx-4 mb-4 mt-2\">TAX COMPONENTS</h6>\r\n                                        <FieldArray name=\"taxData\">\r\n                                            {({ push: pushSection, remove: removeSection }) => (\r\n                                                <div>\r\n                                                    {values?.taxData?.map((item, i) => {\r\n                                                        return (\r\n                                                            <>\r\n                                                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                                                    <FormItem \r\n                                                                        label={<p>Tax Components<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                                        invalid={errors.taxComponents && touched.taxComponents}\r\n                                                                        errorMessage={errors.taxComponents}\r\n                                                                    >\r\n                                                                        <Field name={`taxData[${i}].taxComponents`}>\r\n                                                                            {({ field, form }) => (\r\n                                                                                <Select\r\n                                                                                    placeholder=\"Select Tax\"\r\n                                                                                    field={field}\r\n                                                                                    form={form}\r\n                                                                                    options={itemMemoTaxComponentOptiosn}\r\n                                                                                    value={itemMemoTaxComponentOptiosn?.filter((label) => label.id === item.taxComponents)}\r\n                                                                                    onChange={(label) => setTaxDrpdown(values,form,field,label,i)}\r\n                                                                                />\r\n                                                                            )}\r\n                                                                        </Field>\r\n                                                                        {touched.taxData && touched.taxData[i] && errors.taxData && errors.taxData[i]?.taxComponents && (\r\n                                                                            <div style={{color:\"red\"}}>{errors.taxData[i]?.taxComponents}</div>)}\r\n                                                                    </FormItem>\r\n                                                                    <FormItem\r\n                                                                        label={<p>Type</p>}\r\n                                                                        invalid={errors.taxType && touched.taxType}\r\n                                                                        errorMessage={errors.taxType}\r\n                                                                    >\r\n                                                                        <Field disabled\r\n                                                                            type=\"text\"\r\n                                                                            autoComplete=\"off\"\r\n                                                                            name={`taxData[${i}].taxType`} placeholder=\"\"\r\n                                                                            component={Input}\r\n                                                                        />\r\n                                                                        {touched.taxData && touched.taxData[i] && errors.taxData && errors.taxData[i]?.taxType && (\r\n                                                                            <div style={{color:\"red\"}}>{errors.taxData[i]?.taxType}</div>)}\r\n                                                                    </FormItem>\r\n                                                                    <FormItem \r\n                                                                        label={<p>Tax Value<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                                        invalid={errors.taxAmount && touched.taxAmount}\r\n                                                                        errorMessage={errors.taxAmount}\r\n                                                                    >\r\n                                                                        <Field\r\n                                                                            type=\"number\"\r\n                                                                            autoComplete=\"off\"\r\n                                                                            name={`taxData[${i}].taxAmount`} placeholder=\"Enter Tax Value\"\r\n                                                                            component={Input}\r\n                                                                        />\r\n                                                                        {touched.taxData && touched.taxData[i] && errors.taxData && errors.taxData[i]?.taxAmount && (\r\n                                                                            <div style={{color:\"red\"}}>{errors.taxData[i]?.taxAmount}</div>)}\r\n                                                                    </FormItem>\r\n                                                                    <div className='mt-8'>\r\n\r\n                                                                        <Button className=' border-cyan-500'\r\n                                                                            // disabled\r\n                                                                            shape=\"circle\"\r\n                                                                            size=\"md\"\r\n                                                                            icon={<HiPlus />}\r\n                                                                            onClick={() => pushSection({\r\n                                                                                taxComponents: '',\r\n                                                                                taxAmount: '',taxType : \"\"\r\n                                                                            })}\r\n                                                                            type='button'\r\n                                                                        />\r\n\r\n                                                                        {values?.taxData.length > 1 && <Button className='mx-4  border-red-500'\r\n                                                                            // disabled\r\n                                                                            shape=\"circle\"\r\n                                                                            size=\"md\"\r\n                                                                            icon={<HiMinus />}\r\n                                                                            onClick={() => removeSection(i)}\r\n                                                                            type='button'\r\n                                                                        />}\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </>\r\n                                                        )\r\n                                                    })}\r\n                                                </div>\r\n                                            )}\r\n                                        </FieldArray>\r\n\r\n                                    </Card>\r\n                                </Card>\r\n                            </div>\r\n                        </FormContainer>\r\n                        <Dialog isOpen={showContent}\r\n                            onClose={() => setShowContent(false)}>\r\n                            <div className='p-5'>\r\n                                <img src={`${appConfig.apiPrefix}/media/uniqid/${content}`} alt=\"Content\" />\r\n                                <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                            </div>\r\n\r\n                        </Dialog>\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n\r\n    )\r\n}\r\n\r\nexport default ItemBasicDetails\r\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport ItemAccountInfo from './ItemAccountInfo'\r\nimport ItemContactInfo from './ItemContactInfo'\r\nimport ItemAddressInfo from './ItemAddressInfo'\r\nimport ItemUploadFiles from './ItemUploadFiles'\r\nimport ItemBillingInfo from './ItemBillingInfo'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport ItemTemplateSelection from './ItemTemplateSelection'\r\nimport ItemProductCategorySelection from './ItemProductCategorySelection'\r\nimport ItemFeatures from './ItemFeatures'\r\nimport TaxComponents from './TaxComponents'\r\nimport SopUploads from './SopUploads'\r\nimport ItemBasicDetails from './ItemBasicDetails'\r\n\r\n\r\nconst ItemDetails = forwardRef((props, ref) => {\r\n    const [formData, setFormData] = useState({\r\n        SolutionBasicDetails: { values: null, validated: false },\r\n        SolutionBasicDetailsOther: { values: null, validated: false }\r\n    })\r\n    const solutionBasicDetailsref = React.useRef()\r\n    const solutionBasicDetailsOthersref = React.useRef()\r\n\r\n    async function handleSubmit() {\r\n\r\n        let validationErrors = false;\r\n\r\n        await solutionBasicDetailsref?.current?.validateForm().then(errors => {\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                solutionBasicDetailsref.current.setTouched(errors, true);\r\n                validationErrors = true;\r\n            }\r\n        });\r\n\r\n        // await solutionBasicDetailsOthersref?.current?.validateForm().then(errors => {\r\n        //     if (errors && Object.keys(errors).length > 0) {\r\n        //         solutionBasicDetailsOthersref.current.setTouched(errors, true);\r\n        //         validationErrors = true;\r\n        //     }\r\n        //   });\r\n\r\n        // await solutionBasicDetailsref.current.submitForm()\r\n        // await solutionBasicDetailsOthersref.current.submitForm()\r\n\r\n        if (!validationErrors) {\r\n            await solutionBasicDetailsref.current?.submitForm()\r\n            // await solutionBasicDetailsOthersref.current?.submitForm()\r\n          }\r\n    }\r\n\r\n    function handleChangeSolutionBasicDetails(data) {\r\n        setFormData({ ...formData, SolutionBasicDetails: data })\r\n       \r\n    }\r\n\r\n    // function handleChangeSolutionBasicOtherDetails(data) {\r\n    //     setFormData({ ...formData, SolutionBasicDetailsOther: data })\r\n    // }\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            handleSubmitFromParent() {\r\n                handleSubmit()\r\n            },\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"p-5\"  style={{backgroundColor:\"#F5F5F5\"}}>\r\n                <AdaptableCard className=\"h-full m-2\" bodyClass=\"h-full\"   >\r\n                    <ItemBasicDetails\r\n                        handleSubmit={handleSubmit}\r\n                        onChange={handleChangeSolutionBasicDetails}\r\n                        refId={solutionBasicDetailsref}\r\n                        itemIntials={props.itemIntials}\r\n                        setItemInitials={props.setItemInitials}\r\n                        step={props.step} setStep={props.setStep}\r\n                    />\r\n                </AdaptableCard>\r\n\r\n                {/* <AdaptableCard className=\"h-full m-2\" bodyClass=\"h-full\" >\r\n                    <ItemFeatures \r\n                     handleSubmit={handleSubmit}\r\n                     onChange={handleChangeSolutionBasicOtherDetails}\r\n                     refId={solutionBasicDetailsOthersref}\r\n                     itemIntials={props.itemIntials}\r\n                     setItemInitials={props.setItemInitials}\r\n                     step={props.step} setStep={props.setStep}\r\n                    \r\n                    \r\n                    />\r\n                </AdaptableCard>  */}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n})\r\n\r\nexport default ItemDetails\r\n","import { Card, Checkbox } from 'components/ui'\r\nimport React from 'react'\r\n\r\nvar randomColor = Math.floor(Math.random() * 16777215).toString(16)\r\n\r\nfunction MasterPermissionBox() {\r\n    return (\r\n        <>\r\n            <div className=\"bg-gray-50 p-5\">\r\n                <div className=\"md:grid grid-cols-3 \">\r\n                    <Card\r\n                        className=\"rounded-none border-t-4 border-indigo-500 border-r-0 border-b-0 border-l-0\"\r\n                        \r\n                    >\r\n                        <div className=\"flex justify-between\">\r\n                            <p className=\"text-base text-black font-bold\">\r\n                                Account Management\r\n                            </p>\r\n                            <div className=\"flex\">\r\n                                <Checkbox className=\"\" />\r\n                                <p className='text-base font-medium'>Select All</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex flex-row-reverse gap-4 mt-6 \" >\r\n                            <p className='text-base font-medium'>Approve</p>\r\n                            <p className='text-base font-medium'>Deactivate</p>\r\n                            <p className='text-base font-medium'>Edit</p>\r\n                            <p className='text-base font-medium'>Add</p>\r\n                            <p className='text-base font-medium'>View</p>\r\n                        </div>\r\n                        <div className='flex mt-5'>\r\n                            <p className='mr-6'>Operaters</p>\r\n                            <Checkbox className=\"mx-3\"/>\r\n                            <Checkbox className=\"mx-4\"/>\r\n                            <Checkbox className=\"mx-4\"/>\r\n                            <Checkbox className=\"mx-6 mr-8\"/>\r\n                            <Checkbox className=\"mx-6 ml-8\"/>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MasterPermissionBox\r\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport ItemAccountInfo from './ItemAccountInfo'\r\nimport ItemContactInfo from './ItemContactInfo'\r\nimport ItemAddressInfo from './ItemAddressInfo'\r\nimport ItemUploadFiles from './ItemUploadFiles'\r\nimport ItemBillingInfo from './ItemBillingInfo'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport ItemTemplateSelection from './ItemTemplateSelection'\r\nimport ItemProductCategorySelection from './ItemProductCategorySelection'\r\n\r\n\r\nconst ItemTemplate = forwardRef((props, ref) => {\r\n\r\n  const [formData, setFormData] = useState({\r\n    SolutionBasicDetails: { values: null, validated: false },\r\n    SolutionBasicDetailsOther: { values: null, validated: false }\r\n  })\r\n  const solutionBasicDetailsref = React.useRef()\r\n\r\n\r\n  async function handleSubmit() {\r\n\r\n    let validationErrors = false;\r\n\r\n    await solutionBasicDetailsref?.current?.validateForm().then(errors => {\r\n      if (errors && Object.keys(errors).length > 0) {\r\n          solutionBasicDetailsref.current.setTouched(errors, true);\r\n          validationErrors = true;\r\n      }\r\n  });\r\n\r\n    if (!validationErrors) {\r\n      await solutionBasicDetailsref.current?.submitForm()\r\n    }\r\n  }\r\n\r\n  function handleChangeSolutionBasicDetails(data) {\r\n    setFormData({ ...formData, SolutionBasicDetails: data })\r\n  }\r\n  function handleChangeSolutionBasicDetailsOther(data) {\r\n    setFormData({ ...formData, SolutionBasicDetailsOther: data })\r\n  }\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      handleSubmitFromParent() {\r\n        handleSubmit()\r\n      },\r\n    }\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <div className=\"p-5\"  style={{backgroundColor:\"#f5f5f5\"}}>\r\n        <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider >\r\n          <ItemProductCategorySelection\r\n            handleSubmit={handleSubmit}\r\n            onChange={handleChangeSolutionBasicDetails}\r\n            refId={solutionBasicDetailsref}\r\n            itemIntials={props.itemIntials}\r\n            setItemInitials={props.setItemInitials}\r\n            step={props.step} setStep={props.setStep}\r\n          />\r\n        </AdaptableCard>\r\n        {/* <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider >\r\n          <ItemTemplateSelection\r\n            handleSubmit={handleSubmit}\r\n            onChange={handleChangeSolutionBasicDetailsOther}\r\n            refId={solutionBasicDetailsOtherref}\r\n            itemIntials={props.itemIntials}\r\n            setItemInitials={props.setItemInitials}\r\n            step={props.step} setStep={props.setStep}\r\n          />\r\n        </AdaptableCard> */}\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n)\r\nexport default ItemTemplate\r\n","import { Card, Dialog, Button } from 'components/ui'\r\nimport React, { useMemo, useState } from 'react'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport ReactHtmlParser from 'html-react-parser'\r\nimport { Link } from 'react-router-dom'\r\nimport GetDropdownLabel from 'views/Servicefile'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport appConfig from 'configs/app.config';\r\nconst tempItemTypeOptions = [\r\n    { label: \"Product\", value: 'P' },\r\n    { label: \"Data Paln\", value: 'D' },\r\n    { label: \"Service Plan\", value: 'S' }\r\n]\r\nconst productCategoryOptions = [\r\n    { label: 'GPS TRACKERS', value: '1' },\r\n    { label: 'SMART SECURITY SYSTEMS', value: '2' },\r\n    { label: 'SMART MOBILES', value: '3' },\r\n\r\n]\r\n\r\n\r\n\r\n\r\nfunction ItemPreview({ itemIntials, step, setStep }) {\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n    \r\n    const onClickFile = (fileInfo) => {\r\n       \r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n    const itemsProductcat = useSelector((state) => state?.itemsCreateList?.data?.itemsProductCatList)\r\n    return (\r\n        <>\r\n            <h3 className=\"mx-4 mb-4 mt-2\">Preview</h3>\r\n\r\n            <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2 mb-4\">\r\n                    <h5 className=\"mx-2 mb-4 mt-1 font-bold\">\r\n                        CHOOSE TEMPLATE{' '}\r\n                    </h5>\r\n                    <div className=\" text-base text-black font-bold flex justify-end\">\r\n                        <Link onClick={() => { setStep(0) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                <div className=\"md:grid grid-cols-4\">\r\n                    <div className=\"md:gird mx-2\">\r\n                        <div className=\"text-base text-black font-bold decoration-2 mb-2\">\r\n                            Product Category\r\n                        </div>\r\n                        <div className=\"col-span-6 md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(itemIntials?.itemTemplate?.productCat, itemsProductcat)}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base text-black font-bold decoration-2 mb-2\">\r\n                            Template Title\r\n                        </div>\r\n                        <div className=\"md:grid grid-cols-1 gap-2\">\r\n                            <p className=\"mt-2 text-base\">{itemIntials.itemTemplate.selectedTemplateName}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n\r\n            <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2 mb-4\">\r\n                    <h5 className=\"mx-2 mb-4 mt-1 font-bold\">ITEM DETAILS </h5>\r\n                    <div className=\" text-base text-black font-bold flex justify-end\">\r\n                        <Link onClick={() => { setStep(1) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                <div className=\"md:grid grid-cols-4\">\r\n                    <div className=\"md:gird mx-2\">\r\n                        <div className=\"text-base text-black font-bold  decoration-2 mb-2\">\r\n                            Item Title:\r\n                        </div>\r\n                        <div className=\"col-span-6 md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">{itemIntials?.itemBasicDetails?.itemTitle}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base text-black font-bold  decoration-2 mb-2\">\r\n                            Template Description\r\n                        </div>\r\n                        <div className=\"md:grid grid-cols-1 gap-2\">\r\n                            <div className=\"mt-2 text-base\" dangerouslySetInnerHTML={{ __html: itemIntials?.itemBasicDetails?.itemDesc || '' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base text-black font-bold  decoration-2 mb-2\">\r\n                            Upload Images\r\n                        </div>\r\n                        <div className=\"md:grid grid-cols-1 gap-2\">\r\n                            <div className='md:grid grid-cols-1 gap-2' onClick={() => onClickFile(itemIntials?.itemBasicDetails?.sopFileUrl)}>\r\n                                <p className='mt-2 text-base underline text-sky-500 cursor-pointer'>{itemIntials?.itemBasicDetails?.sopFileUrl}</p>\r\n                            </div>\r\n                            <div className='md:grid grid-cols-1 gap-2' onClick={() => onClickFile(itemIntials?.itemBasicDetails?.uploadImageUrl)}>\r\n                                <p className='mt-2 text-base underline text-sky-500 cursor-pointer'>{itemIntials?.itemBasicDetails?.uploadImageUrl}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        {/* <div className=\"text-base text-black font-bold  decoration-2 mb-2\">\r\n                            Item Features\r\n                        </div> */}\r\n                        <div className=\"md:grid grid-cols-1 gap-2\">\r\n                            <div className=\"mt-2 text-base\">\r\n\r\n                                {/* {ReactHtmlParser( */}\r\n                                {itemIntials?.itemBasicDetailsOther?.itemFeatureDec}\r\n                                {/* )}  */}\r\n                            </div >\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n\r\n            <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2 mb-4\">\r\n                    <h5 className=\"mx-2 mb-4 mt-1 font-bold\">\r\n                        VARIANTS DETAILS{' '}\r\n                    </h5>\r\n                    <div className=\" text-base text-black font-bold flex justify-end\">\r\n                        <Link onClick={() => { setStep(2) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                {itemIntials?.itemVarients?.map((vari, i) => {\r\n            \r\n                    return <div className=\"md:grid grid-cols-4 mx-2\" key={i}>\r\n                        {/* <div className=\"md:gird \">\r\n                            <div className=\"text-base text-black font-bold  decoration-2 mb-2\">\r\n                                Variant Type:\r\n                            </div>\r\n                            <div className=\"col-span-6 md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-base\">variant type 1</p>\r\n                            </div>\r\n                        </div> */}\r\n                        <div>\r\n                            <div className=\"text-base text-black font-bold  decoration-2 mb-2\">\r\n                                Variant Title\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-base\">{vari?.item_var_title}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"text-base text-black font-bold  decoration-2 mb-2\">\r\n                                Variant ID\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-base\">ID12345</p>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"text-base text-black font-bold  decoration-2 mb-2\">\r\n                                Variant Price\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-base\">{vari?.var_def_price}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"text-base text-black font-bold  decoration-2 mb-2 mt-4\">\r\n                                Variant Description\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <div className=\"mt-2 text-base\" dangerouslySetInnerHTML={{ __html: vari?.item_var_desc || '' }} />\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"text-base text-black font-bold  decoration-2 mb-2  mt-4\">\r\n                                Upload Images\r\n                            </div>\r\n                            <div className='md:grid grid-cols-1 gap-2' onClick={() => onClickFile(vari\r\n                                ?.img_url)}>\r\n                                <p className='mt-2 text-base underline text-sky-500 cursor-pointer'>{vari\r\n                                    ?.img_url}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                })}\r\n\r\n            </Card>\r\n            <Dialog isOpen={showContent}\r\n                onClose={() => setShowContent(false)}>\r\n                <div className='p-5'>\r\n                    <img src={`${appConfig.apiPrefix}/media/uniqid/${content}`} alt=\"Content\" />\r\n                    <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemPreview\r\n","import { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Upload,\r\n    Dialog,\r\n} from 'components/ui'\r\nimport { HiMinus, HiPlus } from 'react-icons/hi'\r\n\r\nimport { Field, FieldArray, Form, Formik,ErrorMessage  } from 'formik'\r\nimport { cloneDeep } from 'lodash'\r\nimport { useEffect, useState } from 'react'\r\nimport { BsFillPlusCircleFill } from 'react-icons/bs'\r\nimport { HiOutlineCloudUpload } from 'react-icons/hi'\r\nimport { MdDelete } from 'react-icons/md'\r\nimport { useSelector } from 'react-redux'\r\nimport * as Yup from 'yup'\r\nimport appConfig from 'configs/app.config'\r\nimport { apiUploadFiles } from 'services/EnterpriseService'\r\nimport CloseButton from 'components/ui/CloseButton'\r\nimport { OpenNotification } from 'views/Servicefile'\r\n\r\nconst validationSchemaV = Yup.object().shape({\r\n    itemVarients: Yup.array().of(\r\n        Yup.object().shape({\r\n            item_var_title: Yup.string().trim().required('Please enter item title').nullable(),\r\n            item_var_desc: Yup.string().trim().max(1000,\"Description allowed 1000 characters only\").required('Please enter descripttion').nullable(),\r\n            var_def_price: Yup.string().trim().required('Please enter price').nullable(),\r\n        })\r\n    ),\r\n})\r\n\r\nconst initialValues = {\r\n    itemVarients: [{\r\n        item_var_title: \"\",\r\n        var_def_price: '',\r\n        item_var_desc: \"\",\r\n        img_url: \"\",\r\n        media_url: '',\r\n        tp_struc_info: \"\",\r\n        srt_desc: \"\",\r\n        dataPlanValidity: \"\"\r\n    }]\r\n}\r\nconst saveFilesInCatalog = 2\r\nconst ItemVariantDetails = ({ onChange, refId, ...props }) => {\r\n    let dynamicFields = cloneDeep(props.itemIntials.itemVarients[0]?.emptyTempSections)\r\n\r\n    const [selectedTempArr, setSelectedTempArr] = useState([])\r\n    const [itemType, setItemType] = useState(props.itemIntials?.itemTemplate?.tempItemType)\r\n    const { enterAccount, password, rememberMe, usernameOrEmail, user_type, acc_mno_parent_unq_id, acc_user_id } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n    const beforeUpload = async (newFiles, files) => {\r\n        const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInCatalog)\r\n        return ress\r\n    }\r\n\r\n    const uploadTempField = async (newFiles, file, obj) => {\r\n        let arr = []\r\n        obj.fileType.map(e => {\r\n            if (e.status === true) {\r\n                arr.push(e.label)\r\n            }\r\n        })\r\n        const trueStatusKeys = obj.fileType.filter(item => item.status === true).map(item => item.label);\r\n        const concatenatedKeys = trueStatusKeys.join('/');\r\n        let flag = false;\r\n        if (newFiles[0]?.type?.includes('image')) {\r\n            if (arr.includes(\"Image\")) {\r\n                flag = true\r\n            }\r\n        }\r\n        else if (newFiles[0].type == \"application/pdf\") {\r\n            if (arr.includes(\"Pdf\")) {\r\n                flag = true\r\n            }\r\n        }\r\n        else if (newFiles[0].type == \"video/mp4\") {\r\n            if (arr.includes(\"Video\")) {\r\n                flag = true\r\n            }\r\n        }\r\n        else if (newFiles[0].type == \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || newFiles[0].type == \"application/msword\") {\r\n            if (arr.includes(\"Document\")) {\r\n                flag = true\r\n            }\r\n        }\r\n        else {\r\n            OpenNotification(\"warning\", \"files is not supported\")\r\n        }\r\n        if (flag) {\r\n            const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInCatalog)\r\n            return ress\r\n        } else {\r\n            OpenNotification(\"warning\", \"files is not supported\")\r\n        }\r\n    }\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n    const onClickView = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n\r\n    // React.useEffect(() => {\r\n    //     const dynamicValidationSchema = Yup.string().required('SOP file is required');\r\n\r\n    //     attachValidationSchema('sopFileUrl', dynamicValidationSchema);\r\n    //   }, []);\r\n    // const templatesArr = useSelector((state) => state?.itemsCreateList?.data?.setTemplatesForItems)\r\n    // const [stateInitialsValues, setInitialValues] = useState(initialValues)\r\n    // const [optionalValues, setOptinalValues] = useState({})\r\n\r\n    // useEffect(() => {\r\n    //     if (templatesArr.length) {\r\n    //         let a = templatesArr.find(e => e.id === props.itemIntials?.itemTemplate?.selectedTemplate)\r\n    //         let selectedTemp = cloneDeep(a)\r\n    //         let t = JSON.parse(selectedTemp.tp_struc)\r\n    //         selectedTemp.tp_struc = t\r\n    //         // setSelectedTempArr(selectedTemp)\r\n    //         const initials = stateInitialsValues?.itemVarients\r\n    //         const manipulateData = selectedTemp?.tp_struc?.map((vl) => {\r\n    //             if (Array.isArray(vl?.sectionValues) && vl?.sectionValues?.length > 0) {\r\n    //                 vl.sectionValues = vl?.sectionValues?.map((sec) => {\r\n    //                     if ([\"DD\", \"CB\", \"RB\"].includes(sec?.formType)) {\r\n    //                         sec.options = [{ option: '' }]\r\n    //                     }\r\n    //                     return sec\r\n    //                 })\r\n    //             }\r\n    //             return vl\r\n    //         })\r\n    //         initials[0].section = manipulateData\r\n    //         setInitialValues((prev) => ({ ...prev, itemVarients: initials }))\r\n    //         setOptinalValues(initials[0])\r\n    //     }\r\n    // }, [templatesArr])\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={props?.itemIntials}\r\n                validationSchema={validationSchemaV}\r\n                innerRef={refId}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    let isUploadedImage = false\r\n                    let isTemplateUploadedFiles = false\r\n                    let isTemplateUploadedFilesArr = []\r\n                    if (itemType === \"P\") {\r\n                        values.itemVarients.map((e, i) => {\r\n                            if (e.img_url !== \"\") {\r\n                                isUploadedImage = true\r\n                            } else {\r\n                                isUploadedImage = false\r\n                            }\r\n                        })\r\n                    } else {\r\n                        isUploadedImage = true\r\n                    }\r\n                    values.itemVarients.map((e,i) => {\r\n                        e.section.map((f,fi)=>{\r\n                            f.sectionValues.map((g,gi)=>{\r\n                                if(g.formType === \"UF\" && g.isMandatery === true){\r\n                                    isTemplateUploadedFilesArr.push(g)\r\n                                }\r\n                            })\r\n                        })\r\n                    })\r\n                    if(isTemplateUploadedFilesArr.length > 0){\r\n                        isTemplateUploadedFiles = isTemplateUploadedFilesArr.every(e => e.fileUrl && e.fileUrl !== \"\")\r\n                    }else{\r\n                        isTemplateUploadedFiles=true;\r\n                    }\r\n                    if (isUploadedImage) {\r\n                        if(isTemplateUploadedFiles){\r\n                        setSubmitting(true)\r\n                        let dataToStore = props.itemIntials\r\n                        dataToStore.itemVarients = values.itemVarients\r\n                        props.setItemInitials(dataToStore)\r\n                        props.setStep(props.step + 1)\r\n                        }else{\r\n                            OpenNotification(\"warning\",\"Please upload template files\")\r\n                        }\r\n                    } else {\r\n                        OpenNotification(\"warning\", \"Please upload image\")\r\n                    }\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                    return (\r\n                        <>\r\n                            <Form>\r\n                                <FormContainer>\r\n                                    <div style={{ backgroundColor: \"#f5f5f5\", padding: \"20px 20px 0px 20px\" }}>\r\n                                        <FieldArray name='itemVarients'>\r\n                                            {({ push: pushVarient, remove: removeVarient }) => (\r\n                                                <>\r\n                                                    {values?.itemVarients?.map((variant, variantIndex) => {\r\n                                                        return (\r\n                                                            <>\r\n                                                                <AdaptableCard className=\"h-full p-5\" bodyClass=\"h-full\" >\r\n                                                                    <div className=\"grid grid-cols-4 flex gap-4  \">\r\n                                                                        <FormItem className=\"\" label={<p>Variant Title<span style={{ color: \"red\" }}>*</span></p>}\r\n                                                                            invalid={errors.item_var_title && touched.item_var_title}\r\n                                                                            errorMessage={errors.item_var_title}\r\n                                                                        >\r\n                                                                            <Field type=\"text\" autoComplete=\"off\" placeholder=\"Enter Variant Title\" component={Input}\r\n                                                                                name={`itemVarients[${variantIndex}].item_var_title`}\r\n                                                                            />\r\n                                                                            <ErrorMessage name= {`itemVarients[${variantIndex}].item_var_title`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                                                        </FormItem>\r\n                                                                        {!(itemType === \"S\") &&\r\n                                                                            <FormItem label={<p>Variant Price<span style={{ color: \"red\" }}>*</span></p>}\r\n                                                                                invalid={errors.var_def_price && touched.var_def_price}\r\n                                                                                errorMessage={errors.var_def_price}>\r\n                                                                                <Field type=\"number\" autoComplete=\"off\" placeholder=\"Enter Variant Price\" component={Input}\r\n                                                                                    name={`itemVarients[${variantIndex}].var_def_price`} />\r\n                                                                                <ErrorMessage name= {`itemVarients[${variantIndex}].var_def_price`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                                                            </FormItem>}\r\n                                                                        {(itemType === \"D\") &&\r\n                                                                            <FormItem label={<p>Validity<span style={{ color: \"red\" }}>*</span></p>}\r\n                                                                                invalid={errors.validity && touched.validity}\r\n                                                                                errorMessage={errors.validity}>\r\n                                                                                <Field type=\"number\" autoComplete=\"off\" placeholder=\"Enter Validity\" component={Input}\r\n                                                                                    name={`itemVarients[${variantIndex}].validity`}\r\n                                                                                    validate={async (passedValue) => {\r\n                                                                                        if (itemType === \"D\") {\r\n                                                                                            try {\r\n                                                                                                await Yup.string().required('Please enter validity').validate(passedValue);\r\n                                                                                            } catch (error) {\r\n                                                                                                return error.message;\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }}\r\n                                                                                />\r\n                                                                                <ErrorMessage name= {`itemVarients[${variantIndex}].validity`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                                                            </FormItem>}\r\n                                                                        {(itemType === \"S\") &&\r\n                                                                            <FormItem label={<p>Monthly Price<span style={{ color: \"red\" }}>*</span></p>}\r\n                                                                                invalid={errors.var_def_price && touched.var_def_price}\r\n                                                                                errorMessage={errors.var_def_price}>\r\n                                                                                <Field type=\"number\" autoComplete=\"off\" placeholder=\"Enter Variant Price\" component={Input}\r\n                                                                                    name={`itemVarients[${variantIndex}].var_def_price`} />\r\n                                                                                <ErrorMessage name= {`itemVarients[${variantIndex}].var_def_price`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                                                            </FormItem>}\r\n                                                                    </div>\r\n                                                                    <div style={{ width: \"70%\" }} className=\"pt-2\">\r\n                                                                        <FormItem label={<p>Variant Description<span style={{ color: \"red\" }}>*</span></p>}\r\n                                                                            invalid={errors.item_var_desc && touched.item_var_desc}\r\n                                                                            errorMessage={errors.item_var_desc}\r\n                                                                        >\r\n                                                                            <Field name={`itemVarients[${variantIndex}].item_var_desc`}  >\r\n                                                                                {({ field, form }) => (\r\n                                                                                    <RichTextEditor value={field.value}\r\n                                                                                        onChange={(val) => form.setFieldValue(field.name, val)}\r\n                                                                                    />\r\n                                                                                )}\r\n                                                                            </Field>\r\n                                                                            <ErrorMessage name= {`itemVarients[${variantIndex}].item_var_desc`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                                                        </FormItem>\r\n                                                                    </div>\r\n                                                                    {(itemType === \"P\") && <div className=\"md:grid grid-cols-1 gap-3\">\r\n                                                                        <AdaptableCard>\r\n                                                                            <h6 className=\"mx-4 mb-4 mt-2\">Upload Image<span style={{ color: \"red\" }}>*</span></h6>\r\n                                                                            <FormItem label=\"\">\r\n\r\n                                                                                <Field name={`itemVarients[${variantIndex}].img_url`}>\r\n\r\n                                                                                    {({ field, form }) => (\r\n\r\n                                                                                        <div className='mx-4'>\r\n                                                                                            <Upload beforeUpload={beforeUpload} draggable className='border-blue-500 bg-blue-50 w-96 h-36'\r\n                                                                                                onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                                                                    form.setFieldValue(`itemVarients[${variantIndex}].img_url`, uploadRes?.data?.fileUnqId);\r\n                                                                                                }\r\n                                                                                                }\r\n                                                                                            >\r\n                                                                                                <div className=\"my-10 text-center\">\r\n                                                                                                    <div className=\"text-6xl mb-4 flex justify-center\">\r\n                                                                                                        <HiOutlineCloudUpload className=\"h-10\" style={{ color: \"#2563eb\" }} />\r\n                                                                                                    </div>\r\n                                                                                                    <p className=\"font-semibold\">\r\n                                                                                                        <span className=\"text-gray-800 dark:text-white\">\r\n                                                                                                            Upload Files Here or{' '}\r\n                                                                                                        </span>\r\n                                                                                                        <span className=\"text-blue-500\">\r\n                                                                                                            browse\r\n                                                                                                        </span>\r\n                                                                                                    </p>\r\n                                                                                                    <p className=\"mt-1 opacity-60 dark:text-white\">\r\n                                                                                                        JPG/PNG are allowed\r\n                                                                                                    </p>\r\n                                                                                                </div>\r\n                                                                                            </Upload>\r\n                                                                                        </div>\r\n                                                                                    )}\r\n                                                                                </Field>\r\n                                                                                {values.itemVarients[variantIndex].img_url &&\r\n                                                                                    <div className=\"upload-file cursor-pointer w-2/5\" >\r\n                                                                                        <div className=\"upload-file-info\" onClick={() => onClickView(values.itemVarients[variantIndex].img_url)}>\r\n                                                                                            <h6 className=\"upload-file-name\">{values.itemVarients[variantIndex].img_url.substring(0, 15)}</h6>\r\n                                                                                        </div>\r\n\r\n                                                                                        <CloseButton\r\n                                                                                            className=\"upload-file-remove \"\r\n                                                                                            onClick={() => {\r\n                                                                                                setFieldValue(`itemVarients[${variantIndex}].img_url`, '');\r\n                                                                                            }}\r\n                                                                                        />\r\n                                                                                    </div>}\r\n                                                                            </FormItem>\r\n                                                                        </AdaptableCard>\r\n                                                                    </div>}\r\n                                                                    <div>\r\n                                                                        <FieldArray name={`itemVarients[${variantIndex}].section`}>\r\n                                                                            {() => (\r\n                                                                                <div>\r\n                                                                                    {values?.itemVarients[variantIndex]?.section?.map((section, sectionIndex) => {\r\n                                                                                        let copySection = section\r\n                                                                                        return (\r\n                                                                                            <div key={sectionIndex}>\r\n                                                                                                <h5>{section?.sectionTitle.toUpperCase()}</h5>\r\n                                                                                                {/* Render fields for section properties here */}\r\n                                                                                                <FieldArray name={`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues`}>\r\n                                                                                                    {() => (\r\n                                                                                                        <div>\r\n                                                                                                            {section?.sectionValues?.map((value, valueIndex) => (\r\n                                                                                                                <div key={valueIndex}>\r\n                                                                                                                    <>\r\n                                                                                                                        <div className='grid grid-cols-2 mt-4'>\r\n                                                                                                                            <div>\r\n                                                                                                                                <h6> {value?.title.charAt(0).toUpperCase() + value?.title.slice(1)} <span style={{ color: \"red\" }}>{value?.isMandatery ? '*' : ''}</span></h6>\r\n                                                                                                                                {value?.formType === 'TF' && (\r\n                                                                                                                                    <FormItem>\r\n                                                                                                                                        <Field\r\n                                                                                                                                            type=\"text\"\r\n                                                                                                                                            autoComplete=\"off\"\r\n                                                                                                                                            //  errorMessage={errors.item_var_desc}\r\n                                                                                                                                            name={`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues[${valueIndex}].value`}\r\n                                                                                                                                            validate={async (passedValue) => {\r\n                                                                                                                                                if (value?.isMandatery) {\r\n                                                                                                                                                    try {\r\n                                                                                                                                                        await Yup.string().required('Value is required').validate(passedValue);\r\n                                                                                                                                                    } catch (error) {\r\n                                                                                                                                                        return error.message;\r\n                                                                                                                                                    }\r\n                                                                                                                                                }\r\n                                                                                                                                            }}\r\n                                                                                                                                            placeholder=\"Enter Title\"\r\n                                                                                                                                            component={Input}\r\n\r\n                                                                                                                                        />\r\n                                                                                                                                        <ErrorMessage name= {`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues[${valueIndex}].value`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                                                                                                                    </FormItem>)}\r\n                                                                                                                                {value?.formType === 'TA' &&\r\n                                                                                                                                    <FormItem >\r\n                                                                                                                                        <Field type=\"text\" autoComplete=\"off\" maxLength={parseInt(value?.textAreaMaxLength)}\r\n                                                                                                                                            // name={`itemVarients[${valueIndex}].dataPlan[${valueIndex}].item_plan_textarea`}\r\n                                                                                                                                            name={`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues[${valueIndex}].value`}\r\n                                                                                                                                            placeholder=\"Enter Value\" component={Input}\r\n                                                                                                                                            validate={async (passedValue) => {\r\n                                                                                                                                                if (value?.isMandatery) {\r\n                                                                                                                                                    try {\r\n                                                                                                                                                        await Yup.string().required('Value is required').validate(passedValue);\r\n                                                                                                                                                    } catch (error) {\r\n                                                                                                                                                        return error.message;\r\n                                                                                                                                                    }\r\n                                                                                                                                                }\r\n                                                                                                                                            }}\r\n                                                                                                                                        />\r\n                                                                                                                                        <ErrorMessage name= {`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues[${valueIndex}].value`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                                                                                                                    </FormItem>\r\n                                                                                                                                }\r\n                                                                                                                                {['DD', 'CB', 'RB'].includes(value?.formType) &&\r\n                                                                                                                                    <FieldArray name={`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues[${valueIndex}].options`}>\r\n                                                                                                                                        {({ push: pushOption, remove: removeOption }) => (\r\n                                                                                                                                            <div>\r\n                                                                                                                                                {value?.options?.map((dropVal, dropIndex) => (\r\n                                                                                                                                                    <div key={dropIndex}>\r\n                                                                                                                                                        <div key={'id'} className='flex mt-4'>\r\n                                                                                                                                                            {/* <h6 className='my-4 mr-2'>Option {dropIndex + 1}.</h6> */}\r\n                                                                                                                                                            <FormItem className='w-80'>\r\n                                                                                                                                                                <Field type=\"text\" autoComplete=\"off\"\r\n                                                                                                                                                                    name={`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues[${valueIndex}].options[${dropIndex}].option`}\r\n                                                                                                                                                                    placeholder={`option ${dropIndex + 1}`} component={Input}\r\n                                                                                                                                                                    validate={async (passedValue) => {\r\n                                                                                                                                                                        if (value?.isMandatery) {\r\n                                                                                                                                                                            try {\r\n                                                                                                                                                                                await Yup.string().required(\"Option is required\").validate(passedValue)\r\n                                                                                                                                                                            } catch (error) {\r\n                                                                                                                                                                                return error.message;\r\n                                                                                                                                                                            }\r\n                                                                                                                                                                        }\r\n                                                                                                                                                                    }}\r\n                                                                                                                                                                />\r\n                                                                                                                                                                <ErrorMessage name= {`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues[${valueIndex}].options[${dropIndex}].option`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                                                                                                                                            </FormItem>\r\n                                                                                                                                                            <div className='flex'>\r\n                                                                                                                                                                <Button type='button' className='ml-4 border-cyan-500' shape=\"circle\" size=\"md\" icon={<HiPlus />}\r\n                                                                                                                                                                    onClick={() => pushOption({\r\n                                                                                                                                                                        \"option\": \"\"\r\n                                                                                                                                                                    })}\r\n                                                                                                                                                                />\r\n                                                                                                                                                                {value?.options.length > 1 &&\r\n                                                                                                                                                                    <Button className='ml-4 border-red-500'\r\n                                                                                                                                                                        shape=\"circle\"\r\n                                                                                                                                                                        size=\"md\"\r\n                                                                                                                                                                        icon={<HiMinus />}\r\n                                                                                                                                                                        onClick={() => removeOption(dropIndex)}\r\n                                                                                                                                                                        type='button'\r\n                                                                                                                                                                    />}\r\n\r\n                                                                                                                                                            </div>\r\n                                                                                                                                                        </div>\r\n                                                                                                                                                    </div>\r\n                                                                                                                                                ))}\r\n                                                                                                                                            </div>\r\n                                                                                                                                        )}\r\n                                                                                                                                    </FieldArray>\r\n                                                                                                                                }\r\n                                                                                                                                {value?.formType === 'CK' &&\r\n                                                                                                                                    <FormItem>\r\n                                                                                                                                        <Field\r\n                                                                                                                                            name={`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues[${valueIndex}].value`}\r\n                                                                                                                                            validate={async (passedValue) => {\r\n                                                                                                                                                if (value?.isMandatery) {\r\n                                                                                                                                                    try {\r\n                                                                                                                                                        await Yup.string().required('Value is required').validate(passedValue);\r\n                                                                                                                                                    } catch (error) {\r\n                                                                                                                                                        return error.message;\r\n                                                                                                                                                    }\r\n                                                                                                                                                }\r\n                                                                                                                                            }}\r\n                                                                                                                                        >\r\n                                                                                                                                            {({ field, form }) => (\r\n                                                                                                                                                <RichTextEditor\r\n                                                                                                                                                    value={field.value}\r\n                                                                                                                                                    onChange={(val) =>\r\n                                                                                                                                                        form.setFieldValue(field.name, val)\r\n                                                                                                                                                    }\r\n                                                                                                                                                />\r\n                                                                                                                                            )}\r\n                                                                                                                                        </Field>\r\n                                                                                                                                        <ErrorMessage name= {`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues[${valueIndex}].value`}>{errMsg => <div style={{color:\"red\"}}>{errMsg}</div>}</ErrorMessage>\r\n                                                                                                                                    </FormItem>\r\n                                                                                                                                }{value?.formType === 'UF' &&\r\n                                                                                                                                    <FormItem>\r\n                                                                                                                                        <Field name={`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues[${valueIndex}].fileUrl`}>\r\n                                                                                                                                            {({ field, form }) => (\r\n                                                                                                                                                <div className='mx-4 mt-4'>\r\n                                                                                                                                                    <Upload beforeUpload={(e, i) => uploadTempField(e, i, values?.itemVarients[variantIndex]?.section[sectionIndex]?.sectionValues[valueIndex])} draggable className='border-gray-200 w-96 h-[0] mt-3' style={{ minHeight: '3rem' }}\r\n                                                                                                                                                        onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                                                                                                                            form.setFieldValue(`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues[${valueIndex}].fileUrl`, uploadRes?.data?.fileUnqId);\r\n                                                                                                                                                        }}>\r\n                                                                                                                                                        <div className=\"my-10 text-center\">\r\n                                                                                                                                                            <div className=\"my-10 text-center\">\r\n                                                                                                                                                                <p className=\"font-semibold\">\r\n                                                                                                                                                                    <span className=\"text-gray-400 dark:text-white\">{values?.itemVarients[variantIndex]?.section[sectionIndex]?.sectionValues[valueIndex]?.fileUrl && 'File Uploaded' || \"No Files Uploaded\"} ,{' '}</span>\r\n                                                                                                                                                                    <span className=\"text-blue-700\">Browse</span>\r\n                                                                                                                                                                </p>\r\n                                                                                                                                                            </div>\r\n                                                                                                                                                        </div>\r\n                                                                                                                                                    </Upload>\r\n                                                                                                                                                    <div className='flex'>\r\n                                                                                                                                                    <p>{'Allowed files'} {':'}</p>\r\n                                                                                                                                                    <div className='flex'>\r\n                                                                                                                                                        {\r\n                                                                                                                                                            values?.itemVarients[variantIndex]?.section[sectionIndex]?.sectionValues[valueIndex]?.fileType.map((f) => {\r\n                                                                                                                                                                if (f?.status == true) {\r\n                                                                                                                                                                    return (<p>{f?.label}{'     ,'}</p>)\r\n                                                                                                                                                                }\r\n                                                                                                                                                            })\r\n                                                                                                                                                        }\r\n                                                                                                                                                    </div>\r\n                                                                                                                                                    </div>\r\n                                                                                                                                                   \r\n\r\n                                                                                                                                                </div>\r\n                                                                                                                                            )}\r\n                                                                                                                                        </Field>\r\n                                                                                                                                        {values?.itemVarients[variantIndex]?.section[sectionIndex]?.sectionValues[valueIndex]?.fileUrl &&\r\n                                                                                                                                            <div className=\"upload-file cursor-pointer h-12 w-96 ml-4\" >\r\n                                                                                                                                                <div className=\"upload-file-info\" onClick={() => onClickView(values?.itemVarients[variantIndex]?.section[sectionIndex]?.sectionValues[valueIndex]?.fileUrl)}>\r\n                                                                                                                                                    <h6 className=\"upload-file-name\">{values?.itemVarients[variantIndex]?.section[sectionIndex]?.sectionValues[valueIndex]?.fileUrl.substring(0, 15)}</h6>\r\n                                                                                                                                                </div>\r\n                                                                                                                                                <CloseButton className=\"upload-file-remove \"\r\n                                                                                                                                                    onClick={() => { setFieldValue(`itemVarients[${variantIndex}].section[${sectionIndex}].sectionValues[${valueIndex}].fileUrl`, ''); }}\r\n                                                                                                                                                />\r\n                                                                                                                                            </div>}\r\n                                                                                                                                    </FormItem>}\r\n                                                                                                                            </div>\r\n                                                                                                                        </div>\r\n                                                                                                                    </>\r\n                                                                                                                </div>\r\n                                                                                                            ))}\r\n                                                                                                        </div>\r\n                                                                                                    )}\r\n                                                                                                </FieldArray>\r\n                                                                                            </div>\r\n                                                                                        )\r\n                                                                                    }\r\n                                                                                    )}\r\n                                                                                </div>\r\n                                                                            )}\r\n                                                                        </FieldArray>\r\n                                                                    </div>\r\n\r\n                                                                </AdaptableCard>\r\n                                                                <div className=\"mx-4 mt-4 flex justify-end\">\r\n                                                                    <Button type='button' variant=\"plain\" size=\"sm\" className=\"font-bold-800 mb-4\" style={{ color: '#004D99' }}\r\n                                                                        icon={<BsFillPlusCircleFill fill=\"#004D99\" />}\r\n                                                                        onClick={() => pushVarient({\r\n                                                                            item_var_title: \"\", var_def_price: '', item_var_desc: \"\", img_url: \"\", media_url: '',\r\n                                                                            tp_struc_info: \"\", srt_desc: \"\", dataPlanValidity: \"\", section: dynamicFields\r\n                                                                        })}\r\n                                                                    >\r\n                                                                        ADD NEW VARIANT\r\n                                                                    </Button>\r\n                                                                    {values?.itemVarients.length > 1 &&\r\n                                                                        <Button type='button' variant=\"plain\" size=\"sm\" className=\"font-bold-800\" style={{ color: '#FF0000' }}\r\n                                                                            icon={<MdDelete fill=\"#FF0000\" />}\r\n                                                                            onClick={() => removeVarient(variantIndex)}\r\n                                                                        >\r\n                                                                            DELETE\r\n                                                                        </Button>}\r\n                                                                </div>\r\n                                                            </>\r\n                                                        )\r\n                                                    })}\r\n                                                </>\r\n                                            )}\r\n                                        </FieldArray>\r\n                                    </div>\r\n                                </FormContainer>\r\n                                <Dialog isOpen={showContent}\r\n                                    onClose={() => setShowContent(false)}>\r\n                                    <div className='p-5'>\r\n                                        <img src={`${appConfig.apiPrefix}/media/uniqid/${content}`} alt=\"Content\" />\r\n                                        <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                                    </div>\r\n\r\n                                </Dialog>\r\n                            </Form>\r\n                        </>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemVariantDetails","import { AdaptableCard } from 'components/shared'\r\nimport {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport ItemUploadFiles from './ItemUploadFiles'\r\nimport { BsFillPlusCircleFill } from 'react-icons/bs'\r\nimport { MdDelete } from 'react-icons/md'\r\nimport React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport ItemVariantDetails from './ItemVariantDetails'\r\n\r\nconst ItemVariant = forwardRef((props, ref) => {\r\n\r\n    const [formData, setFormData] = useState({\r\n        SolutionBasicDetails: { values: null, validated: false },\r\n    })\r\n    const solutionBasicDetailsref = React.useRef()\r\n\r\n\r\n    async function handleSubmit() {\r\n\r\n        let validationErrors = false;\r\n\r\n        await solutionBasicDetailsref?.current?.validateForm().then(errors => {\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                solutionBasicDetailsref.current.setTouched(errors, true);\r\n                validationErrors = true;\r\n            }\r\n        });\r\n\r\n        if (!validationErrors) {\r\n            await solutionBasicDetailsref.current?.submitForm()\r\n        }\r\n    }\r\n\r\n    function handleChangeSolutionBasicDetails(data) {\r\n        setFormData({ ...formData, SolutionBasicDetails: data })\r\n    }\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            handleSubmitFromParent() {\r\n                handleSubmit()\r\n            },\r\n        }\r\n    })\r\n    return (\r\n        <>\r\n            <AdaptableCard className=\"h-full\" bodyClass=\"h-full\"  >\r\n                <h3 className=\"mx-4 mb-4 mt-2\">ITEM VARIANTS</h3>\r\n                <ItemVariantDetails\r\n                    handleSubmit={handleSubmit}\r\n                    onChange={handleChangeSolutionBasicDetails}\r\n                    refId={solutionBasicDetailsref}\r\n                    itemIntials={props.itemIntials}\r\n                    setItemInitials={props.setItemInitials}\r\n                    step={props.step} setStep={props.setStep}\r\n                    optionalValues={props.optionalValues}\r\n                />\r\n            </AdaptableCard>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default ItemVariant\r\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\r\nimport { Steps, Button } from 'components/ui'\r\nimport NewOperators from './NewItems'\r\nimport ItemDetails from './ItemDetails'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport MasterPermissionBox from './MasterPermissionBox'\r\nimport ItemTemplate from './ItemTemplate'\r\nimport ItemPreview from './ItemPreview'\r\nimport ItemVariant from './ItemVariants'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport { apiCreateItem } from 'services/ItemsService'\r\nimport { BiArrowBack } from 'react-icons/bi'\r\nimport { itemEditFieldsToState } from 'utils/campareandCopy'\r\nimport { setTemplatesForItems, getTemplateComponents } from '../store/dataSlice'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { cloneDeep } from 'lodash'\r\nimport ReactHtmlParser from 'html-react-parser'\r\nimport { OpenNotification } from 'views/Servicefile'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\nconst Controlled = () => {\r\n\r\n    const location = useLocation();\r\n    const rowForEdit = location.state?.data;\r\n    const mode = location.state?.mode ? location.state.mode : 'ADD'\r\n    const [step, setStep] = useState(0)\r\n    const [chooseTemplate, setChooseTemplate] = useState()\r\n    const [itemDetails, setDetails] = useState()\r\n    const [itemVarients, setItemVarients] = useState()\r\n    const [itemCreate, setItemCreate] = useState()\r\n\r\n\r\n    const { unq_id, role_name, enterAccount } = useSelector((state) => state.auth.user)\r\n\r\n    const childRef1 = useRef()\r\n    const childRef2 = useRef()\r\n    const childRef3 = useRef()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n\r\n        return () => {\r\n            dispatch(setTemplatesForItems([]))\r\n        };\r\n    }, []);\r\n\r\n    let intials = {\r\n        itemTemplate: {\r\n            productCat: '',\r\n            tempItemType: '',\r\n            selectedTemplate: ''\r\n        },\r\n        selectedTemplate: {\r\n            selectedTemplate: ''\r\n        },\r\n        itemBasicDetails: {\r\n            itemId: '',\r\n            itemTitle: \"\",\r\n            itemDesc: \"\",\r\n            taxData: [{\r\n                taxComponents: '',\r\n                taxAmount: '',\r\n                taxType : '',\r\n            }],\r\n            sopFileUrl: '',\r\n            uploadImageUrl: '',\r\n        },\r\n        itemBasicDetailsOther: {\r\n            itemColour: '',\r\n            itemFeatureDec: \"\"\r\n        },\r\n        varientDetails: {\r\n            itemTitle: \"\",\r\n            itemActualPrice: '',\r\n            itemId: '',\r\n            variantID: '',\r\n            variantDesc: '',\r\n            variantTitleTwo: '',\r\n            variantPriceTwo: '',\r\n            validity: '',\r\n            variantFeatureDesc: '',\r\n            variantTitleThree: '',\r\n            monthlyPrice: '',\r\n            shortDescription: '',\r\n            variantFeatureDescThird: ''\r\n        },\r\n        itemVarients: [{\r\n            item_var_title: \"\",\r\n            var_def_price: '',\r\n            item_var_desc: \"\",\r\n            img_url: \"\",\r\n            media_url: '',\r\n            tp_struc_info: \"\",\r\n            srt_desc: \"\",\r\n            validity: \"\"\r\n        }]\r\n\r\n    }\r\n    let breadCrumbList = [ {\r\n        name: 'Catalouge',\r\n    }, {\r\n        name: 'Item',\r\n        link: \"/catalouge-menu-item-view-2\"\r\n      }, {\r\n        name: `Create Item`,\r\n      }]\r\n     \r\n      if(mode===\"EDIT\"){\r\n        breadCrumbList = [\r\n            {\r\n                name: 'Catalouge',\r\n            },\r\n            {\r\n                name: 'Item',\r\n                link: '/catalouge-menu-item-view-2',\r\n            },\r\n            {\r\n                name: rowForEdit?.item_title,\r\n                link: '/catalouge-menu-item-view-2',\r\n                state:rowForEdit\r\n            },\r\n            {\r\n                name : \"Edit\"\r\n            },\r\n        ]\r\n    }\r\n    const [itemState, setItemState] = useState({})\r\n    const [itemIntials, setItemInitials] = useState(intials)\r\n\r\n    const templatesArr = useSelector((state) => state?.itemsCreateList?.data?.setTemplatesForItems)\r\n    const [optionalValues, setOptinalValues] = useState({})\r\n    const itemsTaxComponents = useSelector((state) => state?.itemsCreateList?.data?.setTemplateComponents)\r\n    const itemMemoTaxComponentOptiosn = useMemo(() => {\r\n        if (Array.isArray(itemsTaxComponents) && itemsTaxComponents.length > 0) {\r\n            return itemsTaxComponents?.map((vl) => {\r\n                return { ...vl, value: vl?.tax_comp_title, label: vl?.tax_comp_title }\r\n            })\r\n        }\r\n    }, [itemsTaxComponents?.length])\r\n    const dispatch = useDispatch()\r\n    const onChange = (nextStep) => {\r\n        if (nextStep < 0) {\r\n            setStep(0)\r\n        } else if (nextStep > 3) {\r\n            setStep(3)\r\n        } else {\r\n            setStep(nextStep)\r\n        }\r\n    }\r\n\r\n    const onNext = () => {\r\n        if (step == 0) {\r\n            childRef1.current?.handleSubmitFromParent()\r\n        }\r\n        if (step == 1) {\r\n            childRef2.current.handleSubmitFromParent();\r\n        }\r\n        if (step == 2) {\r\n            childRef3.current.handleSubmitFromParent();\r\n        }\r\n    }\r\n    const onPrevious = () => onChange(step - 1)\r\n\r\n    const submitApi = async () => {\r\n\r\n        if (itemIntials) {\r\n            let array1 = cloneDeep(itemMemoTaxComponentOptiosn)\r\n            let array2 = cloneDeep(itemIntials.itemBasicDetails.taxData)\r\n            const taxComponentsMap = new Map();\r\n            array2.forEach(item => taxComponentsMap.set(item.taxComponents, item.taxAmount));\r\n            array1 = array1.filter(item => taxComponentsMap.has(item.id));\r\n            array1.forEach(item => {\r\n                const taxAmount = taxComponentsMap.get(item.id);\r\n                if (taxAmount !== undefined) {\r\n                    item.tax_value = taxAmount;\r\n                    item.tax_id = item.id\r\n                    item.tax_comp_ded_type = item.tax_comp_ded_type == null ? \"Percentage\" : item.tax_comp_ded_type\r\n\r\n                }\r\n            });\r\n            const tpStrucInfo = itemIntials?.itemVarients?.map(obj => {\r\n                let a = JSON.stringify(obj.section)\r\n                obj.tp_struc_info = a;\r\n                delete obj.media_url;\r\n                return obj;\r\n            });\r\n           \r\n            const item_desc = ReactHtmlParser(itemIntials?.itemBasicDetails?.itemDesc)\r\n    \r\n            let bodyforApi = {\r\n                \"rel_prod_cat_id\": itemIntials?.itemTemplate?.productCat,\r\n                \"item_type\": itemIntials?.itemTemplate?.tempItemType,\r\n                \"item_title\": itemIntials?.itemBasicDetails?.itemTitle.trim(),\r\n                \"item_actual_price\": 0,\r\n                \"item_desc\": itemIntials?.itemBasicDetails?.itemDesc,\r\n                \"item_sop_url\": itemIntials?.itemBasicDetails?.sopFileUrl,\r\n                \"item_thumbnail\": itemIntials?.itemBasicDetails?.uploadImageUrl,\r\n                \"item_status\": \"ACTIVE\",\r\n                \"rel_api_config_id\": null,\r\n                \"time_period\": null,\r\n                \"acc_id\": unq_id,\r\n                \"acc_type\": role_name,\r\n                \"item_provider_id\": 12345,\r\n                \"dgl_cat_tp_info\": { \"id\": itemIntials?.itemTemplate?.selectedTemplate },\r\n                \"dgl_cat_item_vars\": tpStrucInfo,\r\n                \"dgl_cat_item_taxes\": array1\r\n            }\r\n            console.log(bodyforApi)\r\n            \r\n            const resp = await apiCreateItem(bodyforApi)\r\n\r\n            if (resp.status === \"success\") {\r\n                OpenNotification('success','Item Created Successfully')\r\n                navigate('/catalouge-menu-item-view-2')\r\n            }\r\n            if(resp.status === \"failed\"){\r\n                OpenNotification('danger',resp.message?.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getTemplateComponents(enterAccount))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (rowForEdit) {\r\n            const a = itemEditFieldsToState(intials, rowForEdit)\r\n            setItemState(a);\r\n        }\r\n    }, [])\r\n\r\n\r\n    const navigateItemTable = () => {\r\n        dispatch(setTemplatesForItems([]))\r\n        navigate('/catalouge-menu-item-view-2')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (templatesArr.length && itemIntials && itemIntials?.itemTemplate?.selectedTemplate) {\r\n            let a = templatesArr.find(e => e.id === itemIntials?.itemTemplate?.selectedTemplate)\r\n            if(a != undefined){\r\n                let selectedTemp = cloneDeep(a)\r\n                let t = JSON.parse(selectedTemp.tp_struc)\r\n                selectedTemp.tp_struc = t\r\n                // setSelectedTempArr(selectedTemp)\r\n                const initials = cloneDeep(itemIntials?.itemVarients) \r\n                const manipulateData = selectedTemp?.tp_struc?.map((vl) => {\r\n                    if (Array.isArray(vl?.sectionValues) && vl?.sectionValues?.length > 0) {\r\n                        vl.sectionValues = vl?.sectionValues?.map((sec) => {\r\n                            if ([\"DD\", \"CB\", \"RB\"].includes(sec?.formType)) {\r\n                                sec.options = [{ option: '' }]\r\n                            }\r\n                            return sec\r\n                        })\r\n                    }\r\n                    return vl\r\n                })\r\n                if(rowForEdit){\r\n                    initials[0].emptyTempSections = cloneDeep(manipulateData)\r\n                }\r\n                else{\r\n                    initials[0].section = cloneDeep(manipulateData)\r\n                    initials[0].emptyTempSections = cloneDeep(manipulateData)\r\n                }\r\n                setItemInitials((prev) => ({ ...prev, itemVarients: initials }))\r\n                setOptinalValues(initials)\r\n            }\r\n        }\r\n    }, [templatesArr, itemIntials?.itemTemplate?.selectedTemplate])\r\n    return (\r\n        <div>\r\n            <CustomBreadcrumbs  list={breadCrumbList} />\r\n            <Steps current={step}>\r\n                <Steps.Item title=\"CHOOSE TEMPLATE\" />\r\n                <Steps.Item title=\"ITEM DETAILS\" />\r\n                <Steps.Item title=\"ITEM VARIANTS\" />\r\n                <Steps.Item title=\"PREVIEW\" />\r\n            </Steps>\r\n\r\n            <div className=\"mt-6 rounded \">\r\n                {step == 0 &&\r\n                    <>\r\n                        <h3 className=\"mx-4 mb-4 mt-2\">Choose Template</h3>\r\n                        <ItemTemplate\r\n                            itemIntials={itemIntials} setItemInitials={setItemInitials}\r\n                            step={step} setStep={setStep}\r\n                            ref={childRef1} />\r\n                    </>}\r\n                {step == 1 &&\r\n                    <ItemDetails\r\n                        itemIntials={itemIntials} setItemInitials={setItemInitials}\r\n                        step={step} setStep={setStep}\r\n                        ref={childRef2} />}\r\n                {step == 2 &&\r\n                    <ItemVariant\r\n                        itemIntials={itemIntials} setItemInitials={setItemInitials}\r\n                        step={step} setStep={setStep}\r\n                        ref={childRef3}\r\n                        optionalValues={optionalValues} />}\r\n                {step == 3 && <ItemPreview itemIntials={itemIntials} step={step} setStep={setStep} />}\r\n            </div>\r\n            <div className=\"flex justify-between mt-4\">\r\n                <div>\r\n                    {step > 0 && <Button\r\n                        className=\"mx-2   \"\r\n                        style={{\r\n                            backgroundColor: \"#4D4D4D\", \r\n                            fontStyle: 'normal',\r\n                            fontSize: 500, fontSize: '18px',\r\n                            color: \"white\"\r\n                        }}\r\n                        onClick={onPrevious}\r\n                        type=\"button\"\r\n\r\n                    >\r\n                        Previous\r\n                    </Button>}\r\n                </div>\r\n\r\n                <div className='flex'>\r\n                    {step >= 0 &&\r\n                        <>\r\n                            <Button\r\n                                className=\"mx-2\"\r\n                                onClick={() => navigateItemTable()}\r\n                                variant=\"solid\"\r\n                                style={{ backgroundColor: \"#4D4D4D\" }}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </>}\r\n                    {step < 3 && (\r\n                        <Button\r\n                            onClick={onNext}\r\n                            disabled={step === 3}\r\n                            variant='solid'\r\n                        >\r\n                            {step === 3 ? 'Completed' : 'Next'}\r\n                        </Button>\r\n                    )}\r\n                    {step === 3 && (\r\n                        <Button onClick={submitApi} variant='solid'>\r\n                            {'Submit for approval'}\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controlled\r\n","import React from 'react'\r\nimport StepControlled from './StepControlled'\r\nimport { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport { Input, FormItem } from 'components/ui'\r\nimport { Field } from 'formik'\r\nimport { injectReducer } from 'store/index'\r\nimport reducer from '../store'\r\n\r\nexport default function NewItems() {\r\n  injectReducer('itemsCreateList', reducer)\r\n\r\n  return (\r\n    <>\r\n      {/* <div>Catalogue/Items/Create Item</div> */}\r\n      <div className='mt-5'>\r\n        <StepControlled />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { apiGetSalesItems, apiDeleteSalesItems, apiGetItemsTableData, apiGetProductCategoryData, apiGetTemplatesInItems } from 'services/ItemsService'\r\nimport { apiGetTemplates,apiGetItemsTemplateComponents } from 'services/ItemsService'\r\n\r\nexport const getItems = createAsyncThunk(\r\n    'salesProductList/data/getItems',\r\n    async (data) => {\r\n        const response = await apiGetSalesItems()\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const deleteItems = async (data) => {\r\n    const response = await apiDeleteSalesItems(data)\r\n    return response.data\r\n}\r\n\r\n// export const getProductCatgeory = async (data) => {\r\n//     const response = await apiProductCategoryItems(data)\r\n//     return response.data\r\n// }\r\n\r\nexport const getProductCatgeory = createAsyncThunk(\r\n    'itemsList/data/getProductCategory',\r\n    async (data) => {\r\n        const response = await apiGetProductCategoryData(data)\r\n        return response.data.response\r\n    }\r\n)\r\n\r\nexport const getItemsTemplates = createAsyncThunk(\r\n    'salesProductList/data/getAllTemplattes',\r\n    async (data) => {\r\n        const response = await apiGetTemplates(data)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const getItemsTableData = createAsyncThunk(\r\n    'itemsList/data/getItemTableData',\r\n    async (data) => {\r\n        const response = await apiGetItemsTableData(data)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const apiGetTemplateByItemType = createAsyncThunk(\r\n    'itemsList/data/getTemplatesInItem',\r\n    async (data) => {\r\n        const response = await apiGetTemplatesInItems(data)\r\n        return response?.data?.response\r\n    }\r\n)\r\n\r\nexport const getTemplateComponents = createAsyncThunk(\r\n    'itemsList/data/getTemplateComponents',\r\n    async (data) => {\r\n        const response = await apiGetItemsTemplateComponents(data)\r\n        return response?.data?.response || []\r\n    }\r\n)\r\n\r\nexport const initialTableData = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    query: '',\r\n    sort: {\r\n        Item: '',\r\n        key: '',\r\n    },\r\n}\r\n\r\nconst dataSlice = createSlice({\r\n    name: 'itemsList/data',\r\n    initialState: {\r\n        loading: false,\r\n        ItemList: [],\r\n        tableData: initialTableData,\r\n        itemsProductCatList: [],\r\n        itemTableData : [],\r\n        setTemplatesForItems:[],\r\n        setTemplateComponents:[]\r\n    },\r\n    reducers: {\r\n        setItemList: (state, action) => {\r\n            state.ItemList = action.payload\r\n        },\r\n        setTableData: (state, action) => {\r\n            state.tableData = action.payload\r\n        },\r\n        setItemTableData : (state,action) => {\r\n            state.itemTableData=action.payload;\r\n        },\r\n        setProdCatListToDrp : (state,action) => {\r\n            state.itemsProductCatList = action.payload\r\n        },\r\n        setTemplatesForItems : (state,action) => {\r\n            state.setTemplatesForItems = action.payload\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [getItems.fulfilled]: (state, action) => {\r\n            state.ItemList = action.payload\r\n            state.tableData.total = action?.payload?.total || 0\r\n            state.loading = false\r\n        },\r\n        [getItems.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getProductCatgeory.fulfilled]: (state, action) => {\r\n            state.itemsProductCatList = action?.payload?.map((product) => ({\r\n                value: product.id,\r\n                label: product.prod_cat_title,\r\n            }));\r\n            state.loading = false\r\n        },\r\n        [getProductCatgeory.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getItemsTemplates.fulfilled]: (state, action) => {\r\n            state.itemsAllTemplateList = action?.payload\r\n            state.loading = false\r\n        },\r\n        [getItemsTemplates.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getItemsTableData.fulfilled]: (state, action) => {\r\n            state.itemTableData = action?.payload\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getItemsTableData.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [apiGetTemplateByItemType.fulfilled]: (state, action) => {\r\n            state.setTemplatesForItems = action?.payload\r\n            state.loading = false\r\n        },\r\n        [apiGetTemplateByItemType.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getTemplateComponents.fulfilled]: (state,action) => {\r\n            state.setTemplateComponents = action?.payload\r\n            state.loading = false\r\n        },\r\n        [getTemplateComponents.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n    },\r\n})\r\n\r\nexport const { setItemList, setTableData,setItemTableData,setProdCatListToDrp,setTemplatesForItems} = dataSlice.actions\r\n\r\nexport default dataSlice.reducer\r\n","import { combineReducers } from '@reduxjs/toolkit'\r\nimport state from './stateSlice'\r\nimport data from './dataSlice'\r\n\r\nconst reducer = combineReducers({\r\n    state,\r\n    data,\r\n})\r\n\r\nexport default reducer\r\n","import { createSlice, current } from '@reduxjs/toolkit'\r\n\r\nconst stateSlice = createSlice({\r\n    name: 'itemsList/state',\r\n    initialState: {\r\n        selectedRows: [],\r\n        selectedRow: [],\r\n        deleteMode: '',\r\n    },\r\n    reducers: {\r\n        setSelectedRows: (state, action) => {\r\n            state.selectedRows = action.payload\r\n        },\r\n        setSelectedRow: (state, action) => {\r\n            state.selectedRow = action.payload\r\n        },\r\n        addRowItem: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (!currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: [...currentState.selectedRows, ...payload],\r\n                }\r\n            }\r\n        },\r\n        removeRowItem: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: currentState.selectedRows.filter(\r\n                        (id) => id !== payload\r\n                    ),\r\n                }\r\n            }\r\n        },\r\n        setDeleteMode: (state, action) => {\r\n            state.deleteMode = action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    setSelectedRows,\r\n    setSelectedRow,\r\n    addRowItem,\r\n    removeRowItem,\r\n    toggleDeleteConfirmation,\r\n    setDeleteMode,\r\n} = stateSlice.actions\r\n\r\nexport default stateSlice.reducer\r\n"],"names":["apiGetSalesOrders","params","ApiService","url","method","apiDeleteSalesOrders","data","apiSubmitEnterprise","resp","status","message","response","toString","apiUpdateEnterpriseAccStatus","id","apiUpdateEnterprise","apiGetParentAccountEnterprise","accMnoParentId","apiGetOperatorAccountEnterprise","enterAccount","apiGetCurrencyEnterprise","apiGetCustomerCatEnterprise","apiGetContractTypeEnterprise","apiGetUploadFileTypes","apiUploadFiles","file","loc1","loc2","formData","FormData","append","headers","apiGetSalesItems","apiGetSalesItemVariants","apiGetSalesItemVariantsByItemId","apiDeleteSalesItems","apiCreateItem","apiGetTemplates","apiUpdateItemAccStatus","apiGetItemsTableData","apiGetProductCategoryData","unq_id","apiGetTemplatesInItems","category","type","apiGetItemsTemplateComponents","apiSubmitProvider","apiUpdateProvider","apiUpdateProviderAccStatus","apiGetCurrencyProvider","apiGetParentAccountProvider","apiGetProductCatProvider","apiGetContractTypeProvider","apiGetPublicRole","acc_mno_parent_unq_id","Yup","shape","country","required","addressLine1","addressLine2","city","state","zipCode","sameCorrespondenceAddress","correspondenceAddress","when","is","then","otherwise","schema","tempItemTypeOptions","label","value","validateSchemaP","productCat","nullable","tempItemType","initialValues","selectedTemplate","onChange","refId","props","rowForEdit","useLocation","dispatch","useDispatch","itemsProductcat","useSelector","itemsCreateList","itemsProductCatList","templatesArr","setTemplatesForItems","auth","user","password","rememberMe","usernameOrEmail","tableData","pageIndex","pageSize","sort","query","total","sort_field","useState","itemIntials","itemTemplate","setCategory","itemType","setItemType","templates","setTemplates","useEffect","getProductCatgeory","a","apiGetTemplateByItemType","rel_prod_cat_id","item_type","onChangeDropdown","form","field","obj","bool","values","setFieldValue","name","innerRef","validationSchema","onSubmit","setSubmitting","dataToStore","selectedTemplateName","map","ele","tp_title","setItemInitials","setStep","step","OpenNotification","touched","errors","isSubmitting","className","bodyClass","divider","style","color","invalid","errorMessage","placeholder","options","filter","size","prefix","e","str","target","toLowerCase","temps","i","includes","push","onChangeSearch","icon","onClick","disabled","item","index","inde","onChangeTemplateRadio","checked","tp_desc","itemColour","itemFeatureDec","validationSchemaB","itemDesc","trim","max","itemTitle","taxData","of","taxComponents","taxAmount","itemsTaxComponents","setTemplateComponents","itemMemoTaxComponentOptiosn","useMemo","Array","isArray","length","vl","tax_comp_title","acc_user_id","user_type","beforeUpload","newFiles","files","ress","console","error","showContent","setShowContent","content","setContent","onClickView","fileInfo","itemBasicDetails","uploadImageUrl","autoComplete","component","Input","val","draggable","updatedFiles","uploadRes","filesDetails","fileUnqId","sopFileUrl","substring","CloseButton","pushSection","removeSection","remove","some","tax_comp_ded_type","setTaxDrpdown","taxType","isOpen","onClose","src","appConfig","alt","window","open","variant","ItemDetails","forwardRef","ref","SolutionBasicDetails","validated","SolutionBasicDetailsOther","setFormData","solutionBasicDetailsref","React","handleSubmit","validationErrors","current","validateForm","Object","keys","setTouched","submitForm","useImperativeHandle","handleSubmitFromParent","backgroundColor","Math","floor","random","ItemTemplate","onClickFile","GetDropdownLabel","dangerouslySetInnerHTML","__html","itemBasicDetailsOther","itemVarients","vari","item_var_title","var_def_price","item_var_desc","img_url","validationSchemaV","dynamicFields","cloneDeep","emptyTempSections","uploadTempField","arr","fileType","trueStatusKeys","join","flag","isUploadedImage","isTemplateUploadedFiles","isTemplateUploadedFilesArr","section","f","fi","sectionValues","g","gi","formType","isMandatery","every","fileUrl","padding","pushVarient","removeVarient","variantIndex","errMsg","validity","validate","passedValue","width","sectionIndex","sectionTitle","toUpperCase","valueIndex","title","charAt","slice","maxLength","parseInt","textAreaMaxLength","pushOption","removeOption","dropVal","dropIndex","minHeight","fill","media_url","tp_struc_info","srt_desc","dataPlanValidity","ItemVariant","optionalValues","location","mode","role_name","childRef1","useRef","childRef2","childRef3","navigate","useNavigate","intials","itemId","varientDetails","itemActualPrice","variantID","variantDesc","variantTitleTwo","variantPriceTwo","variantFeatureDesc","variantTitleThree","monthlyPrice","shortDescription","variantFeatureDescThird","breadCrumbList","link","item_title","setItemState","setOptinalValues","submitApi","array1","array2","taxComponentsMap","Map","forEach","set","has","get","undefined","tax_value","tax_id","tpStrucInfo","JSON","stringify","ReactHtmlParser","bodyforApi","log","getTemplateComponents","itemEditFieldsToState","find","selectedTemp","t","parse","tp_struc","initials","manipulateData","sec","option","prev","list","fontStyle","fontSize","nextStep","NewItems","injectReducer","reducer","StepControlled","getItems","createAsyncThunk","deleteItems","getItemsTemplates","getItemsTableData","dataSlice","createSlice","initialState","loading","ItemList","Item","key","itemTableData","reducers","setItemList","action","payload","setTableData","setItemTableData","setProdCatListToDrp","extraReducers","fulfilled","pending","product","prod_cat_title","itemsAllTemplateList","actions","combineReducers","stateSlice","selectedRows","selectedRow","deleteMode","setSelectedRows","setSelectedRow","addRowItem","currentState","removeRowItem","setDeleteMode","toggleDeleteConfirmation"],"sourceRoot":""}