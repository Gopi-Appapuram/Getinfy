{"version":3,"file":"static/js/6364.bde3b89b.chunk.js","mappings":"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","sources":["services/PasswordPolicy.js","utils/hooks/useTimeOutMessage.js","views/settings/passwordPolicy/components/AddPasswordPolicy.js","views/settings/passwordPolicy/store/dataSlice.js"],"sourcesContent":["import ApiService from './ApiService'\r\n\r\nexport async function apiGetSalesItems(data) {\r\n    return ApiService.fetchData({\r\n        url: '/partner/sales/dashboard',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetAllData(params) {\r\n    return ApiService.fetchData({\r\n        url: '/account/password-policies',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiUserRoles(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/roles/child-roles/drop-down//${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiCreatePassPolicy(data) {\r\n    try {\r\n        const resp = ApiService.fetchData({\r\n            url: `/account/password-policies`,\r\n            method: 'post',\r\n            data\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp,\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport async function apiUpdatePassPolicy(data) {\r\n    try {\r\n        const resp = ApiService.fetchData({\r\n            url: `/account/password-policies/${data.id}`,\r\n            method: 'put',\r\n            data\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp,\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\n\r\nexport async function apiUpdatePassPolicyAccStatus(id, status) {\r\n    return ApiService.fetchData({\r\n        url: `/account/password-policies?id=${id}&passStatus=${status}`,\r\n        method: 'patch',\r\n        \r\n    })\r\n}","import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import React, { useEffect, useRef, useState } from 'react'\r\n// import { useEffect, useRef, useState } from 'react'\r\nimport { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport { Input, FormItem, FormContainer, Select, Button, Alert } from 'components/ui'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { Link, useLocation, useNavigate, } from 'react-router-dom'\r\nimport {\r\n    Checkbox\r\n} from 'components/ui'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getUserRoles } from '../store/dataSlice'\r\nimport { apiCreatePassPolicy, apiUpdatePassPolicy } from 'services/PasswordPolicy'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { GetErrorMsg, OpenNotification } from 'views/Servicefile'\r\nimport { EditValuesToFieldsPassPolicy } from 'utils/campareandCopy'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\n\r\nconst initialValues = {\r\n    id: '',\r\n    policyName: \"\",\r\n    roleId: '',\r\n    description: \"\",\r\n    passwordExpDays: '',\r\n    minLength: '',\r\n    maxLength: '',\r\n    allowUpper: false,\r\n    allowLower: false,\r\n    allowNum: false,\r\n    allowSpel: false,\r\n    unSuccAttmts: '',\r\n    enforcedPassHist: ''\r\n}\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    roleId: Yup.string().required(\"Please select user role\").nullable(),\r\n    policyName: Yup.string().required(\"Please enter policy title\").nullable(),\r\n    // description: Yup.string().required(\"Please enter description\").nullable(),\r\n    passwordExpDays: Yup.number().typeError(\"That doesn't look like number\").required('Please enter password expiration'),\r\n    minLength: Yup.number().typeError(\"That doesn't look like number\").required(\"Please enter min. length of password\").nullable(),\r\n    maxLength: Yup.number().typeError(\"That doesn't look like number\").required(\"Please enter max. length of password\").nullable(),\r\n    unSuccAttmts: Yup.number().typeError(\"That doesn't look like number\").required(\"Please enter no. of unsuccessfull attempts\").nullable(),\r\n    //enforcedPassHist : Yup.string().required(\"Please enter Enforce password history\").nullable()\r\n})\r\n\r\nconst CharToAllowArr = [\r\n    { label: \"Numbers\", value: \"allowNum\" },\r\n    { label: \"Upper Case Letters\", value: \"allowUpper\" },\r\n    { label: \"Lower Case Letters\", value: \"allowLower\" },\r\n    { label: \"Special Characters\", value: \"allowSpel\" }\r\n]\r\n\r\nfunction AddPasswordPolicy() {\r\n\r\n    const dispatch = useDispatch()\r\n    const location = useLocation();\r\n    const navigate = useNavigate()\r\n\r\n    const { enterAccount, password, rememberMe, usernameOrEmail\r\n    } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n    const mode = location.state?.mode ? location.state.mode : \"ADD\";\r\n    const rowForEdit = location.state?.data;\r\n\r\n    const userRoles = useSelector((state) => state.passwordPolicy?.data?.usersList)\r\n\r\n    const [initState, setInitState] = useState(rowForEdit ? EditValuesToFieldsPassPolicy(initialValues, rowForEdit) : initialValues)\r\n    const [message, setMessage] = useTimeOutMessage()\r\n\r\n    const submitApi = async (values) => {\r\n        let payload = {\r\n            //\"id\": values.id,\r\n            \"policy_name\": values.policyName,\r\n            \"role_id\": values.roleId,\r\n            \"password_exp_days\": values.passwordExpDays,\r\n            \"pre_num_check\": \"\",\r\n            \"min_length\": values.minLength,\r\n            \"max_length\": values.maxLength,\r\n            \"allow_upper\": values.allowUpper,\r\n            \"allow_lower\": values.allowLower,\r\n            \"allow_num\": values.allowNum,\r\n            \"allow_spel\": values.allowSpel,\r\n            \"un_succ_attmts\": values.unSuccAttmts,\r\n            \"status\": \"ACTIVE\"\r\n        }\r\n        if (mode === \"ADD\") {\r\n            const resp = await apiCreatePassPolicy(payload)\r\n            if (resp.status === 'success') {\r\n                OpenNotification(\"success\", 'Created  successfully')\r\n                navigate('/settings-menu-password-policy')\r\n            } else if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n        } else if (mode === \"EDIT\") {\r\n            payload.id = rowForEdit.id\r\n            const resp = await apiUpdatePassPolicy(payload)\r\n            if (resp.status === 'success') {\r\n                OpenNotification(\"success\", 'Updated  successfully')\r\n                navigate('/settings-menu-password-policy')\r\n            } else if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getUserRoles({ enterAccount }))\r\n    }, [dispatch, enterAccount])\r\n\r\n    let breadCrumbList = [{\r\n        name: 'Settings',\r\n        // link: \"/home\"\r\n    }, {\r\n        name: 'Password Policy',\r\n        link: \"/settings-menu-password-policy\"\r\n    }, {\r\n        name: `Create Password Policy `,\r\n    }]\r\n\r\n    if (mode === \"EDIT\") {\r\n        breadCrumbList = [\r\n            {\r\n                name: 'Settings',\r\n                // link: '/home',\r\n            },\r\n            {\r\n                name: 'Password Policy',\r\n                link: '/settings-menu-password-policy',\r\n            },\r\n\r\n            {\r\n                name: \"Edit Password Policy \"\r\n            },\r\n        ]\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* <div>Settings/Password Policy/ {mode === \"EDIT\"? \"Edit\": \"Add\"} Password Policy </div> */}\r\n            <CustomBreadcrumbs list={breadCrumbList} />\r\n            <div className='mt-5'>\r\n                <h3>{mode === \"EDIT\" ? \"Edit\" : \"Add\"} Password Policy</h3>\r\n                {message &&\r\n                    <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                        {message}\r\n                    </Alert>}\r\n                    <Formik\r\n                        initialValues={initState}\r\n                        validationSchema={validationSchema}\r\n                        onSubmit={(values, { setSubmitting }) => {\r\n                            setSubmitting(true)\r\n                            submitApi(values)\r\n                        }}\r\n                    >\r\n                        {({ values, touched, errors, isSubmitting }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div style={{ backgroundColor: \"#F5F5F5\", padding: \"15px\", marginTop: \"10px\" }}>\r\n                                    <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider>\r\n                                        <FormContainer>\r\n                                            <div className=\"md:grid gap-4 mx-4 mt-3 pl-2\">\r\n                                                <div className='md:grid grid-cols-2 w-3/4'>\r\n                                                    <FormItem\r\n                                                        label={<p>User Role <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        className=' mr-6'\r\n                                                        invalid={errors.roleId && touched.roleId}\r\n                                                        errorMessage={errors.roleId}\r\n                                                    >\r\n                                                        <Field name=\"roleId\">\r\n                                                            {({ field, form }) => (\r\n                                                                <Select\r\n                                                                    placeholder=\"Select User Role\"\r\n                                                                    field={field}\r\n                                                                    form={form}\r\n                                                                    options={userRoles}\r\n                                                                    value={userRoles?.filter(v => values.roleId === v.value)}\r\n                                                                    onChange={(v) => form.setFieldValue(field.name, v.value)}\r\n                                                                />\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label={<p> Policy Title <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        className=' ml-6'\r\n                                                        invalid={errors.policyName && touched.policyName}\r\n                                                        errorMessage={errors.policyName}\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"policyName\"\r\n                                                            placeholder=\"Enter Password Policy\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                                <FormItem\r\n                                                    label={<p>Description</p>}\r\n                                                    className=''\r\n                                                    invalid={errors.description && touched.description}\r\n                                                    errorMessage={errors.description}\r\n                                                >\r\n                                                    <Field name=\"description\"  >\r\n                                                        {({ field, form }) => (\r\n                                                            <RichTextEditor\r\n                                                                value={field.value}\r\n                                                                placeholder=\"Enter Text\"\r\n                                                                className=\"w-3/4\"\r\n                                                                onChange={(val) => form.setFieldValue(field.name, val)}\r\n                                                            />\r\n                                                        )}\r\n                                                    </Field>\r\n                                                </FormItem>\r\n                                                <div className='md:grid grid-cols-2'>\r\n                                                    <FormItem\r\n                                                        label={<p> Password Expires in(days) <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        className=''\r\n                                                        invalid={errors.passwordExpDays && touched.passwordExpDays}\r\n                                                        errorMessage={errors.passwordExpDays}\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"passwordExpDays\"\r\n                                                            className=\"w-96\"\r\n                                                            placeholder=\"Enter No.of days\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                                <div className='md:grid grid-cols-2 w-3/4'>\r\n                                                    <FormItem\r\n                                                        label={<p>Minimum Length <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        className=' mr-6'\r\n                                                        invalid={errors.minLength && touched.minLength}\r\n                                                        errorMessage={errors.minLength}\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"minLength\"\r\n                                                            placeholder=\"Enter minimum no.of characters\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label={<p> Maximum Length <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        className=' ml-6'\r\n                                                        invalid={errors.maxLength && touched.maxLength}\r\n                                                        errorMessage={errors.maxLength}\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"maxLength\"\r\n                                                            placeholder=\"Enter maximum no.of characters\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                                <div className=\"pt-2 pb-4\">\r\n                                                    <label className=\" font-bold\">Characters to be allowed in password</label>\r\n                                                    <div className='flex gap-6 mt-4'>\r\n                                                        {CharToAllowArr.map((item, index) => {\r\n                                                            return (\r\n                                                                <div className='flex'>\r\n                                                                    <Field\r\n                                                                        type=\"checkbox\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        name={`${item.value}`}\r\n                                                                        component={Checkbox}\r\n                                                                    />\r\n                                                                    <div><label>{item.label}</label></div>\r\n                                                                </div>\r\n                                                            )\r\n                                                        })}\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='md:grid grid-cols-2 w-3/4'>\r\n                                                    <FormItem\r\n                                                        label={<p>No.of unsuccessfull attempts <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        className=' mr-6'\r\n                                                        invalid={errors.unSuccAttmts && touched.unSuccAttmts}\r\n                                                        errorMessage={errors.unSuccAttmts}\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"unSuccAttmts\"\r\n                                                            placeholder=\"Enter No.of unsuccessfull attempts\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label={<p> Enforce Password History</p>}\r\n                                                        className=' ml-6'\r\n                                                        invalid={errors.enforcedPassHist && touched.enforcedPassHist}\r\n                                                        errorMessage={errors.enforcedPassHist}\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"enforcedPassHist\"\r\n                                                            placeholder=\"Enter maximum no.of of unique password needed\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                            </div>\r\n                                        </FormContainer>\r\n                                    </AdaptableCard>\r\n                                    </div> \r\n                                    <div className=\"text-right pt-4 flex justify-end\" >\r\n                                        <Link\r\n                                            className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                            to=\"/settings-menu-password-policy\">\r\n                                            <Button type=\"button\"\r\n                                                className=\"mx-2\"\r\n                                                onClick={\"onPrevious\"}\r\n                                                variant=\"solid\"\r\n                                                style={{ backgroundColor: \"#4D4D4D\" }}\r\n                                            >\r\n                                                Cancel\r\n                                            </Button>\r\n                                        </Link>\r\n                                        <Button type=\"submit\" variant='solid' style={{ fontStyle: 'normal', fontSize: '18px', }} >\r\n                                            Submit for Approval\r\n                                        </Button>\r\n                                    </div>\r\n                                </Form>\r\n                            )\r\n                        }}\r\n                    </Formik>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddPasswordPolicy","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { apiGetAllData, apiGetSalesItems, apiUserRoles } from 'services/PasswordPolicy'\r\n\r\n\r\n\r\nexport const getItems = createAsyncThunk(\r\n    'passwordPolicy/data/getItems',\r\n    async (data) => {\r\n        const response = await apiGetSalesItems()\r\n        return response.data.response\r\n    }\r\n)\r\n\r\nexport const getAllData = createAsyncThunk(\r\n    \"passwordPolicy/data/getAllData\",\r\n    async (data) => {\r\n        const response = await apiGetAllData(data)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const getUserRoles = createAsyncThunk(\r\n    'passwordPolicy/data/getUserRoles',\r\n    async (data) => {\r\n        const response = await apiUserRoles(data)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const initialTableData = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    query: '',\r\n    sort: {\r\n        Item: '',\r\n        key: '',\r\n    },\r\n}\r\n\r\n\r\nconst dataSlice = createSlice({\r\n    name: 'passwordPolicy/data',\r\n    initialState: {\r\n        loading: false,\r\n        ItemList: [],\r\n        tableData: initialTableData,\r\n        getAllData : [],\r\n        usersList: [],\r\n    },\r\n    reducers: {\r\n        setItemList: (state, action) => {\r\n            state.ItemList = action.payload\r\n        },\r\n        setTableData: (state, action) => {\r\n            state.tableData = action.payload\r\n        },\r\n        setDocTypeData: (state, action) => {\r\n            state.DocTypeData = action.payload\r\n        },\r\n        setGetAllData: (state, action) => {\r\n            state.getAllData = action.payload\r\n        },\r\n        setUsersList: (state, action) => {\r\n            state.usersList = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [getItems.fulfilled]: (state, action) => {\r\n            state.ItemList = action.payload\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getItems.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getAllData.fulfilled]: (state, action) => {\r\n            state.getAllData = action.payload\r\n            state.loading = false\r\n        },\r\n        [getAllData.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getUserRoles.fulfilled]: (state, action) => {\r\n            state.usersList = action.payload.res?.map((parent) => ({\r\n                value: parent.id,\r\n                label: parent.name,\r\n            }))\r\n            state.loading = false\r\n        },\r\n        [getUserRoles.pending]: (state, action) => {\r\n            state.loading = true\r\n        },\r\n    },\r\n})\r\n\r\nexport const { setItemList,setTableData,setGetAllData,setUsersList} = dataSlice.actions\r\n\r\nexport default dataSlice.reducer\r\n"],"names":["apiGetSalesItems","data","ApiService","url","method","apiGetAllData","params","apiUserRoles","enterAccount","apiCreatePassPolicy","resp","status","message","response","toString","apiUpdatePassPolicy","id","apiUpdatePassPolicyAccStatus","interval","useState","setMessage","useEffect","timeout","setTimeout","clearTimeout","initialValues","policyName","roleId","description","passwordExpDays","minLength","maxLength","allowUpper","allowLower","allowNum","allowSpel","unSuccAttmts","enforcedPassHist","validationSchema","Yup","shape","required","nullable","typeError","CharToAllowArr","label","value","dispatch","useDispatch","location","useLocation","navigate","useNavigate","useSelector","state","auth","user","mode","password","rememberMe","usernameOrEmail","rowForEdit","userRoles","passwordPolicy","usersList","EditValuesToFieldsPassPolicy","initState","useTimeOutMessage","submitApi","values","payload","OpenNotification","GetErrorMsg","getUserRoles","breadCrumbList","name","link","list","className","type","showIcon","onSubmit","setSubmitting","touched","errors","isSubmitting","style","backgroundColor","padding","marginTop","bodyClass","divider","color","invalid","errorMessage","field","form","placeholder","options","filter","v","onChange","setFieldValue","autoComplete","component","Input","val","map","item","index","Checkbox","to","onClick","variant","fontStyle","fontSize","getItems","createAsyncThunk","getAllData","dataSlice","createSlice","initialState","loading","ItemList","tableData","total","pageIndex","pageSize","query","sort","Item","key","reducers","setItemList","action","setTableData","setDocTypeData","DocTypeData","setGetAllData","setUsersList","extraReducers","fulfilled","pending","res","parent","actions"],"sourceRoot":""}