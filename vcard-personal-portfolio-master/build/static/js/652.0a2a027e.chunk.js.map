{"version":3,"file":"static/js/652.0a2a027e.chunk.js","mappings":"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","sources":["services/ItemsService.js","services/RetailService.js","views/accounts/PendingApproval/store/dataSlice.js","views/settings/apiConfiguration/components/ApiConfigurationFilters.js","views/settings/apiConfiguration/components/ApiConfigurationTableSearch.js","views/settings/apiConfiguration/components/ApiConfiguarationTableTools.js","views/settings/apiConfiguration/store/dataSlice.js","views/settings/apiConfiguration/store/stateSlice.js","views/settings/apiConfiguration/components/ApiConfiguarationTable.js","views/settings/apiConfiguration/index.js"],"sourcesContent":["import ApiService from './ApiService'\r\n\r\nexport async function apiGetSalesDashboardData(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/dashboard',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProduct(params) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/product',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiPutSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products/update',\r\n        method: 'put',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiCreateSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products/create',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesItems(params) {\r\n    return ApiService.fetchData({\r\n        url: '/catalogs/dgl-cat-items-info',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesItemVariants(id) {\r\n    return ApiService.fetchData({\r\n        url: `catalogs/admin/items/${id}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesItemVariantsByItemId(id) {\r\n    return ApiService.fetchData({\r\n        url: `catalogs/admin/item/variant/${id}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\n\r\nexport async function apiDeleteSalesItems(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/orders/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesItemDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/orders-details',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiCreateItem(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/catalogs/dgl-cat-items-info',\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp,\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\n\r\nexport async function apiGetTemplates(params) {\r\n    return ApiService.fetchData({\r\n        url: '/catalogs/cat-tp-info',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiProductCategoryItems(params) {\r\n    return ApiService.fetchData({\r\n        url: '/catalogs/cat-items-info/items',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiGetProductCategory(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/prod-cats?page_no=1&page_size=4`,\r\n        method: 'get',\r\n        data\r\n    })\r\n}\r\n\r\nexport async function apiUpdateItemAccStatus(params,status) {\r\n    return ApiService.fetchData({\r\n        url: `/catalogs/dgl-cat-items-info/${params}/${status}`,\r\n        method: 'patch',\r\n    })\r\n}\r\n\r\nexport async function apiGetItemsTableData(params) {\r\n    return ApiService.fetchData({\r\n        url: `/catalogs/admin/items-pageable`,\r\n        method: 'get',\r\n        params\r\n    })\r\n}\r\n\r\nexport async function apiGetProductCategoryData(params) {\r\n    \r\n    return ApiService.fetchData({\r\n        url: `/account/prod-cats/unq-id/drop-down/${params.unq_id}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetTemplatesInItems(params) {\r\n    return ApiService.fetchData({\r\n        url: `/catalogs/admin/templates/${params.unq_id}/${params.category}/${params.type}?tpStatus=ACTIVE`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetItemsTemplateComponents(params) {\r\n    return ApiService.fetchData({\r\n        url: `/catalogs/admin/items-tax/${params}`,\r\n        method: 'get',\r\n    })\r\n}","import ApiService from './ApiService'\r\n\r\nexport async function apiGetSalesDashboardData(data) {\r\n    return ApiService.fetchData({\r\n        url: '/retails/sales/dashboard',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/retails/sales/products',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/retails/sales/products/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProduct(params) {\r\n    return ApiService.fetchData({\r\n        url: '/retails/sales/product',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiPutSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/retails/sales/products/update',\r\n        method: 'put',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiSubmitRetail(data) {\r\n    \r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: `/account/retail-customers`,\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        };\r\n\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data|| errors.toString(),\r\n        };\r\n    }\r\n\r\n}\r\n\r\nexport async function apiUpdateRetail(data) {\r\n    \r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: `/account/retail-customers`,\r\n            method: 'put',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        };\r\n\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data|| errors.toString(),\r\n        };\r\n    }\r\n   \r\n\r\n}\r\n\r\nexport async function apiUpdateOperator(data) {\r\n\r\n    return ApiService.fetchData({\r\n        url: '/account/acc-operators',\r\n        method: 'put',\r\n        data,\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\n// export async function apiGetSalesOrders(params) {\r\n//     return ApiService.fetchData({\r\n//         url: '/retails/sales/orders',\r\n//         method: 'get',\r\n//         params,\r\n//     })\r\n// }\r\n\r\nexport async function apiGetSalesOrders(params) {\r\n\r\n    return ApiService.fetchData({\r\n        //url: `/account/retail-customers?page_no=${params.pageIndex}&page_size=${params.pageSize}&sort_field=${params.sort.key}`,\r\n\r\n        url: `/account/retail-customers`,\r\n\r\n        method: 'get',\r\n        params\r\n\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesOrders(data) {\r\n    return ApiService.fetchData({\r\n        url: '/retails/sales/orders/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesOrderDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/retails/sales/orders-details',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiUpdateRetailAccStatus(id, status) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/retail-customers?id=${id}&cust_status=${status}`,\r\n        method: 'patch',\r\n\r\n    })\r\n}\r\n\r\nexport async function apiGetCurrency(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/currency/unq-id/drop-down/${data.enterAccount}`,\r\n        method: 'get',\r\n\r\n    })\r\n}\r\n\r\nexport async function apiGetParentAccount(data) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/acc-operators/dropdown/${data.enterAccount}`,\r\n        method: 'get',\r\n\r\n    })\r\n}\r\nexport async function apiGetCustomerCatRetail(data) {\r\n\r\n    return ApiService.fetchData({\r\n\r\n        url: `/account/cust-cats/unq-id-acc-type/drop-down/${data.enterAccount}/RetailCustomer`,\r\n        method: 'get',\r\n\r\n    })\r\n}\r\nexport async function apiGetUploadFileTypes(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/doc-pol?page_no=0&page_size=100&sort_feild=id&unq_id=${data}`,\r\n        method: 'get',\r\n    })\r\n}","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { apiGetSalesItems, apiDeleteSalesItems } from 'services/ItemsService'\r\n\r\nexport const getItems = createAsyncThunk(\r\n    'PendingArrovalsList/data/getItems',\r\n    async (data) => {\r\n        const response = []\r\n        return response\r\n    }\r\n)\r\n\r\nexport const deleteItems = async (data) => {\r\n    const response = await apiDeleteSalesItems(data)\r\n    return response.data\r\n}\r\n\r\nexport const initialTableData = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    query: '',\r\n    sort: {\r\n        Item: '',\r\n        key: '',\r\n    },\r\n}\r\n\r\nconst dataSlice = createSlice({\r\n    name: 'PendingArrovalsList/data',\r\n    initialState: {\r\n        loading: false,\r\n        ItemList: [],\r\n        tableData: initialTableData,\r\n    },\r\n    reducers: {\r\n        setItemList: (state, action) => {\r\n            state.ItemList = action.payload\r\n        },\r\n        setTableData: (state, action) => {\r\n            state.tableData = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [getItems.fulfilled]: (state, action) => {\r\n            state.ItemList = action.payload\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getItems.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n    },\r\n})\r\n\r\nexport const { setItemList, setTableData } = dataSlice.actions\r\n\r\nexport default dataSlice.reducer\r\n","import React from 'react'\r\nimport { HiOutlineFilter} from 'react-icons/hi'\r\nimport {\r\n   \r\n    Button,\r\n  \r\n} from 'components/ui'\r\n\r\n\r\n\r\nconst ApiConfigurationFilters = () => {\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                size=\"sm\"\r\n                className=\"block md:inline-block ltr:md:ml-2 rtl:md:mr-2 md:mb-0 mb-4\"\r\n                icon={<HiOutlineFilter />}\r\n                onClick={() => {}}\r\n            >\r\n                Filter\r\n            </Button>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ApiConfigurationFilters\r\n","import React, { useRef } from 'react'\r\nimport { Input } from 'components/ui'\r\n\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\nconst ApiConfiguarationTableSearch = () => {\r\n    // const dispatch = useDispatch()\r\n\r\n     const searchInput = useRef()\r\n     return (\r\n        <Input\r\n            ref={searchInput}\r\n            className=\"lg:w-52\"\r\n            size=\"sm\"\r\n            placeholder=\"Search\"\r\n            prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n            // onChange={onEdit}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ApiConfiguarationTableSearch\r\n","import React from 'react'\r\nimport { HiDownload } from 'react-icons/hi'\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport OperatorsFilter from './ApiConfigurationFilters'\r\nimport {\r\n    // Input,\r\n     Button,\r\n    \r\n} from 'components/ui'\r\nimport ApiConfigurationTableSearch from './ApiConfigurationTableSearch'\r\n//import NewOperators from './NewSolutions'\r\n\r\n\r\nconst ApiConfigurationTableTools = () => {\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center\">\r\n           <ApiConfigurationTableSearch/>\r\n            <OperatorsFilter />\r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n                target=\"_blank\"\r\n                download\r\n            >\r\n                <Button block size=\"sm\" icon={<HiDownload />}>\r\n                    Export\r\n                </Button>\r\n            </Link>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ApiConfigurationTableTools\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { apiGetSalesOrders, apiDeleteSalesOrders } from 'services/RetailService'\r\n\r\nexport const getOrders = createAsyncThunk(\r\n    'myaccountList/data/getOrders',\r\n    async (data) => {\r\n        \r\n        const response = await apiGetSalesOrders()\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const deleteOrders = async (data) => {\r\n    const response = await apiDeleteSalesOrders(data)\r\n    return response.data\r\n}\r\n\r\nexport const initialTableData = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    query: '',\r\n    sort: {\r\n        order: '',\r\n        key: '',\r\n    },\r\n}\r\n\r\nconst dataSlice = createSlice({\r\n    name: 'myaccountList/data',\r\n    initialState: {\r\n        loading: false,\r\n        accountList: [],\r\n        tableData: initialTableData,\r\n    },\r\n    reducers: {\r\n        setOrderList: (state, action) => {\r\n            state.accountList = action.payload\r\n        },\r\n        setTableData: (state, action) => {\r\n            state.tableData = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [getOrders.fulfilled]: (state, action) => {\r\n            state.accountList = action.payload\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getOrders.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n    },\r\n})\r\n\r\nexport const { setOrderList, setTableData } = dataSlice.actions\r\n\r\nexport default dataSlice.reducer\r\n","import { createSlice, current } from '@reduxjs/toolkit'\r\n\r\nconst stateSlice = createSlice({\r\n    name: 'myaccountList/state',\r\n    initialState: {\r\n        selectedRows: [],\r\n        selectedRow: [],\r\n        deleteMode: '',\r\n    },\r\n    reducers: {\r\n        setSelectedRows: (state, action) => {\r\n            state.selectedRows = action.payload\r\n        },\r\n        setSelectedRow: (state, action) => {\r\n            state.selectedRow = action.payload\r\n        },\r\n        addRowItem: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (!currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: [...currentState.selectedRows, ...payload],\r\n                }\r\n            }\r\n        },\r\n        removeRowItem: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: currentState.selectedRows.filter(\r\n                        (id) => id !== payload\r\n                    ),\r\n                }\r\n            }\r\n        },\r\n        setDeleteMode: (state, action) => {\r\n            state.deleteMode = action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    setSelectedRows,\r\n    setSelectedRow,\r\n    addRowItem,\r\n    removeRowItem,\r\n    toggleDeleteConfirmation,\r\n    setDeleteMode,\r\n} = stateSlice.actions\r\n\r\nexport default stateSlice.reducer\r\n","import React, { useEffect, useCallback, useMemo, useRef } from 'react'\r\nimport { Badge, Tooltip } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setTableData } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowItem,\r\n    removeRowItem,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport dayjs from 'dayjs'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { AiFillCopy } from \"react-icons/ai\"\r\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\r\nimport { getItems } from 'views/accounts/PendingApproval/store/dataSlice'\r\n\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Active',\r\n        dotClass: 'bg-black-500',\r\n        textClass: 'text-black-500',\r\n        backgroundColor: 'bg-[#F5F5F5]'\r\n    },\r\n    2: {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-black-500',\r\n        backgroundColor: 'bg-[#F0F7FF]'\r\n    },\r\n    1: { label: 'Inactive', dotClass: 'bg-red-500', textClass: 'text-red-500', backgroundColor: 'bg- #F5F5F5' },\r\n}\r\n\r\nconst ItemColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Item-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst ApiConfigurationTable = ({ actionPermissions }) => {\r\n\r\n    // const tableRef = useRef(null)\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    // const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n    //     (state) => state.prodCatList.data.tableData\r\n    // )\r\n    // const loading = useSelector((state) => state.prodCatList.data.loading)\r\n\r\n    // const data = useSelector((state) => state.prodCatList.data.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getItems())\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    // const tableData = useMemo(\r\n    //     () => ({ pageIndex, pageSize, sort, query, total }),\r\n    //     [pageIndex, pageSize, sort, query, total]\r\n    // )\r\n\r\n    const ActionColumn = ({ row }) => {\r\n        const dispatch = useDispatch()\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n\r\n        const onDelete = () => {\r\n            dispatch(setDeleteMode('single'))\r\n            dispatch(setSelectedRow([row.id]))\r\n        }\r\n\r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n        const disableIconStyle = { color: 'grey', pointerEvents: 'none' }\r\n        const { canAdd, canEdit, canView, canActivate, canClone, canApprove } =\r\n            actionPermissions\r\n\r\n\r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Edit\" >\r\n                    <span style={canEdit ? null : disableIconStyle} >\r\n                        <Link to=\"/settings-menu-update-api-configuration\" >  <MdModeEdit style={canEdit ? null : disableIconStyle}  className='text-blue-500' /></Link>\r\n                    </span>\r\n\r\n\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    const data = [\r\n        {\r\n            apiTitle: 'Configuration1',\r\n            modifiedBy: 'Admin ABC',\r\n            modifiedDate: \"21/6/23\",\r\n            description: \"Lorem ipsum dolor sit amet amet adipiscing vestibulum\"\r\n        },\r\n        {\r\n            apiTitle: 'Configuration1',\r\n            modifiedBy: 'Admin ABC',\r\n            modifiedDate: \"21/6/23\",\r\n            description: \"Lorem ipsum dolor sit amet amet adipiscing vestibulum\"\r\n        },\r\n        {\r\n            apiTitle: 'Configuration1',\r\n            modifiedBy: 'Admin ABC',\r\n            modifiedDate: \"21/6/23\",\r\n            description: \"Lorem ipsum dolor sit amet amet adipiscing vestibulum\"\r\n        },\r\n        {\r\n            apiTitle: 'Configuration1',\r\n            modifiedBy: 'Admin ABC',\r\n            modifiedDate: \"21/6/23\",\r\n            description: \"Lorem ipsum dolor sit amet amet adipiscing vestibulum\"\r\n        },\r\n        {\r\n            apiTitle: 'Configuration1',\r\n            modifiedBy: 'Admin ABC',\r\n            modifiedDate: \"21/6/23\",\r\n            description: \"Lorem ipsum dolor sit amet amet adipiscing vestibulum\"\r\n        },\r\n        {\r\n            apiTitle: 'Configuration1',\r\n            modifiedBy: 'Admin ABC',\r\n            modifiedDate: \"21/6/23\",\r\n            description: \"Lorem ipsum dolor sit amet amet adipiscing vestibulum\"\r\n        },\r\n        {\r\n            apiTitle: 'Configuration1',\r\n            modifiedBy: 'Admin ABC',\r\n            modifiedDate: \"21/6/23\",\r\n            description: \"Lorem ipsum dolor sit amet amet adipiscing vestibulum\"\r\n        },\r\n    ]\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Actions',\r\n                id: 'action',\r\n                cell: (props) => <ActionColumn row={props.row.original} />,\r\n            },\r\n            {\r\n                header: 'API Title',\r\n                accessorKey: 'apiTitle',\r\n            },\r\n            {\r\n                header: 'Modified By',\r\n                accessorKey: 'modifiedBy',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Modified Date',\r\n                accessorKey: 'modifiedDate',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Description',\r\n                accessorKey: 'description',\r\n\r\n\r\n            },\r\n\r\n            {\r\n                header: 'Status',\r\n                accessorKey: 'prefSettleType',\r\n                flex: 1,\r\n                cell: (props) => {\r\n\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n\r\n                            <span\r\n                                className={`flex ml-2 rtl:mr-2 capitalize font-semibold rounded-full border bg-gray-50 mt-4 px-2 py-1 ${ItemStatusColor[0].backgroundColor}`}\r\n                            >\r\n                                {ItemStatusColor[0].label === \"Active\" &&\r\n                                    <RiCheckboxCircleFill className='mt-1 mr-2 text-[#3B8C59]' />\r\n                                }\r\n\r\n                                {/* {ItemStatusColor[1].label === \"Inactive\" &&\r\n                                        <RiCloseCircleFill className='mt-1 mr-2 text-[#FF0000]' />}\r\n\r\n                                    {ItemStatusColor[2].label === \"Submitted\" &&\r\n                                        <BsPatchCheckFill className='mt-1 mr-2 text-blue-500'/>}  */}\r\n\r\n\r\n                                {ItemStatusColor[0].label}\r\n\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                },\r\n            },\r\n\r\n\r\n        ],\r\n        []\r\n    )\r\n\r\n    // const onPaginationChange = (page) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageIndex = page\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSelectChange = (value) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageSize = Number(value)\r\n    //     newTableData.pageIndex = 1\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSort = (sort) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.sort = sort\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n\r\n    return (\r\n        <DataTable\r\n            // ref={tableRef}\r\n            columns={columns}\r\n            data={data}\r\n            // loading={loading}\r\n            // pagingData={tableData}\r\n            // onPaginationChange={onPaginationChange}\r\n            // onSelectChange={onSelectChange}\r\n            // onSort={onSort} \r\n            // onCheckBoxChange={onRowSelect}\r\n            // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n            selectable\r\n        />\r\n    )\r\n}\r\n\r\nexport default ApiConfigurationTable\r\n","import React, { useState } from 'react'\r\n//import ApiConfigurationTable from './components/ApiConfiguarationTable'\r\nimport ApiConfiguarationTableTools from './components/ApiConfiguarationTableTools'\r\nimport ApiConfigurationTable from './components/ApiConfiguarationTable'\r\n\r\nimport { AdaptableCard } from 'components/shared'\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction APIConfiguration() {\r\n\r\n  const { permissionsList } = useSelector((state) => state.auth.user)\r\n  const [canAdd, setCanAdd] = useState(permissionsList.includes('SETAPICADD'))\r\n  const [canEdit, setCanEdit] = useState(permissionsList.includes('SETAPICEDI'))\r\n  const [canView, setCanView] = useState(permissionsList.includes('SETAPICVIE'))\r\n  const [canActivate, setCanActivate] = useState(permissionsList.includes('SETAPICDEA'))\r\n  const [canClone, setCanClone] = useState(permissionsList.includes('SETAPICCLO'))\r\n  const [canApprove, setCanApprove] = useState(permissionsList.includes('SETAPICAPP'))\r\n\r\n\r\n  const actionPermissions = {\r\n    canAdd,\r\n    canEdit,\r\n    canClone,\r\n    canView,\r\n    canActivate,\r\n    canApprove,\r\n  }\r\n  return (\r\n    <>\r\n      <div>Settings / API Configuration</div>\r\n      <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n        <div className=\"lg:flex items-center justify-between mb-4\">\r\n          <h3 className=\"mb-4 lg:mb-0 mt-3\">API Configuration</h3>\r\n          {/* <ProductCategoryTableTools/> */}\r\n          <ApiConfiguarationTableTools  />\r\n        </div>\r\n        <ApiConfigurationTable actionPermissions={actionPermissions}/>\r\n      </AdaptableCard>\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default APIConfiguration      "],"names":["apiGetSalesItems","params","ApiService","url","method","apiGetSalesItemVariants","id","apiGetSalesItemVariantsByItemId","apiDeleteSalesItems","data","apiCreateItem","resp","status","message","response","toString","apiGetTemplates","apiUpdateItemAccStatus","apiGetItemsTableData","apiGetProductCategoryData","unq_id","apiGetTemplatesInItems","category","type","apiGetItemsTemplateComponents","apiSubmitRetail","apiUpdateRetail","apiGetSalesOrders","apiUpdateRetailAccStatus","apiGetCurrency","enterAccount","apiGetParentAccount","apiGetCustomerCatRetail","apiGetUploadFileTypes","getItems","createAsyncThunk","dataSlice","createSlice","name","initialState","loading","ItemList","tableData","total","pageIndex","pageSize","query","sort","Item","key","reducers","setItemList","state","action","payload","setTableData","extraReducers","fulfilled","pending","actions","size","className","icon","onClick","searchInput","useRef","ref","placeholder","prefix","ApiConfigurationTableSearch","target","download","block","getOrders","accountList","order","setOrderList","stateSlice","selectedRows","selectedRow","deleteMode","setSelectedRows","setSelectedRow","addRowItem","currentState","current","includes","removeRowItem","filter","setDeleteMode","toggleDeleteConfirmation","ItemStatusColor","label","dotClass","textClass","backgroundColor","actionPermissions","ActionColumn","row","navigate","useDispatch","useThemeClass","textTheme","useNavigate","disableIconStyle","useCallback","color","pointerEvents","canEdit","canAdd","canView","canActivate","canClone","canApprove","title","style","to","columns","useMemo","header","cell","props","original","accessorKey","flex","apiTitle","modifiedBy","modifiedDate","description","selectable","permissionsList","useSelector","auth","user","useState","bodyClass","ApiConfiguarationTableTools"],"sourceRoot":""}