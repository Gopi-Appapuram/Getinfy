{"version":3,"file":"static/js/619.3cdbfead.chunk.js","mappings":"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","sources":["mock/data/timezones.js","utils/hooks/useTimeOutMessage.js","views/accounts/Providers/components/ProviderAccountInfo.js","views/accounts/Providers/components/ProviderContactInfo.js","views/accounts/Providers/components/ProviderAddressInfo.js","views/accounts/Providers/components/ProviderUploadFiles.js","views/accounts/Providers/components/ProviderSettlementInfo.js","views/accounts/Providers/components/ProviderDetails.js","views/accounts/Providers/components/ProvidersUserInfo.js","views/accounts/Providers/components/ProviderContractInfo.js","views/accounts/Providers/components/ProviderMasterPermissions.js","views/accounts/Providers/components/ProvidersMainUserInfo.js","views/accounts/Providers/components/ProviderPreview.js","views/accounts/Providers/components/StepControlled.js","views/accounts/Providers/components/NewProviders.js","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["export const timeZone = [\r\n    { id: 1, value: '(UTC-10:00) Hawaii' },\r\n    { id: 2, value: '(UTC-09:00) Alaska' },\r\n    { id: 3, value: '(UTC-08:00) Baja California' },\r\n    { id: 4, value: '(UTC-08:00) Pacific Time (US & Canada)' },\r\n    { id: 5, value: '(UTC-07:00) Arizona' },\r\n    { id: 6, value: '(UTC-07:00) Chihuahua, La Paz, Mazatlan' },\r\n    { id: 7, value: '(UTC-07:00) Mountain Time (US & Canada)' },\r\n    { id: 8, value: '(UTC-06:00) Central America' },\r\n    { id: 9, value: '(UTC-06:00) Central Time (US & Canada)' },\r\n    { id: 10, value: '(UTC-06:00) Guadalajara, Mexico City, Monterrey' },\r\n    { id: 11, value: '(UTC-06:00) Saskatchewan' },\r\n    { id: 12, value: '(UTC-05:00) Bogota, Lima, Quito, Rio Branco' },\r\n    { id: 13, value: '(UTC-05:00) Eastern Time (US & Canada)' },\r\n    { id: 14, value: '(UTC-05:00) Indiana (East)' },\r\n    { id: 15, value: '(UTC-04:30) Caracas' },\r\n    { id: 16, value: '(UTC-04:00) Asuncion' },\r\n    { id: 17, value: '(UTC-04:00) Atlantic Time (Canada)' },\r\n    { id: 18, value: '(UTC-04:00) Cuiaba' },\r\n    { id: 19, value: '(UTC-04:00) Georgetown, La Paz, Manaus, San Juan' },\r\n    { id: 20, value: '(UTC-04:00) Santiago' },\r\n    { id: 21, value: '(UTC-03:30) Newfoundland' },\r\n    { id: 22, value: '(UTC-03:00) Brasilia' },\r\n    { id: 23, value: '(UTC-03:00) Buenos Aires' },\r\n    { id: 24, value: '(UTC-03:00) Cayenne, Fortaleza' },\r\n    { id: 25, value: '(UTC-03:00) Greenland' },\r\n    { id: 26, value: '(UTC-03:00) Montevideo' },\r\n    { id: 27, value: '(UTC-03:00) Salvador' },\r\n    { id: 28, value: '(UTC-02:00) Coordinated Universal Time-02' },\r\n    { id: 29, value: '(UTC-01:00) Azores' },\r\n    { id: 30, value: '(UTC-01:00) Cape Verde Is.' },\r\n    { id: 31, value: '(UTC) Casablanca' },\r\n    { id: 32, value: '(UTC) Coordinated Universal Time' },\r\n    { id: 33, value: '(UTC) Dublin, Edinburgh, Lisbon, London' },\r\n    { id: 34, value: '(UTC) Monrovia, Reykjavik' },\r\n    {\r\n        id: 35,\r\n        value: '(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna',\r\n    },\r\n    {\r\n        id: 36,\r\n        value: '(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague',\r\n    },\r\n    { id: 37, value: '(UTC+01:00) Brussels, Copenhagen, Madrid, Paris' },\r\n    { id: 38, value: '(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb' },\r\n    { id: 39, value: '(UTC+01:00) West Central Africa' },\r\n    { id: 40, value: '(UTC+01:00) Windhoek' },\r\n    { id: 41, value: '(UTC+02:00) Amman' },\r\n    { id: 42, value: '(UTC+02:00) Athens, Bucharest' },\r\n    { id: 43, value: '(UTC+02:00) Beirut' },\r\n    { id: 44, value: '(UTC+02:00) Cairo' },\r\n    { id: 45, value: '(UTC+02:00) Damascus' },\r\n    { id: 46, value: '(UTC+02:00) E. Europe' },\r\n    { id: 47, value: '(UTC+02:00) Harare, Pretoria' },\r\n    {\r\n        id: 48,\r\n        value: '(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius',\r\n    },\r\n    { id: 49, value: '(UTC+02:00) Istanbul' },\r\n    { id: 50, value: '(UTC+02:00) Jerusalem' },\r\n    { id: 51, value: '(UTC+02:00) Kaliningrad (RTZ 1)' },\r\n    { id: 52, value: '(UTC+02:00) Tripoli' },\r\n    { id: 53, value: '(UTC+03:00) Baghdad' },\r\n    { id: 54, value: '(UTC+03:00) Kuwait, Riyadh' },\r\n    { id: 55, value: '(UTC+03:00) Minsk' },\r\n    { id: 56, value: '(UTC+03:00) Moscow, St. Petersburg, Volgograd (RTZ 2)' },\r\n    { id: 57, value: '(UTC+03:00) Nairobi' },\r\n    { id: 58, value: '(UTC+03:30) Tehran' },\r\n    { id: 59, value: '(UTC+04:00) Abu Dhabi, Muscat' },\r\n    { id: 60, value: '(UTC+04:00) Baku' },\r\n    { id: 61, value: '(UTC+04:00) Izhevsk, Samara (RTZ 3)' },\r\n    { id: 62, value: '(UTC+04:00) Port Louis' },\r\n    { id: 63, value: '(UTC+04:00) Tbilisi' },\r\n    { id: 64, value: '(UTC+04:00) Yerevan' },\r\n    { id: 65, value: '(UTC+04:30) Kabul' },\r\n    { id: 66, value: '(UTC+05:00) Ashgabat, Tashkent' },\r\n    { id: 67, value: '(UTC+05:00) Ekaterinburg (RTZ 4)' },\r\n    { id: 68, value: '(UTC+05:00) Islamabad, Karachi' },\r\n    { id: 69, value: '(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi' },\r\n    { id: 70, value: '(UTC+05:30) Sri Jayawardenepura' },\r\n    { id: 71, value: '(UTC+05:45) Kathmandu' },\r\n    { id: 72, value: '(UTC+06:00) Astana' },\r\n    { id: 73, value: '(UTC+06:00) Dhaka' },\r\n    { id: 74, value: '(UTC+06:00) Novosibirsk (RTZ 5)' },\r\n    { id: 75, value: '(UTC+06:30) Yangon (Rangoon)' },\r\n    { id: 76, value: '(UTC+07:00) Bangkok, Hanoi, Jakarta' },\r\n    { id: 77, value: '(UTC+07:00) Krasnoyarsk (RTZ 6)' },\r\n    { id: 78, value: '(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi' },\r\n    { id: 79, value: '(UTC+08:00) Irkutsk (RTZ 7)' },\r\n    { id: 80, value: '(UTC+08:00) Kuala Lumpur, Singapore' },\r\n    { id: 81, value: '(UTC+08:00) Perth' },\r\n    { id: 82, value: '(UTC+08:00) Taipei' },\r\n    { id: 83, value: '(UTC+08:00) Ulaanbaatar' },\r\n    { id: 84, value: '(UTC+09:00) Osaka, Sapporo, Tokyo' },\r\n    { id: 85, value: '(UTC+09:00) Seoul' },\r\n    { id: 86, value: '(UTC+09:00) Yakutsk (RTZ 8)' },\r\n    { id: 87, value: '(UTC+09:30) Adelaide' },\r\n    { id: 88, value: '(UTC+09:30) Darwin' },\r\n    { id: 89, value: '(UTC+10:00) Brisbane' },\r\n    { id: 90, value: '(UTC+10:00) Canberra, Melbourne, Sydney' },\r\n    { id: 91, value: '(UTC+10:00) Guam, Port Moresby' },\r\n    { id: 92, value: '(UTC+10:00) Hobart' },\r\n    { id: 93, value: '(UTC+10:00) Magadan' },\r\n    { id: 94, value: '(UTC+10:00) Vladivostok, Magadan (RTZ 9)' },\r\n    { id: 95, value: '(UTC+11:00) Chokurdakh (RTZ 10)' },\r\n    { id: 96, value: '(UTC+11:00) Solomon Is., New Caledonia' },\r\n    { id: 97, value: '(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky (RTZ 11)' },\r\n    { id: 98, value: '(UTC+12:00) Auckland, Wellington' },\r\n    { id: 99, value: '(UTC+12:00) Coordinated Universal Time+12' },\r\n    { id: 100, value: '(UTC+12:00) Fiji' },\r\n    { id: 101, value: '(UTC+12:00) Petropavlovsk-Kamchatsky - Old' },\r\n    { id: 102, value: \"(UTC+13:00) Nuku'alofa\" },\r\n    { id: 103, value: '(UTC+13:00) Samoa' },\r\n    { id: 104, value: '(UTC+14:00) Kiritimati Island' },\r\n]\r\n","import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Tooltip,\r\n    Dialog\r\n} from 'components/ui'\r\nimport { Field, Form, Formik, FieldArray } from 'formik'\r\nimport { BsFillPlusCircleFill } from 'react-icons/bs'\r\nimport { useSelector } from 'react-redux'\r\nimport * as Yup from 'yup'\r\nimport { timeZone } from '../../../../mock/data/timezones'\r\nimport { RiCloseCircleFill } from 'react-icons/ri'\r\nimport { useState } from 'react'\r\n\r\nexport const statusOptions = [\r\n    { label: 'Married', value: 'M' },\r\n    { label: 'Widowed', value: 'W' },\r\n    { label: 'Separated', value: 'S' },\r\n    { label: 'Divorced', value: 'D' },\r\n    { label: 'Single ', value: 'S' },\r\n]\r\n\r\nconst operator = [\r\n    { label: 'Airtel Telangana', value: 1 },\r\n    { label: 'Airtel Mumbai', value: 2 },\r\n    { label: 'Airtel Rajasthan ', value: 3 },\r\n]\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: 0 },\r\n    { label: 'Airtel Inc.', value: 1 },\r\n    { label: 'Airtel India', value: 2 },\r\n]\r\nconst language = [\r\n    { label: 'English', value: 1 },\r\n    { label: 'Spanish', value: 2 },\r\n    { label: 'Arabic', value: 3 },\r\n    { label: 'Portugese', value: 4 },\r\n\r\n]\r\n\r\nconst currency = [\r\n    { label: 'USD', value: 0 },\r\n    { label: 'EUR', value: 1 },\r\n    { label: 'CAD', value: 2 },\r\n    { label: 'KWD', value: 3 },\r\n    { label: 'INR', value: 4 },\r\n]\r\n\r\nconst timeZonea = [\r\n    { label: 'India (GMT+5:30)', value: 0 },\r\n    { label: 'USA (GMT-4)', value: 1 },\r\n    { label: 'Chicago (GMT-5)', value: 2 },\r\n    { label: 'Phoenix (GMT-7)', value: 3 },\r\n    { label: 'Los Angeles (GMT-7)', value: 4 },\r\n]\r\n\r\nconst productCategory = [\r\n    { label: 'Sensors', value: 0 },\r\n    { label: 'GPS Trackers', value: 1 },\r\n    { label: 'Smart security system', value: 2 },\r\n    { label: 'Smart mobiles', value: 3 },\r\n]\r\n\r\nconst orientationtype = [\r\n    { label: 'Right to left', value: 'RTL' },\r\n    { label: 'Left to right', value: 'LTR' },\r\n]\r\nconst provAccInitValues = {\r\n    providerId: '', // not in api\r\n    accName: '',\r\n    accType: '',\r\n    accCompName: '',\r\n    accIncorpDt: '',\r\n    accTaxId: '',\r\n    prodCategory: '',\r\n    accTimeZone: '',\r\n    accCurrency: '',\r\n    accLang: '',\r\n    accOrient: '',\r\n}\r\n\r\nconst provValidationSchema = Yup.object().shape({\r\n    //providerId : Yup.string().required('Please Enter Provider Id'),\r\n    accName: Yup.string().min(2, \"Title must be at least 2 characters\").max(100).required('Please enter a valid provider title').nullable(),\r\n    accType: Yup.string().required('Please select an operator from the list').nullable(),\r\n    accCompName: Yup.string().required('Please enter company name').min(2, \"Name must be at least 2 characters\").max(100).nullable(),\r\n    accIncorpDt: Yup.string().required('Please select Incorporation  date').nullable(),\r\n    accTaxId: Yup.string().min(1).max(50).required('Please enter tax id').nullable(),\r\n    prodCategory: Yup.string().required('Please select a product category from the list').nullable(),\r\n    accTimeZone: Yup.string().required('Please select time zone').nullable(),\r\n    accCurrency: Yup.string().required('Please select currency').nullable(),\r\n    accLang: Yup.string().required('Please select language').nullable(),\r\n    accOrient: Yup.string().required('Please select orientation').nullable(),\r\n})\r\n\r\nconst ProviderAccountInfo = ({ onChange, refId, ...props }) => {\r\n\r\n    const currencyList = useSelector((state) => state.providerList?.data?.currencyList)\r\n    const parentAccountList = useSelector((state) => state.providerList?.data?.parentAccountList)\r\n    const productCategoryList = useSelector((state) => state.providerList?.data?.productCatList)\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n\r\n\r\n\r\n    const timeZoneList = timeZone?.map((timezone) => ({\r\n        value: timezone.id,\r\n        label: timezone.value,\r\n    }))\r\n\r\n    const [dialogIsOpen, setIsOpen] = useState(false)\r\n    const [newLabel, setNewLabel] = useState('')\r\n    const openDialog = () => {\r\n        setIsOpen(true)\r\n    }\r\n\r\n    const onDialogClose = (e) => {\r\n        setIsOpen(false)\r\n    }\r\n    const onDialogOk = (push, values) => {\r\n        if (newLabel !== '') {\r\n            push({ field_title: newLabel, field_value: '' })\r\n            setNewLabel('')\r\n            setIsOpen(false)\r\n        }\r\n    }\r\n\r\n\r\n    // const {provAccInitValues,provValidationSchema,onSubmitting} = props\r\n    return (\r\n        <>\r\n            <h3 className=\"mx-4 mb-4 mt-2\">ACCOUNT INFO</h3>\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.provideIntialValues.accInfo}\r\n                validationSchema={provValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.providerState, ...values }\r\n\r\n                    props.setProviderState(updatedPayload)\r\n\r\n                    let dataToStore = props.provideIntialValues\r\n                    dataToStore.accInfo = values\r\n                    props.setProviderIntialValues(dataToStore)\r\n                }}\r\n            >\r\n                {({ errors, touched, handleSubmit, values }) => {\r\n                    return (\r\n                        <Form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        label={\r\n                                            <p>\r\n                                                Provider Title\r\n                                                <span style={{ color: 'red' }}>\r\n                                                    {'*'}\r\n                                                </span>\r\n                                            </p>\r\n                                        }\r\n                                        invalid={\r\n                                            errors.accName && touched.accName\r\n                                        }\r\n                                        errorMessage={errors.accName}\r\n                                    >\r\n                                        <Field\r\n                                            value={values.accName}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accName\"\r\n                                            placeholder=\"Enter provider title\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={\r\n                                            <p>\r\n                                                Operator\r\n                                                <span style={{ color: 'red' }}>\r\n                                                    {'*'}\r\n                                                </span>\r\n                                            </p>\r\n                                        }\r\n                                        invalid={\r\n                                            errors.accType && touched.accType\r\n                                        }\r\n                                        errorMessage={errors.accType}\r\n                                    >\r\n                                        <Field name=\"accType\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select an operator\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={parentAccountList}\r\n                                                    onChange={(operator) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            operator.value\r\n                                                        )\r\n                                                    }\r\n                                                    value={parentAccountList?.filter(\r\n                                                        (operator) =>\r\n                                                            operator.value ===\r\n                                                            values.accType\r\n                                                    )}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={\r\n                                            <p>\r\n                                                Company Name\r\n                                                <span style={{ color: 'red' }}>\r\n                                                    {'*'}\r\n                                                </span>\r\n                                            </p>\r\n                                        }\r\n                                        invalid={\r\n                                            errors.accCompName &&\r\n                                            touched.accCompName\r\n                                        }\r\n                                        errorMessage={errors.accCompName}\r\n                                    >\r\n                                        <Field\r\n                                            value={values.accCompName}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accCompName\"\r\n                                            placeholder=\"Enter Company Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={\r\n                                            <p>\r\n                                                Incorporation Date\r\n                                                <span style={{ color: 'red' }}>\r\n                                                    {'*'}\r\n                                                </span>\r\n                                            </p>\r\n                                        }\r\n                                        invalid={\r\n                                            errors.accIncorpDt &&\r\n                                            touched.accIncorpDt\r\n                                        }\r\n                                        errorMessage={errors.accIncorpDt}\r\n                                    >\r\n                                        <Field name=\"accIncorpDt\">\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    value={values.accIncorpDt}\r\n                                                    placeholder=\"Select Date\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    maxDate={new Date()}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={\r\n                                            <p>\r\n                                                Tax ID\r\n                                                <span style={{ color: 'red' }}>\r\n                                                    {'*'}\r\n                                                </span>\r\n                                            </p>\r\n                                        }\r\n                                        invalid={\r\n                                            errors.accTaxId && touched.accTaxId\r\n                                        }\r\n                                        errorMessage={errors.accTaxId}\r\n                                    >\r\n                                        <Field\r\n                                            value={values.accTaxId}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accTaxId\"\r\n                                            placeholder=\"Enter Tax ID\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={\r\n                                            <p>\r\n                                                Item Category\r\n                                                <span style={{ color: 'red' }}>\r\n                                                    {'*'}\r\n                                                </span>\r\n                                            </p>\r\n                                        }\r\n                                        invalid={\r\n                                            errors.prodCategory &&\r\n                                            touched.prodCategory\r\n                                        }\r\n                                        errorMessage={errors.prodCategory}\r\n                                    >\r\n                                        <Field name=\"prodCategory\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select product category\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={productCategoryList}\r\n                                                    onChange={(\r\n                                                        productCategory\r\n                                                    ) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            productCategory.value\r\n                                                        )\r\n                                                    }\r\n                                                    value={productCategoryList?.filter(\r\n                                                        (productCategory) =>\r\n                                                            productCategory.value ===\r\n                                                            values.prodCategory\r\n                                                    )}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={\r\n                                            <p>\r\n                                                Time zone\r\n                                                <span style={{ color: 'red' }}>\r\n                                                    {'*'}\r\n                                                </span>\r\n                                            </p>\r\n                                        }\r\n                                        invalid={\r\n                                            errors.accTimeZone &&\r\n                                            touched.accTimeZone\r\n                                        }\r\n                                        errorMessage={errors.accTimeZone}\r\n                                    >\r\n                                        <Field name=\"accTimeZone\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Time zone\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={timeZoneList}\r\n                                                    value={timeZoneList?.filter(\r\n                                                        (timeZone) =>\r\n                                                            timeZone.value ===\r\n                                                            values.accTimeZone\r\n                                                    )}\r\n                                                    onChange={(timeZone) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            timeZone.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={\r\n                                            <p>\r\n                                                Currency\r\n                                                <span style={{ color: 'red' }}>\r\n                                                    {'*'}\r\n                                                </span>\r\n                                            </p>\r\n                                        }\r\n                                        invalid={\r\n                                            errors.accCurrency &&\r\n                                            touched.accCurrency\r\n                                        }\r\n                                        errorMessage={errors.accCurrency}\r\n                                    >\r\n                                        <Field name=\"accCurrency\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Currency\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={currencyList}\r\n                                                    value={currencyList?.filter(\r\n                                                        (currency) =>\r\n                                                            currency.value ===\r\n                                                            values.accCurrency\r\n                                                    )}\r\n                                                    onChange={(currency) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            currency.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={\r\n                                            <p>\r\n                                                Language\r\n                                                <span style={{ color: 'red' }}>\r\n                                                    {'*'}\r\n                                                </span>\r\n                                            </p>\r\n                                        }\r\n                                        invalid={\r\n                                            errors.accLang && touched.accLang\r\n                                        }\r\n                                        errorMessage={errors.accLang}\r\n                                    >\r\n                                        <Field name=\"accLang\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Language\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={language}\r\n                                                    value={language.filter(\r\n                                                        (language) =>\r\n                                                            language.value ===\r\n                                                            values.accLang\r\n                                                    )}\r\n                                                    onChange={(language) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            language.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={\r\n                                            <p>\r\n                                                Display Orientation\r\n                                                <span style={{ color: 'red' }}>\r\n                                                    {'*'}\r\n                                                </span>\r\n                                            </p>\r\n                                        }\r\n                                        invalid={\r\n                                            errors.accOrient &&\r\n                                            touched.accOrient\r\n                                        }\r\n                                        errorMessage={errors.accOrient}\r\n                                    >\r\n                                        <Field name=\"accOrient\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Display Orientation\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={orientationtype}\r\n                                                    value={orientationtype.filter(\r\n                                                        (orientationtype) =>\r\n                                                            orientationtype.value ===\r\n                                                            values.accOrient\r\n                                                    )}\r\n                                                    onChange={(\r\n                                                        orientationtype\r\n                                                    ) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            orientationtype.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FieldArray name=\"fields\">\r\n                                        {({ push, remove }) => (\r\n                                            <>\r\n\r\n                                                {values.fields.map((item, index) => {\r\n                                                    return (\r\n\r\n\r\n                                                        <FormItem\r\n                                                            label={\r\n                                                                <div style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                                                                    <p style={{ marginRight: '20px' }}>{item.field_title}</p>\r\n                                                                    <Tooltip title={`Remove`}>\r\n                                                                        <span\r\n                                                                            className={`cursor-pointer  text-${'rose'}-800 hover:text-${'rose'}-800`}\r\n                                                                            onClick={() => remove(index)}\r\n                                                                            style={{ marginLeft: 'auto' }}\r\n                                                                        >\r\n                                                                            <RiCloseCircleFill />\r\n                                                                        </span>\r\n                                                                    </Tooltip>\r\n                                                                </div>\r\n\r\n                                                            }\r\n                                                        >\r\n\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                placeholder=\"\"\r\n                                                                component={Input}\r\n                                                                name={`fields[${index}].field_value`}\r\n                                                            />\r\n\r\n                                                        </FormItem>\r\n\r\n                                                    )\r\n                                                })}\r\n\r\n\r\n\r\n                                                <Dialog\r\n                                                    isOpen={dialogIsOpen}\r\n                                                    onClose={onDialogClose}\r\n                                                    onRequestClose={onDialogClose}\r\n                                                    shouldCloseOnOverlayClick={false}\r\n                                                    shouldCloseOnEsc={false}\r\n                                                >\r\n                                                    <FormItem\r\n                                                        label=\"Field Title\"\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"title\"\r\n                                                            placeholder=\"Please enter Custom Field Title\"\r\n                                                            component={Input}\r\n                                                            value={newLabel}\r\n                                                            onChange={(e) => setNewLabel(e.target.value)}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <div className=\"text-right mt-6\">\r\n                                                        <Button\r\n                                                            className=\"ltr:mr-2 rtl:ml-2\"\r\n                                                            variant=\"plain\"\r\n                                                            onClick={onDialogClose}\r\n                                                        >\r\n                                                            Cancel\r\n                                                        </Button>\r\n                                                        <Button variant=\"solid\" onClick={() => onDialogOk(push, values,)}>\r\n                                                            Okay\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </Dialog>\r\n\r\n                                            </>\r\n                                        )}\r\n                                    </FieldArray>\r\n                                </div>\r\n\r\n                            </FormContainer>\r\n                            <div className=\"mt-2\">\r\n                                <Button\r\n                                    type=\"button\"\r\n                                    variant=\"plain\"\r\n                                    className=\"font-bold\"\r\n                                    style={{ color: '#004D99' }}\r\n                                    onClick={() => openDialog()}\r\n                                    icon={<BsFillPlusCircleFill fill=\"#004D99\" className='' />}\r\n                                    disabled = {values.fields[values.fields.length - 1 ]?.field_value == '' ? true : false}\r\n                                >\r\n                                    ADD CUSTOM FIELD\r\n                                </Button>\r\n                            </div>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProviderAccountInfo\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Tooltip,\r\n    Dialog,\r\n} from 'components/ui'\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport * as Yup from \"yup\";\r\nimport { validateURL } from 'views/Servicefile';\r\nimport { BsFillPlusCircleFill } from 'react-icons/bs';\r\nimport { useState } from 'react';\r\nimport { RiCloseCircleFill } from 'react-icons/ri';\r\n\r\n\r\nconst provContactInitValues = {\r\n    accPrimeContFirstName: \"\",//not in api\r\n    accPrimeContLastName:\"\",\r\n    accEmailId: \"\",\r\n    accPrimCont: \"\",\r\n    accAltCont: \"\",\r\n    accFax: \"\",\r\n    accWebUrl: \"\",\r\n}\r\nconst initialValues = {\r\n    fields: [],\r\n  };\r\n\r\nconst provContactValidationSchema = Yup.object().shape({\r\n    accPrimeContFirstName: Yup.string().required('Please enter first name').min(2,\"Contact must be atleast 2 characters\").max(100).nullable(),\r\n    accPrimeContLastName: Yup.string().required('Please enter last name').min(2,\"Contact must be atleast 2 characters\").max(100).nullable(),\r\n    accEmailId: Yup.string().min(5,\"Email id must be at least 5 characters\").max(50).email('Please enter valid email id').required('Please enter email id').nullable(),\r\n    accPrimCont: Yup.string().min(5,\"Number must be atleast 5 characters\").max(20,\"Max 20 characters are allowed\")\r\n    .required(\"Please enter phone number\").nullable(),\r\n    //  accWebUrl: Yup\r\n    // .string().required(\"Please enter url\").url()\r\n\r\n    \r\n})\r\n\r\nconst ProviderContactInfo = ({ onChange, refId, ...props }) => {\r\n\r\n    const [dialogIsOpen, setIsOpen] = useState(false)\r\n    const [newLabel, setNewLabel] = useState('')\r\n    const openDialog = () => {\r\n        setIsOpen(true)\r\n    }\r\n\r\n    const onDialogClose = (e) => {\r\n        setIsOpen(false)\r\n    }\r\n    const onDialogOk = (push, values) => {\r\n        if (newLabel !== '') {\r\n            push({ field_title: newLabel, field_value: '' })\r\n            setNewLabel('')\r\n            setIsOpen(false)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">CONTACT INFO</h3>\r\n\r\n            <Formik innerRef={refId}\r\n                initialValues={props.provideIntialValues.ContactInfo}\r\n                validationSchema={provContactValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.providerState, ...values }\r\n\r\n                    props.setProviderState(updatedPayload)\r\n\r\n                    let dataToStore = props.provideIntialValues\r\n                    dataToStore.ContactInfo = values\r\n                    props.setProviderIntialValues(dataToStore)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        label={<p>First Name<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accPrimeContFirstName && touched.accPrimeContFirstName}\r\n                                        errorMessage={errors.accPrimeContFirstName}\r\n                                    >\r\n                                        <Field\r\n                                            values={values.accPrimeContFirstName}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accPrimeContFirstName\"\r\n                                            placeholder=\"Enter First Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem label={<p>Middle Name</p>}>\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accPrimeContMidName\"\r\n                                            placeholder=\"Enter Middle Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem label={<p>Last Name<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accPrimeContLastName && touched.accPrimeContLastName}\r\n                                        errorMessage={errors.accPrimeContLastName}\r\n                                    >\r\n                                        <Field\r\n                                            values={values.accPrimeContLastName}\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accPrimeContLastName\"\r\n                                            placeholder=\"Enter Last Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Email ID<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accEmailId && touched.accEmailId}\r\n                                        errorMessage={errors.accEmailId}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accEmailId\"\r\n                                            placeholder=\"Enter Email ID\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Phone Number<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accPrimCont && touched.accPrimCont}\r\n                                        errorMessage={errors.accPrimCont}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accPrimCont\"\r\n                                            placeholder=\"Enter Phone Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Alternate Phone Number\"\r\n                                        invalid={errors.accAltCont && touched.accAltCont}\r\n                                        errorMessage={errors.accAltCont}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accAltCont\"\r\n                                            placeholder=\"Enter Phone Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Fax Number\"\r\n                                        invalid={errors.accFax && touched.accFax}\r\n                                        errorMessage={errors.accFax}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accFax\"\r\n                                            placeholder=\"Enter Fax Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Website URL\"\r\n                                        invalid={errors.accWebUrl && touched.accWebUrl}\r\n                                        errorMessage={errors.accWebUrl}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"accWebUrl\"\r\n                                            placeholder=\"Enter Website URL\"\r\n                                            component={Input}\r\n                                            validate={validateURL}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FieldArray name=\"fields\">\r\n                                        {({ push, remove }) => (\r\n                                            <>\r\n\r\n                                                {values.fields.map((item, index) => {\r\n                                                    return (\r\n\r\n\r\n                                                        <FormItem\r\n                                                            label={\r\n                                                                <div style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                                                                    <p style={{ marginRight: '20px' }}>{item.field_title}</p>\r\n                                                                    <Tooltip title={`Remove`}>\r\n                                                                        <span\r\n                                                                            className={`cursor-pointer  text-${'rose'}-800 hover:text-${'rose'}-800`}\r\n                                                                            onClick={() => remove(index)}\r\n                                                                            style={{ marginLeft: 'auto' }}\r\n                                                                        >\r\n                                                                            <RiCloseCircleFill />\r\n                                                                        </span>\r\n                                                                    </Tooltip>\r\n                                                                </div>\r\n\r\n                                                            }\r\n                                                        >\r\n\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                placeholder=\"\"\r\n                                                                component={Input}\r\n                                                                name={`fields[${index}].field_value`}\r\n                                                            />\r\n\r\n                                                        </FormItem>\r\n\r\n                                                    )\r\n                                                })}\r\n\r\n\r\n\r\n                                                <Dialog\r\n                                                    isOpen={dialogIsOpen}\r\n                                                    onClose={onDialogClose}\r\n                                                    onRequestClose={onDialogClose}\r\n                                                    shouldCloseOnOverlayClick={false}\r\n                                                    shouldCloseOnEsc={false}\r\n                                                >\r\n                                                    <FormItem\r\n                                                        label=\"Field Title\"\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"title\"\r\n                                                            placeholder=\"Please enter Custom Field Title\"\r\n                                                            component={Input}\r\n                                                            value={newLabel}\r\n                                                            onChange={(e) => setNewLabel(e.target.value)}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <div className=\"text-right mt-6\">\r\n                                                        <Button\r\n                                                            className=\"ltr:mr-2 rtl:ml-2\"\r\n                                                            variant=\"plain\"\r\n                                                            onClick={onDialogClose}\r\n                                                        >\r\n                                                            Cancel\r\n                                                        </Button>\r\n                                                        <Button variant=\"solid\" onClick={() => onDialogOk(push, values,)}>\r\n                                                            Okay\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </Dialog>\r\n\r\n                                            </>\r\n                                        )}\r\n                                    </FieldArray>\r\n\r\n\r\n                                </div>\r\n\r\n                            </FormContainer>\r\n\r\n                            <div>\r\n                                <Button\r\n                                type='button'\r\n                                variant='plain'\r\n                                className=\"font-bold\"\r\n                                style={{ color: '#004D99'}}\r\n                                onClick={() => openDialog()}\r\n                                icon={<BsFillPlusCircleFill fill=\"#004D99\" className='' />}\r\n                                disabled = {values.fields[values.fields.length - 1 ]?.field_value == '' ? true : false}\r\n                                >\r\n                                    ADD CUSTOM FIELD\r\n                                </Button>\r\n                            </div>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProviderContactInfo\r\n","import React, { useCallback } from 'react'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport get from 'lodash/get'\r\nimport { countryList } from 'constants/countries.constant'\r\nimport * as Yup from 'yup'\r\n\r\nconst addressFields = {\r\n    accCountry: '',\r\n    accAddL1: '',\r\n    accAddL2: '',\r\n    accCity: '',\r\n    accState: '',\r\n    accZipcode: '',\r\n    // sameCorrespondenceAddress: true,\r\n    // correspondenceAddress: {\r\n    //     accCountry: '',\r\n    //     accAddL1: '',\r\n    //     accAddL2: '',\r\n    //     accCity: '',\r\n    //     accState: '',\r\n    //     accZipcode: '',\r\n    // },\r\n}\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    accCountry: Yup.string().required('Please enter country').min(3,\"Country must be at least 3 characters\").max(50).nullable(), \r\n    accAddL1: Yup.string().required('Please enter address').min(5,\"Address must be at least 5 characters\").max(255).nullable(),\r\n    // accAddL2: Yup.string(),\r\n    accCity: Yup.string().required('Please enter city').min(3,\"City must be at least 3 characters\").max(50).nullable(),\r\n    accState: Yup.string().required('Please enter state').min(3,\"State must be at least 3 characters\").max(50).nullable(),\r\n    //accZipcode: Yup.string().required('Please enter zip code'),\r\n    // sameCorrespondenceAddress: Yup.bool(),\r\n    // correspondenceAddress: Yup.object().when('sameCorrespondenceAddress', {\r\n    //     is: false,\r\n    //     then: Yup.object().shape({\r\n    //         accCountry: Yup.string().required('Please select accCountry'),\r\n    //         accAddL1: Yup.string().required('Please enter your address'),\r\n    //         accAddL2: Yup.string(),\r\n    //         accCity: Yup.string().required('Please enter your accCity'),\r\n    //         accState: Yup.string().required('Please enter your accState'),\r\n    //         accZipcode: Yup.string().required('Please enter zip code'),\r\n    //     }),\r\n    //     otherwise: (schema) => schema,\r\n    // }),\r\n})\r\n\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: '0' },\r\n    { label: 'Airtel Inc.', value: '1' },\r\n    { label: 'Airtel India', value: '2' },\r\n]\r\n\r\n\r\nconst ProviderAddressInfo = ({ onChange, refId, onNextChange, onBackChange, currentStepStatus, ...props }) => {\r\n\r\n    const onNext = (values, setSubmitting) => {\r\n        onNextChange?.(values, 'addressInformation', setSubmitting)\r\n    }\r\n\r\n    const onCheck = (value, field, form) => {\r\n        form.setFieldValue(field.name, value)\r\n    }\r\n\r\n    const onBack = () => {\r\n        onBackChange?.()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"mx-4 mb-4 mt-2\">ADDRESS</h3>\r\n            <Formik innerRef={refId}\r\n                initialValues={props.provideIntialValues.address}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.providerState, ...values }\r\n\r\n                    props.setProviderState(updatedPayload)\r\n\r\n                    let dataToStore = props.provideIntialValues\r\n                    dataToStore.address = values\r\n                    props.setProviderIntialValues(dataToStore)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, setFieldValue, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        label={<p>Address Line 1<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accAddL1 && touched.accAddL1}\r\n                                        errorMessage={errors.accAddL1}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name='accAddL1'\r\n                                            placeholder=\"Enter Address Line 1......\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n                                    <FormItem\r\n\r\n                                        label=\"Address Line 2\"\r\n                                    // invalid={errors.accAddL2 && touched.accAddL2}\r\n                                    // errorMessage={errors.accAddL2}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'accAddL2'}\r\n                                            placeholder=\"Enter Address Line 2......\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                </div>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                     label={<p>City<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accCity && touched.accCity}\r\n                                        errorMessage={errors.accCity}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'accCity'}\r\n                                            placeholder=\"City\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                      label={<p>State<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accState && touched.accState}\r\n                                        errorMessage={errors.accState}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'accState'}\r\n                                            placeholder=\"State\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                      label={<p>Country<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.accCountry && touched.accCountry}\r\n                                        errorMessage={errors.accCountry}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'accCountry'}\r\n                                            placeholder=\"Country\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Zip Code\"\r\n                                    //invalid={errors.accZipcode && touched.accZipcode}\r\n                                    //errorMessage={errors.accZipcode}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name={'accZipcode'}\r\n                                            placeholder=\"Zip Code\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                </div>\r\n\r\n                                {/* <AddressForm\r\n                                    countryName=\"accCountry\"\r\n                                    addressLine1Name=\"accAddL1\"\r\n                                    addressLine2Name=\"accAddL2\"\r\n                                    cityName=\"accCity\"\r\n                                    stateName=\"accState\"\r\n                                    zipCodeName=\"accZipcode\"\r\n                                    {...formProps}\r\n                                />\r\n                               */}\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProviderAddressInfo\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n    AdaptableCard,\r\n} from 'components/shared'\r\nimport {\r\n\r\n    FormItem,\r\n    FormContainer,\r\n    Button,\r\n    Upload,\r\n    Input,\r\n    Dialog\r\n} from 'components/ui'\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport { BsFillDashCircleFill, BsFillPlusCircleFill } from 'react-icons/bs'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { apiUploadFiles } from 'services/ProvidersService'\r\nimport appConfig from 'configs/app.config'\r\nimport CloseButton from 'components/ui/CloseButton'\r\nimport { OpenNotification } from 'views/Servicefile'\r\n\r\nconst saveFilesInAccounts = 1\r\nconst ProviderUploadFiles = ({ ...props }) => {\r\n    const { errors, touched, values, setFieldValue, provideIntialValues,mode } = props\r\n    const { enterAccount, acc_user_id } = useSelector((state) => state.auth.user)\r\n    const beforeUpload = async (newFiles, files) => {\r\n        const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInAccounts)\r\n        return ress\r\n    }\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n    const onClickView = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='py-5' style={{ backgroundColor: \"#f5f5f5\" }}>\r\n                <div className=\"md:grid grid-cols-2 gap-4\">\r\n                    <AdaptableCard>\r\n                        <h3 className=\" mb-4 mt-4 mx-4\">UPLOAD FILES</h3>\r\n                        <Formik\r\n                            innerRef={props.refId}\r\n                            initialValues={props.provideIntialValues}\r\n                            onSubmit={(values, actions) => {\r\n                                    let updatedPayload = { ...props.providerState, uploadFiles: values.uploadFiles }\r\n                                    props.setProviderState(updatedPayload)\r\n                                    let dataToStore = props.provideIntialValues\r\n                                    dataToStore.uploadFiles = values.uploadFiles\r\n                                    console.log(dataToStore)\r\n                                    props.setProviderIntialValues(dataToStore)\r\n                            }}\r\n                        >\r\n                            {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                                return (\r\n                                    <Form>\r\n                                        <FormContainer>\r\n                                            <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                                                {values?.uploadFiles?.map((fil, i) => {\r\n                                                    let doc_type;\r\n                                                    try {\r\n                                                        doc_type = fil?.doc_type\r\n                                                    } catch (error) {\r\n                                                        console.error('Invalid JSON:', fil.doc_type);\r\n                                                    }\r\n                                                    return <FormItem\r\n                                                        label={<p>{fil?.doc_name} <span style={{ color: \"red\" }}>{doc_type?.is_mandatory ? '*' : ''}</span></p>}\r\n                                                        key={i}\r\n                                                    >\r\n                                                        <div className=\"md:grid grid-cols-1 gap-3\">\r\n                                                            <AdaptableCard>\r\n                                                                <div>\r\n                                                                    <Upload\r\n                                                                        draggable\r\n                                                                        beforeUpload={beforeUpload}\r\n                                                                        onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                                            setFieldValue(`uploadFiles[${i}].file_url`, uploadRes?.data.fileUnqId);\r\n                                                                            setFieldValue(`uploadFiles[${i}].file_name`, uploadRes?.data.fileName);\r\n                                                                            setFieldValue(`uploadFiles[${i}].file_type`, \"upload\");\r\n                                                                            setFieldValue(`uploadFiles[${i}].doc_name`, fil?.doc_name);\r\n                                                                        }\r\n                                                                        }\r\n\r\n                                                                        className='border-gray-200 w-[500] h-[0]' style={{ minHeight: '3rem' }} name={`uploadFiles[${i}].file_url`}>\r\n                                                                        <div className=\"my-10 text-center\">\r\n                                                                            <p className=\"font-semibold\">\r\n                                                                                <span className=\"text-gray-400 dark:text-white\">\r\n                                                                                    {values.uploadFiles[i].file_url && 'File Uploaded' || \"No Files Uploaded\"} ,{' '}\r\n                                                                                </span>\r\n                                                                                <span className=\"text-blue-700\">\r\n                                                                                    Browse\r\n                                                                                </span>\r\n                                                                            </p>\r\n                                                                        </div>\r\n                                                                    </Upload>\r\n                                                                    {values.uploadFiles[i].file_url &&\r\n                                                                        <div className=\"upload-file cursor-pointer truncate\" >\r\n                                                                            <div className=\"upload-file-info\" onClick={() => onClickView(values.uploadFiles[i])}>\r\n                                                                                <h6 className=\"upload-file-name\">{values.uploadFiles[i].file_name.substring(0, 15)}</h6>\r\n                                                                            </div>\r\n\r\n                                                                            <CloseButton\r\n                                                                                className=\"upload-file-remove \"\r\n                                                                                onClick={() => {\r\n                                                                                    setFieldValue(`uploadFiles[${i}].file_url`, '');\r\n                                                                                    setFieldValue(`uploadFiles[${i}].file_name`, '');\r\n                                                                                    setFieldValue(`uploadFiles[${i}].file_type`, \"upload\");\r\n                                                                                    setFieldValue(`uploadFiles[${i}].doc_name`, fil?.doc_name);\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        </div>}\r\n                                                                </div>\r\n                                                            </AdaptableCard>\r\n                                                        </div>\r\n                                                    </FormItem>\r\n                                                })}\r\n                                            </div>\r\n\r\n                                        </FormContainer>\r\n                                    </Form>\r\n                                )\r\n                            }}\r\n                        </Formik>\r\n                    </AdaptableCard>\r\n                    <AdaptableCard>\r\n                        <h3 className=\" mb-4 mt-4 mx-4\">ADDITIONAL FILES</h3>\r\n                        <Formik innerRef={props.refIdAdd}\r\n                            initialValues={props.provideIntialValues}\r\n                            onSubmit={(values, { setSubmitting }) => {\r\n                                setSubmitting(true)\r\n                                 let isUploaded = props.provideIntialValues.uploadFiles?.filter(e => e.doc_type.is_mandatory === true).every(e => e.file_name !== \"\")\r\n                                 if(isUploaded){\r\n                                let updatedPayload = { ...props.providerState, additionalFiles: values.additionalFiles }\r\n                                props.setProviderState(updatedPayload)\r\n                                let dataToStore = props.provideIntialValues\r\n                                dataToStore.additionalFiles = values.additionalFiles\r\n                                props.setProviderIntialValues(dataToStore)\r\n                                if(mode == \"EDIT\"){\r\n                                    props.setStep(props.step + 2)\r\n                                }else{\r\n                                    props.setStep(props.step + 1)\r\n                                }}\r\n                                else{\r\n                                    OpenNotification('warning', 'Please upload the required documents')\r\n                                }\r\n                            }}\r\n                        >\r\n                            {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                                return (\r\n                                    <Form>\r\n                                        <FieldArray name=\"additionalFiles\">\r\n                                            {({ push, remove }) => (\r\n                                                <>\r\n                                                    {values?.additionalFiles && values?.additionalFiles.map((file, index) => (\r\n                                                        <>\r\n                                                            <div className=\"md:grid grid-cols-2 gap-2 mx-4 my-1\" key={index}>\r\n                                                                <div>\r\n                                                                    <Field\r\n                                                                        type=\"text\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        name={`additionalFiles[${index}].doc_name`}\r\n                                                                        placeholder=\"Enter Title\"\r\n                                                                        component={Input}\r\n                                                                        // className=\"w-64\"\r\n                                                                    />\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                    <Upload\r\n                                                                        draggable\r\n                                                                        className=\"border-gray-200 w-[500] h-[0] px-6\"\r\n                                                                        style={{ minHeight: \"3rem\" }}\r\n                                                                        beforeUpload={beforeUpload}\r\n                                                                        onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                                            setFieldValue(`additionalFiles[${index}].file_url`, uploadRes?.data.fileUnqId);\r\n                                                                            setFieldValue(`additionalFiles[${index}].file_name`, uploadRes?.data.fileName);\r\n                                                                            setFieldValue(`additionalFiles[${index}].file_type`, \"additional\");\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <div className=\"my-10 text-center\">\r\n                                                                            <p className=\"font-semibold\">\r\n                                                                                <span className=\"text-gray-400 dark:text-white\">\r\n                                                                                    {values.additionalFiles[index].file_url && 'File Uploaded' || \"No Files Uploaded\"} ,{' '}\r\n                                                                                </span>\r\n                                                                                <span className=\"text-blue-700\">Browse</span>\r\n                                                                            </p>\r\n                                                                        </div>\r\n                                                                    </Upload>\r\n                                                                    {values.additionalFiles[index].file_url &&\r\n                                                                        <div className=\"upload-file truncate\" >\r\n                                                                            <div className=\"upload-file-info\" onClick={() => onClickView(values.additionalFiles[index])}>\r\n                                                                                <h6 className=\"upload-file-name\">{values.additionalFiles[index].file_name.substring(0, 15)}</h6>\r\n                                                                            </div>\r\n                                                                            <CloseButton\r\n                                                                                className=\"upload-file-remove \"\r\n                                                                                onClick={() => {\r\n                                                                                    setFieldValue(`additionalFiles[${index}].file_url`, '');\r\n                                                                                    setFieldValue(`additionalFiles[${index}].file_name`, '');\r\n                                                                                    setFieldValue(`additionalFiles[${index}].file_type`, \"\");\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        </div>}\r\n\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"grid grid-cols-2\">\r\n                                                                <Button\r\n                                                                    variant=\"plain\"\r\n                                                                    type=\"button\"\r\n                                                                    className=\"font-bold m-2\"\r\n                                                                    style={{ color: \"#004D99\" }}\r\n                                                                    icon={<BsFillPlusCircleFill fill=\"#004D99\" />}\r\n                                                                    onClick={() => push({ file_name: \"\", file_url: \"\", file_type: \"\", })}\r\n                                                                >\r\n                                                                    ADD FILE\r\n                                                                </Button>\r\n                                                                {values?.additionalFiles.length > 1 &&\r\n                                                                    <Button\r\n                                                                        variant=\"plain\"\r\n                                                                        type=\"button\"\r\n                                                                        className=\"font-bold m-2\"\r\n                                                                        style={{ color: \"#FF0000\" }}\r\n                                                                        //  disabled={index === 0 ? true : false}\r\n\r\n                                                                        icon={<BsFillDashCircleFill fill=\"#FF0000\" />}\r\n                                                                        onClick={() => remove(index)}\r\n                                                                    >\r\n                                                                        DELETE FILE\r\n                                                                    </Button>\r\n                                                                  }\r\n                                                            </div>\r\n                                                        </>\r\n                                                    ))}\r\n                                                    <Dialog isOpen={showContent}\r\n                                                        onClose={() => setShowContent(false)}>\r\n                                                        <div className='p-5'>\r\n                                                            <img src={`${appConfig.apiPrefix}/media/uniqid/${content?.file_url}`} alt=\"Content\" />\r\n                                                            <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content?.file_url}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                                                        </div>\r\n\r\n                                                    </Dialog>\r\n                                                </>\r\n                                            )}\r\n                                        </FieldArray>\r\n                                    </Form>\r\n                                )\r\n                            }}\r\n                        </Formik>\r\n                    </AdaptableCard>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default ProviderUploadFiles\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Checkbox,\r\n    Dialog\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { Upload } from 'components/ui'\r\nimport * as Yup from 'yup'\r\nimport { apiUploadFiles } from 'services/ProvidersService'\r\nimport { OpenNotification } from 'views/Servicefile'\r\nimport { useSelector } from 'react-redux'\r\nimport { useEffect, useState } from 'react'\r\nimport CloseButton from 'components/ui/CloseButton'\r\nimport appConfig from 'configs/app.config'\r\n\r\nconst onCheck = (value, field, form) => {\r\n    form.setFieldValue(field.name, value)\r\n}\r\n\r\n\r\nconst provSettlementInitValues = {\r\n    prefSettleType: \"\",\r\n    billCycle: \"\",\r\n    billDate: \"\",\r\n    billDueTenor: \"\",\r\n    bankAccNum: \"\",\r\n    bankName: \"\",\r\n    bankBranchName: \"\",\r\n    ifscCode: \"\",\r\n    micrCode: \"\",\r\n}\r\n\r\nconst provSettlementValidationSchema = Yup.object().shape({\r\n    billCycle: Yup.string().required('Please select a settlement cycle from the list').nullable(),\r\n    // billDate: Yup.string().required('Please select a settlement date').nullable(),\r\n    billDueTenor: Yup.string().min(1,\"Offset days must me 1 characters\").max(2,'Max 2 characters allowed').required('Enter a valid number of offset days').nullable(),\r\n    prefSettleType:Yup.string().required(\"Please select a preferred settlement type from the list\").nullable(),\r\n    ifscCode : Yup.string().min(3,\"mini. 3 characters required\").max(20,\"max. 20 characters allowed\").required(\"Please enter IFSC Code\"),\r\n    bankName : Yup.string().min(3,\"mini. 3 characters required\").max(100,\"max. 100 characters allowed\").required(\"Please enter Bank Name\"),\r\n    bankAccNum : Yup.string().min(1,\"mini. 1 characters required\").max(20,\"max. 20 characters allowed\").required(\"Please enter Bank Account no.\"),\r\n    bankBranchName : Yup.string().min(3,\"mini. 3 characters required\").max(100,\"max. 100 characters allowed\").required(\"Please enter Bank Branch Name\"),\r\n    micrCode : Yup.string().min(3,\"mini. 3 characters required\").max(20,\"max. 20 characters allowed\").required(\"Please enter MICR Code\"),\r\n})\r\n\r\nconst settlementType = [\r\n    { label: 'Automatic', value: 'AUTOMATIC' },\r\n    { label: 'Manual', value: 'MANUAL' },\r\n  ];\r\n\r\n  const settelementCycle = [\r\n    { label: 'Daily', value: 'DAILY' },\r\n    { label: 'Weekly', value: 'WEEKLY' },\r\n    { label: 'Monthly', value: 'MONTHLY' },\r\n    { label: 'Quarterly', value: 'QUARTERLY' },\r\n    { label: 'Half-Yearly', value: 'HALFYEARLY' },\r\n    { label: 'Yearly', value: 'YEARLY' },\r\n  ];\r\n\r\n  const settelementWeekOpt = [\r\n    {label:'Sunday',value:\"sunday\"},\r\n    {label:'Monday',value:\"monday\"},\r\n    {label:'Tuesday',value:\"tuesday\"},\r\n    {label:'Wednesday',value:\"wednesday\"},\r\n    {label:'Thursday',value:\"thursday\"},\r\n    {label:'Friday',value:\"friday\"},\r\n    {label:'Saturday',value:\"saturday\"},\r\n  ]\r\n\r\n  const monthOptions = [\r\n    {label : \"1\",value : \"1\"},{label : \"2\",value : \"2\"},\r\n    {label : \"3\",value : \"3\"},{label : \"4\",value : \"4\"},\r\n    {label : \"5\",value : \"5\"},{label : \"6\",value : \"6\"},\r\n    {label : \"7\",value : \"7\"},{label : \"8\",value : \"8\"},\r\n    {label : \"9\",value : \"9\"},{label : \"10\",value : \"10\"},\r\n    {label : \"11\",value : \"11\"},{label : \"12\",value : \"12\"},\r\n    {label : \"13\",value : \"13\"},{label : \"14\",value : \"14\"},\r\n    {label : \"15\",value : \"15\"},{label : \"16\",value : \"16\"},\r\n    {label : \"17\",value : \"17\"},{label : \"18\",value : \"18\"},\r\n    {label : \"19\",value : \"19\"},{label : \"20\",value : \"20\"},\r\n    {label : \"21\",value : \"21\"},{label : \"22\",value : \"22\"},\r\n    {label : \"23\",value : \"23\"},{label : \"24\",value : \"24\"},\r\n    {label : \"25\",value : \"25\"},{label : \"26\",value : \"26\"},\r\n    {label : \"27\",value : \"27\"},{label : \"28\",value : \"28\"},\r\n  ]\r\n\r\n  const settelementMonthOpt = [\r\n    {label:'January',value:\"january\"},\r\n    {label:'February',value:\"february\"},\r\n    {label:'March',value:\"march\"},\r\n    {label:'April',value:\"april\"},\r\n    {label:'May',value:\"may\"},\r\n    {label:'June',value:\"june\"},\r\n    {label:'July',value:\"july\"},\r\n    {label:'August',value:\"august\"},\r\n    {label:'September',value:\"september\"},\r\n    {label:'October',value:\"october\"},\r\n    {label:'November',value:\"november\"},\r\n    {label:'December',value:\"december\"}\r\n  ]\r\n\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: 0 },\r\n    { label: 'Airtel Inc.', value: 1 },\r\n    { label: 'Airtel India', value: 2 },\r\n]\r\n\r\nconst saveFilesInProvSettlement = 1\r\nconst ProviderSettlementInfo = ({ onChange, refId, ...props }) => {\r\n\r\n    const { enterAccount, acc_user_id, rememberMe, usernameOrEmail } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n\r\n    const beforeUpload = async (newFiles, files) => {\r\n        const file = newFiles[0];\r\n        const allowedTypes = ['image/jpeg', 'image/png'];\r\n    \r\n        if (!allowedTypes.includes(file.type)) {\r\n            OpenNotification('warning', 'JPG/PNG files are allowed only!')\r\n          return false;\r\n        } \r\n        try { \r\n            const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInProvSettlement)\r\n            return ress\r\n        } catch (error) {\r\n          console.error('Error during file upload:', error);\r\n          return false;\r\n        }\r\n    }\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n\r\n    const onClickView = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n\r\n    return (\r\n        <>  \r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">SETTLEMENT INFO</h3>\r\n\r\n            <Formik innerRef={refId}\r\n                initialValues={props.provideIntialValues.settlementInfo}\r\n                validationSchema={provSettlementValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.providerState, ...values }\r\n                    props.setProviderState(updatedPayload)\r\n                    let dataToStore = props.provideIntialValues\r\n                    dataToStore.settlementInfo = values\r\n                    props.setProviderIntialValues(dataToStore)\r\n\r\n                    \r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        label={<p>Select preferred settlement type<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                    invalid={errors.prefSettleType && touched.prefSettleType}\r\n                                                    errorMessage={errors.prefSettleType}\r\n\r\n                                    >\r\n                                        <Field name=\"prefSettleType\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    value={settlementType.filter(\r\n                                                        (sType) =>\r\n                                                        sType.value ===\r\n                                                            values.prefSettleType\r\n                                                    )}\r\n                                                    placeholder=\"Select Settlement Type\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={settlementType}\r\n                                                    onChange={(sType) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            sType.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                      label={<p>Settlement Cycle<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.billCycle && touched.billCycle}\r\n                                        errorMessage={errors.billCycle}\r\n                                    >\r\n                                        <Field name=\"billCycle\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select settlement cycle\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={settelementCycle}\r\n                                                    value={settelementCycle.filter(\r\n                                                        (sCycle) =>\r\n                                                        sCycle.value ===\r\n                                                            values.billCycle\r\n                                                    )}\r\n                                                    onChange={(sCycle) =>{\r\n                                                        form.setFieldValue(\"settelementWeek\",'')\r\n                                                        form.setFieldValue(\"settelementMonth\",'')\r\n                                                        form.setFieldValue(\"settelementDate\",'')\r\n                                                        form.setFieldValue(field.name,sCycle.value)\r\n                                                    }}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    {values.billCycle === \"WEEKLY\" && \r\n                                    <FormItem\r\n                                      label={<p>Settlement Week<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.settelementWeek && touched.settelementWeek}\r\n                                        errorMessage={errors.settelementWeek}\r\n                                    >\r\n                                        <Field name=\"settelementWeek\" validate = {async(v) => {\r\n                                                if(values.billCycle === \"WEEKLY\"){\r\n                                                    try{await Yup.string().required(\"Please select week\").validate(v)}\r\n                                                    catch(error){return error.message}\r\n                                            }}}\r\n                                        >\r\n                                            {({ field, form }) => (\r\n                                                <Select options={settelementWeekOpt} placeholder=\"Select settlement week\" field={field} form={form}\r\n                                                value={settelementWeekOpt.filter((week) =>week.value ===values.settelementWeek)}\r\n                                                onChange={(week) => form.setFieldValue(field.name,week.value)}\r\n                                            />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>}\r\n                                    {(values.billCycle === \"QUARTERLY\" || values.billCycle === \"HALFYEARLY\" ||values.billCycle === \"YEARLY\") && \r\n                                    <FormItem\r\n                                      label={<p>Settlement Month<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.settelementMonth && touched.settelementMonth}\r\n                                        errorMessage={errors.settelementMonth}\r\n                                    >\r\n                                        <Field name=\"settelementMonth\" validate = {async(v) => {\r\n                                                if(values.billCycle === \"QUARTERLY\" || values.billCycle === \"HALFYEARLY\" ||values.billCycle === \"YEARLY\"){\r\n                                                    try{await Yup.string().required(\"Please select month\").validate(v)}\r\n                                                    catch(error){return error.message}\r\n                                            }}}\r\n                                        >\r\n                                            {({ field, form }) => (\r\n                                                <Select options={settelementMonthOpt} placeholder=\"Select settlement month\" field={field} form={form}\r\n                                                value={settelementMonthOpt.filter((week) =>week.value ===values.settelementMonth)}\r\n                                                onChange={(week) => form.setFieldValue(field.name,week.value)}\r\n                                            />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>}\r\n                                    {(values.billCycle === \"MONTHLY\"|| values.billCycle === \"QUARTERLY\" || values.billCycle === \"HALFYEARLY\" ||values.billCycle === \"YEARLY\") && \r\n                                    <FormItem\r\n                                      label={<p>Settlement Date<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.settelementDate && touched.settelementDate}\r\n                                        errorMessage={errors.settelementDate}\r\n                                    >\r\n                                        <Field name=\"settelementDate\" validate = {async(v) => {\r\n                                                if(values.billCycle === \"MONTHLY\" || values.billCycle === \"QUARTERLY\" || values.billCycle === \"HALFYEARLY\" || values.billCycle === \"YEARLY\"){\r\n                                                    try{await Yup.string().required(\"Please select date\").validate(v)}\r\n                                                    catch(error){return error.message}\r\n                                            }}}\r\n                                        >\r\n                                            {({ field, form }) => (\r\n                                                <Select options={monthOptions} placeholder=\"Select settlement date\" field={field} form={form}\r\n                                                value={monthOptions.filter((week) =>week.value === values.settelementDate)}\r\n                                                onChange={(week) => form.setFieldValue(field.name,week.value)}\r\n                                            />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>}\r\n                                    {/* <FormItem\r\n                                      label={<p>Settlement Date<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.billDate && touched.billDate}\r\n                                        errorMessage={errors.billDate}\r\n                                    >\r\n                                        <Field name=\"billDate\">\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    placeholder=\"Select Date\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem> */}\r\n                                    <FormItem\r\n                                      label={<p>{'Offset Days'}<span style={{color: 'red'}}>{'*'}</span></p>}\r\n\r\n                                        invalid={errors.billDueTenor && touched.billDueTenor}\r\n                                        errorMessage={errors.billDueTenor}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"billDueTenor\"\r\n                                            placeholder=\"Enter number of offset days\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Bank Account Number<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.bankAccNum && touched.bankAccNum}\r\n                                        errorMessage={errors.bankAccNum}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"bankAccNum\"\r\n                                            placeholder=\"Enter Account Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Bank Name<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.bankName && touched.bankName}\r\n                                        errorMessage={errors.bankName}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"bankName\"\r\n                                            placeholder=\"Enter Bank Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Branch Name<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.bankBranchName && touched.bankBranchName}\r\n                                        errorMessage={errors.bankBranchName}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"bankBranchName\"\r\n                                            placeholder=\"Enter Branch Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>IFSC Code<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.ifscCode && touched.ifscCode}\r\n                                        errorMessage={errors.ifscCode}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"ifscCode\"\r\n                                            placeholder=\"Enter IFSC Code\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>MICR Code<span style={{color: 'red'}}>{'*'}</span></p>}\r\n                                        invalid={errors.micrCode && touched.micrCode}\r\n                                        errorMessage={errors.micrCode}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"micrCode\"\r\n                                            placeholder=\"Enter Code\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem label=\"Upload Cancelled Cheque\">\r\n                                        <Field name='uploadCancelledCheque'>\r\n                                        {({field,form}) => (\r\n                                        <div className=\"\">\r\n                                            <Upload beforeUpload={beforeUpload} draggable className='border-gray-200 w-[500] h-[0]' style={{ minHeight: \"3rem\"}}\r\n                                                onChange={(updatedFiles, files, uploadRes, filesDetails) => {form.setFieldValue(field.name,uploadRes?.data?.fileUnqId)}}>\r\n                                                <div className=\"my-10 text-center\">\r\n                                                    <p className=\"font-semibold\">\r\n                                                        <span className=\"text-gray-400 dark:text-white\">{values.uploadCancelledCheque ? \"File uploaded, \" : 'No Files Uploaded, '}</span>\r\n                                                        <span className=\"text-blue-700\">Browse</span>\r\n                                                    </p>\r\n                                                </div>\r\n                                            </Upload>\r\n                                            {values.uploadCancelledCheque &&\r\n                                            <div className=\"upload-file cursor-pointer h-12 w-120\" >\r\n                                                <div className=\"upload-file-info\" onClick={() => onClickView(values.uploadCancelledCheque)}>\r\n                                                    <h6 className=\"upload-file-name\">{values.uploadCancelledCheque.substring(0, 15)}</h6>\r\n                                                </div>\r\n                                                <CloseButton className=\"upload-file-remove \" onClick={() => {form.setFieldValue(field.name, '');}}/>\r\n                                            </div>}\r\n                                        </div>\r\n                                        )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                </div>\r\n\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n            <Dialog isOpen={showContent}\r\n                    onClose={() => setShowContent(false)}>\r\n                    <div className='p-5'>\r\n                        <img src={`${appConfig.apiPrefix}/media/uniqid/${content}`} alt=\"Content\" />\r\n                        <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                    </div>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProviderSettlementInfo\r\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport ProviderAccountInfo from './ProviderAccountInfo'\r\nimport ProviderContactInfo from './ProviderContactInfo'\r\nimport ProviderAddressInfo from './ProviderAddressInfo'\r\nimport ProviderUploadFiles from './ProviderUploadFiles'\r\nimport ProviderSettlementInfo from './ProviderSettlementInfo'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport * as Yup from 'yup'\r\n\r\nconst ProviderDetails = forwardRef((props, ref) => {\r\n    const [formData, setFormData] = useState({\r\n        ProviderAccountInfo: { values: null, validated: false },\r\n        ProviderContactInfo: { values: null, validated: false },\r\n        ProviderAddressInfo: { values: null, validated: false },\r\n        ProviderSettlementInfo: { values: null, validated: false },\r\n        ProviderUploladFileFileInfo : { values: null, validated: false },\r\n        ProviderAdditionalFileInfo : { values: null, validated: false },\r\n    })\r\n\r\n    const providerAccountInforef = React.useRef()\r\n    const providerContactInforef = React.useRef()\r\n    const providerAddressInforef = React.useRef()\r\n    const providerSettlementInforef = React.useRef()\r\n    const providerUploladFileInforef = React.useRef()\r\n    const providerAdditionalFileInforef = React.useRef()\r\n\r\n    async function handleSubmit() {\r\n\r\n        let validationErrors = false;\r\n\r\n        await providerAccountInforef?.current?.validateForm().then(errors => {\r\n            if (errors && Object.keys(errors).length > 0) {\r\n              providerAccountInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n          });\r\n        await providerContactInforef?.current?.validateForm().then(errors => {\r\n\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                providerContactInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n      \r\n          });\r\n        await providerAddressInforef?.current?.validateForm().then(errors => {\r\n\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                providerAddressInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n      \r\n           \r\n          });\r\n        await providerSettlementInforef?.current?.validateForm().then(errors => {\r\n\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                providerSettlementInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n      \r\n           \r\n          });\r\n          await providerUploladFileInforef?.current?.validateForm().then(errors => {\r\n\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                providerUploladFileInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n      \r\n           \r\n          });\r\n          await providerAdditionalFileInforef?.current?.validateForm().then(errors => {\r\n\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                providerAdditionalFileInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n      \r\n           \r\n          });\r\n\r\n        if (!validationErrors) {\r\n            await providerAccountInforef.current?.submitForm()\r\n            await providerContactInforef.current?.submitForm()\r\n            await providerAddressInforef.current?.submitForm()\r\n          \r\n            await providerSettlementInforef.current?.submitForm()\r\n            await providerUploladFileInforef.current?.submitForm()\r\n            await providerAdditionalFileInforef.current?.submitForm()\r\n          }\r\n    }\r\n\r\n    function handleChangeProviderAccountInfo(data) {\r\n        setFormData({ ...formData, providerAccountInfo: data })\r\n    }\r\n\r\n    function handleChangeProviderContactInfo(data) {\r\n        setFormData({ ...formData, providerContactInfo: data })\r\n    }\r\n\r\n    function handleChangeProviderAddressInfo(data) {\r\n        setFormData({ ...formData, ProviderAddressInfo: data })\r\n    }\r\n\r\n    function handleChangeProviderSettlementInfo(data) {\r\n        setFormData({ ...formData, ProviderSettlementInfo: data })\r\n    }\r\n\r\n    function handleChangeProviderUploadInfo(data) {\r\n        setFormData({ ...formData, ProviderUploladFileFileInfo: data })\r\n    }\r\n\r\n    function handleChangeProviderAdditionalInfo(data) {\r\n        setFormData({ ...formData, ProviderAdditionalFileInfo: data })\r\n    }\r\n\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            handleSubmitFromParent() {\r\n                handleSubmit()\r\n            },\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div style={{ backgroundColor: \"#F5F5F5\" }} className=\" p-5\">\r\n                <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider>\r\n                    <div className=\"border-b border-dashed pb-6 mx-4\">\r\n                        <ProviderAccountInfo\r\n                            handleSubmit={handleSubmit}\r\n                            onChange={handleChangeProviderAccountInfo}\r\n                            refId={providerAccountInforef}\r\n                            providerState={props.providerState}\r\n                            setProviderState={props.setProviderState}\r\n                            provideIntialValues={props.provideIntialValues}\r\n                            setProviderIntialValues={props.setProviderIntialValues}\r\n                        />\r\n                    </div>\r\n                    <div className=\"border-b border-dashed pb-6 mx-4 mt-6\">\r\n                        <ProviderContactInfo\r\n                            handleSubmit={handleSubmit}\r\n                            onChange={handleChangeProviderContactInfo}\r\n                            refId={providerContactInforef}\r\n                            providerState={props.providerState}\r\n                            setProviderState={props.setProviderState}\r\n                            provideIntialValues={props.provideIntialValues}\r\n                            setProviderIntialValues={props.setProviderIntialValues}\r\n                        />\r\n                    </div>\r\n                    <div className=\"border-b border-dashed pb-6 mx-4 mt-6\">\r\n                        <ProviderAddressInfo\r\n                            handleSubmit={handleSubmit}\r\n                            onChange={handleChangeProviderAddressInfo}\r\n                            refId={providerAddressInforef}\r\n                            providerState={props.providerState}\r\n                            setProviderState={props.setProviderState}\r\n                            provideIntialValues={props.provideIntialValues}\r\n                            setProviderIntialValues={props.setProviderIntialValues}\r\n                        />\r\n                    </div>\r\n                    <div className=\"mx-4 mt-6\">\r\n                        <ProviderSettlementInfo\r\n                            handleSubmit={handleSubmit}\r\n                            onChange={handleChangeProviderSettlementInfo}\r\n                            refId={providerSettlementInforef}\r\n                            providerState={props.providerState}\r\n                            setProviderState={props.setProviderState}\r\n                            setStep={props.setStep}\r\n                            step={props.step}\r\n                            provideIntialValues={props.provideIntialValues}\r\n                            setProviderIntialValues={props.setProviderIntialValues}\r\n                        />\r\n                    </div>\r\n                </AdaptableCard>\r\n           \r\n            <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n                <ProviderUploadFiles \r\n                    handleSubmit={handleSubmit}\r\n                    onChangeUpload={handleChangeProviderUploadInfo}\r\n                    onChangeAdditional={handleChangeProviderAdditionalInfo}\r\n                    refId={providerUploladFileInforef}\r\n                    refIdAdd={providerAdditionalFileInforef}\r\n                    providerState={props.providerState}\r\n                    setProviderState={props.setProviderState}\r\n                    setStep={props.setStep}\r\n                    step={props.step}\r\n                    provideIntialValues={props.provideIntialValues}\r\n                    setProviderIntialValues={props.setProviderIntialValues}\r\n                    mode={props.mode}\r\n                />\r\n            </AdaptableCard>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default ProviderDetails\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nexport const statusOptions = [\r\n    { label: 'Married', value: 'M' },\r\n    { label: 'Widowed', value: 'W' },\r\n    { label: 'Separated', value: 'S' },\r\n    { label: 'Divorced', value: 'D' },\r\n    { label: 'Single ', value: 'S' },\r\n]\r\nconst userRole = [\r\n    { label: 'Super Admin', value: 0 },\r\n    { label: 'User.', value: 1 },\r\n    { label: 'Admin', value: 2 },\r\n]\r\n\r\n\r\nconst userInitValues = {\r\n    roleId: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    emailId: \"\",\r\n    phoneNumber: \"\",\r\n}\r\n\r\nconst userValidationSchema = Yup.object().shape({\r\n    //roleId: Yup.string().required('Please Select Role'),\r\n    firstName: Yup.string().required('Please enter first name').min(2, \"Name must be 2 characters\").max(100).nullable(),\r\n    lastName: Yup.string().required('Please enter last name').min(2, \"Name must be 2 characters\").max(100).nullable(),\r\n    emailId: Yup.string().min(5,'Email must be at least 5 characters').max(50).email('Please enter valid email id').required('Please enter email Id').nullable(),\r\n    phoneNumber: Yup.string().min(5,\"Number must be atleast 5 characters\").max(20,\"Max 20 characters are allowed\")\r\n    .required(\"Please enter phone number\").nullable(),\r\n})\r\n\r\nconst ProviderUserInfo = ({ onChange, refId, ...props }) => {\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">MASTER USER</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.provideIntialValues.userInfo}\r\n                validationSchema={userValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    \r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.providerState, userInfo: values }\r\n                    let dataToStore = props.provideIntialValues\r\n                    dataToStore.userInfo = values\r\n                    props.setProviderIntialValues(dataToStore)\r\n                    props.setProviderState(updatedPayload)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div  className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    {/* <FormItem\r\n                                        label=\"User Role\"\r\n                                        invalid={errors.roleId && touched.roleId}\r\n                                        errorMessage={errors.roleId}\r\n                                    >\r\n                                        <Field name=\"roleId\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Super Admin\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={userRole}\r\n                                                    value={userRole.filter(\r\n                                                        (userRole) =>\r\n                                                            userRole.value ===\r\n                                                            values.roleId\r\n                                                    )}\r\n                                                    onChange={(userRole) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            userRole.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem> */}\r\n                                </div>\r\n                            </FormContainer>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        label={<p>First Name <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.firstName && touched.firstName}\r\n                                        errorMessage={errors.firstName}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"firstName\"\r\n                                            placeholder=\"Enter First Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label='Middle Name'\r\n                                       \r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"middleName\"\r\n                                            placeholder=\"Enter Middle Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Last Name <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.lastName && touched.lastName}\r\n                                        errorMessage={errors.lastName}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"lastName\"\r\n                                            placeholder=\"Enter Last Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Email ID <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.emailId && touched.emailId}\r\n                                        errorMessage={errors.emailId}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"emailId\"\r\n                                            placeholder=\"Enter Email ID\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Phone Number <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.phoneNumber && touched.phoneNumber}\r\n                                        errorMessage={errors.phoneNumber}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"phoneNumber\"\r\n                                            placeholder=\"Enter Phone Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                </div>\r\n\r\n                            </FormContainer>\r\n\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProviderUserInfo\r\n","import {\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Upload,\r\n    Dialog,\r\n    Button,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport * as Yup from 'yup'\r\nimport { getContractType } from '../store/dataSlice'\r\nimport { apiUploadFiles } from 'services/ProvidersService'\r\nimport { OpenNotification } from 'views/Servicefile'\r\nimport appConfig from 'configs/app.config'\r\nimport CloseButton from 'components/ui/CloseButton'\r\n\r\nexport const statusOptions = [\r\n    { label: 'Married', value: 'M' },\r\n    { label: 'Widowed', value: 'W' },\r\n    { label: 'Separated', value: 'S' },\r\n    { label: 'Divorced', value: 'D' },\r\n    { label: 'Single ', value: 'S' },\r\n]\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: 0 },\r\n    { label: 'Airtel Inc.', value: 1 },\r\n    { label: 'Airtel India', value: 2 },\r\n]\r\n\r\nconst contarctStatus = [\r\n    { label: 'ACTIVE', value: 'ACTIVE' },\r\n    { label: 'INACTIVE', value: 'IN_ACTIVE' },\r\n    { label: 'PENDING APPROVAL', value: 'PENDING_APPROVAL' }\r\n]\r\n\r\nconst userContractValidationSchema = Yup.object().shape({\r\n    contractType: Yup.string().required('Please Select contract type').nullable(),\r\n    signedDate: Yup.string().required('Please select signed date').nullable(),\r\n    enforcementDate: Yup.string().required('Please select enforcement date').nullable(),\r\n    terminationDate: Yup.string().required('Please select termination date').nullable(),\r\n    contractStatus: Yup.string().required('Please select contract status').nullable(),\r\n})\r\nconst saveFilesInProvContract = 1\r\nconst ProviderContractInfo = ({ onChange, refId, ...props }) => {\r\n    const dispatch = useDispatch()\r\n    const contractTypeList = useSelector((state) => state.providerList?.data?.contractTypeList)\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n    const {enterAccount, acc_user_id,rememberMe,usernameOrEmail\r\n    } = useSelector(\r\n     (state) => state.auth.user\r\n )\r\nuseEffect(() => {\r\n\r\n    \r\n    dispatch(getContractType({enterAccount}))\r\n\r\n   \r\n\r\n}, [dispatch])\r\n\r\nconst beforeUpload = async (newFiles, files) => {\r\n    const file = newFiles[0];\r\n    const allowedTypes = ['image/jpeg', 'image/png'];\r\n\r\n    if (!allowedTypes.includes(file.type)) {\r\n        OpenNotification('warning', 'JPG/PNG files are allowed only!')\r\n      return false;\r\n    } \r\n    try { \r\n        const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInProvContract)\r\n        return ress\r\n    } catch (error) {\r\n      console.error('Error during file upload:', error);\r\n      return false;\r\n    }\r\n}\r\nconst [showContent, setShowContent] = useState(false)\r\nconst [content, setContent] = useState(null)\r\nconst onClickView = (fileInfo) => {\r\n    setShowContent(true)\r\n    setContent(fileInfo)\r\n}\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-4 mb-4 mt-2\">CONTRACT INFO</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.provideIntialValues.contractInfo}\r\n                validationSchema={userContractValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n\r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.providerState, ...values }\r\n                    let dataToStore = props.provideIntialValues\r\n                    dataToStore.contractInfo = values\r\n                    props.setProviderIntialValues(dataToStore)\r\n                    props.setProviderState(updatedPayload)\r\n                    props.setStep(props.step + 1)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                       label={<p>Contract Type<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.contractType && touched.contractType}\r\n                                        errorMessage={errors.contractType}\r\n                                    >\r\n                                        <Field name=\"contractType\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    // isDisabled={true}\r\n                                                    placeholder=\"Select Contract Type,....\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={contractTypeList}\r\n                                                    value={contractTypeList?.filter(\r\n                                                        (gender) =>\r\n                                                            gender.value ===\r\n                                                            values.contractType\r\n                                                    )}\r\n                                                    onChange={(gender) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            gender.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem label=\"File Upload\">\r\n                                        <Field name='contractFile'>\r\n                                        {({field,form}) => (\r\n                                        <div className=\"\">\r\n                                                <Upload beforeUpload={beforeUpload} draggable className='border-gray-200 w-[500] h-[0]' style={{ minHeight: \"3rem\"}}\r\n                                                    onChange={(updatedFiles, files, uploadRes, filesDetails) => {form.setFieldValue(field.name,uploadRes?.data?.fileUnqId)}}>\r\n                                                    <div className=\"my-10 text-center\">\r\n                                                        <p className=\"font-semibold\">\r\n                                                            <span className=\"text-gray-400 dark:text-white\">{values.contractFile ? \"File uploaded, \" : 'No Files Uploaded, '}</span>\r\n                                                            <span className=\"text-blue-700\">Browse</span>\r\n                                                        </p>\r\n                                                    </div>\r\n                                                </Upload>\r\n                                            {values.contractFile &&\r\n                                            <div className=\"upload-file cursor-pointer h-12 w-120\" >\r\n                                                <div className=\"upload-file-info\" onClick={() => onClickView(values.contractFile)}>\r\n                                                    <h6 className=\"upload-file-name\">{values.contractFile.substring(0, 15)}</h6>\r\n                                                </div>\r\n                                                <CloseButton className=\"upload-file-remove \" onClick={() => {form.setFieldValue(field.name, '');}}/>\r\n                                            </div>}\r\n                                        </div>\r\n                                        )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Signed Date<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.signedDate && touched.signedDate}\r\n                                        errorMessage={errors.signedDate}\r\n                                    >\r\n                                        <Field name=\"signedDate\">\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    placeholder=\"Select Date\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Enforcement Date<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.enforcementDate && touched.enforcementDate}\r\n                                        errorMessage={errors.enforcementDate}\r\n                                    >\r\n                                        <Field name=\"enforcementDate\" >\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    placeholder=\"Select Date\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label={<p>Termination date<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={errors.terminationDate && touched.terminationDate}\r\n                                        errorMessage={errors.terminationDate}\r\n                                    >\r\n                                        <Field name=\"terminationDate\" >\r\n                                            {({ field, form }) => (\r\n                                                <DatePicker\r\n                                                    placeholder=\"Select Date\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    value={field.value}\r\n                                                    onChange={(date) => {\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            date\r\n                                                        )\r\n                                                    }}\r\n                                                    inputFormat= {dateFormat}\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                         label={<p>Contract Status<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.contractStatus && touched.contractStatus\r\n                                        }\r\n                                        errorMessage={errors.contractStatus}\r\n                                    >\r\n                                        <Field name=\"contractStatus\">\r\n                                            {({ field, form }) => (\r\n                                                <Select\r\n                                                    placeholder=\"Select Type\"\r\n                                                    field={field}\r\n                                                    form={form}\r\n                                                    options={contarctStatus}\r\n                                                    value={contarctStatus.filter(\r\n                                                        (contarctStatus) =>\r\n                                                            contarctStatus.value ===\r\n                                                            values.contractStatus\r\n                                                    )}\r\n                                                    onChange={(contarctStatus) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            contarctStatus.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                </div>\r\n\r\n                            </FormContainer>\r\n\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n            <Dialog isOpen={showContent}\r\n                onClose={() => setShowContent(false)}>\r\n                <div className='p-5'>\r\n                    <img src={`${appConfig.apiPrefix}/media/uniqid/${content}`} alt=\"Content\" />\r\n                    <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                </div>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProviderContractInfo\r\n","import { Select, FormItem, FormContainer, Input } from 'components/ui'\r\nimport { RichTextEditor } from 'components/shared'\r\nimport { Field, Formik, Form } from 'formik'\r\nimport { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport * as Yup from 'yup'\r\nimport { getPublicRoles } from '../store/dataSlice'\r\n\r\nconst masterPermissionValidationSchema = Yup.object().shape({\r\n    publicRole: Yup.string().required('Please select master role').nullable(),\r\n    userRole: Yup.string().required('Please enter user role title').nullable(),\r\n})\r\n\r\nconst ProviderMasterPermissions = ({ onChange, refId, ...props }) => {\r\n    const dispatch = useDispatch()\r\n    const {\r\n        enterAccount,\r\n        password,\r\n        rememberMe,\r\n        usernameOrEmail,\r\n        acc_mno_parent_unq_id,\r\n    } = useSelector((state) => state.auth.user)\r\n    const publicRolesList = useSelector(\r\n        (state) => state.providerList?.data?.publicRolesList\r\n    )\r\n    useEffect(() => {\r\n        dispatch(getPublicRoles({ acc_mno_parent_unq_id }))\r\n    }, [dispatch, enterAccount])\r\n    return (\r\n        <>\r\n            <h3 className=\"mx-4 mb-4 mt-2\">MASTER PERMISSION INFO</h3>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props.provideIntialValues.masterInfoPermission}\r\n                validationSchema={masterPermissionValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.providerState, ...values }\r\n\r\n                    props.setProviderState(updatedPayload)\r\n                    let dataToStore = props.provideIntialValues\r\n                    dataToStore.masterInfoPermission = values\r\n                    props.setProviderIntialValues(dataToStore)\r\n\r\n                    console.log(updatedPayload, 'update')\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className=\"md:grid gap-4 mx-4\">\r\n                                    <div className=\"md:grid grid-cols-2 gap-4\">\r\n                                        <FormItem\r\n                                            label={\r\n                                                <p>\r\n                                                    Master Role{' '}\r\n                                                    <span\r\n                                                        style={{ color: 'red' }}\r\n                                                    >\r\n                                                        {'*'}\r\n                                                    </span>\r\n                                                </p>\r\n                                            }\r\n                                            invalid={\r\n                                                errors.publicRole &&\r\n                                                touched.publicRole\r\n                                            }\r\n                                            errorMessage={errors.publicRole}\r\n                                        >\r\n                                            <Field name=\"publicRole\">\r\n                                                {({ field, form }) => (\r\n                                                    <Select\r\n                                                        placeholder=\"Select Master Role\"\r\n                                                        field={field}\r\n                                                        form={form}\r\n                                                        options={\r\n                                                            publicRolesList\r\n                                                        }\r\n                                                        value={publicRolesList?.filter(\r\n                                                            (label) =>\r\n                                                                label.value ===\r\n                                                                values.publicRole\r\n                                                        )}\r\n                                                        onChange={(\r\n                                                            label,\r\n                                                            field\r\n                                                        ) =>\r\n                                                            form.setFieldValue(\r\n                                                                field.name,\r\n                                                                label.value\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                )}\r\n                                            </Field>\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            label={\r\n                                                <p>\r\n                                                    User Role Title{' '}\r\n                                                    <span\r\n                                                        style={{ color: 'red' }}\r\n                                                    >\r\n                                                        {'*'}\r\n                                                    </span>\r\n                                                </p>\r\n                                            }\r\n                                            invalid={\r\n                                                errors.userRole &&\r\n                                                touched.userRole\r\n                                            }\r\n                                            errorMessage={errors.userRole}\r\n                                        >\r\n                                            <Field\r\n                                                type=\"text\"\r\n                                                autoComplete=\"off\"\r\n                                                name=\"userRole\"\r\n                                                placeholder=\"Enter User Role Title\"\r\n                                                component={Input}\r\n                                            />\r\n                                        </FormItem>\r\n                                    </div>\r\n                                    <FormItem label=\"Description\">\r\n                                        <Field name=\"description\">\r\n                                            {({ field, form }) => (\r\n                                                <RichTextEditor\r\n                                                    style={{ width: '60%' }}\r\n                                                    value={field.value}\r\n                                                    onChange={(val) =>\r\n                                                        form.setFieldValue(\r\n                                                            field.name,\r\n                                                            val\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        </Field>\r\n                                    </FormItem>\r\n                                </div>\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProviderMasterPermissions\r\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport ProviderUserInfo from './ProvidersUserInfo'\r\nimport ProviderContractInfo from './ProviderContractInfo'\r\nimport ProviderMasterPermissions from './ProviderMasterPermissions'\r\n\r\nconst ProviderMainUserInfo = forwardRef((props, ref) => {\r\n    const [formData, setFormData] = useState({\r\n        ProviderUserInfo: { values: null, validated: false },\r\n        ProviderContractInfo: { values: null, validated: false },\r\n        ProviderPermissionInfo: { values: null, validated: false },\r\n    })\r\n\r\n    const ProviderUserInforef = React.useRef()\r\n    const ProviderContractInforef = React.useRef()\r\n    const ProviderPermissionInforef = React.useRef()\r\n\r\n    async function handleSubmit() {\r\n\r\n        let validationErrors = false;\r\n     \r\n        await ProviderPermissionInforef.current?.validateForm().then(errors => {\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                ProviderPermissionInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n          });\r\n        await ProviderUserInforef.current?.validateForm().then(errors => {\r\n\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                ProviderUserInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n      \r\n          });\r\n        await ProviderContractInforef.current?.validateForm().then(errors => {\r\n\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                ProviderContractInforef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n      \r\n           \r\n          });\r\n\r\n          if (!validationErrors) {\r\n            await ProviderPermissionInforef?.current.submitForm()\r\n            await ProviderUserInforef?.current.submitForm()\r\n            await ProviderContractInforef?.current.submitForm()\r\n      \r\n          }\r\n      \r\n    }\r\n\r\n    function handleChangeProviderUserInfo(data) {\r\n        setFormData({ ...formData, ProviderUserInfo: data })\r\n    }\r\n\r\n    function handleChangeProviderContractInfo(data) {\r\n        setFormData({ ...formData, ProviderContractInfo: data })\r\n    }\r\n\r\n    function handleChangeProviderMasterPermissionInfo(data) {\r\n        setFormData({ ...formData, ProviderPermissionInfo: data })\r\n    }\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            handleSubmitFromParent() {\r\n                handleSubmit()\r\n            },\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div style={{backgroundColor:\"#F5F5F5\"}} className=\" p-5\">\r\n                <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider>\r\n                  <div className=\"border-b border-dashed pb-6 mx-4 mt-6\">\r\n                        <ProviderMasterPermissions\r\n                            handleSubmit={handleSubmit}\r\n                            onChange={handleChangeProviderMasterPermissionInfo}\r\n                            refId={ProviderPermissionInforef}\r\n                            providerState={props.providerState}\r\n                            setProviderState={props.setProviderState}\r\n                            setStep={props.setStep}\r\n                            step={props.step}\r\n                            provideIntialValues = {props.provideIntialValues}\r\n                            setProviderIntialValues = {props.setProviderIntialValues}\r\n                        />\r\n                    </div>\r\n                    <div className=\"border-b border-dashed pb-6 mx-4 mt-6\">\r\n                        <ProviderUserInfo\r\n                            handleSubmit={handleSubmit}\r\n                            onChange={handleChangeProviderUserInfo}\r\n                            refId={ProviderUserInforef}\r\n                            providerState={props.providerState}\r\n                            setProviderState={props.setProviderState}\r\n                            provideIntialValues = {props.provideIntialValues}\r\n                            setProviderIntialValues = {props.setProviderIntialValues}\r\n                        />\r\n                    </div>\r\n                    <div className=\"mx-4 mt-6\">\r\n                        <ProviderContractInfo\r\n                            handleSubmit={handleSubmit}\r\n                            onChange={handleChangeProviderContractInfo}\r\n                            refId={ProviderContractInforef}\r\n                            providerState={props.providerState}\r\n                            setProviderState={props.setProviderState}\r\n                            setStep={props.setStep}\r\n                            step={props.step}\r\n                            provideIntialValues = {props.provideIntialValues}\r\n                            setProviderIntialValues = {props.setProviderIntialValues}\r\n                        />\r\n                    </div>\r\n\r\n                  \r\n\r\n                </AdaptableCard>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default ProviderMainUserInfo\r\n","import { Alert, Button, Card, Dialog } from 'components/ui'\r\nimport React, { useState } from 'react'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { Link } from 'react-router-dom';\r\nimport GetDropdownLabel from 'views/Servicefile';\r\nimport { timeZone } from '../../../../mock/data/timezones'\r\nimport { useSelector } from 'react-redux';\r\nimport appConfig from 'configs/app.config';\r\nimport DateFormat from 'components/template/DateFormat';\r\nimport dayjs from 'dayjs';\r\nimport ReactHtmlParser from 'html-react-parser'\r\n\r\n\r\n\r\nconst language = [\r\n    { label: 'English', value: 1 },\r\n    { label: 'Spanish', value: 2 },\r\n    { label: 'Arabic', value: 3 },\r\n    { label: 'Portugese', value: 4 },\r\n\r\n]\r\nconst orientationtype = [\r\n    { label: 'Right to Left', value: \"RTL\" },\r\n    { label: 'Left to Right', value: \"LTR\" },\r\n]\r\nconst settlementType = [\r\n    { label: 'Automatic', value: 'AUTOMATIC' },\r\n    { label: 'Manual', value: 'MANUAL' },\r\n];\r\n\r\nconst settelementCycle = [\r\n    { label: 'Daily', value: 'DAILY' },\r\n    { label: 'Weekly', value: 'WEEKLY' },\r\n    { label: 'Monthly', value: 'MONTHLY' },\r\n    { label: 'Quarterly', value: 'QUARTERLY' },\r\n    { label: 'Half-Yearly', value: 'HALFYEARLY' },\r\n    { label: 'Yearly', value: 'YEARLY' },\r\n];\r\n\r\nconst genderOptions = [\r\n    { label: 'Airtel Inc.', value: 1 },\r\n    { label: 'Airtel Inc.', value: 2 },\r\n    { label: 'Airtel India', value: 3 },\r\n]\r\n\r\nconst contractStatus = [\r\n    { label: 'ACTIVE', value: 'ACTIVE' },\r\n    { label: 'IN_ACTIVE', value: 'IN_ACTIVE' },\r\n    { label: 'PENDING_APPROVAL', value: 'PENDING_APPROVAL' }\r\n]\r\n\r\n\r\n\r\nfunction ProviderPreview({ providerState, step, setStep, message, mode }) {\r\n\r\n    console.log(providerState, \"providerState\")\r\n\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n\r\n    const currencyList = useSelector((state) => state.salesOrderList?.data?.currencyList)\r\n    const parentAccountList = useSelector((state) => state.salesOrderList?.data?.parentAccountList)\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n\r\n    const timeZoneList = timeZone?.map((timezone) => ({\r\n        value: timezone.id,\r\n        label: timezone.value,\r\n    }))\r\n    const productCategoryList = useSelector((state) => state.providerList?.data?.productCatList)\r\n    const contractTypeList = useSelector((state) => state.providerList?.data?.contractTypeList)\r\n    const publicRolesList = useSelector(\r\n        (state) => state.providerList?.data?.publicRolesList\r\n    )\r\n    function convert(str) {\r\n        var date = new Date(str),\r\n            mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\r\n            day = (\"0\" + date.getDate()).slice(-2);\r\n        return [day, mnth, date.getFullYear()].join(\"/\");\r\n    }\r\n    const onClickFile = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {message && (\r\n                <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                    {Array.isArray(message) ? message.join(\", \") : message}\r\n                </Alert>\r\n            )}\r\n            <h3 className=\"mx-4 mb-4 mt-2\">Preview</h3>\r\n            <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2\">\r\n                    <h6 className=\"mx-2 mb-4 mt-1 font-bold text-cyan-500\">\r\n                        PROVIDER DETAILS{' '}\r\n                    </h6>\r\n                    <div className=\" text-base  font-bold flex justify-end\" >\r\n                        <button onClick={() => { setStep(0) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"md:grid grid-cols-6\">\r\n                    <div className=\"col-span-2 md:gird mx-2\">\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">\r\n                            Accounts Info\r\n                        </div>\r\n                        <div className=\"col-span-6 md:grid grid-cols-2 gap-2\">\r\n                            {/* <p className=\"mt-2 text-base\">ID : {providerState?.providerId}</p>\r\n                            <p className=\"mt-2 text-base\">User Group 1</p> */}\r\n                            <p className=\"mt-2 text-base\">{providerState?.accName}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(providerState?.accTimeZone, timeZoneList)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(providerState?.accType, parentAccountList)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(providerState?.accCurrency, currencyList)}</p>\r\n                           <div className='flex'>\r\n                           <p className=\"mt-2 text-base  whitespace-nowrap\">Inc Date: </p>\r\n                            <p className='mt-[11px]'>\r\n                                {dayjs(\r\n                                    providerState?.accIncorpDt,\r\n                                    dateFormat\r\n                                )?.format(dateFormat)}\r\n                            </p>\r\n                           </div>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(providerState?.accLang, language)}</p>\r\n                            <p className=\"mt-2 text-base\">Tax: {providerState?.accTaxId}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(providerState?.accOrient, orientationtype)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(providerState?.prodCategory, productCategoryList)}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">\r\n                            Contract Info\r\n                        </div>\r\n                        <div className=\"md:grid grid-cols-1 gap-2\">\r\n                            <p className=\"mt-2 text-base\">{providerState?.accPrimeContFirstName}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.accPrimeContLastName}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.accPrimeContMidName}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.accEmailId}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.accPrimCont}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.accAltCont}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.accWebUrl}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">\r\n                            Address\r\n                        </div>\r\n                        <div className=\"md:grid grid-cols-1 gap-2\">\r\n                            <p className=\"mt-2 text-base\">{providerState?.accAddL1}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.accCity}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.accState}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.accCountry}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.accZipcode}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n\r\n                    <div>\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">Settlement Info</div>\r\n                        <div className=\"md:grid grid-cols-1 gap-2\">\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(providerState?.prefSettleType, settlementType)}</p>\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(providerState?.billCycle, settelementCycle)}</p>\r\n\r\n                            <p className=\"mt-2 text-base whitespace-nowrap\">{providerState?.bankAccNum}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.bankName}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.bankBranchName}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.billDueTenor}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.ifscCode}</p>\r\n                            <p className=\"mt-2 text-base\">{providerState?.micrCode}</p>\r\n                            {/* <p className=\"mt-2 text-base\">{convert(providerState?.billDate)}</p> */}\r\n                            <p>\r\n                                {dayjs(\r\n                                    providerState?.billDate,\r\n                                    dateFormat\r\n                                )?.format(dateFormat)}\r\n                            </p>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className='ml-6'>\r\n                        <div className=\"text-base  font-bold underline  decoration-2 mb-2\">Files</div>\r\n                        {providerState?.uploadFiles.map(e => {\r\n                            if (e.file_name !== \"\") {\r\n                                return (\r\n                                    <>\r\n                                        <div className='md:grid grid-cols-1 gap-2' onClick={() => onClickFile(e)}>\r\n                                            <p className='mt-2 text-base underline text-sky-500 cursor-pointer'>{e.doc_name}</p>\r\n                                        </div>\r\n                                    </>\r\n                                )\r\n                            }\r\n                        })}\r\n                        {providerState?.additionalFiles.map(e => {\r\n                            if (e.file_name !== \"\") {\r\n                                return (\r\n                                    <>\r\n                                        <div className='md:grid grid-cols-1 gap-2' onClick={() => onClickFile(e)}>\r\n                                            <p className='mt-2 text-base underline text-sky-500 cursor-pointer'>{e.doc_name}</p>\r\n                                        </div>\r\n                                    </>\r\n                                )\r\n                            }\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n\r\n            {mode == 'ADD' && <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2\">\r\n                    <h6 className=\"mx-2 mb-4 mt-1 font-bold text-cyan-500\">MASTER PERMISSIONS{' '}</h6>\r\n                    {mode == 'ADD' && <div className=\" text-base  font-bold flex justify-end\">\r\n                        <Link onClick={() => { setStep(1) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </Link>\r\n                    </div>}\r\n                </div>\r\n\r\n                <div className=\"md:grid grid-cols-12\">\r\n                    <div className='col-span-2 md:gird mx-2'>\r\n                        <p className='text-base underline font-bold mb-2'>PublicRole</p>\r\n                        <p className='text-base'>{GetDropdownLabel(providerState?.publicRole, publicRolesList)}</p>\r\n                    </div>\r\n                    <div className='col-span-2 md:gird mx-2'>\r\n                        <p className='text-base underline font-bold mb-2'>UserRole</p>\r\n                        <p className='text-base'>{providerState?.userRole}</p>\r\n                    </div>\r\n                    <div className='col-span-2 md:gird mx-2'>\r\n                        <p className='text-base underline font-bold mb-2'>Description</p>\r\n                        <p className='text-base'>{ReactHtmlParser(providerState?.description)}</p>\r\n                    </div>\r\n                   \r\n                </div>\r\n            </Card>}\r\n            {mode == 'ADD' && <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2\">\r\n                    <h6 className=\"mx-2 mb-4 mt-1 font-bold text-cyan-500\">\r\n                        USER INFO{' '}\r\n                    </h6>\r\n                    {mode == 'ADD' && <div className=\" text-base  font-bold flex justify-end\">\r\n                        <Link onClick={() => { setStep(0) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </Link>\r\n                    </div>}\r\n                </div>\r\n                <div className=\"\">\r\n                    <div className='grid grid-cols-12'>\r\n                        <div className=\"col-span-2 md:gird mx-2 mt-4\">\r\n                            <p className=\"text-base underline font-bold mb-2\">\r\n                                FirstName\r\n                            </p>\r\n                            <p className=\"text-base\">{providerState?.userInfo?.firstName}</p>\r\n                        </div>\r\n                        <div className=\"col-span-2 md:gird mx-2 mt-4\">\r\n                            <p className=\"text-base underline font-bold mb-2\">\r\n                                LastName\r\n                            </p>\r\n                            <p className=\"text-base\">{providerState?.userInfo?.lastName}</p>\r\n                        </div>\r\n                        {/* <div className=\"col-span-2 md:gird mx-2\">\r\n                        <p className=\"text-base underline font-bold mb-2\">\r\n                            Register Id:\r\n                        </p>\r\n                        <p className=\"text-base\">4679812656_Ajjas</p>\r\n                    </div> */}\r\n                        <div className=\"col-span-2 md:gird mx-2 mt-4\">\r\n                            <p className=\"text-base underline font-bold mb-2\">\r\n                                Email ID:\r\n                            </p>\r\n                            <p className=\"text-base\">{providerState?.userInfo?.emailId}</p>\r\n                        </div>\r\n                        <div className=\"col-span-2 md:gird mx-2 mt-4\">\r\n                            <p className=\"text-base underline font-bold mb-2\">\r\n                                Phone Number\r\n                            </p>\r\n                            <p className=\"text-base\">{providerState?.userInfo?.phoneNumber}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* contract type */}\r\n\r\n\r\n                    <div className='grid grid-cols-12'>\r\n                        <div className=\"col-span-2 md:gird mx-2 mt-4\">\r\n                            <p className=\"text-base underline font-bold mb-2\">\r\n                                Contract Type\r\n                            </p>\r\n                            <p className=\"text-base\">{GetDropdownLabel(providerState?.contractType, contractTypeList)}</p>\r\n                        </div>\r\n                        <div className=\"col-span-2 md:gird mx-2 mt-4\">\r\n                            <p className=\"text-base underline font-bold mb-2\">\r\n                                Signed Date\r\n                            </p>\r\n                            {/* <p className=\"text-base\">{convert(providerState?.signedDate)}</p> */}\r\n                            <p>\r\n                                {dayjs(\r\n                                   providerState?.signedDate,\r\n                                    dateFormat\r\n                                )?.format(dateFormat)}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col-span-2 md:gird mx-2 mt-4\">\r\n                            <p className=\"text-base underline font-bold mb-2\">\r\n                                Enforcement Date\r\n                            </p>\r\n                            {/* <p className=\"text-base\">{convert(providerState?.enforcementDate)}</p> */}\r\n                            <p>\r\n                                {dayjs(\r\n                                   providerState?.enforcementDate,\r\n                                    dateFormat\r\n                                )?.format(dateFormat)}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col-span-2 md:gird mx-2 mt-4\">\r\n                            <p className=\"text-base underline font-bold mb-2\">\r\n                                Termination Date\r\n                            </p>\r\n                            {/* <p className=\"text-base\">{convert(providerState?.terminationDate)}</p> */}\r\n                            <p>\r\n                                {dayjs(\r\n                                   providerState?.terminationDate,\r\n                                    dateFormat\r\n                                )?.format(dateFormat)}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col-span-2 md:gird mx-2 mt-4\">\r\n                            <p className=\"text-base underline font-bold mb-2\">\r\n                                Status\r\n                            </p>\r\n                            <p className=\"text-base\">{GetDropdownLabel(providerState?.contractStatus, contractStatus)}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card>}\r\n            <Dialog isOpen={showContent}\r\n                onClose={() => setShowContent(false)}>\r\n                <div className='p-5'>\r\n                    <img src={`${appConfig.apiPrefix}/media/uniqid/${content?.file_url}`} alt=\"Content\" />\r\n                    <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content?.file_url}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProviderPreview\r\n","import React, { useRef, useState, useEffect } from 'react'\r\nimport { Steps, Button } from 'components/ui'\r\nimport NewOperators from './NewProviders'\r\nimport ProviderDetails from './ProviderDetails'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport ProviderMainUserInfo from './ProvidersMainUserInfo'\r\nimport ProviderPreview from './ProviderPreview'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport { apiSubmitProvider, apiUpdateProvider } from 'services/ProvidersService'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { BiArrowBack } from 'react-icons/bi'\r\nimport { EditValuesToFieldsForProvider } from '../../../../utils/campareandCopy'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getContractType, getCurrency, getParentAccount, getProductCategory, getUploadFileType } from '../store/dataSlice'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { GetErrorMsg, OpenNotification } from 'views/Servicefile'\r\nimport { concat } from 'lodash'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\n\r\nconst Controlled = () => {\r\n    const dispatch = useDispatch()\r\n    const { enterAccount, password, rememberMe, usernameOrEmail, acc_mno_id, acc_mno_parent_unq_id, acc_mno_parent_id\r\n    } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n\r\n\r\n    const location = useLocation();\r\n    const rowForEdit = location.state?.data;\r\n    const mode = location?.state?.mode === 'EDIT' ? 'EDIT' : 'ADD'\r\n\r\n    const providerIntialValues = {\r\n        accInfo: {\r\n            providerId: '',\r\n            prodCategory: '',\r\n            accType: '',\r\n            accName: '',\r\n            accIncorpDt: '',\r\n            accCompName: '',\r\n            accTaxId: '',\r\n            accCurrency: '',\r\n            accLang: '',\r\n            accTimeZone: '',\r\n            accOrient: '',\r\n            fields: []\r\n        },\r\n        ContactInfo: {\r\n            accPrimeContFirstName: '',\r\n            accPrimeContMidName: '',\r\n            accPrimeContLastName: '',\r\n            accEmailId: '',\r\n            accPrimCont: '',\r\n            accAltCont: '',\r\n            accFax: '',\r\n            accWebUrl: '',\r\n            fields: []\r\n        },\r\n        address: {\r\n            accCountry: '',\r\n            accAddL1: '',\r\n            accAddL2: '',\r\n            accCity: '',\r\n            accState: '',\r\n            accZipcode: '',\r\n        },\r\n        settlementInfo: {\r\n            bankAccNum: '',\r\n            bankBranchName: '',\r\n            bankName: '',\r\n            billCycle: '',\r\n            // billDate: '',\r\n            billDueTenor: '',\r\n            ifscCode: '',\r\n            micrCode: '',\r\n            prefSettleType: '',\r\n            uploadCancelledCheque: '',\r\n\r\n            settelementWeek : \"\",\r\n            settelementMonth:\"\",\r\n            settelementDate:\"\"\r\n        },\r\n        userInfo: {\r\n            roleId: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            emailId: '',\r\n            phoneNumber: '',\r\n            middleName: ''\r\n        },\r\n        contractInfo: {\r\n            contractType: '', //not in api\r\n            signedDate: '', //not in api\r\n            enforcementDate: '', //not in api\r\n            terminationDate: '', //not in api\r\n            contractStatus: '', //not in api\r\n            contractFile: ''\r\n        },\r\n        upload_cancel_cheque: [{\r\n            file_name: \"file_name\",\r\n            file_url: \"file_url\",\r\n            file_type: \"upload or additional\"\r\n        }],\r\n        masterInfoPermission: {\r\n            publicRole: '', //not in api\r\n            userRole: '', //not in api\r\n            description: '', //not in api\r\n\r\n        },\r\n        uploadFiles: [\r\n        ],\r\n        additionalFiles: [\r\n            {\r\n                file_name: \"\",\r\n                file_url: \"\",\r\n                file_type: \"\",\r\n                dgl_acc_mno_id: null\r\n            }\r\n        ]\r\n    }\r\n    const [provideIntialValues, setProviderIntialValues] =\r\n        useState(providerIntialValues)\r\n    const operatorFileTypes = useSelector(state => state.providerList?.data?.fileList)\r\n    useEffect(() => {\r\n        dispatch(getUploadFileType(enterAccount))\r\n    }, [])\r\n    useEffect(() => {\r\n        if (operatorFileTypes?.res?.length) {\r\n            let uploadArray = []\r\n            for (let i = 0; i < operatorFileTypes?.res.length; i++) {\r\n                if (operatorFileTypes?.res[i].acc_type === 'Provider') {\r\n                    const docType = JSON.parse(operatorFileTypes?.res[i].doc_type);\r\n                    docType.map((item, index) => {\r\n                        uploadArray.push({\r\n                            \"doc_type\": docType[index],\r\n                            \"doc_name\": docType[index].doc_type_name,\r\n                            \"file_name\": \"\",\r\n                            \"file_url\": \"\",\r\n                            \"file_type\": \"upload\"\r\n                        })\r\n                    })\r\n                }\r\n            }\r\n            providerIntialValues.uploadFiles = uploadArray\r\n            setProviderIntialValues(providerIntialValues)\r\n        } else {\r\n            setProviderIntialValues(providerIntialValues)\r\n        }\r\n    }, [operatorFileTypes])\r\n    const [providerState, setProviderState] = useState({})\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    const [step, setStep] = useState(0)\r\n    const navigate = useNavigate()\r\n\r\n    const childRef = useRef()\r\n    const childRef2 = useRef()\r\n\r\n    const onChange = (nextStep) => {\r\n        if (nextStep < 0) {\r\n            setStep(0)\r\n        } else if (nextStep > 3) {\r\n            setStep(3)\r\n        } else {\r\n            setStep(nextStep)\r\n        }\r\n    }\r\n\r\n    const onNext = () => {\r\n        if (step == 0) {\r\n            childRef.current?.handleSubmitFromParent()\r\n        }\r\n        if (step == 1) {\r\n            childRef2.current?.handleSubmitFromParent()\r\n        }\r\n    }\r\n\r\n    const submitApi = async () => {\r\n        let uploadEdDocument = concat(providerState?.uploadFiles, providerState?.additionalFiles)\r\n        if (mode === \"ADD\") {\r\n            uploadEdDocument = uploadEdDocument.map((file) => {\r\n                if (file?.file_url != '') {\r\n                    return {\r\n                        \"doc_name\": file?.doc_name,\r\n                        \"file_name\": file?.file_name,\r\n                        \"file_url\": file?.file_url,\r\n                        \"file_type\": file?.file_type,\r\n                    }\r\n                }\r\n            })\r\n            uploadEdDocument = uploadEdDocument.filter(item => item !== undefined && item !== null);\r\n            const createPayload = {\r\n                \"acc_mno_parent\": acc_mno_parent_id,\r\n                \"acc_name\": providerState.accName,\r\n                \"acc_parent\": providerState.accType,\r\n                \"acc_comp_name\": providerState.accCompName,\r\n                \"acc_incorp_dt\": providerState.accIncorpDt,\r\n                \"acc_tax_id\": providerState.accTaxId,\r\n                \"acc_time_zone\": providerState.accTimeZone,\r\n                \"acc_currency\": providerState.accCurrency,\r\n                \"acc_lang\": providerState.accLang,\r\n                \"acc_orient\": providerState.accOrient,\r\n                // \"dgl_md_prod_cats\": [{ \"id\": providerState.prodCategory }],\r\n                // \"dgl_md_prod_cats\": [\r\n                //     {\r\n                //         \"id\": providerState.prodCategory,\r\n                //         \"prod_cat_title\":null,\r\n                //         \"prod_cat_desc\": null,\r\n                //         \"prod_cat_img_url\": null,\r\n                //         \"md_pro_cat_status\": null,\r\n                //         \"dgl_acc_mno_id\": null\r\n                //     }\r\n                // ],\r\n                \"prod_cat_id\": providerState.prodCategory,\r\n                \"dgl_acc_mno_custom_fields\": providerState.fields,\r\n                \"acc_first_name\": providerState.accPrimeContFirstName,\r\n                \"acc_last_name\": providerState.accPrimeContLastName,\r\n                \"acc_middle_name\": providerState.accPrimeContMidName,\r\n                \"acc_email_id\": providerState.accEmailId,\r\n                \"acc_phone\": providerState.accPrimCont,\r\n                \"acc_alt_cont\": providerState.accAltCont,\r\n                \"acc_fax\": providerState.accFax,\r\n                \"acc_web_url\": providerState.accWebUrl,\r\n                \"acc_add_l1\": providerState.accAddL1,\r\n                \"acc_add_l2\": providerState.accAddL2,\r\n                \"acc_city\": providerState.accCity,\r\n                \"acc_state\": providerState.accState,\r\n                \"acc_country\": providerState.accCountry,\r\n                \"acc_zipcode\": providerState.accZipcode,\r\n                \"acc_username\": '',\r\n                \"pref_settle_type\": providerState.prefSettleType,\r\n                \"bill_cycle\": providerState.billCycle,\r\n                // \"bill_date\":\"2023-06-30T18:30:00.000Z\",\r\n                \"bill_due_tenor\": providerState.billDueTenor,\r\n                \"bank_branch_name\": providerState.bankBranchName,\r\n                \"bank_acc_num\": providerState.bankAccNum,\r\n                \"bank_name\": providerState.bankName,\r\n                \"ifsc_code\": providerState.ifscCode,\r\n                \"micr_code\": providerState.micrCode,\r\n                \"upload_cancel_cheque\": providerState.uploadCancelledCheque,\r\n                \"dgl_mno_files\": uploadEdDocument,\r\n                \"dgl_acc_users\": [\r\n                    {\r\n                        \"first_name\": providerState.userInfo.firstName,\r\n                        \"last_name\": providerState.userInfo.lastName,\r\n                        \"middle_name\": providerState.userInfo.middleName,\r\n                        \"email\": providerState.userInfo.emailId,\r\n                        \"phone\": providerState.userInfo.phoneNumber,\r\n                        \"status\": \"ACTIVE\",\r\n                        \"add_line1\": \"hyderabad\",\r\n                        \"add_line2\": \"Banglore\",\r\n                        \"profile_img\": \"http://dhoni\"\r\n                    }\r\n                ],\r\n                \"dgl_roles\": [\r\n                    {\r\n                        \"role_name\": providerState.userRole,\r\n                        \"role_desc\": providerState.description,\r\n                        \"permissions\": \"json string\",\r\n                        \"status\": 1,\r\n                        \"public_role_id\": providerState.publicRole,\r\n                        \"dgl_acc_mno_id\": acc_mno_id,\r\n                    }\r\n                ],\r\n                \"acc_status\": \"ACTIVE\",\r\n                \"acc_type\": \"Provider\",\r\n                \"dgl_contracts\": [\r\n                    {\r\n                        \"contract_name\": \"demo Contract\",\r\n                        \"contract_file\": providerState.contractFile,\r\n                        \"contr_desc\": \"demo Description\",\r\n                        \"enforce_date\": providerState.enforcementDate,\r\n                        \"signed_date\": providerState.signedDate,\r\n                        \"status\": providerState.contractStatus,\r\n                        \"terminate_date\": providerState.terminationDate,\r\n                        \"dgl_acc_mno_id\": acc_mno_id,\r\n                        \"dgl_md_contract_type_id\": providerState.contractType,\r\n                        \"dgl_contracts_receiving_parties\": 1\r\n                    }\r\n                ]\r\n            }\r\n\r\n            const resp = await apiSubmitProvider(createPayload)\r\n            if (resp.status === 'success') {\r\n                OpenNotification('success', 'Created successfully ')\r\n                navigate('/account-menu-item-view-3')\r\n\r\n\r\n\r\n\r\n            }\r\n            if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n        } else if (mode === \"EDIT\") {\r\n            console.log(providerState, \"providerStateedit\")\r\n            uploadEdDocument = uploadEdDocument.map((file) => {\r\n                if (file?.file_url != '') {\r\n                    return {\r\n                        \"id\": file.id,\r\n                        \"doc_name\": file?.doc_name,\r\n                        \"file_name\": file?.file_name,\r\n                        \"file_url\": file?.file_url,\r\n                        \"file_type\": file?.file_type,\r\n                    }\r\n                }\r\n            })\r\n            uploadEdDocument = uploadEdDocument.filter(item => item !== undefined && item !== null);\r\n            const updatePayload = {\r\n                \"id\": rowForEdit?.id,\r\n                \"acc_mno_parent\": acc_mno_parent_id,\r\n                \"acc_name\": providerState.accName,\r\n                \"acc_parent\": providerState.accType,\r\n                \"acc_comp_name\": providerState.accCompName,\r\n                \"acc_incorp_dt\": providerState.accIncorpDt,\r\n                \"acc_tax_id\": providerState.accTaxId,\r\n                \"acc_time_zone\": providerState.accTimeZone,\r\n                \"acc_currency\": providerState.accCurrency,\r\n                \"acc_lang\": providerState.accLang,\r\n                \"acc_orient\": providerState.accOrient,\r\n                \"acc_password\": \"12345\",\r\n                // \"dgl_md_prod_cats\": [\r\n                //     {\r\n                //         \"id\": providerState.prodCategory,\r\n                //         \"prod_cat_title\": null,\r\n                //         \"prod_cat_desc\": null,\r\n                //         \"prod_cat_img_url\": null,\r\n                //         \"md_pro_cat_status\": null,\r\n                //         \"dgl_acc_mno_id\": null\r\n                //     }\r\n                // ],\r\n                \"prod_cat_id\": providerState.prodCategory,\r\n                \"dgl_acc_mno_custom_fields\": providerState.fields,\r\n                \"acc_first_name\": providerState.accPrimeContFirstName,\r\n                \"acc_middle_name\": providerState.accPrimeContMidName,\r\n                \"acc_last_name\": providerState.accPrimeContLastName,\r\n                \"acc_email_id\": providerState.accEmailId,\r\n                \"acc_alt_cont\": providerState.accAltCont,\r\n                \"acc_fax\": providerState.accFax,\r\n                \"acc_web_url\": providerState.accWebUrl,\r\n                \"acc_phone\": providerState.accPrimCont,\r\n                \"acc_add_l1\": providerState.accAddL1,\r\n                \"acc_add_l2\": providerState.accAddL2,\r\n                \"acc_city\": providerState.accCity,\r\n                \"acc_state\": providerState.accState,\r\n                \"acc_country\": providerState.accCountry,\r\n                \"acc_zipcode\": providerState.accZipcode,\r\n                \"pref_settle_type\": providerState.prefSettleType,\r\n                \"bill_cycle\": providerState.billCycle,\r\n                // \"bill_date\": \"2023-06-30T18:30:00.000Z\",\r\n                \"bill_due_tenor\": providerState.billDueTenor,\r\n                \"bank_acc_num\": providerState.bankAccNum,\r\n                \"bank_name\": providerState.bankName,\r\n                \"bank_branch_name\": providerState.bankBranchName,\r\n                \"ifsc_code\": providerState.ifscCode,\r\n                \"micr_code\": providerState.micrCode,\r\n                \"upload_cancel_cheque\": \"upload_cancel_cheque\",\r\n\r\n                \"dgl_mno_files\": uploadEdDocument,\r\n                \"dgl_acc_users\": [\r\n                    {\r\n                        \"id\": rowForEdit?.dgl_acc_users[0]?.id,\r\n                        \"acc_user_unq_id\": rowForEdit?.dgl_acc_users[0]?.acc_user_unq_id,\r\n                        // \"first_name\": rowForEdit?.dgl_acc_users[0]?.first_name,\r\n                        // \"middle_name\": rowForEdit?.dgl_acc_users[0]?.middle_name,\r\n                        // \"last_name\": rowForEdit?.dgl_acc_users[0]?.last_name,\r\n                        // \"email\":rowForEdit?.dgl_acc_users[0]?.email,\r\n                        // \"phone\":rowForEdit?.dgl_acc_users[0]?.phone,\r\n\r\n                        \"first_name\": providerState.userInfo.firstName,\r\n                        \"last_name\": providerState.userInfo.lastName,\r\n                        \"middle_name\": providerState.userInfo.middleName,\r\n                        \"email\": providerState.userInfo.emailId,\r\n                        \"phone\": providerState.userInfo.phoneNumber,\r\n                        \"profile_img\": \"http://dhoni\",\r\n                        \"add_line1\": rowForEdit?.dgl_acc_users[0]?.add_line1,\r\n                        \"add_line2\": rowForEdit?.dgl_acc_users[0]?.add_line2,\r\n                        \"city\": null,\r\n                        \"state\": null,\r\n                        \"country\": null,\r\n                        \"zipcode\": null,\r\n                        \"status\": \"ACTIVE\",\r\n                        \"dgl_acc_mno_id\": null,\r\n                        \"dgl_roles_id\": null,\r\n                        \"acc_password\": rowForEdit?.dgl_acc_users[0]?.acc_password,\r\n                        \"language\": null,\r\n                        \"orientation\": null,\r\n                        \"time_zone\": null\r\n                    }\r\n                ],\r\n\r\n                \"dgl_roles\": rowForEdit?.dgl_roles,\r\n                \"acc_status\": rowForEdit?.acc_status,\r\n                \"acc_unq_id\": rowForEdit?.acc_unq_id,\r\n                \"acc_type\": \"Provider\",\r\n                \"dgl_contracts\": rowForEdit?.dgl_contracts\r\n            }\r\n            const resp = await apiUpdateProvider(updatePayload)\r\n\r\n            if (resp.status === 'success') {\r\n                OpenNotification('success', 'Updated successfully ')\r\n                navigate('/account-menu-item-view-3')\r\n\r\n            }\r\n            if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    const onPrevious = () => {\r\n        if (mode == 'EDIT') {\r\n            onChange(step - 2)\r\n        } else {\r\n            onChange(step - 1)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (rowForEdit) {\r\n\r\n            const x = EditValuesToFieldsForProvider(provideIntialValues, rowForEdit)\r\n            x.uploadFiles.map(e => {\r\n                const matcheDobj = rowForEdit.dgl_mno_files.find(f => f.doc_name === e.doc_name)\r\n                if (matcheDobj) {\r\n                    e.file_name = matcheDobj.file_name\r\n                    e.file_url = matcheDobj.file_url\r\n                    e.file_type = matcheDobj.file_type\r\n                    e.doc_name = matcheDobj.doc_name\r\n                    e.id = matcheDobj.id\r\n                }\r\n            })\r\n            setProviderState(x);\r\n        }\r\n    }, [provideIntialValues, rowForEdit])\r\n    useEffect(() => {\r\n\r\n        dispatch(getCurrency({ enterAccount }))\r\n        dispatch(getParentAccount({ enterAccount }))\r\n        dispatch(getProductCategory({ enterAccount }))\r\n    }, [dispatch, enterAccount])\r\n\r\n\r\n    let breadCrumbList = [{\r\n        name: 'Accounts',\r\n        // link:\"/account-menu-item-view-1/accounts\"\r\n    }, {\r\n        name: 'Providers',\r\n        link: \"/account-menu-item-view-3\"\r\n    }, {\r\n        name: `Create Provider`,\r\n    }]\r\n\r\n    if (mode === \"EDIT\") {\r\n        breadCrumbList = [\r\n            {\r\n                name: 'Accounts',\r\n                // link:\"/account-menu-item-view-1/accounts\",\r\n            },\r\n            {\r\n                name: 'Providers',\r\n                link: \"/account-menu-item-view-3\",\r\n            },\r\n                        {\r\n                name: rowForEdit?.acc_name,\r\n                link: '/account-menu-item-view-3',\r\n                state:rowForEdit\r\n            },\r\n            {\r\n                name: \"Edit Provider\"\r\n            },\r\n        ]\r\n    }\r\n\r\n\r\n    return (\r\n        provideIntialValues && <div>\r\n            <div className='mb-5'>\r\n                {/* Accounts/Providers/{mode === \"EDIT\" ? \"Edit\" : \"Create\"} Provider */}\r\n                <CustomBreadcrumbs list={breadCrumbList} />\r\n            </div>\r\n            {mode === \"ADD\" ? <Steps current={step}>\r\n                <Steps.Item title=\"PROVIDER DETAILS\" />\r\n                <Steps.Item title=\"MASTER USER\" />\r\n                <Steps.Item title=\"PREVIEW\" />\r\n            </Steps> : <Steps current={step}>\r\n                <Steps.Item title=\"PROVIDER DETAILS\" />\r\n                <Steps.Item title=\"PREVIEW\" />\r\n            </Steps>}\r\n\r\n            <div className=\"mt-6  bg-gray-50 dark:bg-gray-700 rounded \">\r\n                {/* <h6>Step {`${step + 1}`}\r\n                    content\r\n   </h6> */}\r\n\r\n                {step == 0 && (\r\n                    <ProviderDetails\r\n                        ref={childRef}\r\n                        providerState={providerState}\r\n                        setProviderState={setProviderState}\r\n                        setStep={setStep}\r\n                        step={step}\r\n                        provideIntialValues={provideIntialValues}\r\n                        setProviderIntialValues={setProviderIntialValues}\r\n                        mode={mode}\r\n                    />\r\n                )}\r\n                {step == 1 && (\r\n                    <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n                        <ProviderMainUserInfo\r\n                            ref={childRef2}\r\n                            providerState={providerState}\r\n                            setProviderState={setProviderState}\r\n                            setStep={setStep}\r\n                            step={step}\r\n                            provideIntialValues={provideIntialValues}\r\n                            setProviderIntialValues={setProviderIntialValues}\r\n                        />\r\n                    </AdaptableCard>\r\n                )}\r\n\r\n                {step == 2 && (\r\n                    <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n                        <ProviderPreview providerState={providerState} step={step} setStep={setStep} message={message} mode={mode} />\r\n                    </AdaptableCard>\r\n                )}\r\n            </div>\r\n            <div className=\"mt-4 flex justify-between\">\r\n                <div>\r\n                    {step > 0 && <Button\r\n                        className=\"mx-2   \"\r\n                        style={{\r\n                            backgroundColor: \"#4D4D4D\", \r\n                            fontStyle: 'normal',\r\n                            fontSize: 500, fontSize: '18px',\r\n                            color: \"white\"\r\n                        }}\r\n                        onClick={onPrevious}\r\n                        type=\"button\"\r\n\r\n                    >\r\n                        Previous\r\n                    </Button>}\r\n                </div>\r\n\r\n                <div className='flex'>\r\n                    {step >= 0 && (\r\n                        <>\r\n                            <Link\r\n                                className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                to=\"/account-menu-item-view-3\"\r\n                            >\r\n                                <Button\r\n                                    className=\"mx-2\"\r\n                                    onClick={onPrevious}\r\n                                    variant=\"solid\"\r\n\r\n                                    style={{\r\n                                        backgroundColor: \"#4D4D4D\", \r\n                                        fontStyle: 'normal',\r\n                                        fontweight: 500, fontSize: '18px'\r\n                                    }}\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                            </Link>\r\n                        </>\r\n                    )}\r\n                    {step < 2 && (\r\n                        <Button\r\n                            onClick={onNext}\r\n                            disabled={step === 2}\r\n                            variant='solid'\r\n                            style={{\r\n                                color: \"white\", \r\n                                fontStyle: 'normal',\r\n                                fontweight: 500, fontSize: '18px',\r\n                            }}\r\n                        >\r\n                            {step === 2 ? 'Completed' : 'Next'}\r\n                        </Button>\r\n                    )}\r\n\r\n\r\n                    {step === 2 && (\r\n                        <>\r\n                            {/* <Link\r\n                            className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                            to=\"/account-menu-item-view-3\"\r\n                        > */}\r\n                            <Button onClick={submitApi}\r\n                                variant='solid'\r\n                                style={{\r\n                                    color: \"white\", \r\n                                    fontStyle: 'normal',\r\n                                    fontweight: 500, fontSize: '18px'\r\n                                }}>\r\n                                {'Submit for Approval'}\r\n                            </Button>\r\n                            {/* </Link> */}\r\n                        </>\r\n                    )}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controlled\r\n","import React from 'react'\r\nimport StepControlled from './StepControlled'\r\nimport { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport { Input, FormItem } from 'components/ui'\r\nimport { Field } from 'formik'\r\nexport default function NewProviders() {\r\n   \r\n  return (\r\n    <>\r\n    {/* <div>Accounts/Providers/Create Provider</div> */}\r\n    <div >\r\n    <StepControlled />\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}"],"names":["timeZone","id","value","interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","language","label","orientationtype","provValidationSchema","Yup","shape","accName","min","max","required","nullable","accType","accCompName","accIncorpDt","accTaxId","prodCategory","accTimeZone","accCurrency","accLang","accOrient","onChange","refId","props","currencyList","useSelector","state","providerList","data","parentAccountList","productCategoryList","productCatList","dateFormat","locale","timeZoneList","timezone","dialogIsOpen","setIsOpen","newLabel","setNewLabel","onDialogClose","e","className","innerRef","initialValues","provideIntialValues","accInfo","validationSchema","onSubmit","values","setSubmitting","updatedPayload","providerState","setProviderState","dataToStore","setProviderIntialValues","errors","touched","handleSubmit","autoComplete","style","color","invalid","errorMessage","type","name","placeholder","component","Input","field","form","options","operator","setFieldValue","filter","date","maxDate","Date","inputFormat","productCategory","currency","push","remove","fields","map","item","index","display","alignItems","flexWrap","marginRight","field_title","title","onClick","marginLeft","isOpen","onClose","onRequestClose","shouldCloseOnOverlayClick","shouldCloseOnEsc","target","variant","field_value","onDialogOk","icon","fill","disabled","length","provContactValidationSchema","accPrimeContFirstName","accPrimeContLastName","accEmailId","email","accPrimCont","ContactInfo","isSubmitting","accAltCont","accFax","accWebUrl","validate","validateURL","accCountry","accAddL1","accCity","accState","onNextChange","onBackChange","currentStepStatus","address","mode","auth","user","acc_user_id","enterAccount","beforeUpload","newFiles","files","apiUploadFiles","ress","showContent","setShowContent","content","setContent","onClickView","fileInfo","backgroundColor","actions","uploadFiles","console","log","fil","i","doc_type","error","doc_name","is_mandatory","draggable","updatedFiles","uploadRes","filesDetails","fileUnqId","fileName","minHeight","file_url","file_name","substring","CloseButton","refIdAdd","every","additionalFiles","setStep","step","OpenNotification","file","file_type","src","appConfig","alt","window","open","provSettlementValidationSchema","billCycle","billDueTenor","prefSettleType","ifscCode","bankName","bankAccNum","bankBranchName","micrCode","settlementType","settelementCycle","settelementWeekOpt","monthOptions","settelementMonthOpt","rememberMe","usernameOrEmail","includes","settlementInfo","sType","sCycle","settelementWeek","v","week","settelementMonth","settelementDate","uploadCancelledCheque","ProviderDetails","forwardRef","ref","ProviderAccountInfo","validated","ProviderContactInfo","ProviderAddressInfo","ProviderSettlementInfo","ProviderUploladFileFileInfo","ProviderAdditionalFileInfo","formData","setFormData","providerAccountInforef","React","providerContactInforef","providerAddressInforef","providerSettlementInforef","providerUploladFileInforef","providerAdditionalFileInforef","validationErrors","current","validateForm","then","Object","keys","setTouched","submitForm","useImperativeHandle","handleSubmitFromParent","bodyClass","divider","providerAccountInfo","providerContactInfo","onChangeUpload","onChangeAdditional","userValidationSchema","firstName","lastName","emailId","phoneNumber","userInfo","contarctStatus","userContractValidationSchema","contractType","signedDate","enforcementDate","terminationDate","contractStatus","dispatch","useDispatch","contractTypeList","getContractType","contractInfo","gender","contractFile","masterPermissionValidationSchema","publicRole","userRole","acc_mno_parent_unq_id","password","publicRolesList","getPublicRoles","masterInfoPermission","width","val","ProviderMainUserInfo","ProviderUserInfo","ProviderContractInfo","ProviderPermissionInfo","ProviderUserInforef","ProviderContractInforef","ProviderPermissionInforef","salesOrderList","onClickFile","showIcon","Array","isArray","join","GetDropdownLabel","dayjs","format","accPrimeContMidName","accZipcode","billDate","ReactHtmlParser","description","acc_mno_id","acc_mno_parent_id","location","useLocation","rowForEdit","providerIntialValues","providerId","accAddL2","roleId","middleName","upload_cancel_cheque","dgl_acc_mno_id","operatorFileTypes","fileList","getUploadFileType","res","uploadArray","acc_type","docType","JSON","parse","doc_type_name","useTimeOutMessage","navigate","useNavigate","childRef","useRef","childRef2","nextStep","submitApi","uploadEdDocument","concat","undefined","createPayload","apiSubmitProvider","resp","status","GetErrorMsg","updatePayload","dgl_acc_users","acc_user_unq_id","add_line1","add_line2","acc_password","dgl_roles","acc_status","acc_unq_id","dgl_contracts","apiUpdateProvider","onPrevious","x","EditValuesToFieldsForProvider","matcheDobj","dgl_mno_files","find","f","getCurrency","getParentAccount","getProductCategory","breadCrumbList","link","acc_name","list","fontStyle","fontSize","to","fontweight","NewProviders","StepControlled","_objectDestructuringEmpty","obj","TypeError"],"sourceRoot":""}