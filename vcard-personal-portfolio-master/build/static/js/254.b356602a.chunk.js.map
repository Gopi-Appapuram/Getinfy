{"version":3,"file":"static/js/254.b356602a.chunk.js","mappings":"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","sources":["services/DocType.js","utils/hooks/useTimeOutMessage.js","views/masterData/docType/components/CreateDocumentType.js","views/masterData/docType/store/dataSlice.js"],"sourcesContent":["\r\nimport ApiService from './ApiService'\r\n\r\nexport async function apiGetSalesItems(params) {\r\n    return ApiService.fetchData({\r\n        url: '/catalogs/cat-items-info',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiGetDocType(params) {\r\n    return ApiService.fetchData({\r\n        url: `/account/doc-types`,\r\n        method: 'get',\r\n        params\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\nexport async function apiCreateDocType(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/account/doc-types',\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        };\r\n\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n\r\n}\r\n\r\n\r\nexport async function apiUpdateDocType(data) {\r\n    \r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: `/account/doc-types/${data.id}`,\r\n            method: 'put',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        };\r\n\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n\r\n}\r\nexport async function apipdateDocTypeStatus(id, status) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/doc-types?id=${id}&mdDocTypeStatus=${status}`,\r\n        method: 'patch',\r\n\r\n    })\r\n}\r\n\r\n\r\nexport async function apiGetParentAccountDocType(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/acc-operators/dropdown/${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport RichTextEditor from 'components/shared/RichTextEditor'\r\nimport {\r\n  Input,\r\n  Button,\r\n  Select,\r\n  FormItem,\r\n  FormContainer,\r\n  Checkbox,\r\n  Alert,\r\n} from 'components/ui'\r\nimport { getParentAccount, } from '../store/dataSlice'\r\n\r\n\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport { apiCreateDocType, apiUpdateDocType } from 'services/DocType'\r\nimport { GetErrorMsg, OpenNotification } from 'views/Servicefile'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport * as Yup from 'yup';\r\nimport { EditandCopydocType } from 'utils/campareandCopy'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport ReactHtmlParser from 'html-react-parser'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\nimport { AdaptableCard } from 'components/shared'\r\n\r\nexport default function CreateDocumentType() {\r\n  const DocSchema = Yup.object().shape({\r\n    title: Yup.string().trim().required(\"Please enter document title\").nullable(),\r\n    // acc_unq_id: Yup.string().required(\"Please enter operator\").nullable(),\r\n  });\r\n\r\n  const validationSchemaforCheckbox = Yup.object().shape({\r\n    pdf: Yup.boolean(),\r\n    image: Yup.boolean(),\r\n    document: Yup.boolean(),\r\n    video: Yup.boolean(),\r\n    audio: Yup.boolean(),\r\n    spreadsheet: Yup.boolean(),\r\n  }).test('checkbox-required', 'Please select at least one file type', function (value) {\r\n\r\n    const isPdfSeleceted = value.pdf;\r\n    const isImageSelected = value.image;\r\n    const isDocumentSelected = value.document;\r\n    const isVideoSelected = value.video;\r\n    const isAudioSelected = value.audio;\r\n    const isSpreadsheetSelected = value.spreadsheet;\r\n    const isAtLeastOneSelected = isPdfSeleceted || isImageSelected || isDocumentSelected || isVideoSelected || isAudioSelected || isSpreadsheetSelected;\r\n    return isAtLeastOneSelected;\r\n\r\n  }).nullable()\r\n\r\n\r\n  const formFieldsType = [\r\n    { label: 'Text Field', value: 'TF' },\r\n    { label: 'Text Area', value: 'TA' },\r\n    { label: 'Drop Down', value: 'DD' },\r\n    { label: 'Radio Button', value: 'RB' },\r\n    { label: 'Check Boxes', value: 'CB' },\r\n    { label: 'CK Editor', value: 'CK' },\r\n  ]\r\n  const onCheck = (value, field, form) => {\r\n    form.setFieldValue(field.name, value)\r\n  }\r\n  let fileFormats = {\r\n    pdf: false,\r\n    image: false,\r\n    document: false,\r\n    video: false,\r\n    audio: false,\r\n    spreadsheet: false,\r\n  }\r\n\r\n  let intialValues = {\r\n    title: \"\",\r\n    allow_file_format: {\r\n      pdf: false,\r\n      image: false,\r\n      document: false,\r\n      video: false,\r\n      audio: false,\r\n      spreadsheet: false,\r\n    },\r\n    description: \"\",\r\n    acc_unq_id: \"\"\r\n  }\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const { enterAccount, user_type, unq_id\r\n  } = useSelector(\r\n    (state) => state.auth.user\r\n  )\r\n\r\n  const [message, setMessage] = useTimeOutMessage()\r\n  const navigate = useNavigate()\r\n  const formikRef = useRef()\r\n  const location = useLocation();\r\n  const mode = location.state?.mode ? location.state.mode : \"ADD\";\r\n  const rowForEdit = location.state?.data;\r\n  const checkBoxString = rowForEdit && rowForEdit.allow_file_format ? JSON.parse(rowForEdit.allow_file_format) : fileFormats;\r\n\r\n  const [checkboxValues, setCheckboxValues] = useState(checkBoxString);\r\n  const [docTypeIntialValues, setdocTypeIntialValues] = useState(EditandCopydocType(intialValues, rowForEdit ? rowForEdit : intialValues))\r\n\r\n  const parentAccountList = useSelector((state) => state.doctypeList?.data?.parentAccountList)\r\n\r\n  useEffect(() => {\r\n    if (rowForEdit) {\r\n      const docTypeEditIntialValues = EditandCopydocType(docTypeIntialValues, rowForEdit);\r\n\r\n      setdocTypeIntialValues(docTypeEditIntialValues)\r\n    }\r\n\r\n  }, [docTypeIntialValues, rowForEdit])\r\n\r\n  // useEffect(() => {\r\n  //   if(rowForEdit) {\r\n  //     dispatch(getParentAccount)\r\n  //   }\r\n  // })\r\n\r\n  useEffect(() => {\r\n    dispatch(getParentAccount({ enterAccount }))\r\n\r\n  }, [dispatch, enterAccount])\r\n\r\n  const handleCheckboxChange = async (event, name) => {\r\n    // const { name, checked } = event.target;\r\n\r\n    setCheckboxValues((prevValues) => ({\r\n      ...prevValues,\r\n      [name]: event.target.checked\r\n    }));\r\n  };\r\n\r\n\r\n  const submitApi = async (values) => {\r\n    let intialValues = {\r\n      title: values.title,\r\n      allow_file_format: checkboxValues,\r\n      description: values.description,\r\n    }\r\n    setdocTypeIntialValues(intialValues)\r\n    //const doc_type_desc = ReactHtmlParser(values?.description);\r\n\r\n    if (mode === \"ADD\") {\r\n      let data = formikRef.current.values\r\n      let createPayload = {\r\n\r\n        \"doc_type_title\": data.title.trim(),\r\n        \"allow_file_format\": JSON.stringify(intialValues.allow_file_format),\r\n        \"doc_type_desc\": values.description,\r\n        \"md_tax_status\": \"ACTIVE\",\r\n        \"md_doc_status\": \"ACTIVE\",\r\n        \"unq_id\": user_type !== \"GlobalMno\" ? enterAccount : data.acc_unq_id\r\n\r\n      }\r\n      const resp = await apiCreateDocType(createPayload)\r\n      if (resp.status === 'success') {\r\n        OpenNotification('success', 'Created successfully')\r\n        navigate('/masterDataMenu-item-view-1')\r\n      }\r\n\r\n      if (resp.status === 'failed') {\r\n        setMessage(GetErrorMsg(resp));\r\n      }\r\n\r\n    } else if (mode === \"EDIT\") {\r\n      let data = formikRef.current.values\r\n      let updatePayload = {\r\n        \"id\": rowForEdit?.id,\r\n        \"doc_type_title\": data.title.trim(),\r\n        \"allow_file_format\": JSON.stringify(intialValues.allow_file_format),\r\n        \"doc_type_desc\": values.description,\r\n        \"md_doc_status\": rowForEdit?.md_doc_status,\r\n        \"unq_id\": user_type !== \"GlobalMno\" ? enterAccount : data.acc_unq_id\r\n      }\r\n      const resp = await apiUpdateDocType(updatePayload)\r\n\r\n      if (resp.status === 'success') {\r\n        OpenNotification('success', 'Updated successfully')\r\n        navigate('/masterDataMenu-item-view-1')\r\n      }\r\n\r\n      if (resp.status === 'failed') {\r\n        setMessage(GetErrorMsg(resp));\r\n      }\r\n    }\r\n  }\r\n\r\n  const validateCheckBox = async (passedValue) => {\r\n\r\n    try {\r\n      await validationSchemaforCheckbox.validate({ ...checkboxValues });\r\n    } catch (error) {\r\n      return error.message;\r\n    }\r\n\r\n  }\r\n\r\n  let breadCrumbList = [{\r\n    name: 'Master Data',\r\n    // link:\"/home\"\r\n  },\r\n  {\r\n    name: 'Doc Type',\r\n    link: \"/masterDataMenu-item-view-1\"\r\n  },\r\n  {\r\n    name: `Add Doc Type`,\r\n  }]\r\n\r\n\r\n  if (mode === \"EDIT\") {\r\n    breadCrumbList = [\r\n      {\r\n        name: 'Master Data',\r\n        // link:\"/home\"\r\n      },\r\n      {\r\n        name: 'Doc Type',\r\n        link: \"/masterDataMenu-item-view-1\"\r\n      },\r\n      {\r\n        name: rowForEdit?.doc_type_title,\r\n        link: '/masterDataMenu-item-view-1',\r\n        state: rowForEdit\r\n      },\r\n      {\r\n        name: `Edit Doc Type`,\r\n      },\r\n\r\n\r\n    ]\r\n  }\r\n\r\n  return (\r\n    <>\r\n\r\n      {message && <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n        {message}\r\n      </Alert>}\r\n\r\n      <div>\r\n        {/* Master Data/Doc Type/Create Document Type */}\r\n        <CustomBreadcrumbs list={breadCrumbList} />\r\n      </div>\r\n      <div className='mt-5'>\r\n        <h3>{mode === \"EDIT\" ? \"Edit\" : \"Create\"} Document Type</h3>\r\n        <div>\r\n          <Formik\r\n            innerRef={formikRef}\r\n            initialValues={docTypeIntialValues}\r\n\r\n            validationSchema={DocSchema}\r\n            onSubmit={\r\n              submitApi}\r\n          >\r\n            {({ values, touched, errors, isSubmitting, handleSubmit }) => {\r\n              return (\r\n                <>\r\n                  <Form onSubmit={handleSubmit}>\r\n                    <div style={{ backgroundColor: \"#F5F5F5\", padding: \"15px\", marginTop: \"10px\" }}>\r\n                      <FormContainer>\r\n                        <AdaptableCard className=\"h-full p-4\" bodyClass=\"h-full\">\r\n                          <div className='md:grid grid-cols-2 gap-4'>\r\n                            <FormItem\r\n                              label={<p>Operator <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                              invalid={errors.acc_unq_id && touched.acc_unq_id}\r\n                              errorMessage={errors.acc_unq_id}\r\n\r\n                            >\r\n                              <Field name=\"acc_unq_id\" validate={async (passedValue) => {\r\n                                if (user_type === \"GlobalMno\") {\r\n                                  try {\r\n                                    await Yup.string().required('Please select operator').validate(passedValue);\r\n                                  } catch (error) {\r\n                                    return error.message;\r\n                                  }\r\n                                }\r\n                              }}>\r\n                                {({ field, form }) => (\r\n                                  <Select\r\n                                    isDisabled={user_type !== \"GlobalMno\" ? true : false}\r\n                                    placeholder=\"Select Operator\"\r\n                                    field={field}\r\n                                    form={form}\r\n                                    options={parentAccountList}\r\n                                    value={user_type !== \"GlobalMno\" ? parentAccountList?.filter(\r\n                                      (label) =>\r\n                                        label.acc_unq_id === enterAccount\r\n                                    ) : parentAccountList?.filter(\r\n                                      (label) =>\r\n                                        label.acc_unq_id === values.acc_unq_id\r\n                                    )}\r\n                                    onChange={(label) =>\r\n                                      form.setFieldValue(\r\n                                        field.name,\r\n                                        label.acc_unq_id\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                )}\r\n                              </Field>\r\n                            </FormItem>\r\n                          </div>\r\n                          <div className='md:grid grid-cols-2 gap-4'>\r\n                            <FormItem\r\n                              label={<p>Document Title <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                              invalid={errors.title && touched.title}\r\n                              errorMessage={errors.title}\r\n                            >\r\n                              <Field\r\n                                // className='w-1/3'\r\n                                type=\"text\"\r\n                                autoComplete=\"off\"\r\n                                name=\"title\"\r\n                                placeholder=\"Enter Document Title\"\r\n                                component={Input}\r\n                              />\r\n                            </FormItem>\r\n\r\n                          </div>\r\n                          <FormItem\r\n                            label={<p>Allow File Format <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                            invalid={touched.allow_file_format && (checkboxValues[\"pdf\"] || checkboxValues[\"image\"] || checkboxValues[\"document\"] || checkboxValues[\"video\"] || checkboxValues[\"audio\"] || checkboxValues[\"spreadsheet\"]) !== true}\r\n                            errorMessage={\"Please select at least one file type\"}\r\n                          >\r\n                            <div style={{ display: \"flex\", marginTop: \"7px\", marginLeft: \"3px\" }}>\r\n                              <p className='flex'>\r\n                                <Field\r\n                                  className='h-5 w-5'\r\n                                  type=\"checkbox\"\r\n                                  name=\"allow_file_format.pdf\"\r\n                                  checked={checkboxValues[\"pdf\"]}\r\n                                  onChange={(e) => handleCheckboxChange(e, \"pdf\")}\r\n                                  validate={validateCheckBox}\r\n                                />\r\n                                <label htmlFor=\"allow_file_format.pdf\" className='mr-4 ml-2'>Pdf</label>\r\n                              </p>\r\n                              <p className='flex'>\r\n                                <Field\r\n                                  className='h-5 w-5'\r\n                                  type=\"checkbox\"\r\n                                  name=\"allow_file_format.image\"\r\n                                  checked={checkboxValues[\"image\"]}\r\n                                  onChange={(e) => handleCheckboxChange(e, \"image\")}\r\n                                  validate={validateCheckBox}\r\n                                />\r\n                                <label htmlFor=\"allow_file_format.image\" className='mr-4 ml-2'>Image</label>\r\n                              </p>\r\n                              <p className='flex'>\r\n                                <Field className='h-5 w-5'\r\n                                  type=\"checkbox\"\r\n                                  name=\"allow_file_format.document\"\r\n                                  checked={checkboxValues[\"document\"]}\r\n                                  onChange={(e) => handleCheckboxChange(e, \"document\")}\r\n                                  validate={validateCheckBox}\r\n                                />\r\n                                <label htmlFor=\"allow_file_format.document\" className='mr-4 ml-2'>Document</label>\r\n                              </p>\r\n\r\n                            </div>\r\n                            <div style={{ display: \"flex\", marginTop: \"2%\", marginLeft: \"3px\" }}>\r\n                              <p className='flex'>\r\n                                <Field\r\n                                  className='h-5 w-5 '\r\n                                  type=\"checkbox\"\r\n                                  name=\"allow_file_format.video\"\r\n                                  checked={checkboxValues[\"video\"]}\r\n                                  onChange={(e) => handleCheckboxChange(e, \"video\")}\r\n                                  validate={validateCheckBox}\r\n                                />\r\n                                <label htmlFor=\"allow_file_format.video\" className='mr-4 ml-2'>Video</label>\r\n                              </p>\r\n                              <p className='flex'>\r\n                                <Field\r\n                                  className='h-5 w-5'\r\n                                  type=\"checkbox\"\r\n                                  name=\"allow_file_format.audio\"\r\n                                  checked={checkboxValues[\"audio\"]}\r\n                                  onChange={(e) => handleCheckboxChange(e, \"audio\")}\r\n                                  validate={validateCheckBox}\r\n                                />\r\n                                <label htmlFor=\"allow_file_format.audio\" className='mr-4 ml-2'>Audio</label>\r\n                              </p>\r\n                              <p className='flex'>\r\n                                <Field\r\n                                  className='h-5 w-5'\r\n                                  type=\"checkbox\"\r\n                                  name=\"allow_file_format.spreadsheet\"\r\n                                  checked={checkboxValues[\"spreadsheet\"]}\r\n                                  onChange={(e) => handleCheckboxChange(e, \"spreadsheet\")}\r\n                                  validate={validateCheckBox}\r\n                                />\r\n                                <label htmlFor=\"allow_file_format.spreadsheet\" className='ml-2'>Spreadsheet</label>\r\n                              </p>\r\n                            </div>\r\n                          </FormItem>\r\n                          <div className=\"card md:grid grid-cols-2 gap-4  mt-6 ml-2\">\r\n\r\n\r\n                            {/* <FormItem label=\"Max no. of Files\">\r\n                              <Field\r\n                                type=\"text\"\r\n                                autoComplete=\"off\"\r\n                                name=\"title\"\r\n                                placeholder=\"Enter the No.\"\r\n                                component={Input}\r\n                              />\r\n                            </FormItem>\r\n                            <FormItem\r\n                              label=\"Max File Size(in MB)\">\r\n                              <Field\r\n                                type=\"text\"\r\n                                autoComplete=\"off\"\r\n                                name=\"title\"\r\n                                placeholder=\"Enter the file size\"\r\n                                component={Input}\r\n                              />\r\n\r\n\r\n                            </FormItem> */}\r\n                          </div>\r\n\r\n                          <div style={{ width: \"70%\" }} className=\"ml-2\">\r\n                            <FormItem label=\"Description\"\r\n                            >\r\n                              <Field name=\"description\" >\r\n                                {({ field, form }) => (\r\n                                  <RichTextEditor\r\n                                    value={field.value}\r\n                                    onChange={(val) =>\r\n                                      form.setFieldValue(field.name, val)\r\n                                    }\r\n                                  />\r\n                                )}\r\n                              </Field>\r\n                            </FormItem>\r\n                          </div>\r\n                        </AdaptableCard>\r\n                      </FormContainer>\r\n                    </div>\r\n                    <div className=\"mt-4 text-right flex justify-end\">\r\n                      <>\r\n                        <Link\r\n                          className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                          to=\"/masterDataMenu-item-view-1\"\r\n                        >\r\n                          <Button\r\n                            className=\"mx-2\"\r\n                            style={{\r\n                              backgroundColor: \"#4D4D4D\",\r\n                              fontStyle: 'normal',\r\n                              fontSize: '18px'\r\n                            }}\r\n                            variant=\"solid\"\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                        </Link>\r\n\r\n                        <Button onClick={submitApi} variant='solid' style={{\r\n                          fontStyle: 'normal',\r\n                          fontSize: '18px',\r\n                        }} >\r\n                          {'Submit'}\r\n                        </Button>\r\n                      </>\r\n                    </div>\r\n                  </Form>\r\n\r\n                </>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { apiGetSalesItems, apiDeleteSalesItems, apiGetParentAccountDocType, apiGetDocType } from 'services/DocType'\r\n\r\nexport const getItems = createAsyncThunk(\r\n    'doctypeList/data/getItems',\r\n    async (data) => {\r\n        const response = await apiGetSalesItems()\r\n        return response.data.response\r\n    }\r\n)\r\n\r\nexport const getDocTypeData = createAsyncThunk(\r\n    'doctypeList/data/getDocTypeData',\r\n    async (data) => {\r\n        const response = await apiGetDocType(data)\r\n        \r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const getParentAccount = createAsyncThunk(\r\n    'doctypeList/data/getParentAccount',\r\n    async (data) => {\r\n        const response = await apiGetParentAccountDocType(data)\r\n        \r\n        return response.data\r\n    }\r\n)\r\n\r\n// export const deleteItems = async (data) => {\r\n//     const response = await apiDeleteSalesItems(data)\r\n//     return response.data\r\n// }\r\n\r\nexport const initialTableData = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    query: '',\r\n    sort: {\r\n        Item: '',\r\n        key: '',\r\n    },\r\n}\r\n\r\nconst dataSlice = createSlice({\r\n    name: 'doctypeList/data',\r\n    initialState: {\r\n        loading: false,\r\n        ItemList: [],\r\n        tableData: initialTableData,\r\n        DocTypeData: [],\r\n        parentAccountList:[],\r\n    },\r\n    reducers: {\r\n        setItemList: (state, action) => {\r\n            state.ItemList = action.payload\r\n        },\r\n        setTableData: (state, action) => {\r\n            state.tableData = action.payload\r\n        },\r\n        setDocTypeData: (state, action) => {\r\n            state.DocTypeData = action.payload\r\n        },\r\n        setParentAccountData: (state, action) => {\r\n            state.parentAccountList = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [getItems.fulfilled]: (state, action) => {\r\n            state.ItemList = action.payload\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getItems.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getDocTypeData.fulfilled]: (state, action) => {\r\n\r\n            state.DocTypeData = action.payload.res\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n            \r\n        },\r\n        [getDocTypeData.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getParentAccount.fulfilled]: (state, action) => {\r\n            \r\n            state.parentAccountList = action.payload?.map((parent) => ({\r\n                value: parent.id,\r\n                label: parent.acc_name,\r\n                acc_unq_id:parent.acc_unq_id\r\n            }))\r\n           \r\n            state.loading = false\r\n        },\r\n        [getParentAccount.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n    },\r\n})\r\n\r\nexport const { setItemList, setTableData, setDocTypeData, setParentAccountData } = dataSlice.actions\r\n\r\nexport default dataSlice.reducer\r\n"],"names":["apiGetSalesItems","params","ApiService","url","method","apiGetDocType","apiCreateDocType","data","resp","status","message","response","toString","apiUpdateDocType","id","apipdateDocTypeStatus","apiGetParentAccountDocType","enterAccount","interval","useState","setMessage","useEffect","timeout","setTimeout","clearTimeout","CreateDocumentType","DocSchema","Yup","shape","title","trim","required","nullable","validationSchemaforCheckbox","pdf","image","document","video","audio","spreadsheet","test","value","isPdfSeleceted","isImageSelected","isDocumentSelected","isVideoSelected","isAudioSelected","isSpreadsheetSelected","intialValues","allow_file_format","description","acc_unq_id","dispatch","useDispatch","useSelector","state","auth","user","user_type","unq_id","useTimeOutMessage","navigate","useNavigate","formikRef","useRef","location","useLocation","mode","rowForEdit","checkBoxString","JSON","parse","checkboxValues","setCheckboxValues","EditandCopydocType","docTypeIntialValues","setdocTypeIntialValues","parentAccountList","doctypeList","docTypeEditIntialValues","getParentAccount","handleCheckboxChange","event","name","prevValues","target","checked","submitApi","values","current","createPayload","stringify","OpenNotification","GetErrorMsg","updatePayload","md_doc_status","validateCheckBox","passedValue","validate","breadCrumbList","link","doc_type_title","className","type","showIcon","list","innerRef","initialValues","validationSchema","onSubmit","touched","errors","handleSubmit","isSubmitting","style","backgroundColor","padding","marginTop","bodyClass","label","color","invalid","errorMessage","field","form","isDisabled","placeholder","options","filter","onChange","setFieldValue","autoComplete","component","Input","display","marginLeft","e","htmlFor","width","val","to","fontStyle","fontSize","variant","onClick","getItems","createAsyncThunk","getDocTypeData","dataSlice","createSlice","initialState","loading","ItemList","tableData","total","pageIndex","pageSize","query","sort","Item","key","DocTypeData","reducers","setItemList","action","payload","setTableData","setDocTypeData","setParentAccountData","extraReducers","fulfilled","pending","res","map","parent","acc_name","actions"],"sourceRoot":""}