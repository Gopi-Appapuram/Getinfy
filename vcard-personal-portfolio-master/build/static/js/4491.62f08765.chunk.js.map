{"version":3,"file":"static/js/4491.62f08765.chunk.js","mappings":"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","sources":["utils/hooks/useTimeOutMessage.js","views/masterData/CustomerCategory/components/AddCustomer.js","views/masterData/CustomerCategory/components/NewCustomerCategory.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Radio,\r\n    Checkbox,\r\n    Alert\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport { apiCreateCategory, apiUpdatcust } from 'services/CustCategoryService'\r\nimport { CustCategoryEditandCopy } from 'utils/campareandCopy'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { GetErrorMsg, OpenNotification } from 'views/Servicefile'\r\nimport ReactHtmlParser from 'html-react-parser'\r\nimport { getCustAccount } from '../store/dataSlice'\r\nimport * as Yup from \"yup\";\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\n\r\nconst placementList = [\r\n    { name: 'Enterprise Customer', value: 'top' },\r\n    { name: 'Retail Customer', value: 'right' },\r\n\r\n]\r\n\r\nconst validationSchemaforCheckbox = Yup.object().shape({\r\n    Enterprise_Customer: Yup.boolean(),\r\n    Retail_Customer: Yup.boolean(),\r\n}).test('checkbox-required', 'Please select at the customer type', function (value) {\r\n\r\n    const isEnterpriseSelected = value.Enterprise_Customer;\r\n    const isRetailSelected = value.Retail_Customer;\r\n    const isAtLeastOneSelected = isEnterpriseSelected || isRetailSelected;\r\n    return isAtLeastOneSelected;\r\n}).nullable()\r\n\r\nconst custCatValidationSchema = Yup.object().shape({\r\n    // acc_unq_id: Yup.string().required('Please select operator').nullable(),\r\n    title: Yup.string().trim().required('Please enter category title').nullable(),\r\n})\r\n\r\nconst AddCustomer = (props) => {\r\n    // const [placement, setPlacement] = useState(placementList[1].value)\r\n    // const onPlacementChange = (val) => {\r\n    //     setPlacement(val)\r\n    // }\r\n    // // const onCheck = (value, field, form) => {\r\n    // //     form.setFieldValue(field.name, value)\r\n    // // }\r\n    let customerType = {\r\n        \"Enterprise_Customer\": false,\r\n        \"Retail_Customer\": false\r\n    }\r\n\r\n    let intialValues = {\r\n        title: \"\",\r\n        description: \"\",\r\n        cust_cat_type: {\r\n            Enterprise_Customer: false,\r\n            Retail_Customer: false,\r\n        },\r\n        acc_unq_id: \"\"\r\n    }\r\n    const {\r\n        enterAccount,\r\n        unq_id, user_type\r\n    } = useSelector((state) => state?.auth?.user)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const [custIntialValues, setCustIntialValues] = useState(intialValues)\r\n    const [userState, setUserState] = useState({})\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    const formikRef = useRef()\r\n    const location = useLocation();\r\n    const mode = location.state?.mode ? location.state.mode : \"ADD\";\r\n    const rowForEdit = location.state?.data;\r\n    const navigate = useNavigate()\r\n    const checkBoxString = rowForEdit && rowForEdit.cust_cat_type ? JSON.parse(rowForEdit.cust_cat_type) : customerType;\r\n    const [checkboxValues, setCheckboxValues] = useState(checkBoxString);\r\n    const custAccountList = useSelector((state) => state.CustomerCategoryList?.data?.custAccountList)\r\n\r\n    const handleCheckboxChange = async (event, name) => {\r\n\r\n        setCheckboxValues((prevValues) => ({\r\n            ...prevValues,\r\n            [name]: event.target.checked\r\n        }));\r\n    };\r\n\r\n    const submitApi = async (data) => {\r\n        // const cust_cat_desc = ReactHtmlParser(data?.description);\r\n        let intialValues = {\r\n            title: data.title,\r\n            description: data.description,\r\n            cust_cat_type: checkboxValues,\r\n            acc_unq_id: data.acc_unq_id\r\n        }\r\n        let Payload =\r\n        {\r\n            \"cust_cat_type\": JSON.stringify(intialValues.cust_cat_type),\r\n            \"cust_cat_title\": data.title.trim(),\r\n            \"cust_cat_desc\": data?.description,\r\n            \"md_cus_status\": \"ACTIVE\",\r\n            \"unq_id\": user_type !== \"GlobalMno\" ? enterAccount : data.acc_unq_id\r\n        }\r\n\r\n        if (mode === \"ADD\") {\r\n            const resp = await apiCreateCategory(Payload)\r\n\r\n            if (resp.status === 'success') {\r\n                OpenNotification(\"success\", 'Created successfully')\r\n                navigate('/masterDataMenu-item-view-3')\r\n\r\n\r\n            }\r\n            if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n        } else if (mode === \"EDIT\") {\r\n\r\n            Payload.id = rowForEdit.id\r\n            Payload.md_cus_status = rowForEdit.md_cus_status\r\n\r\n            const resp = await apiUpdatcust(Payload)\r\n            if (resp.status === 'success') {\r\n                OpenNotification(\"success\", 'Updated successfully')\r\n                navigate('/masterDataMenu-item-view-3')\r\n\r\n\r\n            }\r\n            if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (rowForEdit) {\r\n            const userEditIntialValues = CustCategoryEditandCopy(intialValues, rowForEdit);\r\n\r\n            setUserState(userEditIntialValues)\r\n        }\r\n\r\n    }, [rowForEdit])\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(getCustAccount({ enterAccount }))\r\n\r\n    }, [dispatch, enterAccount])\r\n\r\n\r\n    const validateCheckBox = async (passedValue) => {\r\n\r\n        try {\r\n            await validationSchemaforCheckbox.validate({ ...checkboxValues });\r\n        } catch (error) {\r\n            return error.message;\r\n        }\r\n\r\n    }\r\n\r\n    let breadCrumbList = [{\r\n        name: 'Master Data',\r\n        // link:\"/home\"\r\n    },\r\n    {\r\n        name: 'Customer Category',\r\n        link: \"/masterDataMenu-item-view-3\"\r\n    },\r\n    {\r\n        name: `Add Customer Category`,\r\n    }]\r\n\r\n\r\n    if (mode === \"EDIT\") {\r\n        breadCrumbList = [\r\n            {\r\n                name: 'Master Data',\r\n                // link:\"/home\"\r\n            },\r\n            {\r\n                name: 'Customer Category',\r\n                link: \"/masterDataMenu-item-view-3\"\r\n            },\r\n            {\r\n                name: rowForEdit?.cust_cat_title,\r\n                link: '/masterDataMenu-item-view-3',\r\n                state: rowForEdit\r\n            },\r\n            {\r\n                name: `Edit Customer Category`,\r\n            },\r\n\r\n\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            {message && <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                {message}\r\n            </Alert>}\r\n            <div>\r\n                {/* Master Data / Customer Category / Add Customer Category */}\r\n                <CustomBreadcrumbs list={breadCrumbList} />\r\n            </div>\r\n            <h3 className='mb-5 mt-3'>{mode === \"EDIT\" ? \"Edit \" : \"Create \"}Customer Category</h3>\r\n\r\n            <div className=\"mt-6  rounded \">\r\n\r\n\r\n\r\n                <Formik\r\n                    innerRef={formikRef}\r\n                    initialValues={intialValues}\r\n                    validationSchema={custCatValidationSchema}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        setSubmitting(true)\r\n                        submitApi(values)\r\n\r\n                    }}\r\n                >\r\n                    {({ values, touched, errors, isSubmitting }) => {\r\n                        return (\r\n                            <Form>\r\n                                <div style={{ backgroundColor: \"#F5F5F5\", padding: \"15px\", marginTop: \"10px\" }}>\r\n                                    <FormContainer>\r\n                                        <AdaptableCard className=\"h-full p-4\" bodyClass=\"h-full\">\r\n                                            <div className=\"gap-3 mx-4 my-2 mt-4\">\r\n                                                <div className='md:grid grid-cols-2 gap-4'>\r\n                                                    <FormItem\r\n                                                        label={<p>Operator <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        invalid={errors.acc_unq_id && touched.acc_unq_id}\r\n                                                        errorMessage={errors.acc_unq_id}\r\n\r\n                                                    >\r\n                                                        <Field name=\"acc_unq_id\" validate={async (passedValue) => {\r\n                                                            if (user_type === \"GlobalMno\") {\r\n                                                                try {\r\n                                                                    await Yup.string().required('Please select operator').validate(passedValue);\r\n                                                                } catch (error) {\r\n                                                                    return error.message;\r\n                                                                }\r\n                                                            }\r\n                                                        }}>\r\n\r\n                                                            {({ field, form }) => (\r\n                                                                <Select\r\n                                                                    isDisabled={user_type !== \"GlobalMno\" ? true : false}\r\n                                                                    placeholder=\"Select Operator\"\r\n                                                                    field={field}\r\n                                                                    form={form}\r\n                                                                    disabled={true}\r\n                                                                    options={custAccountList}\r\n                                                                    value={user_type !== \"GlobalMno\" ? custAccountList?.filter(\r\n                                                                        (label) =>\r\n                                                                            label.acc_unq_id === enterAccount\r\n                                                                    ) : custAccountList?.filter(\r\n                                                                        (label) =>\r\n                                                                            label.acc_unq_id === values.acc_unq_id\r\n                                                                    )}\r\n                                                                    onChange={(label) =>\r\n                                                                        form.setFieldValue(\r\n                                                                            field.name,\r\n                                                                            label.acc_unq_id\r\n                                                                        )\r\n                                                                    }\r\n                                                                />\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                                <div className='md:grid grid-cols-2'>\r\n                                                    <FormItem\r\n                                                        label={<p>Select Customer Type<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        invalid={touched.cust_cat_type && (checkboxValues[\"Enterprise_Customer\"] || checkboxValues[\"Retail_Customer\"]) !== true}\r\n                                                        errorMessage={\"Please select at the customer type\"}\r\n                                                    >\r\n                                                        <div className=\"flex mt-2\">\r\n                                                            <div className='flex '>\r\n\r\n                                                                {/* <p className='text-lg ' >  */}\r\n                                                                <Field className='w-5 h-5 mt-1 '\r\n                                                                    type=\"checkbox\"\r\n                                                                    name=\"cust_cat_type.Enterprise_Customer\" // Match the name used in Yup validation schema\r\n                                                                    checked={checkboxValues[\"Enterprise_Customer\"]}\r\n                                                                    onChange={(e) => handleCheckboxChange(e, \"Enterprise_Customer\")}\r\n                                                                    validate={validateCheckBox}\r\n                                                                />\r\n                                                                <label className='ml-4 mb-2 text-lg' htmlFor=\"cust_cat_type.Enterprise_Customer\">Enterprise Customer</label>\r\n                                                                {/* </p> */}\r\n                                                            </div>\r\n                                                            <div className='flex ml-3'>\r\n                                                                {/* <p className='text-lg' > */}\r\n                                                                <Field\r\n                                                                    className='w-5 h-5 mt-1 '\r\n                                                                    type=\"checkbox\"\r\n                                                                    name=\"cust_cat_type.Retail_Customer\" // Match the name used in Yup validation schema\r\n                                                                    checked={checkboxValues[\"Retail_Customer\"]}\r\n                                                                    onChange={(e) => handleCheckboxChange(e, \"Retail_Customer\")}\r\n                                                                    validate={validateCheckBox}\r\n                                                                />\r\n                                                                <label className='text-lg ml-4' htmlFor=\"cust_cat_type.Retail_Customer\">Retail Customer</label>\r\n                                                                {/* </p> */}\r\n\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </FormItem>\r\n                                                    <div className='ml-6'>\r\n                                                        <FormItem\r\n                                                            label={<p>Customer Category Title <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                            invalid={errors.title && touched.title}\r\n                                                            errorMessage={errors.title}\r\n                                                        >\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                name=\"title\"\r\n                                                                placeholder=\"Enter Category Title\"\r\n                                                                component={Input}\r\n                                                            />\r\n                                                        </FormItem>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <FormItem\r\n                                                    label=\"Description\"\r\n\r\n                                                >\r\n                                                    <Field name=\"description\"  >\r\n                                                        {({ field, form }) => (\r\n                                                            <RichTextEditor\r\n                                                                value={field.value}\r\n                                                                onChange={(val) =>\r\n                                                                    form.setFieldValue(field.name, val)\r\n                                                                }\r\n                                                            />\r\n                                                        )}\r\n                                                    </Field>\r\n                                                </FormItem>\r\n                                            </div>\r\n                                        </AdaptableCard>\r\n                                    </FormContainer>\r\n                                </div>\r\n                                <div className=\"pt-4 text-right  w-full flex justify-end\">\r\n                                    <>\r\n                                        <Link\r\n                                            className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                            to=\"/masterDataMenu-item-view-3\">\r\n                                            <Button\r\n                                                className=\"mx-2\"\r\n                                                variant=\"solid\"\r\n                                                style={{\r\n                                                    backgroundColor: \"#4D4D4D\",\r\n                                                    fontStyle: 'normal',\r\n                                                    fontSize: '18px'\r\n                                                }}\r\n                                            >\r\n                                                Cancel\r\n                                            </Button>\r\n                                        </Link>\r\n\r\n\r\n                                        <Button type='submit' variant='solid' style={{\r\n                                            fontStyle: 'normal',\r\n                                            fontSize: '18px',\r\n                                        }} >\r\n                                            {'Submit'}\r\n                                        </Button>\r\n\r\n                                    </>\r\n                                </div>\r\n                            </Form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddCustomer\r\n","import React from 'react'\r\nimport AddCustomer from './AddCustomer'\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport default function NewCustomerCategory() {\r\n  const location = useLocation();\r\n  const mode = location.state?.mode ? location.state.mode : \"ADD\";\r\n\r\n  return (\r\n    <>\r\n      {/* <div>Master Data / Customer Category / Add Customer Category</div> */}\r\n      <div className='mt-5'>\r\n      {/* <h3 className='mb-5'>{mode === \"EDIT\" ? \"Edit \" : \"Create \"}Customer Category</h3>\r\n        */}\r\n        <AddCustomer />\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n"],"names":["interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","validationSchemaforCheckbox","Yup","shape","Enterprise_Customer","Retail_Customer","test","value","isEnterpriseSelected","isRetailSelected","nullable","custCatValidationSchema","title","trim","required","props","intialValues","description","cust_cat_type","acc_unq_id","useSelector","state","auth","user","enterAccount","user_type","unq_id","dispatch","useDispatch","setUserState","useTimeOutMessage","formikRef","useRef","location","useLocation","mode","rowForEdit","data","navigate","useNavigate","checkBoxString","JSON","parse","checkboxValues","setCheckboxValues","custAccountList","CustomerCategoryList","handleCheckboxChange","event","name","prevValues","target","checked","submitApi","Payload","stringify","apiCreateCategory","resp","status","OpenNotification","GetErrorMsg","id","md_cus_status","apiUpdatcust","userEditIntialValues","CustCategoryEditandCopy","getCustAccount","validateCheckBox","passedValue","validate","breadCrumbList","link","cust_cat_title","className","type","showIcon","list","innerRef","initialValues","validationSchema","onSubmit","values","setSubmitting","touched","errors","isSubmitting","style","backgroundColor","padding","marginTop","bodyClass","label","color","invalid","errorMessage","field","form","isDisabled","placeholder","disabled","options","filter","onChange","setFieldValue","e","htmlFor","autoComplete","component","Input","val","to","variant","fontStyle","fontSize","NewCustomerCategory"],"sourceRoot":""}