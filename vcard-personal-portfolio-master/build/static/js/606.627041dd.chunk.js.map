{"version":3,"file":"static/js/606.627041dd.chunk.js","mappings":"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","sources":["utils/hooks/useTimeOutMessage.js","views/auth/SignUp/SignUpForm.js","views/auth/SignUp/index.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import React from 'react'\r\nimport { Input, Button, FormItem, FormContainer, Alert } from 'components/ui'\r\nimport { PasswordInput, ActionLink } from 'components/shared'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport useAuth from 'utils/hooks/useAuth'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    userName: Yup.string().required('Please enter your user name'),\r\n    email: Yup.string()\r\n        .email('Invalid email')\r\n        .required('Please enter your email'),\r\n    password: Yup.string().required('Please enter your password'),\r\n    confirmPassword: Yup.string().oneOf(\r\n        [Yup.ref('password'), null],\r\n        'Your passwords do not match'\r\n    ),\r\n})\r\n\r\nconst SignUpForm = (props) => {\r\n    const { disableSubmit = false, className, signInUrl = '/sign-in' } = props\r\n\r\n    const { signUp } = useAuth()\r\n\r\n    const [message, setMessage] = useTimeOutMessage()\r\n\r\n    const onSignUp = async (values, setSubmitting) => {\r\n        const { userName, password, email } = values\r\n        setSubmitting(true)\r\n        const result = await signUp({ userName, password, email })\r\n\r\n        if (result.status === 'failed') {\r\n            setMessage(result.message)\r\n        }\r\n\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            {message && (\r\n                <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                    {message}\r\n                </Alert>\r\n            )}\r\n            <Formik\r\n                initialValues={{\r\n                    userName: 'admin1',\r\n                    password: '123Qwe1',\r\n                    confirmPassword: '123Qwe1',\r\n                    email: 'test@testmail.com',\r\n                }}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    if (!disableSubmit) {\r\n                        onSignUp(values, setSubmitting)\r\n                    } else {\r\n                        setSubmitting(false)\r\n                    }\r\n                }}\r\n            >\r\n                {({ touched, errors, isSubmitting }) => (\r\n                    <Form>\r\n                        <FormContainer>\r\n                            <FormItem\r\n                                label=\"User Name\"\r\n                                invalid={errors.userName && touched.userName}\r\n                                errorMessage={errors.userName}\r\n                            >\r\n                                <Field\r\n                                    type=\"text\"\r\n                                    autoComplete=\"off\"\r\n                                    name=\"userName\"\r\n                                    placeholder=\"User Name\"\r\n                                    component={Input}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem\r\n                                label=\"Email\"\r\n                                invalid={errors.email && touched.email}\r\n                                errorMessage={errors.email}\r\n                            >\r\n                                <Field\r\n                                    type=\"email\"\r\n                                    autoComplete=\"off\"\r\n                                    name=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    component={Input}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem\r\n                                label=\"Password\"\r\n                                invalid={errors.password && touched.password}\r\n                                errorMessage={errors.password}\r\n                            >\r\n                                <Field\r\n                                    autoComplete=\"off\"\r\n                                    name=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    component={PasswordInput}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem\r\n                                label=\"Confirm Password\"\r\n                                invalid={\r\n                                    errors.confirmPassword &&\r\n                                    touched.confirmPassword\r\n                                }\r\n                                errorMessage={errors.confirmPassword}\r\n                            >\r\n                                <Field\r\n                                    autoComplete=\"off\"\r\n                                    name=\"confirmPassword\"\r\n                                    placeholder=\"Confirm Password\"\r\n                                    component={PasswordInput}\r\n                                />\r\n                            </FormItem>\r\n                            <Button\r\n                                block\r\n                                loading={isSubmitting}\r\n                                variant=\"solid\"\r\n                                type=\"submit\"\r\n                            >\r\n                                {isSubmitting\r\n                                    ? 'Creating Account...'\r\n                                    : 'Sign Up'}\r\n                            </Button>\r\n                            <div className=\"mt-4 text-center\">\r\n                                <span>Already have an account? </span>\r\n                                <ActionLink to={signInUrl}>Sign in</ActionLink>\r\n                            </div>\r\n                        </FormContainer>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpForm\r\n","import React from 'react'\r\nimport SignUpForm from './SignUpForm'\r\n\r\nconst SignUp = () => {\r\n    return (\r\n        <>\r\n            <div className=\"mb-8\">\r\n                <h3 className=\"mb-1\">Sign Up</h3>\r\n                <p>And lets get started with your free trial</p>\r\n            </div>\r\n            <SignUpForm disableSubmit={false} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignUp\r\n"],"names":["interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","validationSchema","Yup","shape","userName","required","email","password","confirmPassword","oneOf","props","disableSubmit","className","signInUrl","signUp","useAuth","useTimeOutMessage","onSignUp","values","setSubmitting","result","status","type","showIcon","initialValues","onSubmit","touched","errors","isSubmitting","label","invalid","errorMessage","autoComplete","name","placeholder","component","Input","PasswordInput","block","loading","variant","to"],"sourceRoot":""}