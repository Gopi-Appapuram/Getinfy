{"version":3,"file":"static/js/1657.f9b30416.chunk.js","mappings":"iIAkBA,IAhBA,WAA6C,IAAlBA,EAAQ,uDAAG,IAClC,GAA8BC,EAAAA,EAAAA,UAAS,IAAG,eAAnCC,EAAO,KAAEC,EAAU,KAY1B,OAVAC,EAAAA,EAAAA,YAAU,WACN,GAAIF,EAAS,CACT,IAAIG,EAAUC,YAAW,kBAAMH,EAAW,GAAG,GAAEH,GAC/C,OAAO,WACHO,aAAaF,EACjB,CACJ,CAEJ,GAAG,CAACH,IAEG,CAACA,EAASC,EACrB,C,0TCKe,SAASK,IAAsB,IAAD,IAGnCC,GAAWC,EAAAA,EAAAA,MAEXC,EAAmBC,EAAAA,KAAaC,MAAM,CACxCC,aAAcF,EAAAA,KAAaG,OAAOC,SAAS,uCAAuCC,aAKlFC,EAAgB,CAChBJ,aAAc,GACdK,YAAa,GACbC,UAAW,GACXC,WAAY,IAIVC,GAAoBC,EAAAA,EAAAA,KAAY,SAACC,GAAK,eAAsB,QAAtB,EAAKA,EAAMC,mBAAW,OAAM,QAAN,EAAjB,EAAmBC,YAAI,WAAN,EAAjB,EAAyBJ,iBAAiB,IAErFK,GAAWC,EAAAA,EAAAA,MAEjB,GACIL,EAAAA,EAAAA,KACA,SAACC,GAAK,OAAKA,EAAMK,KAAKC,IAAI,IAFtBC,EAAY,EAAZA,aAAcC,EAAS,EAATA,UAAWC,EAAW,EAAXA,YAKjC,GAA8BC,EAAAA,EAAAA,KAAmB,eAA1ChC,EAAO,KAAEC,EAAU,KACpBgC,GAAYC,EAAAA,EAAAA,UACZC,GAAWC,EAAAA,EAAAA,MACXC,EAAqB,QAAd,EAAAF,EAASb,aAAK,OAAd,EAAgBe,KAAOF,EAASb,MAAMe,KAAO,MACpDC,EAA2B,QAAjB,EAAGH,EAASb,aAAK,aAAd,EAAgBE,KACnC,GAAmDzB,EAAAA,EAAAA,WAASwC,EAAAA,EAAAA,IAAmBvB,EAAesB,GAA0BtB,IAAe,eAAhIwB,EAAmB,KAAEC,EAAmB,KAEzCC,EAAS,yCAAG,WAAOC,GAAM,gFAiB1B,GAVGC,EACJ,CACI,eAAkBD,EAAO/B,aAAaC,OACtC,iBAAoB8B,EAAOzB,UAC3B,cAAsB,OAANyB,QAAM,IAANA,OAAM,EAANA,EAAQ1B,YACxB,kBAAqB,SAGrB,OAAwB,cAAda,EAA4BD,EAAec,EAAOxB,YAInD,QAATkB,EAAc,iCACKQ,EAAAA,EAAAA,IAA0BD,GAAQ,OAEjC,aAFdE,EAAI,QAEDC,SACLC,EAAAA,EAAAA,IAAiB,UAAW,wBAC5BzC,EAAS,gCAIY,WAAhBuC,EAAKC,QACV9C,GAAWgD,EAAAA,EAAAA,IAAYH,IAC1B,0BAEe,SAATT,EAAe,iBAKtB,OAJAO,EAAQM,GAAKZ,EAAWY,GACxBN,EAAQO,OAAuB,cAAdrB,EAA4BD,EAAec,EAAOxB,WAEnEyB,EAAQQ,kBAAoBd,EAAWc,kBACvC,WACmBC,EAAAA,EAAAA,IAAiBT,EAASN,EAAWY,IAAG,QACvC,aADdJ,EAAI,QACDC,SACLC,EAAAA,EAAAA,IAAiB,UAAW,wBAC5BzC,EAAS,gCAIY,WAAhBuC,EAAKC,QACV9C,GAAWgD,EAAAA,EAAAA,IAAYH,IAC1B,4CAER,gBAjDc,uCAkDf5C,EAAAA,EAAAA,YAAU,WACN,GAAIoC,EAAY,CACZ,IAAMgB,GAAuBf,EAAAA,EAAAA,IAAmBC,EAAqBF,GACrEG,EAAoBa,EACxB,CACJ,GAAG,CAACd,EAAqBF,KAEzBpC,EAAAA,EAAAA,YAAU,WACNuB,GAAS8B,EAAAA,EAAAA,IAAiB,CAAE1B,aAAAA,IAEhC,GAAG,CAACJ,EAAUI,IAGd,IAEM2B,EAAY,yCAAG,WAAOC,EAAUC,GAAK,8EAGU,GAD3CC,EAAOF,EAAS,GACD,CAAC,aAAc,aAElBG,SAASD,EAAKE,MAAM,CAAD,eAC6B,OAA9Db,EAAAA,EAAAA,IAAiB,UAAW,mCAAkC,mBACvD,GAAK,iCAGOc,EAAAA,EAAAA,IAAeL,EAAS,GAAI1B,EAZ5B,GAY4D,OAArE,OAAJgC,EAAI,yBACHA,GAAI,QAEuC,OAFvC,0BAEXC,QAAQC,MAAM,4BAA4B,EAAD,IAAS,mBAC3C,GAAK,0DAGnB,gBAjBiB,wCAmBlB,GAAsClE,EAAAA,EAAAA,WAAS,GAAM,eAA9CmE,EAAW,KAAEC,EAAc,KAClC,GAA8BpE,EAAAA,EAAAA,UAAS,MAAK,eAArCqE,EAAO,KAAEC,EAAU,KAOrBC,GAAe,CAAC,CACjBC,KAAK,eAGT,CACIA,KAAK,mBACLC,KAAK,+BAET,CACID,KAAK,yBA2BT,MAvBU,SAAPlC,IACHiC,GAAiB,CACb,CACIC,KAAK,eAGT,CACIA,KAAK,mBACLC,KAAK,+BAET,CACED,KAAgB,OAAVjC,QAAU,IAAVA,OAAU,EAAVA,EAAYmC,eAClBD,KAAM,8BACNlD,MAAMgB,GAER,CACIiC,KAAK,4BAQT,gCAEKvE,IAAW,SAAC,KAAK,CAAC0E,UAAU,OAAOb,KAAK,SAASc,UAAQ,WACrD3E,KAEL,0BAEI,SAAC,IAAiB,CAAE4E,KAAMN,QAE9B,iBAAKI,UAAU,OAAM,WACjB,gBAAIA,UAAU,OAAM,UAAW,SAATrC,EAAkB,OAAS,MAAK,wBACtD,SAAC,KAAM,CACHwC,SAAU5C,EACVjB,cAAewB,EACf/B,iBAAkBA,EAClBqE,SAAU,SAACnC,GACPD,EAAUC,EAEd,EAAE,SAED,YAA+D,IAA5DA,EAAM,EAANA,OAAQoC,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAsBC,GAAF,EAAZC,aAA2B,EAAbD,eAEvC,OADAjB,QAAQmB,IAAIxC,EAAQ,WAEhB,UAAC,KAAI,YACD,gBAAK+B,UAAU,MAAMU,MAAO,CAAEC,gBAAiB,WAAY,UACvD,UAAC,KAAa,CAACX,UAAU,SAASY,UAAU,SAASC,SAAO,aACxD,UAAC,KAAa,YACV,iBAAKb,UAAU,+BAA8B,WACzC,gBAAKA,UAAU,6BAA4B,UACvC,SAAC,KAAQ,CACLc,OAAO,sCAAY,iBAAMJ,MAAO,CAAEK,MAAO,OAAQ,SAAE,SACnDC,QAASV,EAAO7D,YAAc4D,EAAQ5D,WACtCwE,aAAcX,EAAO7D,WAAW,UAEhC,SAAC,KAAK,CAACoD,KAAK,aAAaqB,SAAQ,yCAAE,WAAOC,GAAW,yEAC/B,cAAd/D,EAAyB,yCAEfpB,EAAAA,KAAaI,SAAS,0BAA0B8E,SAASC,GAAa,KAAD,0EAEpE,KAAM7F,SAAO,wDAG/B,mDARgC,GAQ/B,SACG,gBAAG8F,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACHC,WAA0B,cAAdlE,EACZmE,YAAY,kBACZH,MAAOA,EACPC,KAAMA,EACNG,QAAS9E,EACT+E,MAAqB,cAAdrE,EAA6C,OAAjBV,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBgF,QAClD,SAACZ,GAAK,OACFA,EAAMrE,aAAeU,CAAY,IACpB,OAAjBT,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBgF,QACnB,SAACZ,GAAK,OACFA,EAAMrE,aAAewB,EAAOxB,UAAU,IAE9CkF,SAAU,SAACb,GAAK,OACZO,EAAKd,cACDa,EAAMvB,KACNiB,EAAMrE,WACT,GAEP,SAKlB,gBAAKuD,UAAU,4BAA2B,UAC1C,SAAC,KAAQ,CACLc,OAAO,qDAA2B,iBAAMJ,MAAO,CAAEK,MAAO,OAAQ,SAAE,SAClEf,UAAU,GACVgB,QAASV,EAAOpE,cAAgBmE,EAAQnE,aACxC+E,aAAcX,EAAOpE,aAAa,UAElC,SAAC,KAAK,CACFiD,KAAK,OACLyC,aAAa,MACb/B,KAAK,eACL0B,YAAY,cACZM,UAAWC,EAAAA,UAKnB,SAAC,KAAQ,CACLhB,MAAM,cACNd,UAAU,GAEd,UAEI,SAAC,KAAK,CAACH,KAAK,cAAa,SACpB,gBAAGuB,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAc,CAACX,MAAO,CAAEqB,MAAO,OAC5BN,MAAOL,EAAMK,MACbE,SAAU,SAACK,GAAG,OACVX,EAAKd,cAAca,EAAMvB,KAAMmC,EAAI,GAEzC,UAMlB,gBAAKhC,UAAU,MAAK,UAEhB,UAAC,KAAa,YACV,eAAIA,UAAU,iBAAgB,2BAC9B,UAAC,KAAQ,CAACc,MAAM,GAAE,WAEd,SAAC,KAAK,CAACjB,KAAK,YAAW,SAClB,YAAQ,EAALuB,MAAW,EAAJC,KAAI,OACX,gBAAKrB,UAAU,OAAM,UACjB,SAAC,KAAM,CAAClB,aAAcA,EAAcmD,WAAS,EAACjC,UAAU,uCACpD2B,SAAU,SAACO,EAAclD,EAAOmD,EAAWC,GAAkB,IAAD,EACxD7B,EAAc,YAAsB,OAAT4B,QAAS,IAATA,GAAe,QAAN,EAATA,EAAWrF,YAAI,WAAN,EAAT,EAAiBuF,UAChD,EACC,UAED,iBAAKrC,UAAU,oBAAmB,WAC9B,gBAAKA,UAAU,oCAAmC,UAC9C,SAAC,MAAoB,CAACA,UAAU,OAAOU,MAAO,CAAEK,MAAO,gBAE3D,eAAGf,UAAU,gBAAe,WACxB,kBAAMA,UAAU,kCAAiC,iCACxB,QAEzB,iBAAMA,UAAU,gBAAe,wBAInC,cAAGA,UAAU,oCAAmC,uCAKtD,KAGP,OAAN/B,QAAM,IAANA,OAAM,EAANA,EAAQzB,aACL,iBAAKwD,UAAU,uCAAsC,WACjD,gBAAKA,UAAU,mBAAmBsC,QAAS,kBAvLlFC,EAuL0G,OAANtE,QAAM,IAANA,OAAM,EAANA,EAAQzB,UAtL7HiD,GAAe,QACfE,EAAW4C,GAFK,IAACA,CAuLsH,EAAC,UAC5E,eAAIvC,UAAU,mBAAkB,SAAQ,OAAN/B,QAAM,IAANA,OAAM,EAANA,EAAQzB,UAAUgG,UAAU,EAAG,SAGrE,SAACC,EAAA,EAAW,CACRzC,UAAU,sBACVsC,QAAS,WACL/B,EAAc,YAAa,GAC/B,mBAO5B,SAAC,KAAM,CAACmC,OAAQlD,EACZmD,QAAS,kBAAMlD,GAAe,EAAM,EAAC,UACrC,iBAAKO,UAAU,MAAK,WAChB,gBAAK4C,IAAG,UAAKC,EAAAA,EAAAA,UAAmB,yBAAiBnD,GAAWoD,IAAI,aAChE,SAAC,KAAM,CAACR,QAAS,kBAAMS,OAAOC,KAAK,GAAD,OAAIH,EAAAA,EAAAA,UAAmB,yBAAiBnD,GAAW,SAAS,EAAEM,UAAU,OAAOiD,QAAQ,QAAO,iCAOhJ,gBAAKjD,UAAU,mCAAkC,UAC7C,iCACI,SAAC,KAAI,CACDA,UAAU,qCACVkD,GAAG,8BAA6B,UAChC,SAAC,KAAM,CACH/D,KAAK,SACLa,UAAU,OACVsC,QAAS,aACTW,QAAQ,QACRvC,MAAO,CAAEC,gBAAiB,WAAY,uBAK9C,SAAC,KAAM,CAACxB,KAAK,SAAS8D,QAAQ,QAAQvC,MAAO,CACzCyC,UAAW,SACXC,SAAU,QACZ,SACG,kBAOzB,SAKpB,C","sources":["utils/hooks/useTimeOutMessage.js","views/masterData/productCategory/components/NewProductCategory.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport { Input, FormItem, FormContainer, select, Button, Alert, Select, Upload, Dialog } from 'components/ui'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport NewProductCategoryOtherDetails from './NewProductCategoryOtherDetails'\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom'\r\nimport { apiProdCategoryCreateUser, apiUpdateProdCat, apiUploadFiles } from 'services/ProductCategoryService'\r\nimport { EditandCopyProdCat } from 'utils/campareandCopy'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { GetErrorMsg, OpenNotification } from 'views/Servicefile'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getParentAccount } from '../store/dataSlice'\r\nimport { HiOutlineCloudUpload } from 'react-icons/hi'\r\n\r\nimport ReactHtmlParser from 'html-react-parser'\r\nimport CloseButton from 'components/ui/CloseButton'\r\nimport appConfig from 'configs/app.config'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\n\r\n\r\nexport default function NewProductCategory() {\r\n\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        prodCatTitle: Yup.string().trim().required(\"Please enter product category title\").nullable(),\r\n        // description: Yup.string().required(\"Please enter description\").nullable(),\r\n        // acc_unq_id: Yup.string().required(\"Please enter opertor\").nullable(),\r\n    })\r\n\r\n    let initialValues = {\r\n        prodCatTitle: \"\",\r\n        description: \"\",\r\n        imageFile: \"\",\r\n        acc_unq_id: \"\",\r\n\r\n    }\r\n\r\n    const parentAccountList = useSelector((state) => state.prodCatList?.data?.parentAccountList)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { enterAccount, user_type, acc_user_id\r\n    } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    const formikRef = useRef()\r\n    const location = useLocation();\r\n    const mode = location.state?.mode ? location.state.mode : \"ADD\";\r\n    const rowForEdit = location.state?.data;\r\n    const [prodCatIntialValues, setUserIntialValues] = useState(EditandCopyProdCat(initialValues, rowForEdit ? rowForEdit : initialValues))\r\n\r\n    const submitApi = async (values) => {\r\n\r\n        // if (values.imageFile == '') {\r\n        //     OpenNotification('warning', 'Upload file is Mandatory')\r\n        //     return\r\n        // }\r\n\r\n        let payload =\r\n        {\r\n            \"prod_cat_title\": values.prodCatTitle.trim(),\r\n            \"prod_cat_img_url\": values.imageFile,\r\n            \"prod_cat_desc\":values?.description,\r\n            \"md_pro_cat_status\": \"ACTIVE\",\r\n            // \"unq_id\": data.acc_unq_id,\r\n            // \"dgl_acc_mno_id\": data.dgl_acc_mno_id,\r\n            \"unq_id\": user_type !== \"GlobalMno\" ? enterAccount : values.acc_unq_id\r\n\r\n        }\r\n\r\n        if (mode === \"ADD\") {\r\n            const resp = await apiProdCategoryCreateUser(payload)\r\n\r\n            if (resp.status === \"success\") {\r\n                OpenNotification('success', 'Created successfully')\r\n                navigate('/masterDataMenu-item-view-2')\r\n\r\n\r\n            }\r\n            else if (resp.status === \"failed\") {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n\r\n        } else if (mode === \"EDIT\") {\r\n            payload.id = rowForEdit.id\r\n            payload.unq_id = user_type !== \"GlobalMno\" ? enterAccount : values.acc_unq_id\r\n            // payload.prod_cat_img_url = rowForEdit.prod_cat_img_url\r\n            payload.md_pro_cat_status = rowForEdit.md_pro_cat_status\r\n            //payload.unq_id = user_type !== \"GlobalMno\" ? enterAccount : values.acc_unq_id\r\n            const resp = await apiUpdateProdCat(payload, rowForEdit.id)\r\n            if (resp.status === \"success\") {\r\n                OpenNotification('success', 'Updated successfully')\r\n                navigate('/masterDataMenu-item-view-2')\r\n\r\n\r\n            }\r\n            else if (resp.status === \"failed\") {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (rowForEdit) {\r\n            const userEditIntialValues = EditandCopyProdCat(prodCatIntialValues, rowForEdit);\r\n            setUserIntialValues(userEditIntialValues)\r\n        }\r\n    }, [prodCatIntialValues, rowForEdit])\r\n\r\n    useEffect(() => {\r\n        dispatch(getParentAccount({ enterAccount }))\r\n\r\n    }, [dispatch, enterAccount])\r\n\r\n\r\n    const saveFilesInCatalog = 2\r\n\r\n    const beforeUpload = async (newFiles, files) => {\r\n\r\n        const file = newFiles[0];\r\n        const allowedTypes = ['image/jpeg', 'image/png'];\r\n\r\n        if (!allowedTypes.includes(file.type)) {\r\n            OpenNotification('warning', 'JPG/PNG files are allowed only!')\r\n            return false;\r\n        }\r\n        try {\r\n            const ress = await apiUploadFiles(newFiles[0], acc_user_id, saveFilesInCatalog)\r\n            return ress\r\n        } catch (error) {\r\n            console.error('Error during file upload:', error);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n\r\n    const onClickView = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n\r\n    let  breadCrumbList=[{\r\n        name:'Master Data',\r\n        // link:\"/home\"\r\n    },\r\n    {\r\n        name:'Product Category',\r\n        link:\"/masterDataMenu-item-view-2\"\r\n    },\r\n    {\r\n        name: `Add Product Category`,\r\n    }]\r\n    \r\n    \r\n    if(mode===\"EDIT\"){\r\n    breadCrumbList = [\r\n        {\r\n            name:'Master Data',\r\n            // link:\"/home\"\r\n        },\r\n        {\r\n            name:'Product Category',\r\n            link:\"/masterDataMenu-item-view-2\"\r\n        },\r\n        {\r\n          name: rowForEdit?.prod_cat_title,\r\n          link: '/masterDataMenu-item-view-2',\r\n          state:rowForEdit\r\n      },\r\n        {\r\n            name: `Edit Product Category`,\r\n        },\r\n    \r\n    \r\n    ]\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            {message && <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                {message}\r\n            </Alert>}\r\n            <div>\r\n                {/* Master Data/Product Category/Add Product Category */}\r\n                <CustomBreadcrumbs  list={breadCrumbList} />\r\n                </div>\r\n            <div className='mt-5'>\r\n                <h3 className='mb-4'>{mode === \"EDIT\" ? \"Edit\" : \"Add\"} Product Category</h3>\r\n                <Formik\r\n                    innerRef={formikRef}\r\n                    initialValues={prodCatIntialValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values) => {\r\n                        submitApi(values)\r\n\r\n                    }}\r\n                >\r\n                    {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                        console.log(values, \"values\")\r\n                        return (\r\n                            <Form>\r\n                                <div className=\"p-5\" style={{ backgroundColor: \"#F5F5F5\" }}>\r\n                                    <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider>\r\n                                        <FormContainer>\r\n                                            <div className=\"md:grid gap-4 mx-4 mt-3 pl-2\">\r\n                                                <div className='md:grid grid-cols-2 gap-4 '>\r\n                                                    <FormItem\r\n                                                        label={<p>Operator <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        invalid={errors.acc_unq_id && touched.acc_unq_id}\r\n                                                        errorMessage={errors.acc_unq_id}\r\n                                                    >\r\n                                                        <Field name=\"acc_unq_id\" validate={async (passedValue) => {\r\n                                                            if (user_type === \"GlobalMno\") {\r\n                                                                try {\r\n                                                                    await Yup.string().required('Please select operator').validate(passedValue);\r\n                                                                } catch (error) {\r\n                                                                    return error.message;\r\n                                                                }\r\n                                                            }\r\n                                                        }}>\r\n                                                            {({ field, form }) => (\r\n                                                                <Select\r\n                                                                    isDisabled={user_type !== \"GlobalMno\" ? true : false}\r\n                                                                    placeholder=\"Select Operator\"\r\n                                                                    field={field}\r\n                                                                    form={form}\r\n                                                                    options={parentAccountList}\r\n                                                                    value={user_type !== \"GlobalMno\" ? parentAccountList?.filter(\r\n                                                                        (label) =>\r\n                                                                            label.acc_unq_id === enterAccount\r\n                                                                    ) : parentAccountList?.filter(\r\n                                                                        (label) =>\r\n                                                                            label.acc_unq_id === values.acc_unq_id\r\n                                                                    )}\r\n                                                                    onChange={(label) =>\r\n                                                                        form.setFieldValue(\r\n                                                                            field.name,\r\n                                                                            label.acc_unq_id\r\n                                                                        )\r\n                                                                    }\r\n                                                                />\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                                <div className='md:grid grid-cols-2 gap-4'>\r\n                                                <FormItem\r\n                                                    label={<p> Product Category Title <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                    className=''\r\n                                                    invalid={errors.prodCatTitle && touched.prodCatTitle}\r\n                                                    errorMessage={errors.prodCatTitle}\r\n                                                >\r\n                                                    <Field\r\n                                                        type=\"text\"\r\n                                                        autoComplete=\"off\"\r\n                                                        name=\"prodCatTitle\"\r\n                                                        placeholder=\"Enter Title\"\r\n                                                        component={Input}\r\n                                                        // className='w-1/3'\r\n                                                    />\r\n                                                </FormItem>\r\n                                                </div>\r\n                                                <FormItem\r\n                                                    label=\"Description\"\r\n                                                    className=''\r\n                                                // invalid={errors.description && touched.description}\r\n                                                // errorMessage={errors.description}\r\n                                                >\r\n                                                    <Field name=\"description\"  >\r\n                                                        {({ field, form }) => (\r\n                                                            <RichTextEditor style={{ width: \"60%\" }}\r\n                                                                value={field.value}\r\n                                                                onChange={(val) =>\r\n                                                                    form.setFieldValue(field.name, val)\r\n                                                                }\r\n                                                            />\r\n                                                        )}\r\n                                                    </Field>\r\n                                                </FormItem>\r\n                                            </div>\r\n                                            {/* <NewProductCategoryOtherDetails /> */}\r\n                                            <div className='p-2'>\r\n\r\n                                                <AdaptableCard>\r\n                                                    <h5 className=\"mb-4 mt-2 mx-4\">UPLOAD IMAGE</h5>\r\n                                                    <FormItem label=\"\">\r\n\r\n                                                        <Field name=\"imageFile\">\r\n                                                            {({ field, form }) => (\r\n                                                                <div className='mx-4'>\r\n                                                                    <Upload beforeUpload={beforeUpload} draggable className='border-blue-500 bg-blue-50 w-96 h-36'\r\n                                                                        onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                                            setFieldValue(`imageFile`, uploadRes?.data?.fileUnqId);\r\n                                                                        }\r\n                                                                        }\r\n                                                                    >\r\n                                                                        <div className=\"my-10 text-center\">\r\n                                                                            <div className=\"text-6xl mb-4 flex justify-center\">\r\n                                                                                <HiOutlineCloudUpload className=\"h-10\" style={{ color: \"#2563eb\" }} />\r\n                                                                            </div>\r\n                                                                            <p className=\"font-semibold\">\r\n                                                                                <span className=\"text-gray-800 dark:text-inherit\">\r\n                                                                                    Upload Files Here or{' '}\r\n                                                                                </span>\r\n                                                                                <span className=\"text-blue-500\">\r\n                                                                                    browse\r\n                                                                                </span>\r\n                                                                            </p>\r\n                                                                            <p className=\"mt-1 opacity-60 dark:text-inherit\">\r\n                                                                                JPG/PNG are allowed\r\n                                                                            </p>\r\n                                                                        </div>\r\n                                                                    </Upload>\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </Field>\r\n                                                        {values?.imageFile &&\r\n                                                            <div className=\"upload-file cursor-pointer w-96 ml-4\" >\r\n                                                                <div className=\"upload-file-info\" onClick={() => onClickView(values?.imageFile)}>\r\n                                                                    <h6 className=\"upload-file-name\">{values?.imageFile.substring(0, 15)}</h6>\r\n                                                                </div>\r\n\r\n                                                                <CloseButton\r\n                                                                    className=\"upload-file-remove \"\r\n                                                                    onClick={() => {\r\n                                                                        setFieldValue(`imageFile`, '');\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>}\r\n                                                    </FormItem>\r\n                                                </AdaptableCard>\r\n                                            </div>\r\n                                        </FormContainer>\r\n                                        <Dialog isOpen={showContent}\r\n                                            onClose={() => setShowContent(false)}>\r\n                                            <div className='p-5'>\r\n                                                <img src={`${appConfig.apiPrefix}/media/uniqid/${content}`} alt=\"Content\" />\r\n                                                <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                                            </div>\r\n\r\n                                        </Dialog>\r\n\r\n                                    </AdaptableCard>\r\n                                </div>\r\n                                <div className=\"mt-4 text-right flex justify-end\">\r\n                                    <>\r\n                                        <Link\r\n                                            className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                            to=\"/masterDataMenu-item-view-2\">\r\n                                            <Button\r\n                                                type=\"button\"\r\n                                                className=\"mx-2\"\r\n                                                onClick={\"onPrevious\"}\r\n                                                variant=\"solid\"\r\n                                                style={{ backgroundColor: \"#4D4D4D\" }}\r\n                                            >\r\n                                                Cancel\r\n                                            </Button>\r\n                                        </Link>\r\n                                        <Button type=\"submit\" variant='solid' style={{\r\n                                            fontStyle: 'normal',\r\n                                            fontSize: '18px',\r\n                                        }} >\r\n                                            {'Submit'}\r\n                                        </Button>\r\n                                    </>\r\n\r\n                                </div>\r\n                            </Form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n"],"names":["interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","NewProductCategory","navigate","useNavigate","validationSchema","Yup","shape","prodCatTitle","trim","required","nullable","initialValues","description","imageFile","acc_unq_id","parentAccountList","useSelector","state","prodCatList","data","dispatch","useDispatch","auth","user","enterAccount","user_type","acc_user_id","useTimeOutMessage","formikRef","useRef","location","useLocation","mode","rowForEdit","EditandCopyProdCat","prodCatIntialValues","setUserIntialValues","submitApi","values","payload","apiProdCategoryCreateUser","resp","status","OpenNotification","GetErrorMsg","id","unq_id","md_pro_cat_status","apiUpdateProdCat","userEditIntialValues","getParentAccount","beforeUpload","newFiles","files","file","includes","type","apiUploadFiles","ress","console","error","showContent","setShowContent","content","setContent","breadCrumbList","name","link","prod_cat_title","className","showIcon","list","innerRef","onSubmit","touched","errors","setFieldValue","isSubmitting","log","style","backgroundColor","bodyClass","divider","label","color","invalid","errorMessage","validate","passedValue","field","form","isDisabled","placeholder","options","value","filter","onChange","autoComplete","component","Input","width","val","draggable","updatedFiles","uploadRes","filesDetails","fileUnqId","onClick","fileInfo","substring","CloseButton","isOpen","onClose","src","appConfig","alt","window","open","variant","to","fontStyle","fontSize"],"sourceRoot":""}