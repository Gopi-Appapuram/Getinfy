{"version":3,"file":"static/js/2482.59066eba.chunk.js","mappings":"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","sources":["services/EnterpriseService.js","views/accounts/EnterpriseCustomers/store/dataSlice.js"],"sourcesContent":["import ApiService from './ApiService'\r\n\r\nexport async function apiGetSalesDashboardData(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/dashboard',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/products',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/products/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProduct(params) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/product',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiPutSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/products/update',\r\n        method: 'put',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiCreateSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/products/create',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\n/* export async function apiGetSalesOrders(params) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/orders',\r\n        method: 'get',\r\n        params,\r\n    })\r\n} */\r\n\r\nexport async function apiGetSalesOrders(params) {\r\n\r\n    return ApiService.fetchData({\r\n        //url: `account/enterprise-customers?page_no=${params.pageIndex}&page_size=${params.pageSize}&sort_field=${params.sort.key}`,\r\n        // url: '/sales/orders',\r\n        url: `/account/enterprise-customers`,\r\n\r\n        method: 'get',\r\n        params\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesOrders(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/orders/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesOrderDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/orders-details',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiSubmitEnterprise(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/account/enterprise-customers',\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        };\r\n\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n}\r\n\r\nexport async function apiUpdateEnterpriseAccStatus(id, status) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/enterprise-customers?id=${id}&cust_status=${status}`,\r\n        method: 'patch',\r\n\r\n    })\r\n}\r\n\r\nexport async function apiUpdateEnterprise(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/account/enterprise-customers',\r\n            method: 'put',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        };\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n\r\n}\r\n\r\nexport async function apiGetParentAccountEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/enterprise-customers/parent/${data.accMnoParentId}`,\r\n        //url: `/account/acc-operators/dropdown/${data.enterAccount}`,    \r\n        method: 'get',\r\n\r\n    })\r\n}\r\n\r\n\r\nexport async function apiGetOperatorAccountEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n        //url: `/account/enterprise-customers/parent/${data.accMnoParentId}`,   \r\n        url: `/account/acc-operators/dropdown/${data.enterAccount}`,\r\n        method: 'get',\r\n\r\n    })\r\n}\r\n\r\n\r\nexport async function apiGetCurrencyEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/currency/unq-id/drop-down/${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\n\r\n\r\nexport async function apiGetCustomerCatEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n\r\n        url: `/account/cust-cats/unq-id-cust-type/drop-down/${data.enterAccount}/EnterpriseCustomer`,\r\n        method: 'get',\r\n\r\n    })\r\n}\r\n\r\n\r\nexport async function apiGetContractTypeEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/contract-types/unq-id-acc-type/drop-down/${data.enterAccount}/EnterpriseCustomer`,\r\n        method: 'get',\r\n\r\n    })\r\n}\r\nexport async function apiGetUploadFileTypes(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/doc-pol?page_no=0&page_size=100&sort_feild=id&unq_id=${data}`,\r\n        method: 'get',\r\n    })\r\n}\r\nexport async function apiUploadFiles(file,loc1, loc2) {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        const resp = await ApiService.fetchData({\r\n            url: `/media/${loc1}/${loc2}`,\r\n            method: 'post',\r\n            data: formData,\r\n            headers:{'Content-Type': 'multipart/form-data'}\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp.data,\r\n        };\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n}","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { apiGetSalesOrders, apiDeleteSalesOrders, apiGetCurrencyEnterprise, apiGetParentAccountEnterprise, apiGetOperatorAccountEnterprise, apiGetCustomerCatEnterprise, apiGetContractTypeEnterprise, apiGetUploadFileTypes } from 'services/EnterpriseService'\r\n\r\nexport const initialTableData = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    query: '',\r\n    sort: {\r\n        order: '',\r\n        key: '',\r\n    },\r\n}\r\n\r\nexport const getOrders = createAsyncThunk(\r\n    'enterpriseList/data/getOrders',\r\n    async (data) => {\r\n        \r\n        const response = await apiGetSalesOrders(data)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const deleteOrders = async (data) => {\r\n    const response = await apiDeleteSalesOrders(data)\r\n    return response.data\r\n}\r\n\r\nexport const getCurrency = createAsyncThunk(\r\n    'enterpriseList/data/getCurrency',\r\n    async (data) => {\r\n        const response = await apiGetCurrencyEnterprise(data)\r\n        \r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const getParentAccount = createAsyncThunk(\r\n    'enterpriseList/data/getParentAccount',\r\n    async (data) => {\r\n        const response = await apiGetParentAccountEnterprise(data)\r\n        \r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const getParenOperator = createAsyncThunk(\r\n    'enterpriseList/data/getParentOperatorAccount',\r\n    async (data) => {\r\n        const response = await apiGetOperatorAccountEnterprise(data)\r\n        \r\n        return response.data\r\n    }\r\n)\r\n\r\n\r\nexport const getCustomerCategory = createAsyncThunk(\r\n    'enterpriseList/data/getCustCategory',\r\n    async (data) => {\r\n        const response = await apiGetCustomerCatEnterprise(data)  \r\n        \r\n        return response.data\r\n    }\r\n)\r\n\r\n\r\nexport const getContractType = createAsyncThunk(\r\n    'enterpriseList/data/getContractType',\r\n    async (data) => {\r\n       \r\n        const response = await apiGetContractTypeEnterprise(data)\r\n        \r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const getUploadFileType = createAsyncThunk(\r\n    'enterpriseList/data/getUploadFileType',\r\n    async (data) => {\r\n        const response = await apiGetUploadFileTypes(data)\r\n        return response.data\r\n    }\r\n)\r\n\r\nconst dataSlice = createSlice({\r\n    name: 'enterpriseList/data',\r\n    initialState: {\r\n        loading: false,\r\n        orderList: [],\r\n        tableData: initialTableData,\r\n\r\n        currencyList:[],\r\n        parentAccountList:[],\r\n        custmoerCatList:[],\r\n        contractTypeList:[],\r\n        operatorAccountList:[],\r\n        selectedParentOperator: null,\r\n    },\r\n    reducers: {\r\n        setOrderList: (state, action) => {\r\n            state.orderList = action.payload\r\n        },\r\n        setTableData: (state, action) => {\r\n            state.tableData = action.payload\r\n        },\r\n\r\n        setCurrencyData: (state, action) => {\r\n            state.currencyList = action.payload\r\n        },\r\n        setParentAccountData: (state, action) => {\r\n            state.parentAccountList = action.payload\r\n        },\r\n\r\n        setCustmoerCattData: (state, action) => {\r\n            state.custmoerCatList = action.payload\r\n        },\r\n\r\n        setContractTypeData: (state, action) => {\r\n            state.contractTypeList = action.payload\r\n        },\r\n        setParentOperatorData: (state, action) => {\r\n            state.operatorAccountList = action.payload\r\n        },\r\n        setSelectedParentOperator: (state, action) => {\r\n            state.selectedParentOperator = action.payload;\r\n          },\r\n    },\r\n    extraReducers: {\r\n        [getOrders.fulfilled]: (state, action) => {\r\n            state.orderList = action.payload\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getOrders.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n\r\n        [getCurrency.fulfilled]: (state, action) => {\r\n           \r\n           \r\n            state.currencyList=action.payload.response?.map((currency) => ({\r\n                value: currency.id,\r\n                label: currency.cur_title,\r\n            }));\r\n\r\n            state.loading = false\r\n        },\r\n        [getCurrency.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n\r\n        [getParentAccount.fulfilled]: (state, action) => {\r\n\r\n                 \r\n           \r\n            state.parentAccountList = action.payload?.map((parent) => ({\r\n                value: parent.id,\r\n                label: parent.cust_name,\r\n                \r\n            }))\r\n            state.loading = false\r\n        },\r\n        [getParentAccount.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n\r\n        [getCustomerCategory.fulfilled]: (state, action) => {\r\n                \r\n            \r\n            \r\n            state.custmoerCatList=action.payload.response?.map((customer) => ({\r\n                value: customer.id,\r\n                label: customer.cust_cat_title,\r\n            }));\r\n\r\n            state.loading = false\r\n        },\r\n        [getCustomerCategory.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n       \r\n        [getContractType.fulfilled]: (state, action) => {\r\n         \r\n                \r\n            \r\n            state.contractTypeList=action.payload.response?.map((contract) => ({\r\n                value: contract.id,\r\n                label: contract.contract_type_title,\r\n            }));\r\n            \r\n            state.loading = false\r\n        },\r\n        [getContractType.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n\r\n        [getParenOperator.fulfilled]: (state, action) => {\r\n                 \r\n            state.operatorAccountList = action.payload?.map((opertor) => ({\r\n                value: opertor.id,\r\n                label: opertor.acc_name,\r\n                acc_unq_id : opertor.acc_unq_id\r\n            }))\r\n           \r\n            state.loading = false\r\n        },\r\n        [getParenOperator.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n\r\n        [getUploadFileType.fulfilled]: (state, action) => {\r\n            state.fileList = action.payload\r\n          \r\n            state.loading = false\r\n        },\r\n        [getUploadFileType.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n    },\r\n})\r\n\r\n\r\nexport const { setOrderList, setTableData ,setCurrencyData,setParentAccountData,setCustmoerCattData,setContractTypeData,setParentOperatorData,setSelectedParentOperator} = dataSlice.actions\r\n\r\nexport default dataSlice.reducer\r\n"],"names":["apiGetSalesOrders","params","ApiService","url","method","apiDeleteSalesOrders","data","apiSubmitEnterprise","resp","status","message","response","toString","apiUpdateEnterpriseAccStatus","id","apiUpdateEnterprise","apiGetParentAccountEnterprise","accMnoParentId","apiGetOperatorAccountEnterprise","enterAccount","apiGetCurrencyEnterprise","apiGetCustomerCatEnterprise","apiGetContractTypeEnterprise","apiGetUploadFileTypes","apiUploadFiles","file","loc1","loc2","formData","FormData","append","headers","getOrders","createAsyncThunk","deleteOrders","getCurrency","getParentAccount","getParenOperator","getCustomerCategory","getContractType","getUploadFileType","dataSlice","createSlice","name","initialState","loading","orderList","tableData","total","pageIndex","pageSize","query","sort","order","key","currencyList","parentAccountList","custmoerCatList","contractTypeList","operatorAccountList","selectedParentOperator","reducers","setOrderList","state","action","payload","setTableData","setCurrencyData","setParentAccountData","setCustmoerCattData","setContractTypeData","setParentOperatorData","setSelectedParentOperator","extraReducers","fulfilled","pending","map","currency","value","label","cur_title","parent","cust_name","customer","cust_cat_title","contract","contract_type_title","opertor","acc_name","acc_unq_id","fileList","actions"],"sourceRoot":""}