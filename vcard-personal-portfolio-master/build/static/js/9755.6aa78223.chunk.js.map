{"version":3,"file":"static/js/9755.6aa78223.chunk.js","mappings":"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","sources":["views/accounts/ReatailCustomers/components/RetailUserInfo.js","views/accounts/ReatailCustomers/components/RetailMasterInfo.js","views/catalogue/Templates/components/TemplateBasicInfo.js","views/catalogue/Templates/components/TemplateAddressInfo.js","views/catalogue/Templates/components/TemplateDetails.js","views/catalogue/Templates/components/MasterPermissionBox.js","views/catalogue/Templates/components/TemplatePreview.js","views/catalogue/Templates/components/TemplateCreation.js","views/catalogue/Templates/components/StepControlled.js","views/catalogue/Templates/components/NewTemplates.js","views/catalogue/Templates/store/dataSlice.js","views/catalogue/Templates/store/index.js","views/catalogue/Templates/store/stateSlice.js"],"sourcesContent":["import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport * as Yup from \"yup\";\r\n\r\nexport const statusOptions = [\r\n    { label: 'Married', value: 'M' },\r\n    { label: 'Widowed', value: 'W' },\r\n    { label: 'Separated', value: 'S' },\r\n    { label: 'Divorced', value: 'D' },\r\n    { label: 'Single ', value: 'S' },\r\n]\r\nconst genderOptions = [\r\n    { label: 'Super Admin', value: 'M' },\r\n    { label: 'User.', value: 'F' },\r\n    { label: 'Admin', value: 'O' },\r\n]\r\n\r\nconst retailUserInitValues = {\r\n    roleId: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    middleName:'',\r\n    emailId: '',\r\n    phoneNumber: '',\r\n    ordemailId: ''\r\n}\r\n\r\n\r\nconst retailValidationSchema = Yup.object().shape({\r\n\r\n    //roleId: Yup.string().required('Please Enter RoleId'),\r\n    firstName: Yup.string().required('Please enter fisrt name').nullable(),\r\n    lastName: Yup.string().required('Please enter last name').nullable(),\r\n    emailId: Yup.string().email('Please enter valid email id').required('Please enter email id').nullable(),\r\n    phoneNumber: Yup.string().min(5,\"Number must be atleast 5 characters\").max(20,\"Max 20 characters are allowed\")\r\n    .required(\"Please enter phone number\").nullable(),\r\n\r\n    ordemailId: Yup.string().email('Please enter valid email id').required('Please enter email id').nullable()\r\n\r\n\r\n})\r\nconst RetailMasterAccountInfo = ({ onChange, refId, ...props }) => {\r\n    // console.log(props.retailIntialValues,\"retailUserInitValues\")\r\n    return (\r\n        <>\r\n\r\n            <h3 className=\"mx-2 mb-4 mt-2\">MASTER USER</h3>\r\n             <Formik\r\n                innerRef={refId}\r\n                initialValues={props.retailIntialValues.retailUserInitValues}\r\n                validationSchema={retailValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    let updatedPayload = { ...props.retailState, retailUserInitValues: values }\r\n                    props.setRetailState(updatedPayload)\r\n                    let dataToStore = props.retailIntialValues\r\n                    dataToStore.retailUserInitValues = values\r\n                    props.setRetailIntialValues(dataToStore)\r\n                    props.setStep(props.step + 1)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                               \r\n                                <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n                                    <FormItem\r\n                                        label={<p>First Name<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.firstName && touched.firstName\r\n                                        }\r\n                                        errorMessage={errors.firstName}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"firstName\"\r\n                                            placeholder=\"Enter First Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"middleName\"\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"middleName\"\r\n                                            placeholder=\"Enter Middle  Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n                                    <FormItem\r\n                                        label={<p>Last Name<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.lastName && touched.lastName\r\n                                        }\r\n                                        errorMessage={errors.lastName}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"lastName\"\r\n                                            placeholder=\"Enter Last  Name\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n\r\n                                    <FormItem\r\n                                        label={<p>Email ID<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.emailId && touched.emailId\r\n                                        }\r\n                                        errorMessage={errors.emailId}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"emailId\"\r\n                                            placeholder=\"Enter Email ID\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n                                    <FormItem\r\n                                        label={<p>Order Approver Email ID<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.ordemailId && touched.ordemailId\r\n                                        }\r\n                                        errorMessage={errors.ordemailId}\r\n                                    >\r\n\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"ordemailId\"\r\n                                            placeholder=\"Enter Order Approver Email ID\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n\r\n\r\n                                    <FormItem\r\n                                        label={<p>Phone Number<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                        invalid={\r\n                                            errors.phoneNumber && touched.phoneNumber\r\n                                        }\r\n                                        errorMessage={errors.phoneNumber}\r\n                                    >\r\n                                        <Field\r\n                                            type=\"text\"\r\n                                            autoComplete=\"off\"\r\n                                            name=\"phoneNumber\"\r\n                                            placeholder=\"Enter Phone Number\"\r\n                                            component={Input}\r\n                                        />\r\n                                    </FormItem>\r\n                                </div>\r\n\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RetailMasterAccountInfo\r\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport RetailUserInfo from './RetailUserInfo'\r\n\r\n\r\n\r\nimport { AdaptableCard } from 'components/shared'\r\n\r\n\r\nconst RetailMasterInfo = forwardRef((props, ref) => {\r\n  const [formData, setFormData] = useState({\r\n    RetailUserInfo: { values: null, validated: false },\r\n\r\n\r\n  })\r\n\r\n  const retailUserInforef = React.useRef()\r\n\r\n\r\n\r\n  React.useEffect(() => {\r\n    if (\r\n      formData.RetailUserInfo.validated\r\n      //&& formData.EnterpriseContactInfo.validated\r\n    ) {\r\n      alert('Ready to save')\r\n    }\r\n  }, [formData])\r\n\r\n  async function handleSubmit() {\r\n    await retailUserInforef.current.submitForm()\r\n\r\n\r\n  }\r\n\r\n  function handleChangeRetailUserInfo(data) {\r\n    setFormData({ ...formData, RetailUserInfo: data })\r\n  }\r\n\r\n\r\n\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      handleSubmitFromParent() {\r\n        handleSubmit()\r\n      },\r\n    }\r\n  })\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <div style={{backgroundColor:\"#F5F5F5\"}} className=\" p-5\">\r\n        <AdaptableCard className=\"h-full\" bodyClass=\"h-full\"  >\r\n          <div className='border-b pb-6 '>\r\n        <RetailUserInfo handleSubmit={handleSubmit}\r\n          onChange={handleChangeRetailUserInfo}\r\n          refId={retailUserInforef}\r\n          retailState={props.retailState}\r\n          setRetailState={props.setRetailState}\r\n          setStep={props.setStep}\r\n          step={props.step}\r\n          retailIntialValues={props.retailIntialValues}\r\n          setRetailIntialValues={props.setRetailIntialValues}\r\n        />\r\n        </div>\r\n      </AdaptableCard>\r\n      </div>\r\n\r\n\r\n    </>\r\n  )\r\n})\r\n\r\nexport default RetailMasterInfo\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n} from 'components/ui'\r\nimport RichTextEditor from 'components/shared/RichTextEditor'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getProductCategorys } from '../store/dataSlice'\r\n\r\nexport const templateTypeOptions = [\r\n    { label: 'Product', value: 'P' },\r\n    { label: 'Data Plan', value: 'D' },\r\n    { label: 'Service Plan', value: 'S' }\r\n]\r\nconst productCategoryOptions = [\r\n    { label: 'Airtel Inc.', value: 'M' },\r\n    { label: 'Airtel Inc.', value: 'F' },\r\n    { label: 'Airtel India', value: 'O' },\r\n]\r\n\r\n\r\nconst TemplateBasicInfo = (props) => {\r\n    const { errors, touched, values } = props\r\n\r\n    // const { pageIndex, pageSize, sort, query, total,sort_field,order} = useSelector(\r\n    //     (state) => state.templatesList.data.tableData\r\n    // )\r\n\r\n    const { enterAccount, password, rememberMe, usernameOrEmail, user_type, acc_mno_parent_unq_id } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n    console.log(user_type, \"user_type\")\r\n    const productCat = useSelector((state) => state?.templateCreate?.data?.templateProductList)\r\n    const staesss = useSelector((state) => state)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getProductCategorys({\r\n\r\n            enterAccount: user_type === 'Provider' ? acc_mno_parent_unq_id : enterAccount,\r\n        }))\r\n    }, [acc_mno_parent_unq_id, dispatch, enterAccount, user_type])\r\n    return (\r\n        <>\r\n            <FormContainer>\r\n                <div className=\"md:grid grid-cols-2 pl-5  \">\r\n                    <FormItem className=\"\"\r\n                        label={<p>Item Type <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                      \r\n                        invalid={\r\n                            errors.type && touched.type\r\n                        }\r\n                        errorMessage={errors.type}\r\n                    >\r\n                        <Field name=\"tempDetails.type\">\r\n                            {({ field, form }) => (\r\n                                <Select\r\n                                    placeholder=\"Select Item Type\"\r\n                                    field={field}\r\n                                    form={form}\r\n                                    options={templateTypeOptions}\r\n                                    value={templateTypeOptions.filter(\r\n                                        (type) =>\r\n                                            type.value ===\r\n                                            values.type\r\n                                    )}\r\n                                    onChange={(type) =>\r\n                                        form.setFieldValue(\r\n                                            field.name,\r\n                                            type.value\r\n                                        )\r\n                                    }\r\n                                />\r\n                            )}\r\n                        </Field>\r\n\r\n                    </FormItem>\r\n                    <FormItem className=\"ml-6 mr-4\"\r\n                        label={<p>Select Item Category <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                       \r\n                        invalid={\r\n                            errors.category && touched.category\r\n                        }\r\n                        errorMessage={errors.category}\r\n                    >\r\n                        <Field name=\"tempDetails.category\">\r\n                            {({ field, form }) => (\r\n                                <Select\r\n                                    placeholder=\"Select Item Category\"\r\n                                    field={field}\r\n                                    form={form}\r\n                                    options={productCat || []}\r\n                                    value={productCat?.filter(\r\n                                        (category) =>\r\n                                            category.value ===\r\n                                            values.category\r\n                                    )}\r\n                                    onChange={(category) =>\r\n                                        form.setFieldValue(\r\n                                            field.name,\r\n                                            category.value\r\n                                        )\r\n                                    }\r\n                                />\r\n                            )}\r\n                        </Field>\r\n                    </FormItem>\r\n\r\n                    <FormItem className=\"\"\r\n                        label={<p>Template Title <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                      \r\n                        invalid={errors.title && touched.title}\r\n                        errorMessage={errors.title}\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"tempDetails.title\"\r\n                            placeholder=\"Enter Template Title\"\r\n                            component={Input}\r\n                        />\r\n                    </FormItem>\r\n\r\n                </div>\r\n                <div className=\"md:grid grid-cols-1 pl-4 gap-1 mx-1\">\r\n                    <FormItem label=\"Description\"\r\n                        invalid={errors.description && touched.description}\r\n                        errorMessage={errors.description}\r\n                    >\r\n                        <Field name=\"tempDetails.description\" >\r\n                            {({ field, form }) => (\r\n                                <RichTextEditor\r\n                                    value={field.value}\r\n                                    onChange={(val) =>\r\n                                        form.setFieldValue(field.name, val)\r\n                                    }\r\n                                />\r\n                            )}\r\n                        </Field>\r\n\r\n\r\n                    </FormItem>\r\n                </div>\r\n            </FormContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TemplateBasicInfo\r\n","import React, { useCallback } from 'react'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport get from 'lodash/get'\r\nimport { countryList } from 'constants/countries.constant'\r\nimport * as Yup from 'yup'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    country: Yup.string().required('Please select country'),\r\n    addressLine1: Yup.string().required('Please enter your address'),\r\n    addressLine2: Yup.string(),\r\n    city: Yup.string().required('Please enter your city'),\r\n    state: Yup.string().required('Please enter your state'),\r\n    zipCode: Yup.string().required('Please enter zip code'),\r\n    sameCorrespondenceAddress: Yup.bool(),\r\n    correspondenceAddress: Yup.object().when('sameCorrespondenceAddress', {\r\n        is: false,\r\n        then: Yup.object().shape({\r\n            country: Yup.string().required('Please select country'),\r\n            addressLine1: Yup.string().required('Please enter your address'),\r\n            addressLine2: Yup.string(),\r\n            city: Yup.string().required('Please enter your city'),\r\n            state: Yup.string().required('Please enter your state'),\r\n            zipCode: Yup.string().required('Please enter zip code'),\r\n        }),\r\n        otherwise: (schema) => schema,\r\n    }),\r\n})\r\n\r\nconst AddressForm = (props) => {\r\n    const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        countryName,\r\n        addressLine1Name,\r\n        addressLine2Name,\r\n        cityName,\r\n        stateName,\r\n        zipCodeName,\r\n    } = props\r\n\r\n    const getError = useCallback(\r\n        (name) => {\r\n            return get(errors, name)\r\n        },\r\n        [errors]\r\n    )\r\n\r\n    const getTouched = useCallback(\r\n        (name) => {\r\n            return get(touched, name)\r\n        },\r\n        [touched]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n               \r\n                <FormItem\r\n                    label=\"Address Line 1\"\r\n                    invalid={\r\n                        getError(addressLine1Name) &&\r\n                        getTouched(addressLine1Name)\r\n                    }\r\n                    errorMessage={getError(addressLine1Name)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={addressLine1Name}\r\n                        placeholder=\"Address Line 1\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n\r\n                <FormItem\r\n                    label=\"Address Line 2\"\r\n                    invalid={\r\n                        getError(addressLine2Name) &&\r\n                        getTouched(addressLine2Name)\r\n                    }\r\n                    errorMessage={getError(addressLine2Name)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={addressLine2Name}\r\n                        placeholder=\"Address Line 2\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n            </div>\r\n            <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n              \r\n                <FormItem\r\n                    label=\"City\"\r\n                    invalid={getError(cityName) && getTouched(cityName)}\r\n                    errorMessage={getError(cityName)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={cityName}\r\n                        placeholder=\"City\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n                <FormItem\r\n                    label=\"State\"\r\n                    invalid={getError(stateName) && getTouched(stateName)}\r\n                    errorMessage={getError(stateName)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={stateName}\r\n                        placeholder=\"State\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n                <FormItem\r\n                    label=\"Country\"\r\n                    invalid={getError(countryName) && getTouched(countryName)}\r\n                    errorMessage={getError(countryName)}\r\n                >\r\n                    <Field name={countryName}>\r\n                        {({ field, form }) => (\r\n                            <Select\r\n                                placeholder=\"Country\"\r\n                                field={field}\r\n                                form={form}\r\n                                options={countryList}\r\n                                value={countryList.filter(\r\n                                    (c) => c.value === get(values, countryName)\r\n                                )}\r\n                                onChange={(c) =>\r\n                                    form.setFieldValue(field.name, c.value)\r\n                                }\r\n                            />\r\n                        )}\r\n                    </Field>\r\n                </FormItem>\r\n                <FormItem\r\n                    label=\"Zip Code\"\r\n                    invalid={getError(zipCodeName) && getTouched(zipCodeName)}\r\n                    errorMessage={getError(zipCodeName)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={zipCodeName}\r\n                        placeholder=\"Zip Code\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n            </div>\r\n           \r\n              \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nconst TemplateAddressInfo = ({\r\n    data = {\r\n        country: '',\r\n        addressLine1: '',\r\n        addressLine2: '',\r\n        city: '',\r\n        state: '',\r\n        zipCode: '',\r\n        sameCorrespondenceAddress: true,\r\n        correspondenceAddress: {\r\n            country: '',\r\n            addressLine1: '',\r\n            addressLine2: '',\r\n            city: '',\r\n            state: '',\r\n            zipCode: '',\r\n        },\r\n    },\r\n    onNextChange,\r\n    onBackChange,\r\n    currentStepStatus,\r\n}) => {\r\n    const onNext = (values, setSubmitting) => {\r\n        onNextChange?.(values, 'addressInformation', setSubmitting)\r\n    }\r\n\r\n    const onCheck = (value, field, form) => {\r\n        form.setFieldValue(field.name, value)\r\n    }\r\n\r\n    const onBack = () => {\r\n        onBackChange?.()\r\n    }\r\n\r\n    return (\r\n        <>\r\n             <h3 className=\"mx-4 mb-4 mt-2\">ADDRESS</h3>\r\n            <Formik\r\n                initialValues={data}\r\n                enableReinitialize\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    setTimeout(() => {\r\n                        onNext(values, setSubmitting)\r\n                    }, 1000)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, setFieldValue, isSubmitting }) => {\r\n                    const formProps = { values, touched, errors }\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                               \r\n                                <AddressForm\r\n                                    countryName=\"country\"\r\n                                    addressLine1Name=\"addressLine1\"\r\n                                    addressLine2Name=\"addressLine2\"\r\n                                    cityName=\"city\"\r\n                                    stateName=\"state\"\r\n                                    zipCodeName=\"zipCode\"\r\n                                    {...formProps}\r\n                                />\r\n                              \r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TemplateAddressInfo\r\n","import React, { useState, useImperativeHandle, forwardRef } from 'react'\r\nimport TemplateBasicInfo from './TemplateBasicInfo'\r\nimport TemplateContactInfo from './TemplateContactInfo'\r\nimport TemplateAddressInfo from './TemplateAddressInfo'\r\nimport TemplateUploadFiles from './TemplateUploadFiles'\r\nimport TemplateBillingInfo from './TemplateBillingInfo'\r\nimport { AdaptableCard } from 'components/shared'\r\n\r\n\r\nconst TemplateDetails = forwardRef((props, ref) => {\r\n  const providerTempDetails = React.useRef()\r\n\r\n  async function handleSubmit() {\r\n    await providerTempDetails.current.submitForm()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"p-5\" style={{ backgroundColor: \"#f5f5f5\" }}>\r\n        <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider >\r\n          <TemplateBasicInfo\r\n            operaterState={props.operaterState}\r\n            setOperaterState={props.setOperaterState}\r\n            operatorIntialValues={props.operatorIntialValues}\r\n            setOperatorIntialValues={props.setOperatorIntialValues}\r\n            errors={props?.errors?.tempDetails || {}}\r\n            touched={props?.touched?.tempDetails || {}}\r\n            values={props?.values?.tempDetails || {}}\r\n\r\n          />\r\n        </AdaptableCard>\r\n      </div>\r\n      {/* <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider >\r\n          <TemplateContactInfo/>\r\n          </AdaptableCard>\r\n          <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider >\r\n          <TemplateAddressInfo/>\r\n          </AdaptableCard>\r\n          <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider >\r\n          <TemplateBillingInfo/>\r\n          </AdaptableCard>\r\n          <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" >\r\n          <TemplateUploadFiles/>\r\n          </AdaptableCard> */}\r\n    </>\r\n  )\r\n})\r\n\r\nexport default TemplateDetails\r\n","import { Card, Checkbox } from 'components/ui'\r\nimport React from 'react'\r\n\r\nvar randomColor = Math.floor(Math.random() * 16777215).toString(16)\r\n\r\nfunction MasterPermissionBox() {\r\n    return (\r\n        <>\r\n            <div className=\"bg-gray-50 p-5\">\r\n                <div className=\"md:grid grid-cols-3 \">\r\n                    <Card\r\n                        className=\"rounded-none border-t-4 border-indigo-500 border-r-0 border-b-0 border-l-0\"\r\n                        \r\n                    >\r\n                        <div className=\"flex justify-between\">\r\n                            <p className=\"text-base text-black font-bold\">\r\n                                Account Management\r\n                            </p>\r\n                            <div className=\"flex\">\r\n                                <Checkbox className=\"\" />\r\n                                <p className='text-base font-medium'>Select All</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex flex-row-reverse gap-4 mt-6 \" >\r\n                            <p className='text-base font-medium'>Approve</p>\r\n                            <p className='text-base font-medium'>Deactivate</p>\r\n                            <p className='text-base font-medium'>Edit</p>\r\n                            <p className='text-base font-medium'>Add</p>\r\n                            <p className='text-base font-medium'>View</p>\r\n                        </div>\r\n                        <div className='flex mt-5'>\r\n                            <p className='mr-6'>Operaters</p>\r\n                            <Checkbox className=\"mx-3\"/>\r\n                            <Checkbox className=\"mx-4\"/>\r\n                            <Checkbox className=\"mx-4\"/>\r\n                            <Checkbox className=\"mx-6 mr-8\"/>\r\n                            <Checkbox className=\"mx-6 ml-8\"/>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MasterPermissionBox\r\n","import { Card } from 'components/ui'\r\nimport React from 'react'\r\nimport ReactHtmlParser from 'html-react-parser'\r\nimport GetDropdownLabel from 'views/Servicefile'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { useSelector } from 'react-redux'\r\n// export const templateTypeOptions = [\r\n//     { label: 'Product', value: 'M' },\r\n//     { label: 'Data Plan', value: 'W' },\r\n//     { label: 'Service Plan', value: 'S' }\r\n// ]\r\n\r\nexport const templateTypeOptions = [\r\n    { label: 'Product', value: 'P' },\r\n    { label: 'Data Plan', value: 'D' },\r\n    { label: 'Service Plan', value: 'S' }\r\n]\r\nfunction TemplatePreview(props) {\r\n    const { operaterState } = props\r\n    const productCat = useSelector((state) => state?.templateCreate?.data?.templateProductList)\r\n    return (\r\n        <>\r\n            <Card cclassName=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2\">\r\n                    <h6 className=\"mx-2 mb-4 mt-1 font-bold text-cyan-500\">\r\n                        BASIC DETAILS{' '}\r\n                    </h6>\r\n                    {/* <div className=\" text-base text-black font-bold flex justify-end\">\r\n                        <p>--</p>\r\n                        <p>EDIT</p>\r\n                    </div> */}\r\n                    <button className=\" text-base text-black font-bold flex justify-end\" onClick={() => { props.setStep(0) }} >\r\n                        <div className='flex'>\r\n                            <MdModeEdit className=\"mt-1\" />\r\n                            <p className='ml-2'>EDIT</p>\r\n                        </div>\r\n                    </button>\r\n                </div>\r\n                <div className=\"md:grid grid-cols-12\">\r\n                    <div className='col-span-3 md:gird mx-2'>\r\n                        <p className='text-base text-black font-bold mb-2'>Product Category</p>\r\n                        <p className='text-base'>{GetDropdownLabel(operaterState?.category,productCat )}</p>\r\n                        \r\n                    </div>\r\n                    <div className='col-span-3 md:gird mx-2'>\r\n                        <p className='text-base text-black font-bold mb-2'>Template Title</p>\r\n                        <p className='text-base'>{operaterState?.title}</p>\r\n                    </div>\r\n                    <div className='col-span-3 md:gird mx-2'>\r\n                        <p className='text-base text-black font-bold mb-2'>Template Type</p>\r\n                        <p className='text-base'>{GetDropdownLabel(operaterState?.type, templateTypeOptions)}</p>\r\n                    </div>\r\n                    <div className='col-span-3 md:gird mx-2'>\r\n                        <p className='text-base text-black font-bold mb-2'>Description</p>\r\n                        <p className='text-base'>{ReactHtmlParser(\r\n                            operaterState?.description\r\n                        )} </p>\r\n                    </div>\r\n                </div>\r\n\r\n            </Card>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TemplatePreview\r\n","import { AdaptableCard } from 'components/shared'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormContainer,\r\n    FormItem,\r\n    Input,\r\n    Select,\r\n    Radio,\r\n    Upload,\r\n} from 'components/ui'\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport React from 'react'\r\nimport { BsFillPlusCircleFill } from 'react-icons/bs'\r\nimport { HiMinus, HiOutlineCloudUpload, HiPlus } from 'react-icons/hi'\r\nimport RichTextEditor from 'components/shared/RichTextEditor'\r\nimport { MdDelete } from 'react-icons/md'\r\nimport * as yup from \"yup\";\r\n\r\nconst formFieldsType = [\r\n    { label: 'Text Field', value: 'TF' },\r\n    { label: 'Text Area', value: 'TA' },\r\n    { label: 'Drop Down', value: 'DD' },\r\n    { label: 'Radio Button', value: 'RB' },\r\n    { label: 'Check Boxes', value: 'CB' },\r\n    { label: 'CK Editor', value: 'CK' },\r\n    { label: 'Upload File', value: 'UF' },\r\n]\r\n\r\nconst fileSizeOptions = [\r\n    { label: '5 MB', value: '5' },\r\n    { label: '10 MB', value: '10' },\r\n    { label: '15 MB', value: '15' },\r\n    { label: '20 MB', value: '20' },\r\n    { label: '25 MB', value: '25' },\r\n\r\n]\r\n\r\n\r\nconst formInitValues = {\r\n    initialValues: [{\r\n        sectionTitle: '',\r\n        sectionValues: [{\r\n            title: '',\r\n            formType: '',\r\n            isMandatery: false,\r\n            textAreaMaxLength: '',\r\n            // dropdownOptions: [{ option: '' }],\r\n            // radioBtnOptions: [{ option: '' }],\r\n            // checkBoxOptions: [{ option: '' }],\r\n            // textEditor: '',\r\n            // maxFileSize: '',\r\n            // fileType: [\r\n            //     { label: 'Document', status: false },\r\n            //     { label: 'Image', status: false },\r\n            //     { label: 'Pdf', status: false },\r\n            //     { label: 'Video', status: false }\r\n            // ]\r\n        }]\r\n    }]\r\n}\r\n\r\nconst handleValidation = yup.object().shape({\r\n    initialValues: yup.array().of(\r\n        yup.object().shape({\r\n            sectionTitle: yup.string().required(\"Section Title is required\"),\r\n            title: yup.string().required(\"Title is required\"),\r\n            formType: yup.string().required(\"FormType is required\")\r\n        })\r\n    )\r\n});\r\n\r\nconst TemplateCreation = (props) => {\r\n\r\n\r\n\r\n    const onChangeFieldType = (field, form, type, setFieldValue, i, fi, values) => {\r\n        form.setFieldValue(field.name, type.value);\r\n\r\n        const sectionValues = values.initialValues[i].sectionValues[fi];\r\n\r\n        // sectionValues.dropdownOptions = [{ option: '' }];\r\n        // sectionValues.checkBoxOptions = [{ option: '' }];\r\n        // sectionValues.radioBtnOptions = [{ option: '' }];\r\n        // sectionValues.fileType.forEach(e => e.status = false);\r\n        sectionValues.textAreaMaxLength = '';\r\n        // sectionValues.maxFileSize = '';\r\n        // sectionValues.textEditor = '';\r\n    };\r\n\r\n    const { errors, touched, values, setFieldValue } = props\r\n    console.log(props, \"props\", values)\r\n    console.log(values.tempDetails\r\n        .type)\r\n    return (\r\n        <>\r\n            <AdaptableCard className=\"h-full pb-1\" bodyClass=\"h-full\">\r\n                <h3 className=\"mb-4 mt-2\">Template Creation</h3>\r\n            </AdaptableCard>\r\n            <div className=\"bg-gray-100 py-1\">\r\n                {values?.tempDetails?.type === 'P' ? <FormContainer>\r\n                    <div style={{ backgroundColor: \"#f5f5f5\", padding: \"20px 20px\" }}>\r\n                        <div className='card p-5'>\r\n                            <div className=\" flex gap-4  \">\r\n                                <FormItem className=\"w-96 \" label=\"Variant Title\"\r\n                                    invalid={errors.itemTitle && touched.itemTitle}\r\n                                    errorMessage={errors.itemTitle}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"itemTitle\"\r\n                                        placeholder=\"Enter Variant Title\"\r\n                                        component={Input}\r\n                                        disabled\r\n                                    />\r\n                                </FormItem>\r\n\r\n                                <FormItem className=\"w-96  \" label=\"Variant Price\"\r\n                                    invalid={errors.itemActualPrice && touched.itemActualPrice}\r\n                                    errorMessage={errors.itemActualPrice}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"itemActualPrice\"\r\n                                        placeholder=\"Enter Variant Price\"\r\n                                        component={Input}\r\n                                        disabled\r\n                                    />\r\n                                </FormItem>\r\n\r\n                            </div>\r\n                            <div style={{ width: \"70%\" }} className=\"pt-2\">\r\n\r\n                                <FormItem label=\"Variant Description\"\r\n                                    invalid={errors.variantDesc && touched.variantDesc}\r\n                                    errorMessage={errors.variantDesc}\r\n                                >\r\n\r\n\r\n                                    <Field className=\" h-28\"\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"shortDescription\"\r\n                                        placeholder=\"\"\r\n                                        component={Input}\r\n                                        disabled\r\n                                    />\r\n                                </FormItem>\r\n                                <Upload draggable  className='border-blue-500 bg-blue-50 w-96 h-36'\r\n                                    disabled\r\n                                >\r\n                                    <div className=\"my-10 text-center\">\r\n                                        <div className=\"text-6xl mb-4 flex justify-center\">\r\n                                            <HiOutlineCloudUpload className=\"h-10\" style={{ color: \"#2563eb\" }} />\r\n                                        </div>\r\n                                        <p className=\"font-semibold\">\r\n                                            <span className=\"text-gray-800 dark:text-white\">\r\n                                                Upload Files Here or{' '}\r\n                                            </span>\r\n                                            <span className=\"text-blue-500\">\r\n                                                browse\r\n                                            </span>\r\n                                        </p>\r\n                                        <p className=\"mt-1 opacity-60 dark:text-white\">\r\n                                            JPG/PNG are allowed\r\n                                        </p>\r\n                                    </div>\r\n                                </Upload>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </FormContainer> : null}\r\n\r\n                {values?.tempDetails?.type === 'D' ? <FormContainer>\r\n                    <div style={{ backgroundColor: \"#f5f5f5\", padding: \"20px 20px\" }}>\r\n                        <div className='card p-5'>\r\n                            <div className=\" grid grid-cols-4 gap-4  \">\r\n                                <FormItem className=\" border-\" label=\"Variant Title\"\r\n                                    invalid={errors.variantTitleTwo && touched.variantTitleTwo}\r\n                                    errorMessage={errors.variantTitleTwo}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"variantTitleTwo\"\r\n                                        placeholder=\"Enter Variant Title\"\r\n                                        component={Input}\r\n                                        disabled\r\n                                    />\r\n                                </FormItem>\r\n\r\n                                <FormItem label=\"Variant Price\"\r\n                                    invalid={errors.variantPriceTwo && touched.variantPriceTwo}\r\n                                    errorMessage={errors.variantPriceTwo}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"variantPriceTwo\"\r\n                                        placeholder=\"Enter Price\"\r\n                                        component={Input}\r\n                                        disabled\r\n                                    />\r\n                                </FormItem>\r\n\r\n                                <FormItem label=\"Validity\"\r\n                                    invalid={errors.validity && touched.validity}\r\n                                    errorMessage={errors.validity}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"validity\"\r\n                                        placeholder=\"Enter Validity\"\r\n                                        component={Input}\r\n                                        disabled\r\n                                    />\r\n                                </FormItem>\r\n\r\n                            </div>\r\n                            <div style={{ width: \"70%\" }} className=\"\">\r\n                                <FormItem label=\"Feature list\"\r\n                                    invalid={errors.variantFeatureDesc && touched.variantFeatureDesc}\r\n                                    errorMessage={errors.variantFeatureDesc}\r\n                                >\r\n                                    <Field name=\"variantFeatureDesc\" >\r\n                                        {({ field, form }) => (\r\n                                            <RichTextEditor readOnly\r\n                                                value={field.value}\r\n                                                onChange={(val) =>\r\n                                                    form.setFieldValue(field.name, val)\r\n                                                }\r\n                                            />\r\n                                        )}\r\n                                    </Field>\r\n                                </FormItem>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </FormContainer> : null}\r\n\r\n                {values?.tempDetails?.type === 'S' ? <FormContainer>\r\n                    <div style={{ backgroundColor: \"#f5f5f5\", padding: \"20px 20px\" }}>\r\n                        <div className='card p-5'>\r\n                            <div className=\"md:grid grid-cols-4 gap-3  \">\r\n                                <FormItem label=\"Variant Title\"\r\n                                    invalid={errors.variantTitleThree && touched.variantTitleThree}\r\n                                    errorMessage={errors.variantTitleThree}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"variantTitleThree\"\r\n                                        placeholder=\"Enter Variant Title\"\r\n                                        component={Input}\r\n                                        disabled\r\n                                    />\r\n                                </FormItem>\r\n\r\n                                <FormItem label=\"Monthly Price\"\r\n                                    invalid={errors.monthlyPrice && touched.monthlyPrice}\r\n                                    errorMessage={errors.monthlyPrice}\r\n                                >\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"monthlyPrice\"\r\n                                        placeholder=\"Enter Price \"\r\n                                        component={Input}\r\n                                        disabled\r\n                                    />\r\n                                </FormItem>\r\n\r\n\r\n\r\n\r\n                            </div>\r\n                            <div className='grid grid-cols-2 '>\r\n                                <FormItem label=\"Short Description\"\r\n                                    invalid={errors.shortDescription && touched.shortDescription}\r\n                                    errorMessage={errors.shortDescription}\r\n                                >\r\n                                    <Field className=\" h-28\"\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"shortDescription\"\r\n                                        placeholder=\"\"\r\n                                        component={Input}\r\n                                        disabled\r\n                                    />\r\n                                </FormItem></div>\r\n                            <div style={{ width: \"70%\" }} className=\"   \">\r\n                                <FormItem label=\"Feature List\"\r\n                                    invalid={errors.variantFeatureDescThird && touched.variantFeatureDescThird}\r\n                                    errorMessage={errors.variantFeatureDescThird}\r\n                                >\r\n                                    <Field className=\" h-28\"\r\n                                        type=\"text\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"shortDescription\"\r\n                                        placeholder=\"\"\r\n                                        component={Input}\r\n                                        disabled\r\n                                    />\r\n\r\n                                </FormItem>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </FormContainer> : null}\r\n\r\n\r\n\r\n                <FieldArray name={values?.initialValues}>\r\n                    {({ push: pushSection, remove: removeSection }) => (\r\n                        <div>\r\n                            {values?.initialValues?.map((item, i) => {\r\n                                return (\r\n                                    <>\r\n                                        <FormContainer>\r\n                                            <div className=\"md:grid grid-cols-3 mt-8 gap-4 mx-4\">\r\n                                                <FormItem label=\"SECTION TITLE\" className=\"text-black\">\r\n                                                    <Field type=\"text\" autoComplete=\"off\" name={`initialValues[${i}].sectionTitle`} placeholder=\"Enter Section Title\" component={Input} />\r\n                                                </FormItem>\r\n                                            </div>\r\n                                            <div className=\"card  mx-4 p-4\">\r\n                                                <FieldArray name={`sectionValues`}>\r\n                                                    {({ push: pushField, remove: removeField }) => (\r\n                                                        <div>\r\n                                                            {item?.sectionValues?.map((f, fi) => {\r\n                                                                return (\r\n                                                                    <div key={fi}>\r\n                                                                        <div className='md:grid grid-cols-2 gap-4 p-4'>\r\n                                                                            <FormItem label=\"Title\">\r\n                                                                                <Field type=\"text\" autoComplete=\"off\" name={`initialValues[${i}].sectionValues[${fi}].title`} placeholder=\"Enter Title\" component={Input} />\r\n                                                                            </FormItem>\r\n                                                                            <FormItem label=\"Select Form Field Type\"\r\n                                                                                invalid={errors.type && touched.type}\r\n                                                                                errorMessage={errors.type}>\r\n                                                                                <Field name={`initialValues[${i}].sectionValues[${fi}].formType`}>\r\n                                                                                    {({ field, form }) => (\r\n                                                                                        <Select placeholder=\"Select Field Type\" field={field} form={form} options={formFieldsType}\r\n                                                                                            value={formFieldsType.filter((type) => type.value === values.initialValues[i].sectionValues[fi].formType)}\r\n                                                                                            onChange={(type) => onChangeFieldType(field, form, type, setFieldValue, i, fi, values)}\r\n                                                                                        />\r\n                                                                                    )}\r\n                                                                                </Field>\r\n                                                                            </FormItem>\r\n                                                                            {values.initialValues[i].sectionValues[fi].formType === 'TA' &&\r\n                                                                                <FormItem label=\"Max Length\" >\r\n                                                                                    <Field type=\"text\" autoComplete=\"off\" name={`initialValues[${i}].sectionValues[${fi}].textAreaMaxLength`} placeholder=\"Enter Max Length\" component={Input} />\r\n                                                                                </FormItem>\r\n                                                                            }\r\n                                                                            {/* {values.initialValues[i].sectionValues[fi].formType === 'DD' &&\r\n                                                                                <FieldArray name={`values.initialValues[${i}].sectionValues[${fi}].dropdownOptions`}>\r\n                                                                                    {({ push: pushOption, remove: removeOption }) => (\r\n                                                                                        <div>\r\n                                                                                            {f?.dropdownOptions?.map((options, id) => {\r\n                                                                                                return (\r\n                                                                                                    <div key={id} className='flex mt-4'>\r\n                                                                                                        <h6 className='my-4 mr-2'>{id + 1}.</h6>\r\n                                                                                                        <FormItem className='w-80'>\r\n                                                                                                            <Field type=\"text\" autoComplete=\"off\" name={`initialValues[${i}].sectionValues[${fi}].dropdownOptions[${id}].option`} placeholder={`options ${id + 1}`} component={Input} />\r\n                                                                                                        </FormItem>\r\n                                                                                                        <div className='flex'>\r\n                                                                                                            <Button className='ml-4 border-cyan-500'\r\n                                                                                                                shape=\"circle\"\r\n                                                                                                                size=\"md\"\r\n                                                                                                                icon={<HiPlus />}\r\n                                                                                                                onClick={() => values.initialValues[i].sectionValues[fi].dropdownOptions.push({ option: '' })}\r\n                                                                                                            />\r\n                                                                                                            {values.initialValues[i].sectionValues[fi].dropdownOptions.length > 1 &&\r\n                                                                                                                <Button className='ml-4 border-red-500'\r\n                                                                                                                    shape=\"circle\"\r\n                                                                                                                    size=\"md\"\r\n                                                                                                                    icon={<HiMinus />}\r\n                                                                                                                    onClick={() => removeOption(id)}\r\n                                                                                                                />}\r\n                                                                                                        </div>\r\n                                                                                                    </div>\r\n                                                                                                )\r\n                                                                                            })}\r\n                                                                                        </div>\r\n                                                                                    )}\r\n                                                                                </FieldArray>\r\n                                                                            }\r\n                                                                            {values.initialValues[i].sectionValues[fi].formType === 'RB' &&\r\n                                                                                <FieldArray name={`values.initialValues[${i}].sectionValues[${fi}].radioBtnOptions`}>\r\n                                                                                    {({ push: pushOptionR, remove: removeOptionR }) => (\r\n                                                                                        <div>\r\n                                                                                            {f.radioBtnOptions.map((options, id) => {\r\n                                                                                                return (\r\n                                                                                                    <div key={id} className='flex mt-4'>\r\n                                                                                                        <div className='mx-4 mt-3'>\r\n                                                                                                            <Radio disabled />\r\n                                                                                                        </div>\r\n                                                                                                        <FormItem className='w-80'>\r\n                                                                                                            <Field type=\"text\" autoComplete=\"off\" name={`initialValues[${i}].sectionValues[${fi}].radioBtnOptions[${id}].option`} placeholder={`options ${id + 1}`} component={Input} />\r\n                                                                                                        </FormItem>\r\n                                                                                                        <div className='flex'>\r\n                                                                                                            <Button className='ml-4 border-cyan-500'\r\n                                                                                                                shape=\"circle\"\r\n                                                                                                                size=\"md\"\r\n                                                                                                                icon={<HiPlus />}\r\n                                                                                                                onClick={() => values.initialValues[i].sectionValues[fi].radioBtnOptions.push({ option: '' })}\r\n                                                                                                            />\r\n                                                                                                            {values.initialValues[i].sectionValues[fi].radioBtnOptions.length > 1 &&\r\n                                                                                                                <Button className='ml-4 border-red-500'\r\n                                                                                                                    shape=\"circle\"\r\n                                                                                                                    size=\"md\"\r\n                                                                                                                    icon={<HiMinus />}\r\n                                                                                                                    onClick={() => removeOptionR(id)}\r\n                                                                                                                />}\r\n                                                                                                        </div>\r\n                                                                                                    </div>\r\n                                                                                                )\r\n                                                                                            })}\r\n                                                                                        </div>\r\n                                                                                    )}\r\n                                                                                </FieldArray>\r\n                                                                            }\r\n                                                                            {values.initialValues[i].sectionValues[fi].formType === 'CB' &&\r\n                                                                                <FieldArray name={`values.initialValues[${i}].sectionValues[${fi}].checkBoxOptions`}>\r\n                                                                                    {({ push: pushOptionC, remove: removeOptionC }) => (\r\n                                                                                        <div>\r\n                                                                                            {f.checkBoxOptions.map((options, id) => {\r\n                                                                                                return (\r\n                                                                                                    <div key={id} className='flex mt-4'>\r\n                                                                                                        <div className='mx-4 mt-3'>\r\n                                                                                                            <Checkbox disabled />\r\n                                                                                                        </div>\r\n                                                                                                        <FormItem className='w-80'>\r\n                                                                                                            <Field type=\"text\" autoComplete=\"off\" name={`initialValues[${i}].sectionValues[${fi}].checkBoxOptions[${id}].option`} placeholder={`options ${id + 1}`} component={Input} />\r\n                                                                                                        </FormItem>\r\n                                                                                                        <div className='flex'>\r\n                                                                                                            <Button className='ml-4 border-cyan-500'\r\n                                                                                                                shape=\"circle\"\r\n                                                                                                                size=\"md\"\r\n                                                                                                                icon={<HiPlus />}\r\n                                                                                                                onClick={() => values.initialValues[i].sectionValues[fi].checkBoxOptions.push({ option: '' })}\r\n                                                                                                            />\r\n                                                                                                            {values.initialValues[i].sectionValues[fi].checkBoxOptions.length > 1 &&\r\n                                                                                                                <Button className='ml-4 border-red-500'\r\n                                                                                                                    shape=\"circle\"\r\n                                                                                                                    size=\"md\"\r\n                                                                                                                    icon={<HiMinus />}\r\n                                                                                                                    onClick={() => removeOptionC(id)}\r\n                                                                                                                />}\r\n                                                                                                        </div>\r\n                                                                                                    </div>\r\n                                                                                                )\r\n                                                                                            })}\r\n                                                                                        </div>\r\n                                                                                    )}\r\n                                                                                </FieldArray>\r\n                                                                            }\r\n                                                                            {values.initialValues[i].sectionValues[fi].formType === 'CK' &&\r\n                                                                                <FormItem>\r\n                                                                                    <Field name={`initialValues[${i}].sectionValues[${fi}].textEditor`}>\r\n                                                                                        {({ field, form }) => (\r\n                                                                                            <RichTextEditor\r\n                                                                                                value={values.initialValues[i].sectionValues[fi].textEditor}\r\n                                                                                                onChange={(val) => form.setFieldValue(field.name, val)}\r\n                                                                                            />\r\n                                                                                        )}\r\n                                                                                    </Field>\r\n                                                                                </FormItem>\r\n                                                                            } */}\r\n                                                                            {values.initialValues[i].sectionValues[fi].formType === 'UF' &&\r\n                                                                                <>\r\n                                                                                    <FormContainer>\r\n                                                                                        <FormItem label='Select Max File Size'>\r\n                                                                                            <Field name={`initialValues[${i}].sectionValues[${fi}].maxFileSize`}>\r\n                                                                                                {({ field, form }) => (\r\n                                                                                                    <Select placeholder=\"Select Max File Size\" field={field} form={form} options={fileSizeOptions}\r\n                                                                                                        value={fileSizeOptions?.filter((type) => type?.value === values?.initialValues[i]?.sectionValues[fi]?.maxFileSize)}\r\n                                                                                                        onChange={(type) => form.setFieldValue(field.name, type.value)}\r\n                                                                                                    />\r\n                                                                                                )}\r\n                                                                                            </Field>\r\n                                                                                        </FormItem>\r\n                                                                                        <FormItem label='Select File Type' >\r\n                                                                                            {values?.initialValues[i]?.sectionValues[fi]?.fileType?.map((ft, fti) => {\r\n                                                                                                return (\r\n                                                                                                    <Field name={`initialValues[${i}].sectionValues[${fi}].fileType[${fti}].status`}>\r\n                                                                                                        {({ field, form }) => (\r\n                                                                                                            <div className='my-2 flex'>\r\n                                                                                                                <Checkbox checked={values?.initialValues[i]?.sectionValues[fi]?.fileType[fti]?.status}\r\n                                                                                                                    onChange={(val) => form.setFieldValue(field.name, val)} className='mt-4' />\r\n                                                                                                                <label className='mt-4'>{ft?.label}</label>\r\n                                                                                                            </div>\r\n                                                                                                        )}\r\n                                                                                                    </Field>\r\n                                                                                                )\r\n                                                                                            })\r\n                                                                                            }\r\n                                                                                        </FormItem>\r\n                                                                                    </FormContainer>\r\n                                                                                </>\r\n                                                                            }\r\n                                                                            <FormItem className='mt-7'>\r\n                                                                                <Field name={`initialValues[${i}].sectionValues[${fi}].isMandatery`} >\r\n                                                                                    {({ field, form }) => (\r\n                                                                                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                                                                            <Checkbox checked={values.initialValues[i].sectionValues[fi].isMandatery}\r\n                                                                                                onChange={(val) => form.setFieldValue(field.name, val)} />\r\n                                                                                            <label>Is Mandatory</label>\r\n                                                                                        </div>\r\n                                                                                    )}\r\n                                                                                </Field>\r\n                                                                            </FormItem>\r\n                                                                        </div>\r\n                                                                        <div className=\"mt-4 text-right lg:flex items-center justify-end\">\r\n                                                                            <Button type=\"button\"  variant=\"plain\" className=\"font-bold\" style={{ color: '#004D99' }}\r\n                                                                                icon={<BsFillPlusCircleFill fill=\"#004D99\" />}\r\n                                                                                onClick={() => {values?.initialValues[i].sectionValues.push({\r\n\r\n                                                                                    title: '', formType: '', isMandatery: false, textAreaMaxLength: '',\r\n                                                                                    // dropdownOptions: [{ option: '' }], radioBtnOptions: [{ option: '' }],\r\n                                                                                    // checkBoxOptions: [{ option: '' }], textEditor: '', maxFileSize: '',\r\n                                                                                    fileType: [{ label: 'Document', status: false },\r\n                                                                                    { label: 'Image', status: false },\r\n                                                                                    { label: 'Pdf', status: false },\r\n                                                                                    { label: 'Video', status: false }]\r\n\r\n                                                                                })\r\n                                                                                setFieldValue(`initialValues[${i}].sectionValues`, values?.initialValues[i].sectionValues);}\r\n                                                                                }\r\n                                                                            >\r\n                                                                                ADD NEW FIELD\r\n                                                                            </Button>\r\n                                                                            {item.sectionValues.length > 1 &&\r\n                                                                                <Button type=\"button\"  variant=\"plain\" className=\"font-bold\" style={{ color: '#990000' }}\r\n                                                                                    icon={<MdDelete fill=\"#99000f\" />}\r\n                                                                                    onClick={() => {\r\n                                                                                        const updatedArray = values?.initialValues[i].sectionValues.filter(\r\n                                                                                            (item, ind) => fi !== ind\r\n                                                                                        );\r\n                                                                                        setFieldValue(`initialValues[${i}].sectionValues`, updatedArray);\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    DELETE\r\n                                                                                </Button>}\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                )\r\n                                                            })}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </FieldArray>\r\n                                            </div>\r\n                                        </FormContainer>\r\n                                        <div className='card' style={{ display: 'flex', paddingTop: '10px', marginTop: \"20px\", marginBottom: \"-20px\", borderRadius: '0px' }}>\r\n                                            <div className='mb-6'>\r\n                                                <Button \r\n                                                    variant=\"plain\"\r\n                                                    type=\"button\"\r\n                                                    className=\"font-bold\"\r\n                                                    style={{ color: '#004D99', fontSize: '20px', }}\r\n                                                    icon={<BsFillPlusCircleFill fill=\"#004D99\" />}\r\n                                                    onClick={(e) => {values?.initialValues.push({\r\n                                                        sectionTitle: '',\r\n                                                        sectionValues: [{\r\n                                                            title: '', formType: '', isMandatery: false, textAreaMaxLength: '',\r\n                                                            // dropdownOptions: [{ option: '' }], radioBtnOptions: [{ option: '' }],\r\n                                                            // checkBoxOptions: [{ option: '' }], textEditor: '', maxFileSize: '',\r\n                                                            fileType: [{ label: 'Document', status: false }, { label: 'Image', status: false },\r\n                                                            { label: 'Pdf', status: false }, { label: 'Video', status: false }]\r\n                                                        }]\r\n                                                    })\r\n                                                    setFieldValue(`initialValues`, values?.initialValues);\r\n                                                    \r\n                                                    }}>\r\n                                                    ADD NEW SECTION\r\n                                                </Button>\r\n                                                {values.initialValues.length > 1 &&\r\n                                                    <Button \r\n                                                        onClick={() => {\r\n                                                            const updatedArray = values?.initialValues?.filter(\r\n                                                                (item, ind) => i !== ind\r\n                                                            );\r\n                                                            setFieldValue(`initialValues`, updatedArray);\r\n                                                        }}\r\n                                                        variant=\"plain\"\r\n                                                        type=\"button\"\r\n                                                        className=\"font-bold\"\r\n                                                        style={{ color: '#990000', fontSize: '20px', }}\r\n                                                        icon={<MdDelete fill=\"#99000f\" />}\r\n                                                    >\r\n                                                        DELETE SECTION\r\n                                                    </Button>}\r\n                                            </div>\r\n                                        </div>\r\n                                    </>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    )}\r\n                </FieldArray >\r\n            </div >\r\n        </>\r\n    )\r\n}\r\nexport default TemplateCreation\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Steps, Button } from 'components/ui'\r\nimport NewOperators from './NewTemplates'\r\nimport TemplateDetails from './TemplateDetails'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport MasterPermissionBox from './MasterPermissionBox'\r\nimport TemplatePreview from './TemplatePreview'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport RetailMasterInfo from 'views/accounts/ReatailCustomers/components/RetailMasterInfo'\r\nimport TemplateCreation from './TemplateCreation'\r\nimport { BiArrowBack } from 'react-icons/bi'\r\nimport { Formik, Form } from 'formik';\r\nimport { apiSubmitOperator, apiUpdateOperator } from 'services/TemplateService'\r\nimport { cloneDeep } from 'lodash'\r\nimport { TemplateEditCopy } from 'utils/campareandCopy'\r\nimport { useSelector } from 'react-redux'\r\nimport ReactHtmlParser from 'html-react-parser'\r\nimport * as Yup from 'yup'\r\nimport { OpenNotification } from 'views/Servicefile'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\n\r\nconst Controlled = () => {\r\n    const [step, setStep] = useState(0)\r\n    const location = useLocation();\r\n    const mode = location.state?.mode ? location.state.mode : \"ADD\";\r\n\r\n    const rowForEdit = location.state?.data;\r\n    const { enterAccount, password, rememberMe, usernameOrEmail } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n    // <div>Catalogue/Templates/Create Template</div>\r\n    let breadCrumbList = [ {\r\n        name: 'Catalouge',\r\n    },{\r\n        name: 'Templates',\r\n        link: \"/catalouge-menu-item-view-1\"\r\n      }, {\r\n        name: `Create Template`,\r\n      }]\r\n    \r\n\r\n\r\n    let opIntialValues = {\r\n        tempDetails: {\r\n            category: '',\r\n            title: '',\r\n            type: '',\r\n            description: \"\",\r\n        },\r\n        initialValues: [{\r\n            sectionTitle: '',\r\n            sectionValues: [{\r\n                title: '',\r\n                formType: '',\r\n                isMandatery: false,\r\n                textAreaMaxLength: '',\r\n                dropdownOptions: [{ option: '' }],\r\n                radioBtnOptions: [{ option: '' }],\r\n                checkBoxOptions: [{ option: '' }],\r\n                textEditor: '',\r\n                maxFileSize: '',\r\n                fileType: [\r\n                    { label: 'Document', status: false },\r\n                    { label: 'Image', status: false },\r\n                    { label: 'Pdf', status: false },\r\n                    { label: 'Video', status: false }\r\n                ]\r\n            }]\r\n        }]\r\n    }\r\n    const [operaterState, setOperaterState] = useState({})\r\n    const [operatorIntialValues, setOperatorIntialValues] = useState(opIntialValues)\r\n    const onChange = (nextStep) => {\r\n        if (nextStep < 0) {\r\n            setStep(0)\r\n        } else if (nextStep > 3) {\r\n            setStep(3)\r\n        } else {\r\n            setStep(nextStep)\r\n        }\r\n    }\r\n\r\n    const tempDetails = React.useRef()\r\n    const tempCreation = React.useRef()\r\n\r\n    const onNext = (values) => {\r\n        console.log(\"onNextonNext\", values)\r\n        setSubmissionPayload(values)\r\n\r\n        onChange(step + 1)\r\n    }\r\n\r\n    const onPrevious = () => onChange(step - 1)\r\n\r\n    async function handleSubmit() {\r\n        await tempDetails.current.submitForm()\r\n        await tempCreation.current.submitForm()\r\n    }\r\n    const validationSchema = Yup.object().shape({\r\n        tempDetails: Yup.object().shape({\r\n            title: Yup.string().trim()\r\n                .required('Please enter a template title')\r\n                .nullable(),\r\n            category: Yup.string()\r\n                .required('Please select a category')\r\n                .nullable(),\r\n            type: Yup.string()\r\n                .required('Please select a type')\r\n                .nullable(),\r\n        }),\r\n    })\r\n    const setValidationsSchema = () => {\r\n        switch (step) {\r\n            case 0:\r\n                return validationSchema\r\n            case 1:\r\n                return Yup.object().shape({})\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const setSubmissionPayload = (values) => {\r\n        let updatedPayload = {};\r\n        updatedPayload = {\r\n            ...operaterState,\r\n            ...values\r\n        };\r\n        setOperaterState(updatedPayload);\r\n    };\r\n    const navigate = useNavigate()\r\n\r\n    const submitApi = async () => {\r\n        if (mode === \"ADD\") {\r\n            // const tp_desc = ReactHtmlParser(operaterState?.tempDetails?.description);\r\n            let createbody = {\r\n                // \"relProdCatId\": 1,\r\n                // \"tpTitle\": operaterState?.tempDetails?.title,\r\n                // \"tpType\": operaterState?.tempDetails?.type,\r\n                // \"tpDesc\": operaterState?.tempDetails?.description,\r\n                // \"tpStruc\": JSON.stringify(operaterState?.initialValues),\r\n                // \"tpStatus\": 0,\r\n                // \"accId\": 1231\r\n\r\n                \"rel_prod_cat_id\": operaterState?.tempDetails?.category,\r\n                \"tp_title\": operaterState?.tempDetails?.title?.trim(),\r\n                \"tp_type\": operaterState?.tempDetails?.type,\r\n                \"tp_desc\": operaterState?.tempDetails?.description,\r\n                \"tp_struc\": JSON.stringify(operaterState?.initialValues),\r\n                \"tp_status\": 0,\r\n                \"accId\": enterAccount\r\n            }\r\n            let res = await apiSubmitOperator(createbody)\r\n            if (res?.data?.success) {\r\n                OpenNotification('success', 'Template created sucessfully')\r\n                navigate('/catalouge-menu-item-view-1')\r\n            }\r\n        } else if (mode === \"EDIT\") {\r\n            console.log(rowForEdit, \"rowForEditrowForEdit\")\r\n            let updatebody = {\r\n                \"id\": rowForEdit?.id,\r\n                \"tpUnqId\": rowForEdit?.tpUnqId,\r\n                \"relProdCatId\": rowForEdit?.relProdCatId,\r\n                \"tpTitle\": operaterState?.tempDetails?.title,\r\n                \"tpType\": operaterState?.tempDetails?.type,\r\n                \"tpDesc\": operaterState?.tempDetails?.description,\r\n                \"tpStruc\": JSON.stringify(operaterState?.initialValues),\r\n                \"tpStatus\": rowForEdit?.tpStatus,\r\n                \"accId\": rowForEdit?.accId\r\n            }\r\n            await apiUpdateOperator(updatebody)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (rowForEdit) {\r\n            // let editData = rowForEdit\r\n            // let initialValuesObj = {\r\n            //     tempDetails: {\r\n            //         category: '',\r\n            //         title: editData?.tpTitle,\r\n            //         type: editData?.tpType,\r\n            //         description: editData?.tpDesc,\r\n            //     },\r\n            //     initialValues: JSON.parse(editData.tpStruc)\r\n            // }\r\n            const opIntialvValues = TemplateEditCopy(opIntialValues, rowForEdit);\r\n            console.log(\"initialValuesObj\", opIntialValues)\r\n            setOperaterState(opIntialvValues)\r\n        }\r\n    }, [rowForEdit])\r\n\r\n    return (\r\n        <div>\r\n                 <CustomBreadcrumbs  list={breadCrumbList} />\r\n            <Formik\r\n                initialValues={opIntialValues}\r\n                validationSchema={setValidationsSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmissionPayload(values)\r\n                    setSubmitting(true)\r\n                    setOperatorIntialValues(values)\r\n                    onNext(values)\r\n                }}\r\n            >\r\n                {({ errors, touched, values, setFieldValue }) => (\r\n                    <Form>\r\n                        <Steps current={step}>\r\n                            <Steps.Item title=\"BASIC DETAILS\" />\r\n                            <Steps.Item title=\"CREATE TEMPLATE\" />\r\n                            <Steps.Item title=\"PREVIEW\" />\r\n                        </Steps>\r\n\r\n                        <div className=\"mt-6 rounded \">\r\n                            {step == 0 &&\r\n                                <TemplateDetails\r\n                                    operaterState={operaterState}\r\n                                    setOperaterState={setOperaterState}\r\n                                    operatorIntialValues={operatorIntialValues}\r\n                                    errors={errors || {}}\r\n                                    touched={touched || {}}\r\n                                    values={values || {}}\r\n                                    setFieldValue={setFieldValue}\r\n                                />\r\n                            }\r\n                            {step == 1 &&\r\n                                <TemplateCreation\r\n                                    operaterState={operaterState}\r\n                                    setOperaterState={setOperaterState}\r\n                                    operatorIntialValues={operatorIntialValues}\r\n                                    errors={errors || {}}\r\n                                    touched={touched || {}}\r\n                                    values={values || []}\r\n                                    setFieldValue={setFieldValue}\r\n                                />\r\n                            }\r\n                            {step == 2 &&\r\n                                <TemplatePreview operaterState={operaterState?.tempDetails} setStep={setStep} />\r\n                            }\r\n\r\n                        </div>\r\n                        <div className=\"flex justify-between mt-12\">\r\n\r\n                            <div>\r\n                                {step > 0 && <Button\r\n                                    className=\"mx-2   \"\r\n                                    style={{\r\n                                        backgroundColor: \"#4D4D4D\", \r\n                                        fontStyle: 'normal',\r\n                                        fontSize: 500, fontSize: '18px',\r\n                                        color: \"white\"\r\n                                    }}\r\n                                    onClick={onPrevious}\r\n                                    type=\"button\"\r\n                                >\r\n                                    Previous\r\n                                </Button>}\r\n                            </div>\r\n\r\n                            <div className='flex'>\r\n                                {step >= 0 &&\r\n                                    <Link\r\n                                        className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                        to='/catalouge-menu-item-view-1'\r\n                                    >\r\n                                        <Button\r\n                                            className=\"mx-2\"\r\n                                            onClick={onPrevious}\r\n                                            variant=\"solid\"\r\n                                            style={{ backgroundColor: \"#4D4D4D\" }}\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n                                    </Link>}\r\n                                {step < 2 &&\r\n                                    <Button variant=\"solid\"\r\n                                        disabled={step === 2}\r\n                                        type=\"submit\">\r\n                                        {step === 2 ? 'Completed' : 'Next'}\r\n                                    </Button>}\r\n                                {/* <Button onClick={handleSubmit} variant='solid' type=\"submit\">\r\n                                    submit\r\n                                </Button> */}\r\n                                {step === 2 &&\r\n                                    <>\r\n                                        {/* <Link\r\n                                            className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                            to=\"/catalouge-menu-item-view-1\"\r\n                                        > */}\r\n                                        <Button variant='solid' onClick={submitApi}>\r\n                                            {'Submit for Approval'}\r\n                                        </Button>\r\n                                        {/* </Link> */}\r\n                                    </>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\n// const Controlled = () => {\r\n//     const [step, setStep] = useState(0)\r\n\r\n//     const onChange = (nextStep) => {\r\n//         if (nextStep < 0) {\r\n//             setStep(0)\r\n//         } else if (nextStep > 3) {\r\n//             setStep(3)\r\n//         } else {\r\n//             setStep(nextStep)\r\n//         }\r\n//     }\r\n\r\n//     const onNext = () => onChange(step + 1)\r\n\r\n//     const onPrevious = () => onChange(step - 1)\r\n\r\n//     return (\r\n\r\n\r\n//         <div>\r\n\r\n//             <Steps current={step}>\r\n//                 <Steps.Item title=\"BASIC DETAILS\" />\r\n//                 <Steps.Item title=\"CREATE TEMPLATE\" />\r\n//                 {/* <Steps.Item title=\"MASTER USERS\" /> */}\r\n//                 <Steps.Item title=\"PREVIEW\" />\r\n//             </Steps>\r\n\r\n//             <div className=\"mt-6  bg-gray-50 dark:bg-gray-700 rounded \">\r\n//                 {/* <h6>Step {`${step + 1}`}\r\n//                     content\r\n//    </h6> */}\r\n\r\n//                 {step==0 && \r\n\r\n//                <TemplateDetails />\r\n//                }\r\n//                {step==1&& \r\n//                 <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n//                     <MasterPermissionBox />\r\n//                </AdaptableCard> }\r\n\r\n//             </div>\r\n//             <div className=\"mt-4 text-right\">\r\n//                 <Button\r\n//                     className=\"mx-2\"\r\n//                     onClick={onPrevious}\r\n//                     disabled={step === 0}\r\n//                 >\r\n//                     Previous\r\n//                 </Button>\r\n//                 {step < 2 && <Button onClick={onNext} disabled={step === 3} variant=\"solid\">\r\n//                     {step === 2 ? 'Completed' : 'Next'}\r\n//                 </Button>}\r\n//                 {step === 2 && <Button onClick={onNext}  variant=\"solid\">\r\n//                  {'Submit'}\r\n//                 </Button>}\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nexport default Controlled\r\n","import React from 'react'\r\nimport StepControlled from './StepControlled'\r\nimport { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport { Input, FormItem } from 'components/ui'\r\nimport { Field } from 'formik'\r\nimport { injectReducer } from 'store/index'\r\nimport reducer from '../store'\r\nexport default function NewTemplates() {\r\n\r\n  injectReducer('templateCreate', reducer);\r\n\r\n  return (\r\n    <>\r\n    \r\n      <div className='mt-5'>\r\n        <StepControlled />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n// import { apiGetSalesItems, apiDeleteSalesItems,  } from 'services/ItemsService'\r\nimport { apiGetProductCategory,apiGetTemplates,apiDeleteSalesProducts} from 'services/TemplateService'\r\n\r\nexport const getTemplates = createAsyncThunk(\r\n    'salesProductList/data/getItems',\r\n    async (data) => {\r\n        const response = await apiGetTemplates(data)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const deleteTemplates = async (data) => {\r\n    const response = await apiDeleteSalesProducts(data)\r\n    return response.data\r\n}\r\n\r\nexport const getProductCategorys = createAsyncThunk(\r\n    'templatesList/data/getProductCategorys',\r\n    async (data) => {\r\n        const response = await apiGetProductCategory(data)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const initialTableData = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    query: '',\r\n    sort: {\r\n        Item: '',\r\n        key: '',\r\n    },\r\n}\r\n\r\nconst dataSlice = createSlice({\r\n    name: 'templatesList/data',\r\n    initialState: {\r\n        loading: false,\r\n        ItemList: [],\r\n        tableData: initialTableData,\r\n        templateProductList:[]\r\n    },\r\n    reducers: {\r\n        setItemList: (state, action) => {\r\n            console.log(\"action.payload\", action.payload)\r\n            state.ItemList = action.payload\r\n        },\r\n        setTableData: (state, action) => {\r\n            state.tableData = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [getTemplates.fulfilled]: (state, action) => {\r\n            state.ItemList = action.payload\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getTemplates.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getProductCategorys.fulfilled]: (state, action) => {\r\n            console.log(\"sttess\",action)\r\n            \r\n            state.templateProductList = action?.payload?.response?.map((product) => ({\r\n                value: product.id,\r\n                label: product.prod_cat_title,\r\n            }));\r\n            state.loading = false\r\n        },\r\n    },\r\n})\r\n\r\nexport const { setItemList, setTableData } = dataSlice.actions\r\n\r\nexport default dataSlice.reducer\r\n","import { combineReducers } from '@reduxjs/toolkit'\r\nimport state from './stateSlice'\r\nimport data from './dataSlice'\r\n\r\nconst reducer = combineReducers({\r\n    state,\r\n    data,\r\n})\r\n\r\nexport default reducer\r\n","import { createSlice, current } from '@reduxjs/toolkit'\r\n\r\nconst stateSlice = createSlice({\r\n    name: 'templatesList/state',\r\n    initialState: {\r\n        selectedRows: [],\r\n        selectedRow: [],\r\n        deleteMode: '',\r\n    },\r\n    reducers: {\r\n        setSelectedRows: (state, action) => {\r\n            state.selectedRows = action.payload\r\n        },\r\n        setSelectedRow: (state, action) => {\r\n            state.selectedRow = action.payload\r\n        },\r\n        addRowItem: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (!currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: [...currentState.selectedRows, ...payload],\r\n                }\r\n            }\r\n        },\r\n        removeRowItem: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: currentState.selectedRows.filter(\r\n                        (id) => id !== payload\r\n                    ),\r\n                }\r\n            }\r\n        },\r\n        setDeleteMode: (state, action) => {\r\n            state.deleteMode = action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    setSelectedRows,\r\n    setSelectedRow,\r\n    addRowItem,\r\n    removeRowItem,\r\n    toggleDeleteConfirmation,\r\n    setDeleteMode,\r\n} = stateSlice.actions\r\n\r\nexport default stateSlice.reducer\r\n"],"names":["retailValidationSchema","Yup","shape","firstName","required","nullable","lastName","emailId","email","phoneNumber","min","max","ordemailId","onChange","refId","props","className","innerRef","initialValues","retailIntialValues","retailUserInitValues","validationSchema","onSubmit","values","setSubmitting","updatedPayload","retailState","setRetailState","dataToStore","setRetailIntialValues","setStep","step","touched","errors","isSubmitting","label","style","color","invalid","errorMessage","type","autoComplete","name","placeholder","component","Input","RetailMasterInfo","forwardRef","ref","useState","RetailUserInfo","validated","formData","setFormData","retailUserInforef","React","handleSubmit","current","submitForm","alert","useImperativeHandle","handleSubmitFromParent","backgroundColor","bodyClass","data","templateTypeOptions","value","useSelector","state","auth","user","enterAccount","user_type","password","rememberMe","usernameOrEmail","acc_mno_parent_unq_id","console","log","productCat","templateCreate","templateProductList","dispatch","useDispatch","useEffect","getProductCategorys","field","form","options","filter","setFieldValue","category","title","description","RichTextEditor","val","country","addressLine1","addressLine2","city","zipCode","sameCorrespondenceAddress","correspondenceAddress","when","is","then","otherwise","schema","divider","operaterState","setOperaterState","operatorIntialValues","setOperatorIntialValues","tempDetails","Math","floor","random","toString","cclassName","onClick","GetDropdownLabel","ReactHtmlParser","formFieldsType","fileSizeOptions","yup","of","sectionTitle","formType","padding","itemTitle","disabled","itemActualPrice","width","variantDesc","draggable","variantTitleTwo","variantPriceTwo","validity","variantFeatureDesc","readOnly","variantTitleThree","monthlyPrice","shortDescription","variantFeatureDescThird","push","remove","map","item","i","sectionValues","f","fi","textAreaMaxLength","onChangeFieldType","maxFileSize","fileType","ft","fti","checked","status","display","alignItems","isMandatery","variant","icon","fill","length","updatedArray","ind","paddingTop","marginTop","marginBottom","borderRadius","fontSize","e","location","useLocation","mode","rowForEdit","opIntialValues","dropdownOptions","option","radioBtnOptions","checkBoxOptions","textEditor","nextStep","onPrevious","trim","setSubmissionPayload","navigate","useNavigate","submitApi","createbody","JSON","stringify","apiSubmitOperator","res","success","OpenNotification","updatebody","id","tpUnqId","relProdCatId","tpStatus","accId","apiUpdateOperator","opIntialvValues","TemplateEditCopy","list","link","onNext","fontStyle","to","NewTemplates","injectReducer","reducer","StepControlled","getTemplates","createAsyncThunk","apiGetTemplates","response","deleteTemplates","apiDeleteSalesProducts","apiGetProductCategory","dataSlice","createSlice","initialState","loading","ItemList","tableData","total","pageIndex","pageSize","query","sort","Item","key","reducers","setItemList","action","payload","setTableData","extraReducers","fulfilled","pending","product","prod_cat_title","actions","combineReducers","stateSlice","selectedRows","selectedRow","deleteMode","setSelectedRows","setSelectedRow","addRowItem","currentState","includes","removeRowItem","setDeleteMode","toggleDeleteConfirmation"],"sourceRoot":""}