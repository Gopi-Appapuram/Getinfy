{"version":3,"file":"static/js/8928.8e44954b.chunk.js","mappings":"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","sources":["components/layout/ClassicLayout.js","components/template/SideNav.js","components/template/SideNavToggle.js"],"sourcesContent":["import React from 'react'\r\nimport Header from 'components/template/Header'\r\nimport SideNavToggle from 'components/template/SideNavToggle'\r\nimport SidePanel from 'components/template/SidePanel'\r\nimport MobileNav from 'components/template/MobileNav'\r\nimport UserDropdown from 'components/template/UserDropdown'\r\nimport SideNav from 'components/template/SideNav'\r\nimport View from 'views'\r\nimport LanguageSelector from 'components/template/LanguageSelector'\r\nimport Search from 'components/template/Search'\r\nimport Notification from 'components/template/Notification'\r\n\r\nconst HeaderActionsStart = () => {\r\n    return (\r\n        <>\r\n            <MobileNav />\r\n            <SideNavToggle />\r\n            <Search />\r\n        </>\r\n    )\r\n}\r\n\r\nconst HeaderActionsEnd = () => {\r\n    return (\r\n        <>\r\n        <   LanguageSelector />\r\n            <Notification />\r\n            <SidePanel />\r\n            <UserDropdown hoverable={false} />\r\n        </>\r\n    )\r\n}\r\n\r\nconst ClassicLayout = (props) => {\r\n    return (\r\n        <div className=\"app-layout-classic flex flex-auto flex-col\">\r\n            <div className=\"flex flex-auto min-w-0\">\r\n                <SideNav />\r\n                <div className=\"flex flex-col flex-auto min-h-screen min-w-0 relative w-full\">\r\n                    <Header\r\n                        className=\"shadow dark:shadow-2xl\"\r\n                        headerStart={<HeaderActionsStart />}\r\n                        headerEnd={<HeaderActionsEnd />}\r\n                    />\r\n                    <div className=\"h-full flex flex-auto flex-col\">\r\n                        <View {...props} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClassicLayout\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { ScrollBar } from 'components/ui'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n    SIDE_NAV_WIDTH,\r\n    SIDE_NAV_COLLAPSED_WIDTH,\r\n    NAV_MODE_DARK,\r\n    NAV_MODE_THEMED,\r\n    NAV_MODE_TRANSPARENT,\r\n    SIDE_NAV_CONTENT_GUTTER,\r\n    LOGO_X_GUTTER,\r\n} from 'constants/theme.constant'\r\nimport Logo from 'components/template/Logo'\r\n//import navigationConfig from 'configs/navigation.config'\r\nimport VerticalMenuContent from 'components/template/VerticalMenuContent'\r\nimport useResponsive from 'utils/hooks/useResponsive'\r\nimport { useSelector } from 'react-redux'\r\nimport _ from 'lodash'\r\nconst sideNavStyle = {\r\n    width: SIDE_NAV_WIDTH,\r\n    minWidth: SIDE_NAV_WIDTH,\r\n}\r\n\r\nconst sideNavCollapseStyle = {\r\n    width: SIDE_NAV_COLLAPSED_WIDTH,\r\n    minWidth: SIDE_NAV_COLLAPSED_WIDTH,\r\n}\r\n\r\nconst SideNav = () => {\r\n    const themeColor = useSelector((state) => state.theme.themeColor)\r\n    const primaryColorLevel = useSelector(\r\n        (state) => state.theme.primaryColorLevel\r\n    )\r\n    const navMode = useSelector((state) => state.theme.navMode)\r\n    const mode = useSelector((state) => state.theme.mode)\r\n    const direction = useSelector((state) => state.theme.direction)\r\n    const currentRouteKey = useSelector(\r\n        (state) => state.base.common.currentRouteKey\r\n    )\r\n    const sideNavCollapse = useSelector(\r\n        (state) => state.theme.layout.sideNavCollapse\r\n    )\r\n    const userAuthority = useSelector((state) => state.auth.user.authority)\r\n\r\n    const { larger } = useResponsive()\r\n\r\n    const sideNavColor = () => {\r\n        if (navMode === NAV_MODE_THEMED) {\r\n            return `bg-${themeColor}-${primaryColorLevel} side-nav-${navMode}`\r\n        }\r\n        return `side-nav-${navMode}`\r\n    }\r\n\r\n    const logoMode = () => {\r\n        if (navMode === NAV_MODE_THEMED) {\r\n            return NAV_MODE_DARK\r\n        }\r\n\r\n        if (navMode === NAV_MODE_TRANSPARENT) {\r\n            return mode\r\n        }\r\n\r\n        return navMode\r\n    }\r\n\r\n    const { navigationConfig } = useSelector((state) => state.auth.user)\r\n\r\n    // const { permissions } = useSelector((state) => state.auth.user)\r\n\r\n    // const allPermissions = _.flatMap(permissions?.module_dto, (module) => {\r\n    //     return _.flatMap(module.sub_module_dto, (subModule) => {\r\n    //         return {\r\n    //             module: module.code,\r\n    //             subModule: subModule.code,\r\n    //             permission: subModule.dgl_permissions_resp_dto,\r\n    //         }\r\n    //     })\r\n    // })\r\n\r\n    // const enabledPermissions = _.filter(allPermissions, (modulerow) => {\r\n    //     return modulerow.permission.filter((f) => f.enabled === true).length > 0\r\n    // })\r\n\r\n    // let moduleList = enabledPermissions.map((e) => e.module)\r\n    // let submoduleList = enabledPermissions.map((e) => e.subModule)\r\n\r\n    // let listOfModulesFiltered = navigationConfig.filter((module) => {\r\n    //     if (moduleList.includes(module.code)) {\r\n    //         module.subMenu = module.subMenu.filter((sub) => {\r\n    //             return submoduleList.includes(sub.code)\r\n    //         })\r\n\r\n    //         return true\r\n    //     } else {\r\n    //         return false\r\n    //     }\r\n    // })\r\n\r\n    const menuContent = (\r\n        <VerticalMenuContent\r\n            navMode={navMode}\r\n            collapsed={sideNavCollapse}\r\n            navigationTree={navigationConfig}\r\n            routeKey={currentRouteKey}\r\n            userAuthority={userAuthority}\r\n            direction={direction}\r\n        />\r\n    )\r\n\r\n    return (\r\n        <>\r\n            {larger.md && (\r\n                <div\r\n                    style={\r\n                        sideNavCollapse ? sideNavCollapseStyle : sideNavStyle\r\n                    }\r\n                    className={classNames(\r\n                        'side-nav',\r\n                        sideNavColor(),\r\n                        !sideNavCollapse && 'side-nav-expand'\r\n                    )}\r\n                >\r\n                    <div className=\"side-nav-header py-4\">\r\n                        <Logo\r\n                            mode={logoMode()}\r\n                            type={sideNavCollapse ? 'streamline' : 'full'}\r\n                            gutter={\r\n                                sideNavCollapse\r\n                                    ? SIDE_NAV_CONTENT_GUTTER\r\n                                    : LOGO_X_GUTTER\r\n                            }\r\n                        />\r\n                    </div>\r\n                    {sideNavCollapse ? (\r\n                        menuContent\r\n                    ) : (\r\n                        <div className=\"side-nav-content\">\r\n                            <ScrollBar autoHide direction={direction}>\r\n                                {menuContent}\r\n                            </ScrollBar>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nSideNav.propTypes = {\r\n    themed: PropTypes.bool,\r\n    darkMode: PropTypes.bool,\r\n    themeColor: PropTypes.string,\r\n}\r\n\r\nSideNav.defaultProps = {\r\n    themed: false,\r\n    darkMode: false,\r\n    themeColor: '',\r\n}\r\n\r\nexport default SideNav\r\n","import React from 'react'\r\nimport withHeaderItem from 'utils/hoc/withHeaderItem'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setSideNavCollapse } from 'store/theme/themeSlice'\r\nimport useResponsive from 'utils/hooks/useResponsive'\r\nimport { NavToggle } from 'components/shared'\r\n\r\nexport const SideNavToggle = ({ className }) => {\r\n    const sideNavCollapse = useSelector(\r\n        (state) => state.theme.layout.sideNavCollapse\r\n    )\r\n    const dispatch = useDispatch()\r\n\r\n    const { larger } = useResponsive()\r\n\r\n    const onCollapse = () => {\r\n        dispatch(setSideNavCollapse(!sideNavCollapse))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {larger.md && (\r\n                <div className={className} onClick={onCollapse}>\r\n                    <NavToggle className=\"text-2xl\" toggled={sideNavCollapse} />\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withHeaderItem(SideNavToggle)\r\n"],"names":["HeaderActionsStart","HeaderActionsEnd","hoverable","props","className","headerStart","headerEnd","sideNavStyle","width","SIDE_NAV_WIDTH","minWidth","sideNavCollapseStyle","SIDE_NAV_COLLAPSED_WIDTH","SideNav","themeColor","useSelector","state","theme","primaryColorLevel","navMode","mode","direction","currentRouteKey","base","common","sideNavCollapse","layout","userAuthority","auth","user","authority","larger","useResponsive","navigationConfig","menuContent","collapsed","navigationTree","routeKey","md","style","classNames","NAV_MODE_THEMED","NAV_MODE_DARK","NAV_MODE_TRANSPARENT","type","gutter","SIDE_NAV_CONTENT_GUTTER","LOGO_X_GUTTER","autoHide","defaultProps","themed","darkMode","withHeaderItem","dispatch","useDispatch","onClick","setSideNavCollapse","toggled"],"sourceRoot":""}