{"version":3,"file":"static/js/7408.ffb65800.chunk.js","mappings":"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","sources":["views/catalogue/Items/components/ItemsTable.js","views/catalogue/Items/components/ItemsTableSearch.js","views/catalogue/Items/components/ItemsFilter.js","views/catalogue/Items/components/ItemsTableTools.js","views/catalogue/Items/components/ItemsDeleteConfirmation.js","views/catalogue/Items/index.js"],"sourcesContent":["import React, { useEffect, useCallback, useMemo, useRef, useState } from 'react'\r\nimport { Badge, Button, Dialog, Tooltip } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getItems, getItemsTableData, setTableData } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowItem,\r\n    removeRowItem,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport dayjs from 'dayjs'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { AiFillCopy } from \"react-icons/ai\"\r\nimport { RiCheckboxCircleFill, RiCloseCircleFill } from 'react-icons/ri'\r\nimport { BsPatchCheckFill } from 'react-icons/bs'\r\nimport NewItems from './NewItems'\r\nimport { OpenNotification, snakeToCamel } from 'views/Servicefile'\r\nimport { apiUpdateItemAccStatus } from 'services/ItemsService'\r\n\r\nconst orderStatusColor = {\r\n    \"ACTIVE\": {\r\n        label: 'Active',\r\n        dotClass: 'bg-black-400',\r\n        textClass: 'text-black-400',\r\n        backgroundColor: 'bg-[#F5F5F5]',\r\n    },\r\n    'SUBMITTED': {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-400',\r\n        textClass: 'text-black-400',\r\n        backgroundColor: 'bg-[#F0F7FF]',\r\n    },\r\n    'IN_ACTIVE': {\r\n        label: 'Inactive',\r\n        dotClass: 'bg-blue-400',\r\n        textClass: 'text-black-400',\r\n        backgroundColor: 'bg-[#F5F5F5]',\r\n    },\r\n}\r\n\r\nconst ItemColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Item-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst ItemsTable = ({actionPermissions}) => {\r\n    const [isDeactivate, setDeactivate] = useState(false)\r\n    const [row, setRow] = useState('')\r\n    const tableRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { pageIndex, pageSize, sort, query, total , order} = useSelector(\r\n        (state) => state.itemsList.data.tableData\r\n    )\r\n    const totalCount = useSelector((state) => state.itemsList?.data?.itemTableData?.total)\r\n    const loading = useSelector((state) => state.itemsList.data.loading)\r\n    const { unq_id, role_name, enterAccount } = useSelector((state) => state.auth.user)\r\n    const data = useSelector((state) => state.itemsList?.data?.itemTableData?.res)\r\n\r\n\r\n\r\n\r\n    \r\n    const fetchData = useCallback(() => {\r\n        dispatch(getItemsTableData({\r\n            page: pageIndex-1,\r\n            size: pageSize,\r\n            accId:unq_id ,\r\n            order: order,\r\n        }))\r\n    }, [dispatch, pageIndex, pageSize, unq_id, order,isDeactivate])\r\n\r\n    useEffect(() => {\r\n        dispatch(setSelectedRows([]))\r\n        fetchData()\r\n    }, [dispatch,isDeactivate, pageIndex, pageSize, sort,order])\r\n\r\n    useEffect(() => {\r\n        if (tableRef) {\r\n            tableRef.current?.resetSelected()\r\n        }\r\n    }, [data])\r\n\r\n    const tableData = useMemo(\r\n        () => ({ pageIndex, pageSize, sort, query, total:totalCount }),\r\n        [pageIndex, pageSize, sort, query, totalCount]\r\n    )\r\n\r\n\r\n    const updateItemStatus = async () => {\r\n\r\n        let isStatus = row.item_status === 'ACTIVE' ? 'IN_ACTIVE' : 'ACTIVE';\r\n        const resp = await apiUpdateItemAccStatus(row.id, isStatus);\r\n         if (resp.data.success) {\r\n             if (isStatus === 'ACTIVE') {\r\n                setDeactivate(false)\r\n                OpenNotification('success', 'Activated successfully')\r\n             } else {\r\n                setDeactivate(false)\r\n                OpenNotification('success', 'Deactivated successfully')\r\n             }\r\n         }\r\n    }\r\n\r\n\r\n    const ActionColumn = ({ row }) => {\r\n        const dispatch = useDispatch()\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n\r\n        const onDelete = () => {\r\n            dispatch(setDeleteMode('single'))\r\n            dispatch(setSelectedRow([row.id]))\r\n        }\r\n\r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n\r\n\r\n        const onEdit = () => {\r\n            navigate(`/catalogue-new-items`, { state: { data: row ,mode : \"EDIT\"} })\r\n        }\r\n\r\n        const onClone = () => {\r\n            navigate(`/catalogue-new-items`,{ state: { data: row ,mode:\"ADD\"} })\r\n        }\r\n\r\n        const handleClick = () => {\r\n            setDeactivate(true)\r\n            setRow(row)\r\n        }\r\n\r\n        const iconColor = row.item_status != 'ACTIVE' ? 'green' : 'rose'\r\n        const IconComponent = row.item_status != 'ACTIVE' ? RiCheckboxCircleFill : RiCloseCircleFill\r\n        const disableIconStyle = { color: 'grey', pointerEvents: 'none' }\r\n        const { canAdd, canEdit, canView, canActivate, canClone, canApprove } =\r\n            actionPermissions\r\n\r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                        onClick={onEdit}\r\n                        style={canEdit ? null : disableIconStyle}\r\n                    >\r\n                        <MdModeEdit />\r\n\r\n                    </span>\r\n                </Tooltip>\r\n\r\n                <Tooltip title=\"Clone\">\r\n                    <span\r\n                        className={`cursor-pointer p-1  hover:${textTheme}`}\r\n                        onClick={onClone}\r\n                        style={canClone ? null : disableIconStyle}\r\n                    >\r\n                        <AiFillCopy />\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title=\"View\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                        // onClick={onView}\r\n                        style={canView ? null : disableIconStyle}\r\n                    >\r\n                        <HiOutlineEye />\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title={`${row.item_status != 'ACTIVE' ? 'Activate' : 'Deactivate'}`}>\r\n                    <span onClick={handleClick} className={`cursor-pointer p-1 text-${iconColor}-800 hover:text-${iconColor}-800`} style={canActivate ? null : disableIconStyle}>\r\n                        <IconComponent />\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Actions',\r\n                id: 'action',\r\n                cell: (props) => <ActionColumn row={props.row.original} />,\r\n            },\r\n            {\r\n                header: 'Item Id',\r\n                accessorKey: 'item_unq_id',\r\n            },\r\n            {\r\n                header: 'Item Title',\r\n                accessorKey: 'item_title',\r\n                cell: (props) => {\r\n                    const { item_title } = props.row.original\r\n                    return (\r\n                        <div className=\"max-w-sm truncate\">{ item_title }</div>\r\n                    )\r\n                },\r\n            },\r\n            {\r\n                header: 'Item Category',\r\n                accessorKey: 'item_type',\r\n                cell: (props) => {\r\n                    const { item_type } = props.row.original\r\n                    return (\r\n                        <>\r\n                        {item_type === \"P\" && <p>Product</p>}\r\n                        {item_type === \"D\" && <p>Data Plan</p>}\r\n                        {item_type === \"S\" && <p>Service Plan</p>}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n            {\r\n                header: 'Item Added By',\r\n                accessorKey: 'item_provider_id',\r\n                // cell: (props) => {\r\n                //     return (\r\n                //         <p></p>\r\n                //     )\r\n                // },\r\n            },\r\n            {\r\n                header: 'Template',\r\n                accessorKey: 'tp',\r\n                cell: (props) => {\r\n                    const { dgl_cat_tp_info } = props.row.original\r\n                    return (\r\n                        <p>{dgl_cat_tp_info?.tp_title || ''}</p>\r\n                    )\r\n                },\r\n\r\n            },\r\n            {\r\n                header: 'Status',\r\n                accessorKey: 'prefSettleType',\r\n                flex: 1,\r\n                cell: (props) => {\r\n                    const { item_status } = props.row.original\r\n\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n                            <span\r\n                                className={`flex ml-2 rtl:mr-2 capitalize font-semibold rounded-full border ${orderStatusColor[item_status]?.backgroundColor} mt-4 px-2 py-1 text-${orderStatusColor[item_status]?.dotClass}`}\r\n                            >\r\n                                {item_status === \"ACTIVE\" && (\r\n                                    <RiCheckboxCircleFill className=\"mt-1 mr-2 text-[#3B8C59]\" />\r\n                                )}\r\n                                {item_status === 'IN_ACTIVE' && (\r\n                                    <RiCloseCircleFill className=\"mt-1 mr-2 text-[#FF0000]\" />\r\n                                )}\r\n                                {item_status === 'SUBMITTED' && (\r\n                                    <BsPatchCheckFill className=\"mt-1 mr-2 text-blue-500\" />\r\n                                )}\r\n                                {orderStatusColor[item_status]?.label}\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                },\r\n            }\r\n\r\n\r\n        ],\r\n        []\r\n    )\r\n\r\n    const onPaginationChange = (page) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageIndex = page\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSelectChange = (value) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageSize = Number(value)\r\n        newTableData.pageIndex = 1\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSort = (sort) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        const sortfield = snakeToCamel(sort.key)\r\n        newTableData[\"sort_field\"] = sortfield;\r\n        newTableData[\"order\"] = sort.order;\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onRowSelect = (checked, row) => {\r\n        if (checked) {\r\n            dispatch(addRowItem([row.id]))\r\n        } else {\r\n            dispatch(removeRowItem(row.id))\r\n        }\r\n    }\r\n\r\n    const onAllRowSelect = useCallback(\r\n        (checked, rows) => {\r\n            if (checked) {\r\n                const originalRows = rows.map((row) => row.original)\r\n                const selectedIds = []\r\n                originalRows.forEach((row) => {\r\n                    selectedIds.push(row.id)\r\n                })\r\n                dispatch(setSelectedRows(selectedIds))\r\n            } else {\r\n                dispatch(setSelectedRows([]))\r\n            }\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <DataTable\r\n                ref={tableRef}\r\n                columns={columns}\r\n                data={data}\r\n                loading={loading}\r\n                pagingData={tableData}\r\n                onPaginationChange={onPaginationChange}\r\n                onSelectChange={onSelectChange}\r\n                onSort={onSort}\r\n                onCheckBoxChange={onRowSelect}\r\n                onIndeterminateCheckBoxChange={onAllRowSelect}\r\n                selectable\r\n            />\r\n            <Dialog isOpen={isDeactivate} onClose={() => setDeactivate(false)}>\r\n                <h6\r\n                    style={{\r\n                        \r\n                        fontStyle: 'normal',\r\n                        fontWeight: 700,\r\n                        fontSize: '18px',\r\n                        color: '#212121',\r\n                    }}\r\n                >\r\n                    {row.item_status != 'ACTIVE' ? `Activate` : `Deactivate`}\r\n                </h6>\r\n                <hr className=\"text-gary-500 mt-4 mb-4\" />\r\n                <p\r\n                    style={{\r\n                        \r\n                        fontStyle: 'normal',\r\n                        fontWeight: 400,\r\n                        fontSize: '15px',\r\n                        color: '#333333',\r\n                    }}\r\n                >\r\n                    {row.item_status != \"ACTIVE\"\r\n                        ? `Are you sure you want to activate this item ?`\r\n                        : `Are you sure you want to deactivate this item ?`}\r\n                </p>\r\n                <div className=\"mt-6 text-end\">\r\n                    <Button style={{ backgroundColor: '#4D4D4D',color: 'white',borderRadius: '2px',}}\r\n                        className=\"mr-3\"\r\n                        onClick={() => setDeactivate(false)}\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button variant=\"solid\" onClick={() => updateItemStatus()}>\r\n                        Yes\r\n                    </Button>\r\n                </div>\r\n            </Dialog>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemsTable\r\n","import React, { useRef } from 'react'\r\nimport { Input } from 'components/ui'\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getItems, setTableData } from '../store/dataSlice'\r\nimport debounce from 'lodash/debounce'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\n\r\nconst ItemTableSearch = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const searchInput = useRef()\r\n\r\n    const tableData = useSelector(\r\n        (state) => state.itemsList.data.tableData\r\n    )\r\n\r\n    const debounceFn = debounce(handleDebounceFn, 500)\r\n\r\n    function handleDebounceFn(val) {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.query = val\r\n        newTableData.pageIndex = 1\r\n        if (typeof val === 'string' && val.length > 1) {\r\n            fetchData(newTableData)\r\n        }\r\n\r\n        if (typeof val === 'string' && val.length === 0) {\r\n            fetchData(newTableData)\r\n        }\r\n    }\r\n\r\n    const fetchData = (data) => {\r\n        dispatch(setTableData(data))\r\n        dispatch(getItems(data))\r\n    }\r\n\r\n    const onEdit = (e) => {\r\n        debounceFn(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <Input\r\n            ref={searchInput}\r\n            className=\"lg:w-52\"\r\n            size=\"sm\"\r\n            placeholder=\"Search\"\r\n            prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n            onChange={onEdit}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ItemTableSearch\r\n","import React from 'react'\r\nimport { HiOutlineFilter} from 'react-icons/hi'\r\nimport {\r\n   \r\n    Button,\r\n  \r\n} from 'components/ui'\r\n\r\n\r\n\r\nconst ItemFilter = () => {\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                size=\"sm\"\r\n                className=\"block md:inline-block ltr:md:ml-2 rtl:md:mr-2 md:mb-0 mb-4\"\r\n                icon={<HiOutlineFilter />}\r\n                onClick={() => {}}\r\n            >\r\n                Filter\r\n            </Button>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemFilter\r\n","import React from 'react'\r\nimport { HiDownload, HiPlusCircle } from 'react-icons/hi'\r\nimport ItemTableSearch from './ItemsTableSearch'\r\nimport { Link } from 'react-router-dom'\r\nimport OperatorsFilter from './ItemsFilter'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Radio,\r\n    FormItem,\r\n    FormContainer,\r\n    Drawer,\r\n} from 'components/ui'\r\nimport NewOperators from './NewItems'\r\n\r\n\r\nconst ItemsTableTools = ({ actionPermissions }) => {\r\n    const { canAdd } = actionPermissions\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center\">\r\n            <ItemTableSearch />\r\n            <OperatorsFilter />\r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n                target=\"_blank\"\r\n                download\r\n            >\r\n                <Button block size=\"sm\" icon={<HiDownload />}>\r\n                    Export\r\n                </Button>\r\n            </Link>\r\n            <Link\r\n                className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                to=\"/catalogue-new-items\"\r\n            >\r\n                <Button block variant='solid' size=\"sm\" disabled={!canAdd} icon={<HiPlusCircle />}>\r\n                   Add Item\r\n                </Button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ItemsTableTools\r\n","import React from 'react'\r\nimport { toast, Notification } from 'components/ui'\r\nimport { ConfirmDialog } from 'components/shared'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n    setSelectedRows,\r\n} from '../store/stateSlice'\r\nimport { deleteItems, getItems } from '../store/dataSlice'\r\n\r\nconst ItemDeleteConfirmation = () => {\r\n    const dispatch = useDispatch()\r\n    const selectedRows = useSelector(\r\n        (state) => state.itemsList.state.selectedRows\r\n    )\r\n    const selectedRow = useSelector(\r\n        (state) => state.itemsList.state.selectedRow\r\n    )\r\n    const deleteMode = useSelector(\r\n        (state) => state.itemsList.state.deleteMode\r\n    )\r\n    const tableData = useSelector(\r\n        (state) => state.itemsList.data.tableData\r\n    )\r\n\r\n    const onDialogClose = () => {\r\n        dispatch(setDeleteMode(''))\r\n\r\n        if (deleteMode === 'single') {\r\n            dispatch(setSelectedRow([]))\r\n        }\r\n    }\r\n\r\n    const onDelete = async () => {\r\n        dispatch(setDeleteMode(''))\r\n\r\n        if (deleteMode === 'single') {\r\n            const success = await deleteItems({ id: selectedRow })\r\n            deleteSucceed(success)\r\n            dispatch(setSelectedRow([]))\r\n        }\r\n\r\n        if (deleteMode === 'batch') {\r\n            const success = await deleteItems({ id: selectedRows })\r\n            deleteSucceed(success, selectedRows.length)\r\n            dispatch(setSelectedRows([]))\r\n        }\r\n    }\r\n\r\n    const deleteSucceed = (success, Items) => {\r\n        if (success) {\r\n            dispatch(getItems(tableData))\r\n            toast.push(\r\n                <Notification\r\n                    title={'Successfuly Deleted'}\r\n                    type=\"success\"\r\n                    duration={2500}\r\n                >\r\n                    {deleteMode === 'single' && 'Item '}\r\n                    {deleteMode === 'batch' && `${Items} Items `}\r\n                    successfuly deleted\r\n                </Notification>,\r\n                {\r\n                    placement: 'top-center',\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ConfirmDialog\r\n            isOpen={deleteMode === 'single' || deleteMode === 'batch'}\r\n            onClose={onDialogClose}\r\n            onRequestClose={onDialogClose}\r\n            type=\"danger\"\r\n            title=\"Delete product\"\r\n            onCancel={onDialogClose}\r\n            onConfirm={onDelete}\r\n            confirmButtonColor=\"red-600\"\r\n        >\r\n            <p>\r\n                Are you sure you want to delete this Item? All record related\r\n                to this Item will be deleted as well. This action cannot be\r\n                undone.\r\n            </p>\r\n        </ConfirmDialog>\r\n    )\r\n}\r\n\r\nexport default ItemDeleteConfirmation\r\n","import React from 'react'\r\nimport reducer from './store'\r\nimport { injectReducer } from 'store/index'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport ItemsTable from './components/ItemsTable'\r\nimport ItemsTableTools from './components/ItemsTableTools'\r\nimport ItemDeleteConfirmation from './components/ItemsDeleteConfirmation'\r\nimport { useSelector } from 'react-redux'\r\nimport { useState } from 'react'\r\n\r\ninjectReducer('itemsList', reducer)\r\n\r\nconst Items = () => {\r\n    const { permissionsList } = useSelector((state) => state.auth.user)\r\n    const [canAdd, setCanAdd] = useState(permissionsList.includes('CATITMADD'))\r\n    const [canEdit, setCanEdit] = useState(\r\n        permissionsList.includes('CATITMEDI')\r\n    )\r\n    const [canView, setCanView] = useState(permissionsList.includes('CATITMVIE'))\r\n    const [canActivate, setCanActivate] = useState(permissionsList.includes('CATITMDEA'))\r\n    const [canClone, setCanClone] = useState(permissionsList.includes('CATITMCLO'))\r\n    const [canApprove, setCanApprove] = useState(permissionsList.includes('CATITMAPP'))\r\n\r\n\r\n    const actionPermissions = {\r\n        canAdd,\r\n        canEdit,\r\n        canClone,\r\n        canView,\r\n        canActivate,\r\n        canApprove,\r\n    }\r\n    return (\r\n        <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n            <div className=\"lg:flex items-center justify-between mb-4\">\r\n                <h3 className=\"mb-4 lg:mb-0\">Items</h3>\r\n                <ItemsTableTools actionPermissions={actionPermissions}/>\r\n            </div>\r\n            <ItemsTable actionPermissions={actionPermissions}/>\r\n            <ItemDeleteConfirmation />\r\n        </AdaptableCard>\r\n    )\r\n}\r\n\r\nexport default Items\r\n"],"names":["orderStatusColor","label","dotClass","textClass","backgroundColor","actionPermissions","useState","isDeactivate","setDeactivate","row","setRow","tableRef","useRef","dispatch","useDispatch","useSelector","state","itemsList","data","tableData","pageIndex","pageSize","sort","query","order","total","totalCount","itemTableData","loading","auth","user","unq_id","role_name","enterAccount","res","fetchData","useCallback","getItemsTableData","page","size","accId","useEffect","setSelectedRows","current","resetSelected","useMemo","updateItemStatus","isStatus","item_status","apiUpdateItemAccStatus","id","success","OpenNotification","ActionColumn","textTheme","useThemeClass","navigate","useNavigate","iconColor","IconComponent","RiCheckboxCircleFill","RiCloseCircleFill","disableIconStyle","color","pointerEvents","canEdit","canAdd","canView","canActivate","canClone","canApprove","className","title","onClick","mode","style","columns","header","cell","props","original","accessorKey","item_title","item_type","dgl_cat_tp_info","tp_title","flex","onAllRowSelect","checked","rows","originalRows","map","selectedIds","forEach","push","ref","pagingData","onPaginationChange","newTableData","cloneDeep","setTableData","onSelectChange","value","Number","onSort","sortfield","snakeToCamel","key","onCheckBoxChange","addRowItem","removeRowItem","onIndeterminateCheckBoxChange","selectable","isOpen","onClose","fontStyle","fontWeight","fontSize","borderRadius","variant","searchInput","debounceFn","debounce","val","length","getItems","placeholder","prefix","onChange","e","target","icon","download","block","to","disabled","selectedRows","selectedRow","deleteMode","onDialogClose","setDeleteMode","setSelectedRow","onDelete","deleteItems","deleteSucceed","Items","toast","type","duration","placement","onRequestClose","onCancel","onConfirm","confirmButtonColor","injectReducer","reducer","permissionsList","includes","bodyClass"],"sourceRoot":""}