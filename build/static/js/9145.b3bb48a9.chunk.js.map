{"version":3,"file":"static/js/9145.b3bb48a9.chunk.js","mappings":"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","sources":["utils/hooks/useTimeOutMessage.js","views/auth/ResetPassword/ResetPasswordForm.js","views/auth/ResetPassword/index.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import React, { useState } from 'react'\r\nimport { Button, FormItem, FormContainer, Alert } from 'components/ui'\r\nimport { PasswordInput, ActionLink } from 'components/shared'\r\nimport { apiResetPassword } from 'services/AuthService'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string().required('Please enter your password'),\r\n    confirmPassword: Yup.string().oneOf(\r\n        [Yup.ref('password'), null],\r\n        'Your passwords do not match'\r\n    ),\r\n})\r\n\r\nconst ResetPasswordForm = (props) => {\r\n    const { disableSubmit = false, className, signInUrl = '/sign-in' } = props\r\n\r\n    const [resetComplete, setResetComplete] = useState(false)\r\n\r\n    const [message, setMessage] = useTimeOutMessage()\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const onSubmit = async (values, setSubmitting) => {\r\n        const { password } = values\r\n        setSubmitting(true)\r\n        try {\r\n            const resp = await apiResetPassword({ password })\r\n            if (resp.data) {\r\n                setSubmitting(false)\r\n                setResetComplete(true)\r\n            }\r\n        } catch (errors) {\r\n            setMessage(errors?.response?.data?.message || errors.toString())\r\n            setSubmitting(false)\r\n        }\r\n    }\r\n\r\n    const onContinue = () => {\r\n        navigate('/sign-in')\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div className=\"mb-6\">\r\n                {resetComplete ? (\r\n                    <>\r\n                        <h3 className=\"mb-1\">Reset done</h3>\r\n                        <p>Your password has been successfully reset</p>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <h3 className=\"mb-1\">Set new password</h3>\r\n                        <p>\r\n                            Your new password must different to previos password\r\n                        </p>\r\n                    </>\r\n                )}\r\n            </div>\r\n            {message && (\r\n                <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                    {message}\r\n                </Alert>\r\n            )}\r\n            <Formik\r\n                initialValues={{\r\n                    password: '123Qwe1',\r\n                    confirmPassword: '123Qwe1',\r\n                }}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    if (!disableSubmit) {\r\n                        onSubmit(values, setSubmitting)\r\n                    } else {\r\n                        setSubmitting(false)\r\n                    }\r\n                }}\r\n            >\r\n                {({ touched, errors, isSubmitting }) => (\r\n                    <Form>\r\n                        <FormContainer>\r\n                            {!resetComplete ? (\r\n                                <>\r\n                                    <FormItem\r\n                                        label=\"Password\"\r\n                                        invalid={\r\n                                            errors.password && touched.password\r\n                                        }\r\n                                        errorMessage={errors.password}\r\n                                    >\r\n                                        <Field\r\n                                            autoComplete=\"off\"\r\n                                            name=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            component={PasswordInput}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                        label=\"Confirm Password\"\r\n                                        invalid={\r\n                                            errors.confirmPassword &&\r\n                                            touched.confirmPassword\r\n                                        }\r\n                                        errorMessage={errors.confirmPassword}\r\n                                    >\r\n                                        <Field\r\n                                            autoComplete=\"off\"\r\n                                            name=\"confirmPassword\"\r\n                                            placeholder=\"Confirm Password\"\r\n                                            component={PasswordInput}\r\n                                        />\r\n                                    </FormItem>\r\n                                    <Button\r\n                                        block\r\n                                        loading={isSubmitting}\r\n                                        variant=\"solid\"\r\n                                        type=\"submit\"\r\n                                    >\r\n                                        {isSubmitting\r\n                                            ? 'Submiting...'\r\n                                            : 'Submit'}\r\n                                    </Button>\r\n                                </>\r\n                            ) : (\r\n                                <Button\r\n                                    block\r\n                                    variant=\"solid\"\r\n                                    type=\"button\"\r\n                                    onClick={onContinue}\r\n                                >\r\n                                    Continue\r\n                                </Button>\r\n                            )}\r\n\r\n                            <div className=\"mt-4 text-center\">\r\n                                <span>Back to </span>\r\n                                <ActionLink to={signInUrl}>Sign in</ActionLink>\r\n                            </div>\r\n                        </FormContainer>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResetPasswordForm\r\n","import React from 'react'\r\nimport ResetPasswordForm from './ResetPasswordForm'\r\n\r\nconst ResetPassword = () => {\r\n    return <ResetPasswordForm disableSubmit={false} />\r\n}\r\n\r\nexport default ResetPassword\r\n"],"names":["interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","validationSchema","Yup","shape","password","required","confirmPassword","oneOf","props","disableSubmit","className","signInUrl","resetComplete","setResetComplete","useTimeOutMessage","navigate","useNavigate","onSubmit","values","setSubmitting","apiResetPassword","data","response","toString","onContinue","type","showIcon","initialValues","touched","errors","isSubmitting","block","variant","onClick","label","invalid","errorMessage","autoComplete","name","placeholder","component","PasswordInput","loading","to"],"sourceRoot":""}