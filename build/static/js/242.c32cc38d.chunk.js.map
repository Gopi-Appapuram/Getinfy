{"version":3,"file":"static/js/242.c32cc38d.chunk.js","mappings":"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","sources":["utils/hooks/useTimeOutMessage.js","views/accounts/MyAccounts/components/Document/DocumentAccountDetails.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import React, { useEffect, useRef, useState } from 'react'\r\n// import StepControlled from './StepControlled'\r\n// import { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport { Input, FormItem, FormContainer, Select, Button, Radio, Alert } from 'components/ui'\r\n// import { NAV_MODE_THEMED } from 'constants/theme.constant'\r\n\r\n\r\nimport { Formik, Form, Field, FieldArray, useFormikContext } from 'formik'\r\nimport * as yup from 'yup'\r\nimport { HiMinus, HiPlus } from 'react-icons/hi'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getDocTypeDropdown } from '../../store/dataSlice'\r\nimport { apiCreateDocPolicy, apiUpdateDocPolicy } from 'services/MyAccountService'\r\nimport { EditValuesToFields } from 'utils/campareandCopy'\r\nimport { GetErrorMsg } from 'views/Servicefile'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { OpenNotification } from 'views/Servicefile'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\nimport { AdaptableCard } from 'components/shared'\r\n\r\nconst accTypeOptions = [\r\n  {label: \"Operator\",value:\"Operator\"},\r\n  {label: \"Provider\",value:\"Provider\"},\r\n  {label: \"Partner\",value:\"Partner\"},\r\n  {label: \"Enterprise Customer\",value:\"Enterprise Customer\"},\r\n  {label: \"Retail Customer\",value:\"Retail Customer\"},\r\n]\r\n\r\nconst fileSizeOptions = [\r\n  {label : '5 MB',value  : 5},\r\n  {label : '10 MB',value  : 10},\r\n  {label : '15 MB',value  : 15},\r\n  {label : '20 MB',value  : 20},\r\n]\r\n\r\nconst noOfFilesAllowed = [\r\n  {label : '1',value : 1},\r\n  {label : '2',value : 2},\r\n  {label : '3',value : 3},\r\n  {label : '4',value : 4},\r\n  {label : '5',value : 5},\r\n]\r\n\r\nconst docPolicyInitValues =  {\r\n  policyTitle : \"\",\r\n  accountType : \"\",\r\n  filesToBeUploaded : [{\r\n    docType : \"\",\r\n    mandatoryOrOptional : \"\"\r\n  }],\r\n  maxFileSize : \"\",\r\n  maxNoOfFiles : \"\"\r\n}\r\n\r\nconst docPolicyValidSchema = yup.object().shape({\r\n  policyTitle : yup.string().required(\"Please enter policy title\").trim().nullable(),\r\n  accountType : yup.string().required(\"Please select an account type\").nullable(),\r\n  maxFileSize : yup.string().required(\"Please select a max file size\").nullable(),\r\n  maxNoOfFiles : yup.string().required(\"Please select max no.of files allowed\").nullable(),\r\n  filesToBeUploaded : yup.array().of(\r\n    yup.object().shape({\r\n      docType : yup.string().required(\"Please select a document type\"),\r\n      // mandatoryOrOptional : yup.string().required(\"Select Mandatory/Optional\")\r\n    })\r\n  )\r\n})\r\n\r\n\r\nconst DocumentAccountDetails = () => {\r\n\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n  const formikRef = useRef()\r\n  const location = useLocation();\r\n  const mode = location.state?.mode ? location.state.mode : \"ADD\";\r\n  const rowForEdit = location.state?.data;\r\n  const [initialState,setInitValues] =  useState(rowForEdit?EditValuesToFields(docPolicyInitValues, rowForEdit):docPolicyInitValues)\r\n  const [message, setMessage] = useTimeOutMessage()\r\n  const [docMessage, setDocMessage] = useTimeOutMessage()\r\n\r\n  const docTypeOptions = useSelector(state => state.myaccountList?.data?.docTypeDropdownList)\r\n  \r\n  const { enterAccount, password, rememberMe, usernameOrEmail,acc_mno_id} = useSelector((state) => state.auth.user)\r\n\r\n  const [filteredDrp,setFilteredDrp] = useState(docTypeOptions) \r\n\r\n  const submitApi = async(values) => {\r\n      let payload = {\r\n        \"policy_name\": values.policyTitle.trim(),\r\n        \"acc_type\":values.accountType,\r\n        \"doc_type\":JSON.stringify(values.filesToBeUploaded.map(e => {\r\n          let obj = {}\r\n          obj.doc_type_id = e.docType\r\n          obj.doc_type_name = docTypeOptions.find(type => type.value === e.docType)?.label;\r\n          obj.is_mandatory = e.mandatoryOrOptional === 'mandatory' ? true : false\r\n          // obj.doc_name = docTypeOptions.find( f => f.value === e.docType).label\r\n          return obj\r\n        })),\r\n        \"dgl_acc_mno\":acc_mno_id,\r\n        \"status\":\"ACTIVE\",\r\n        \"maximum_file_size\": values.maxFileSize,\r\n        \"mximunm_no_of_files\" : values.maxNoOfFiles\r\n      }\r\n    if(mode === \"ADD\"){\r\n      const resp = await apiCreateDocPolicy(payload)\r\n      if (resp.status=== 'success') {\r\n       \r\n        OpenNotification('success','Created successfully ')\r\n          navigate('/account-menu-item-view-1/documents')\r\n         \r\n     \r\n      }else if (resp.status === 'failed') {\r\n        setMessage(GetErrorMsg(resp));\r\n      }\r\n    } else if(mode === \"EDIT\"){\r\n      payload.id = rowForEdit.id\r\n      const resp = await apiUpdateDocPolicy(payload)\r\n      if (resp.status=== 'success') {\r\n      \r\n        OpenNotification('success', 'Updated successfully')\r\n          navigate('/account-menu-item-view-1/documents')\r\n         \r\n      \r\n      }else if (resp.status === 'failed') {\r\n        setMessage(GetErrorMsg(resp));\r\n      }\r\n    }\r\n  }\r\n\r\n  const onRadioChange = (e,i,v) => {\r\n    v.filesToBeUploaded[i].mandatoryOrOptional = e\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(getDocTypeDropdown(enterAccount))\r\n  },[])\r\n  useEffect(()=>{\r\n    if(docTypeOptions?.length){\r\n      setFilteredDrp(docTypeOptions)\r\n    }\r\n  },[docTypeOptions])\r\n\r\n  const onAdding = (values,index,push) => {\r\n    if((docTypeOptions.length > values.filesToBeUploaded.length)){ \r\n      if(values.filesToBeUploaded[index].docType !== \"\"){\r\n        let filteredArr = filteredDrp.filter(e => e.value != values.filesToBeUploaded[index].docType)\r\n        setFilteredDrp(filteredArr)\r\n        push({docType : \"\",mandatoryOrOptional : \"optional\", isChecked:\"true\"})\r\n      }else {\r\n        setDocMessage(`Select ${index+1} Document Type`)\r\n      }\r\n    }else{\r\n      setDocMessage(`Choosen ${docTypeOptions.length} Document Types`)\r\n    }\r\n  }\r\n\r\n  const onRemove = (values,index,remove) => {\r\n      docTypeOptions.find(e => e.value === values.filesToBeUploaded[index].docType)\r\n      remove(index)\r\n  }\r\n\r\n  const setDropdownValue = (values,form,field,v)=>{\r\n    let flag = values.filesToBeUploaded.some(item => item.docType === v.value)\r\n    if(!flag){\r\n      form.setFieldValue(field.name,v.value)\r\n     }\r\n  }\r\n\r\n  let breadCrumbList = [{\r\n    name: 'Accounts',\r\n    // link:\"/account-menu-item-view-1/accounts\"\r\n}, {\r\n    name: 'My Account',\r\n    link: \"/account-menu-item-view-1/documents\"\r\n}, {\r\n    name: `Create Document Policy`,\r\n}]\r\n\r\nif (mode === \"EDIT\") {\r\n    breadCrumbList = [\r\n        {\r\n            name: 'Accounts',\r\n            // link:\"/account-menu-item-view-1/accounts\",\r\n        },\r\n        {\r\n            name: 'My Account',\r\n            link: \"/account-menu-item-view-1/documents\",\r\n        },\r\n        {\r\n          name: rowForEdit?.policy_name,\r\n          link: '/account-menu-item-view-1/documents',\r\n          state:rowForEdit\r\n      },\r\n        \r\n        {\r\n            name: \"Edit Document Policy\"\r\n        },\r\n    ]\r\n}\r\n\r\n\r\n  return (\r\n    <>\r\n      <div> \r\n        {/* Account/My Accounts/{mode === \"EDIT\" ? \"Edit\" : \"Create\"} Document Policy */}\r\n        <CustomBreadcrumbs list={breadCrumbList} />\r\n        </div>\r\n      <div className='mt-3'>\r\n        <h3>{mode === \"EDIT\" ? \"Edit\" : \"Create\"} Document Policy</h3>\r\n        {message && \r\n        <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n          {message}\r\n        </Alert>}\r\n        <div>\r\n          <Formik innerRef={formikRef}\r\n            initialValues={initialState}\r\n            validationSchema={docPolicyValidSchema}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n              setSubmitting(true)\r\n              submitApi(values)\r\n            }}\r\n          >\r\n            {({ values, touched, errors, isSubmitting }) => {\r\n              return (\r\n                <>\r\n                    <Form>\r\n                  <div style={{ backgroundColor: \"#F5F5F5\", padding: \"15px 15px 15px 15px\", marginTop: \"10px\" }}>\r\n                      <FormContainer>\r\n                      <AdaptableCard className=\"h-full p-4\" bodyClass=\"h-full\">\r\n                          <h5 className='mb-2 ml-4 mb-5'>BASIC DETAILS</h5>\r\n\r\n                          <div className='md:grid grid-cols-4 gap-6 mx-4 '>\r\n                            <FormItem\r\n                              label={<p>Policy Title <span style={{color:\"red\"}}>*</span></p>}\r\n                              invalid={errors.policyTitle && touched.policyTitle}\r\n                              errorMessage={errors.policyTitle}\r\n                            >\r\n                              <Field\r\n                                type=\"text\"\r\n                                autoComplete=\"off\"\r\n                                name=\"policyTitle\"\r\n                                placeholder=\"Enter Policy Title\"\r\n                                component={Input}\r\n                              />\r\n                            </FormItem>\r\n                            <FormItem\r\n                              label={<p>Account Type <span style={{color:\"red\"}}>*</span></p>}\r\n                              invalid={errors.accountType && touched.accountType}\r\n                              errorMessage={errors.accountType}\r\n                            >\r\n                              <Field name=\"accountType\">\r\n                                {({ field, form }) => (\r\n                                  <Select\r\n                                    placeholder=\"Select Account Type\"\r\n                                    field={field}\r\n                                    form={form}\r\n                                    options = {accTypeOptions}\r\n                                    value = {accTypeOptions?.filter((type) => type.value === values.accountType)}\r\n                                    onChange = {(v) => form.setFieldValue(field.name,v.value)}\r\n                                  />\r\n                                )}\r\n                              </Field>\r\n                            </FormItem>\r\n\r\n                          </div>\r\n                          <hr style={{ border: \"dotted 1px solid gray\", marginLeft: \"13px\", marginRight: \"13px\" }} />\r\n                          <h5 className='ml-4 mt-4 mb-5'>FILES TO BE UPLOADED</h5>\r\n                          <FieldArray name='filesToBeUploaded'>\r\n                            {({ push, remove }) => (\r\n                              <div>\r\n                                {values.filesToBeUploaded.map((item,index) => {\r\n                                  return (\r\n                                    <>\r\n                                    <FormContainer>\r\n                                    <div className='md:grid grid-cols-4 gap-4 mx-4 mt-2'>\r\n                                    <FormItem label={<p>Document Type <span style={{color:\"red\"}}>*</span></p>}\r\n                                      invalid={errors.docType && touched.docType}\r\n                                      errorMessage={errors.docType}\r\n                                    >\r\n                                      <Field name={`filesToBeUploaded[${index}].docType`}>\r\n                                        {({ field, form }) => (\r\n                                          <Select\r\n                                            placeholder=\"Select Document Type\"\r\n                                            field={field}\r\n                                            form={form}\r\n                                            options={docTypeOptions}\r\n                                            //isDisabled = {(index < values.filesToBeUploaded.length-1) ? true : false}\r\n                                            value={docTypeOptions?.filter(obj => obj.value === values.filesToBeUploaded[index].docType)}\r\n                                            onChange={(v) => setDropdownValue(values,form,field,v)}\r\n\r\n                                          />\r\n                                        )}\r\n                                      </Field>\r\n                                      {touched.filesToBeUploaded && touched.filesToBeUploaded[index] && errors.filesToBeUploaded && errors.filesToBeUploaded[index]?.docType && (\r\n                                          <div style={{color:\"red\"}}>{errors.filesToBeUploaded[index]?.docType}</div>)}\r\n                                    </FormItem>\r\n                                    <FormItem\r\n                                      invalid={errors.mandatoryOrOptional && touched.mandatoryOrOptional}\r\n                                      errorMessage={errors.mandatoryOrOptional}\r\n                                    >\r\n                                      <Field name={`filesToBeUploaded[${index}].mandatoryOrOptional`}>\r\n                                        {({field,form}) => {\r\n                                          return (\r\n                                            <div className='mt-10'>\r\n                                              <Radio.Group \r\n                                                value={field.value}\r\n                                                onChange={(val) =>form.setFieldValue(field.name, val)}\r\n                                              >\r\n                                                <Radio value=\"mandatory\" >Mandatory</Radio>\r\n                                                <Radio value=\"optional\">Optional</Radio>\r\n                                              </Radio.Group>\r\n                                            </div>\r\n                                          )\r\n                                        }}\r\n                                      {/* <Radio.Group className='ml-8' \r\n                                        value={`filesToBeUploaded[${index}].mandatoryOrOptional`} \r\n                                        onChange = {(e)=>onRadioChange(e,index,values)}>\r\n                                        <Radio value=\"mandatory\" >Mandatory</Radio>\r\n                                        <Radio value=\"optional\" >Optional</Radio>\r\n                                      </Radio.Group> */}\r\n                                      </Field>\r\n                                      {/* {touched.filesToBeUploaded && touched.filesToBeUploaded[index] && errors.filesToBeUploaded && errors.filesToBeUploaded[index]?.mandatoryOrOptional && (\r\n                                          <div style={{color:\"red\"}}>{errors.filesToBeUploaded[index]?.mandatoryOrOptional}</div>)} */}\r\n                                      </FormItem>\r\n                                      <div >\r\n                                        <Button className='mt-8 border-cyan-500'\r\n                                          shape=\"circle\"\r\n                                          size=\"md\"\r\n                                          type=\"button\"\r\n                                          icon={<HiPlus  />}\r\n                                          onClick={() => onAdding(values,index,push)}\r\n                                          disabled = {(index < values.filesToBeUploaded.length-1) ? true : false}\r\n                                        \r\n                                        />\r\n                                        {values.filesToBeUploaded.length > 1 &&\r\n                                        <Button className='mx-4 mt-8 border-red-500'\r\n                                          shape=\"circle\"\r\n                                          size=\"md\"\r\n                                          type=\"button\"\r\n                                          icon={<HiMinus />}\r\n                                          onClick={() => onRemove(values,index,remove)}\r\n                                        />}\r\n                                      </div>\r\n                                    </div>\r\n                                    </FormContainer>\r\n                                    </>\r\n                                  )\r\n                                })}\r\n                              </div>\r\n                            )}\r\n                          </FieldArray>\r\n                          {docMessage && \r\n                          <Alert className=\"mb-4\" type=\"info\" showIcon>\r\n                            {docMessage}\r\n                          </Alert>}\r\n                          <hr style={{ border: \"dotted 1px solid gray\", marginLeft: \"13px\", marginRight: \"13px\" }} />\r\n                          <div className='mt-6'>\r\n                            <h5 className='mb-2 ml-4 mb-5'>ADDITIONAL FILE SETTINGS</h5>\r\n                            <div className='md:grid grid-cols-4 gap-6 mx-4 '>\r\n                              <FormItem\r\n                                label={<p>Maximum File Size Allowed <span style={{color:\"red\"}}>*</span></p>}\r\n                                invalid={errors.maxFileSize && touched.maxFileSize}\r\n                                errorMessage={errors.maxFileSize}\r\n                              >\r\n                                <Field name=\"maxFileSize\">\r\n                                  {({ field, form }) => (\r\n                                    <Select\r\n                                      placeholder=\"Select Maximum File Size\"\r\n                                      field={field}\r\n                                      form={form}\r\n                                      options={fileSizeOptions}\r\n                                      value = {fileSizeOptions?.filter(obj => obj.value=== values.maxFileSize)}\r\n                                      onChange = {(obj) => form.setFieldValue(field.name,obj.value)}\r\n                                    />\r\n                                  )}\r\n                                </Field>\r\n                              </FormItem>\r\n                              <FormItem\r\n                                label={<p>Maximum No. of Files Allowed <span style={{color:\"red\"}}>*</span></p>}\r\n                                invalid={errors.maxNoOfFiles && touched.maxNoOfFiles}\r\n                                errorMessage={errors.maxNoOfFiles}\r\n                              >\r\n                                <Field name=\"maxNoOfFiles\">\r\n                                  {({ field, form }) => (\r\n                                    <Select\r\n                                      placeholder=\"Select Maximum No. Of File \"\r\n                                      field={field}\r\n                                      form={form}\r\n                                      options={noOfFilesAllowed}\r\n                                      value = {noOfFilesAllowed?.filter(obj => obj.value=== values.maxNoOfFiles)}\r\n                                      onChange = {(obj) => form.setFieldValue(field.name,obj.value)}\r\n                                    />\r\n                                  )}\r\n                                </Field>\r\n                              </FormItem>\r\n\r\n                            </div>\r\n                          </div>\r\n                        </AdaptableCard>\r\n                      </FormContainer>\r\n                      </div>\r\n                        <div className=\"mt-4 text-right\" >\r\n                            <Link\r\n                                className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                to='/account-menu-item-view-1/documents'\r\n                                >\r\n                            <Button \r\n                                className=\"mx-2\"\r\n                                variant=\"solid\"\r\n                                style={{ backgroundColor: \"#4D4D4D\" }}\r\n                                >\r\n                                Cancel\r\n                            </Button>\r\n                            </Link>\r\n                            <Button  type='submit'\r\n                                className=\"mx-2\"\r\n                                variant='solid'\r\n                                >\r\n                                Submit For Approval\r\n                            </Button>\r\n                          </div>\r\n                    </Form>\r\n                </>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default DocumentAccountDetails;"],"names":["interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","accTypeOptions","label","value","fileSizeOptions","noOfFilesAllowed","docPolicyInitValues","policyTitle","accountType","filesToBeUploaded","docType","mandatoryOrOptional","maxFileSize","maxNoOfFiles","docPolicyValidSchema","yup","shape","required","trim","nullable","of","dispatch","useDispatch","navigate","useNavigate","formikRef","useRef","location","useLocation","mode","state","rowForEdit","data","EditValuesToFields","initialState","useTimeOutMessage","docMessage","setDocMessage","docTypeOptions","useSelector","myaccountList","docTypeDropdownList","auth","user","enterAccount","acc_mno_id","password","rememberMe","usernameOrEmail","filteredDrp","setFilteredDrp","submitApi","values","payload","JSON","stringify","map","e","obj","doc_type_id","doc_type_name","find","type","is_mandatory","apiCreateDocPolicy","resp","status","OpenNotification","GetErrorMsg","id","apiUpdateDocPolicy","getDocTypeDropdown","length","breadCrumbList","name","link","policy_name","list","className","showIcon","innerRef","initialValues","validationSchema","onSubmit","setSubmitting","touched","errors","isSubmitting","style","backgroundColor","padding","marginTop","bodyClass","color","invalid","errorMessage","autoComplete","placeholder","component","Input","field","form","options","filter","onChange","v","setFieldValue","border","marginLeft","marginRight","push","remove","item","index","some","setDropdownValue","val","size","icon","onClick","filteredArr","isChecked","onAdding","disabled","onRemove","to","variant"],"sourceRoot":""}