{"version":3,"file":"static/js/1155.75419061.chunk.js","mappings":"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","sources":["utils/hooks/useTimeOutMessage.js","views/auth/ForgotPassword/NewPasswordForm.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Input, Button, FormItem, FormContainer, Alert } from 'components/ui'\r\nimport { ActionLink, PasswordInput } from 'components/shared'\r\nimport { apiForgotPassword, apiResetPassword } from 'services/AuthService'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { APP_NAME } from 'constants/app.constant'\r\nimport { useLocation, useNavigate } from 'react-router'\r\nimport { GetErrorMsg, OpenNotification } from 'views/Servicefile'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string().required('Please enter your password'),\r\n    confirmPassword: Yup.string().oneOf(\r\n        [Yup.ref('password'), null],\r\n        'Your passwords do not match'\r\n    ),\r\n    otp: Yup.string().required('Please enter your otp')\r\n})\r\n\r\nconst NewPasswordForm = (props) => {\r\n    const navigate = useNavigate()\r\n\r\n    const location = useLocation();\r\n    const response = location.state?.data;\r\n    const { disableSubmit = false, className, signInUrl = '/sign-in' } = props\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    const [resetComplete, setResetComplete] = useState(false)\r\n\r\n\r\n    const onSubmitOld = async (values, setSubmitting) => {\r\n\r\n        setSubmitting(true)\r\n        try {\r\n            let body = {\r\n                otp: \"12345\",\r\n                reference_id: response,\r\n                new_password: values?.password,\r\n                confirm_password: values?.confirmPassword\r\n            }\r\n            const resp = await apiResetPassword(body)\r\n            if (resp.data.success) {\r\n                setSubmitting(false)\r\n                setResetComplete(true)\r\n                navigate('/sign-in')\r\n            }\r\n        } catch (errors) {\r\n            setMessage(errors?.response?.data?.message || errors.toString())\r\n            setSubmitting(false)\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (values) => {\r\n\r\n        let body = {\r\n            otp: values.otp,\r\n            reference_id: response,\r\n            new_password: values?.password,\r\n            confirm_password: values?.confirmPassword\r\n        }\r\n        const resp = await apiResetPassword(body)\r\n\r\n        if (resp.status === 'success') {\r\n            setTimeout(async () => {\r\n                setResetComplete(true)\r\n                OpenNotification('success', 'Successfully Password Changed');\r\n                navigate('/sign-in')\r\n\r\n\r\n            }, 2000);\r\n        }\r\n\r\n        if (resp.status === 'failed') {\r\n\r\n            setMessage(GetErrorMsg(resp))\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n            <div className={className} class=\"bg-white p-6\" style={{\r\n                padding: \"24px 32px 48px\", width: \"560px\", height: \"\", opacity: 0.9,\r\n                borderRadius: \"4px\"\r\n            }}>\r\n\r\n                {message && (\r\n                    <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                        {message}\r\n                    </Alert>\r\n                )}\r\n                <Formik\r\n                    initialValues={{\r\n                        password: '',\r\n                        confirmPassword: '',\r\n                    }}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        setSubmitting(false)\r\n                        onSubmit(values)\r\n                    }}\r\n                >\r\n                    {({ touched, errors, isSubmitting }) => (\r\n                        <Form>\r\n                            <FormContainer>\r\n                                <div className='grid justify-center gap-8 mb-3'>\r\n                                    <p className='ml-16'>\r\n                                        <img className='w-20'\r\n                                            src={'/img/avatars/Primary Logo_Large.png'} />\r\n                                    </p>\r\n                                    <h4 className='font-bold text-2xl text-center'>Forgot Password</h4>\r\n                                </div>\r\n                                <FormItem\r\n                                    label=\"Enter OTP\"\r\n                                    invalid={\r\n                                        errors.otp && touched.otp\r\n                                    }\r\n                                    errorMessage={errors.otp}\r\n                                >\r\n                                    <Field\r\n                                        autoComplete=\"off\"\r\n                                        name=\"otp\"\r\n                                        placeholder=\"Enter otp\"\r\n                                        component={Input}\r\n                                    />\r\n                                </FormItem>\r\n\r\n                                <FormItem\r\n                                    label=\"Enter new Password\"\r\n                                    invalid={\r\n                                        errors.password && touched.password\r\n                                    }\r\n                                    errorMessage={errors.password}\r\n                                >\r\n                                    <Field\r\n                                        autoComplete=\"off\"\r\n                                        name=\"password\"\r\n                                        placeholder=\"Password\"\r\n                                        component={PasswordInput}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    label=\"Confirm new Password\"\r\n                                    invalid={\r\n                                        errors.confirmPassword &&\r\n                                        touched.confirmPassword\r\n                                    }\r\n                                    errorMessage={errors.confirmPassword}\r\n                                >\r\n                                    <Field\r\n                                        autoComplete=\"off\"\r\n                                        name=\"confirmPassword\"\r\n                                        placeholder=\"Confirm Password\"\r\n                                        component={PasswordInput}\r\n                                    />\r\n                                </FormItem>\r\n\r\n                                <Button\r\n                                    block\r\n                                    loading={isSubmitting}\r\n                                    variant=\"solid\"\r\n                                    type=\"submit\"\r\n                                    placeholder=\"Enter your Email ID to reset password\"\r\n                                >\r\n                                    {'Submit'}\r\n                                </Button>\r\n\r\n\r\n                                <div class=\"flex items-center py-3\">\r\n                                    <div class=\"flex-grow h-px bg-gray-400\"></div>\r\n                                    <span class=\"flex-shrink  text-black px-4\">Or</span>\r\n                                    <div class=\"flex-grow h-px bg-gray-400\"></div>\r\n                                </div>\r\n                                <div className=\" text-center\">\r\n                                    <p\r\n                                        className='border-2 border-blue-400 text-blue-500  justify-center p-3 w-full font-bold h-11 rounded'\r\n                                    >\r\n                                        <ActionLink to={signInUrl} className='text-[#0080FF]'>Back To Sign In page</ActionLink>\r\n                                    </p>\r\n\r\n                                </div>\r\n\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewPasswordForm\r\n"],"names":["interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","validationSchema","Yup","shape","password","required","confirmPassword","oneOf","otp","props","navigate","useNavigate","response","useLocation","state","data","className","disableSubmit","signInUrl","useTimeOutMessage","setResetComplete","onSubmit","values","body","reference_id","new_password","confirm_password","apiResetPassword","resp","status","OpenNotification","GetErrorMsg","class","style","padding","width","height","opacity","borderRadius","type","showIcon","initialValues","setSubmitting","touched","errors","isSubmitting","src","label","invalid","errorMessage","autoComplete","name","placeholder","component","Input","PasswordInput","block","loading","variant","to"],"sourceRoot":""}