{"version":3,"file":"static/js/9307.e5503d00.chunk.js","mappings":"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","sources":["components/template/CustomBreadCrumb.js","services/OfferService.js","services/ProductCategoryService.js","views/offers&cashback/components/Offers/CreateOffers.js","views/offers&cashback/components/Offers/OffersPreview.js","views/offers&cashback/components/Offers/CreateOfferForm.js","views/offers&cashback/store/dataSlice.js","views/offers&cashback/store/stateSlice.js","views/offers&cashback/store/index.js"],"sourcesContent":["import { ActionLink } from 'components/shared'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CustomBreadcrumbs = ({ list }) => {\r\n    return (\r\n        <nav class=\"w-full rounded-md pb-2\">\r\n            <ol class=\"list-reset flex\">\r\n            {\r\n                list?.map((val, index) => {\r\n                    return <>\r\n                        <li>\r\n                            {val.link ? \r\n                            val?.state ?\r\n                            <Link\r\n                                to={val.link} state={{data:val?.state}}\r\n                                style={{textDecoration:'underline',color:'blue'}}\r\n                            >\r\n                                {val.name}\r\n                            </Link> :  <Link\r\n                                to={val.link}\r\n                                style={{textDecoration:'underline',color:'blue'}}\r\n                            >\r\n                                {val.name}\r\n                            </Link> \r\n                            : <>{val.name}</>}\r\n                        </li>\r\n                        {\r\n                            index + 1 < list.length && <li>\r\n                            <span class=\"mx-2 text-neutral-500 dark:text-neutral-400\">\r\n                                /\r\n                            </span>\r\n                        </li>\r\n                        }\r\n                    </>\r\n                })\r\n            }\r\n            </ol>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default CustomBreadcrumbs\r\n","import ApiService from './ApiService'\r\n\r\nexport async function apiGetOfferDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/order/offr-info',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiGetCustomerCategoryData(params) {\r\n    return ApiService.fetchData({\r\n        url: '/account/cust-cats',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiGetCashBackDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/order/offr-info',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiCreateOfferCashback(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: `order/offr-info`,\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp,\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\nexport async function apiUpdateOfferCashback(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: `order/offr-info`,\r\n            method: 'put',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp,\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\n\r\nexport async function apiUpdateOfferStatus(id, status) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: `order/offr-info?id=${id}&offr_status=${status}`,\r\n            method: 'patch',\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp,\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\nexport async function apiUpdateCashbackStatus(id, status) {\r\n    // try {\r\n    //     const resp = await ApiService.fetchData({\r\n    //         url: `catalogs/dgl-wh-info/${id}/${status}`,\r\n    //         method: 'patch',\r\n    //     })\r\n    //     return {\r\n    //         status: 'success',\r\n    //         data: resp,\r\n    //     }\r\n    // } catch (errors) {\r\n    //     return {\r\n    //         status: 'failed',\r\n    //         message: errors?.response?.data || errors.toString(),\r\n    //     }\r\n    // }\r\n}","import ApiService from './ApiService'\r\n\r\nexport async function apiGetProductCategoryData(params) {\r\n    \r\n    return ApiService.fetchData({\r\n        url: '/account/prod-cats',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\n\r\nexport async function apiProdCategoryCreateUser(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/account/prod-cats',\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp,\r\n        };\r\n\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n}\r\n\r\nexport async function apiUpdateProdCatAccStatus(id, status) {\r\n\r\n    return ApiService.fetchData({\r\n        url:`/account/prod-cats?id=${id}&mdProdCatStatus=${status}`,\r\n        // url: `/account/prod-cats?id=${id}&userStatus=${status}`,\r\n        method: 'patch',\r\n\r\n    })\r\n}\r\n\r\nexport async function apiUpdateProdCat(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: `/account/prod-cats/${data.id}`,\r\n            method: 'put',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp,\r\n        };\r\n\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n}\r\n\r\n\r\n\r\nexport async function apiGetParentAccountProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/acc-operators/dropdown/${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiUploadFiles(file,loc1, loc2) {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        const resp = await ApiService.fetchData({\r\n            url: `/media/${loc1}/${loc2}`,\r\n            method: 'post',\r\n            data: formData,\r\n            headers:{'Content-Type': 'multipart/form-data'}\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp.data,\r\n        };\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n}","import React from 'react'\r\nimport { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport {\r\n    Input,\r\n    FormItem,\r\n    FormContainer,\r\n    Select,\r\n    DatePicker,\r\n    Radio,\r\n    Checkbox,\r\n    Button,\r\n} from 'components/ui'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useSelector } from 'react-redux'\r\nimport NumberFormatInput from 'react-number-format'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction getKeyByValue(object, value) {\r\n    return Object.keys(object).find((key) => object[key] === value)\r\n}\r\n\r\nconst PercentageInput = (props) => {\r\n    return <Input {...props} value={props.field.value} suffix=\"%\" />\r\n}\r\nconst PriceInput = (props) => {\r\n    return <Input {...props} value={props.field.value} prefix=\"$\" />\r\n}\r\nconst FrequencyList = [\r\n    { label: 'Daily', value: 'DAILY' },\r\n    { label: 'Weekly', value: 'WEEKLY' },\r\n    { label: 'Monthly', value: 'MONTHLY' },\r\n    { label: 'Quarterly', value: 'QUARTERLY' },\r\n    { label: 'Half-Yearly', value: 'HALFYEARLY' },\r\n    { label: 'Yearly', value: 'YEARLY' },\r\n]\r\n\r\nexport default function CreateOffers(props) {\r\n    const { offerInitialValues, offerValidationSchema, handleFirstStepSubmit } =\r\n        props\r\n    const { customerCategories, productCategories } = useSelector(\r\n        (state) => state.offerCashback.data\r\n    )\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={offerInitialValues}\r\n                validationSchema={offerValidationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    handleFirstStepSubmit(values)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, isSubmitting, handleSubmit }) => {\r\n                    return (\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <div className=\"mt-6 dark:bg-gray-700 rounded \">\r\n                                <div\r\n                                    className=\"mt-5\"\r\n                                    style={{ backgroundColor: 'white' }}\r\n                                >\r\n                                    <h3>Create Offer</h3>\r\n                                    <div\r\n                                        className=\"mt-6  rounded\"\r\n                                        style={{ backgroundColor: '#f5f5f5' }}\r\n                                    >\r\n                                        <div\r\n                                            className=\" p-5\"\r\n                                            style={{\r\n                                                backgroundColor: '#F5F5F5',\r\n                                            }}\r\n                                        >\r\n                                            <AdaptableCard\r\n                                                className=\"h-full\"\r\n                                                bodyClass=\"h-full\"\r\n                                                divider\r\n                                            >\r\n                                                <FormContainer>\r\n                                                    <div className=\"md:grid grid-cols-2 gap-6 mx-4 mt-3\">\r\n                                                        <FormItem\r\n                                                            label=\"Offer Code\"\r\n                                                            invalid={\r\n                                                                errors.offr_code &&\r\n                                                                touched.offr_code\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.offr_code\r\n                                                            }\r\n                                                        >\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                name=\"offr_code\"\r\n                                                                placeholder=\"Enter Offer Code\"\r\n                                                                component={\r\n                                                                    Input\r\n                                                                }\r\n                                                                style={{\r\n                                                                    width: '100%',\r\n                                                                }}\r\n                                                            />\r\n                                                        </FormItem>\r\n                                                        <FormItem\r\n                                                            label=\"Offer Title\"\r\n                                                            invalid={\r\n                                                                errors.offr_name &&\r\n                                                                touched.offr_name\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.offr_name\r\n                                                            }\r\n                                                        >\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                name=\"offr_name\"\r\n                                                                placeholder=\"Enter Offer Title\"\r\n                                                                component={\r\n                                                                    Input\r\n                                                                }\r\n                                                                style={{\r\n                                                                    width: '100%',\r\n                                                                }}\r\n                                                            />\r\n                                                        </FormItem>\r\n                                                        <div\r\n                                                            className=\"md:grid grid-cols-2 gap-4\"\r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                            }}\r\n                                                        >\r\n                                                            <FormItem\r\n                                                                label=\"Start Date\"\r\n                                                                invalid={\r\n                                                                    errors.offr_start_date &&\r\n                                                                    touched.offr_start_date\r\n                                                                }\r\n                                                                errorMessage={\r\n                                                                    errors.offr_start_date\r\n                                                                }\r\n                                                            >\r\n                                                                <Field name=\"offr_start_date\">\r\n                                                                    {({\r\n                                                                        field,\r\n                                                                        form,\r\n                                                                    }) => (\r\n                                                                        <DatePicker\r\n                                                                            placeholder=\"Select Date\"\r\n                                                                            field={\r\n                                                                                field\r\n                                                                            }\r\n                                                                            form={\r\n                                                                                form\r\n                                                                            }\r\n                                                                            value={\r\n                                                                                field.value\r\n                                                                                    ? new Date(\r\n                                                                                          field.value\r\n                                                                                      )\r\n                                                                                    : field.value\r\n                                                                            }\r\n                                                                            onChange={(\r\n                                                                                date\r\n                                                                            ) => {\r\n                                                                                form.setFieldValue(\r\n                                                                                    field.name,\r\n                                                                                    date\r\n                                                                                )\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    )}\r\n                                                                </Field>\r\n                                                            </FormItem>\r\n                                                            <FormItem\r\n                                                                label=\"End Date\"\r\n                                                                invalid={\r\n                                                                    errors.offr_end_date &&\r\n                                                                    touched.offr_end_date\r\n                                                                }\r\n                                                                errorMessage={\r\n                                                                    errors.offr_end_date\r\n                                                                }\r\n                                                            >\r\n                                                                <Field name=\"offr_end_date\">\r\n                                                                    {({\r\n                                                                        field,\r\n                                                                        form,\r\n                                                                    }) => (\r\n                                                                        <DatePicker\r\n                                                                            placeholder=\"Select Date\"\r\n                                                                            field={\r\n                                                                                field\r\n                                                                            }\r\n                                                                            form={\r\n                                                                                form\r\n                                                                            }\r\n                                                                            value={\r\n                                                                                field.value\r\n                                                                                    ? new Date(\r\n                                                                                          field.value\r\n                                                                                      )\r\n                                                                                    : field.value\r\n                                                                            }\r\n                                                                            onChange={(\r\n                                                                                date\r\n                                                                            ) => {\r\n                                                                                form.setFieldValue(\r\n                                                                                    field.name,\r\n                                                                                    date\r\n                                                                                )\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    )}\r\n                                                                </Field>\r\n                                                            </FormItem>\r\n                                                        </div>\r\n                                                        <FormItem\r\n                                                            label=\"Max Allowed Usages\"\r\n                                                            invalid={\r\n                                                                errors.offr_max_cpns_applcbl &&\r\n                                                                touched.offr_max_cpns_applcbl\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.offr_max_cpns_applcbl\r\n                                                            }\r\n                                                        >\r\n                                                            <Field\r\n                                                                type=\"number\"\r\n                                                                autoComplete=\"off\"\r\n                                                                name=\"offr_max_cpns_applcbl\"\r\n                                                                placeholder=\"Enter Max Allowed Usages\"\r\n                                                                component={\r\n                                                                    Input\r\n                                                                }\r\n                                                                style={{\r\n                                                                    width: '100%',\r\n                                                                }}\r\n                                                            />\r\n                                                        </FormItem>\r\n                                                        <FormItem\r\n                                                            label=\"Max Allowed Usages/customer\"\r\n                                                            invalid={\r\n                                                                errors.offr_no_of_cpns &&\r\n                                                                touched.offr_no_of_cpns\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.offr_no_of_cpns\r\n                                                            }\r\n                                                        >\r\n                                                            <Field\r\n                                                                type=\"number\"\r\n                                                                autoComplete=\"off\"\r\n                                                                name=\"offr_no_of_cpns\"\r\n                                                                placeholder=\"Enter Amount\"\r\n                                                                component={\r\n                                                                    Input\r\n                                                                }\r\n                                                            />\r\n                                                        </FormItem>\r\n                                                        <FormItem\r\n                                                            label=\"Frequency\"\r\n                                                            className=\"ml-2\"\r\n                                                            invalid={\r\n                                                                errors.offr_timeperiod &&\r\n                                                                touched.offr_timeperiod\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.offr_timeperiod\r\n                                                            }\r\n                                                        >\r\n                                                            <Field name=\"offr_timeperiod\">\r\n                                                                {({\r\n                                                                    field,\r\n                                                                    form,\r\n                                                                }) => (\r\n                                                                    <Select\r\n                                                                        placeholder=\"Select Frequency\"\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={\r\n                                                                            form\r\n                                                                        }\r\n                                                                        options={\r\n                                                                            FrequencyList\r\n                                                                        }\r\n                                                                        value={FrequencyList?.filter(\r\n                                                                            (\r\n                                                                                fq\r\n                                                                            ) =>\r\n                                                                                fq.value ===\r\n                                                                                values.offr_timeperiod\r\n                                                                        )}\r\n                                                                        onChange={(\r\n                                                                            fq\r\n                                                                        ) =>\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                fq.value\r\n                                                                            )\r\n                                                                        }\r\n                                                                    />\r\n                                                                )}\r\n                                                            </Field>\r\n                                                        </FormItem>\r\n                                                        <FormItem\r\n                                                            label=\"Product Category\"\r\n                                                            invalid={\r\n                                                                errors.rel_offr_prod_cat &&\r\n                                                                touched.rel_offr_prod_cat\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.rel_offr_prod_cat\r\n                                                            }\r\n                                                        >\r\n                                                            <Field name=\"rel_offr_prod_cat\">\r\n                                                                {({\r\n                                                                    field,\r\n                                                                    form,\r\n                                                                }) => (\r\n                                                                    <Select\r\n                                                                        placeholder=\"Select Product Category\"\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={\r\n                                                                            form\r\n                                                                        }\r\n                                                                        options={\r\n                                                                            productCategories\r\n                                                                        }\r\n                                                                        value={productCategories?.filter(\r\n                                                                            (\r\n                                                                                fq\r\n                                                                            ) =>\r\n                                                                                fq.id ==\r\n                                                                                values.rel_offr_prod_cat\r\n                                                                        )}\r\n                                                                        onChange={(\r\n                                                                            fq\r\n                                                                        ) =>\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                fq.id\r\n                                                                            )\r\n                                                                        }\r\n                                                                    />\r\n                                                                )}\r\n                                                            </Field>\r\n                                                        </FormItem>\r\n                                                        <FormItem\r\n                                                            label=\"Customer Category\"\r\n                                                            invalid={\r\n                                                                errors.rel_offr_cust_cat &&\r\n                                                                touched.rel_offr_cust_cat\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.rel_offr_cust_cat\r\n                                                            }\r\n                                                        >\r\n                                                            <Field name=\"rel_offr_cust_cat\">\r\n                                                                {({\r\n                                                                    field,\r\n                                                                    form,\r\n                                                                }) => (\r\n                                                                    <Select\r\n                                                                        placeholder=\"Select Customer Category\"\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={\r\n                                                                            form\r\n                                                                        }\r\n                                                                        options={\r\n                                                                            customerCategories\r\n                                                                        }\r\n                                                                        value={customerCategories?.filter(\r\n                                                                            (\r\n                                                                                pc\r\n                                                                            ) =>\r\n                                                                                pc.id ==\r\n                                                                                values.rel_offr_cust_cat\r\n                                                                        )}\r\n                                                                        onChange={(\r\n                                                                            pc\r\n                                                                        ) => {\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                pc.id\r\n                                                                            )\r\n\r\n                                                                            const value =\r\n                                                                                JSON.parse(\r\n                                                                                    pc.cust_cat_type\r\n                                                                                )\r\n                                                                            getKeyByValue(\r\n                                                                                value,\r\n                                                                                true\r\n                                                                            )\r\n                                                                            form.setFieldValue(\r\n                                                                                'cust_type',\r\n                                                                                getKeyByValue(\r\n                                                                                    value,\r\n                                                                                    true\r\n                                                                                )?.replace(\r\n                                                                                    /_/g,\r\n                                                                                    ''\r\n                                                                                ) ||\r\n                                                                                    'RetailCustomer'\r\n                                                                            )\r\n                                                                        }}\r\n                                                                    />\r\n                                                                )}\r\n                                                            </Field>\r\n                                                        </FormItem>\r\n                                                        <div\r\n                                                            style={{\r\n                                                                display: 'flex',\r\n                                                                flexDirection:\r\n                                                                    'column',\r\n                                                            }}\r\n                                                        >\r\n                                                            <label className=\"mb-3\">\r\n                                                                Offer Type\r\n                                                            </label>\r\n                                                            <Field name=\"offr_type_fxd_amnt\">\r\n                                                                {({\r\n                                                                    field,\r\n                                                                    form,\r\n                                                                }) => (\r\n                                                                    <Radio.Group\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={\r\n                                                                            form\r\n                                                                        }\r\n                                                                        value={\r\n                                                                            values.offr_type_fxd_amnt\r\n                                                                        }\r\n                                                                        onChange={(\r\n                                                                            val\r\n                                                                        ) =>\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                val\r\n                                                                            )\r\n                                                                        }\r\n                                                                    >\r\n                                                                        <Radio\r\n                                                                            value={\r\n                                                                                true\r\n                                                                            }\r\n                                                                            style={{\r\n                                                                                height: '25px',\r\n                                                                                width: '25px',\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Fixed\r\n                                                                            Amount\r\n                                                                        </Radio>\r\n                                                                        <Radio\r\n                                                                            value={\r\n                                                                                false\r\n                                                                            }\r\n                                                                            style={{\r\n                                                                                height: '25px',\r\n                                                                                width: '25px',\r\n                                                                                marginLeft:\r\n                                                                                    '30px',\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Percentage\r\n                                                                        </Radio>\r\n                                                                    </Radio.Group>\r\n                                                                )}\r\n                                                            </Field>\r\n                                                        </div>\r\n                                                        <div\r\n                                                            style={{\r\n                                                                display: 'flex',\r\n                                                                flexDirection:\r\n                                                                    'column',\r\n                                                            }}\r\n                                                        >\r\n                                                            <label className=\"mb-3\">\r\n                                                                Select Bearer\r\n                                                                Account\r\n                                                            </label>\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    display:\r\n                                                                        'flex',\r\n                                                                }}\r\n                                                            >\r\n                                                                <Checkbox />\r\n                                                                <label>\r\n                                                                    Operator\r\n                                                                </label>\r\n                                                                <Checkbox className=\"ml-6\" />\r\n                                                                <label>\r\n                                                                    Provider\r\n                                                                </label>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <FormItem\r\n                                                            className=\"mt-2\"\r\n                                                            invalid={\r\n                                                                errors.offr_value &&\r\n                                                                touched.offr_value\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.offr_value\r\n                                                            }\r\n                                                        >\r\n                                                            <Field name=\"offr_value\">\r\n                                                                {({\r\n                                                                    field,\r\n                                                                    form,\r\n                                                                }) => {\r\n                                                                    return (\r\n                                                                        <NumberFormatInput\r\n                                                                            form={\r\n                                                                                form\r\n                                                                            }\r\n                                                                            field={\r\n                                                                                field\r\n                                                                            }\r\n                                                                            placeholder=\"Enter Amount\"\r\n                                                                            // className=\"w-4/5\"\r\n                                                                            customInput={\r\n                                                                                values?.offr_type_fxd_amnt\r\n                                                                                    ? PriceInput\r\n                                                                                    : PercentageInput\r\n                                                                            }\r\n                                                                            onValueChange={(\r\n                                                                                e\r\n                                                                            ) => {\r\n                                                                                form.setFieldValue(\r\n                                                                                    field.name,\r\n                                                                                    e.value\r\n                                                                                )\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    )\r\n                                                                }}\r\n                                                            </Field>\r\n                                                        </FormItem>\r\n                                                        <div\r\n                                                            style={{\r\n                                                                display: 'flex',\r\n                                                            }}\r\n                                                        >\r\n                                                            <FormItem\r\n                                                                className=\"mt-2\"\r\n                                                                invalid={\r\n                                                                    errors.operator_share &&\r\n                                                                    touched.operator_share\r\n                                                                }\r\n                                                                errorMessage={\r\n                                                                    errors.operator_share\r\n                                                                }\r\n                                                            >\r\n                                                                <Field name=\"operator_share\">\r\n                                                                    {({\r\n                                                                        field,\r\n                                                                        form,\r\n                                                                    }) => {\r\n                                                                        return (\r\n                                                                            <NumberFormatInput\r\n                                                                                form={\r\n                                                                                    form\r\n                                                                                }\r\n                                                                                field={\r\n                                                                                    field\r\n                                                                                }\r\n                                                                                // className=\"w-40\"\r\n                                                                                customInput={\r\n                                                                                    PercentageInput\r\n                                                                                }\r\n                                                                                onValueChange={(\r\n                                                                                    e\r\n                                                                                ) => {\r\n                                                                                    form.setFieldValue(\r\n                                                                                        field.name,\r\n                                                                                        e.value\r\n                                                                                    )\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        )\r\n                                                                    }}\r\n                                                                </Field>\r\n                                                            </FormItem>\r\n                                                            <FormItem\r\n                                                                className=\"mt-2\"\r\n                                                                invalid={\r\n                                                                    errors.provider_share &&\r\n                                                                    touched.provider_share\r\n                                                                }\r\n                                                                errorMessage={\r\n                                                                    errors.provider_share\r\n                                                                }\r\n                                                            >\r\n                                                                <Field name=\"provider_share\">\r\n                                                                    {({\r\n                                                                        field,\r\n                                                                        form,\r\n                                                                    }) => {\r\n                                                                        return (\r\n                                                                            <NumberFormatInput\r\n                                                                                className=\"ml-3 \"\r\n                                                                                form={\r\n                                                                                    form\r\n                                                                                }\r\n                                                                                field={\r\n                                                                                    field\r\n                                                                                }\r\n                                                                                customInput={\r\n                                                                                    PercentageInput\r\n                                                                                }\r\n                                                                                onValueChange={(\r\n                                                                                    e\r\n                                                                                ) => {\r\n                                                                                    form.setFieldValue(\r\n                                                                                        field.name,\r\n                                                                                        e.value\r\n                                                                                    )\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        )\r\n                                                                    }}\r\n                                                                </Field>\r\n                                                            </FormItem>\r\n                                                        </div>\r\n                                                        <FormItem\r\n                                                            label=\"Description\"\r\n                                                            className=\"\"\r\n                                                            invalid={\r\n                                                                errors.offr_desc &&\r\n                                                                touched.offr_desc\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.offr_desc\r\n                                                            }\r\n                                                        >\r\n                                                            <Field name=\"offr_desc\">\r\n                                                                {({\r\n                                                                    field,\r\n                                                                }) => (\r\n                                                                    <RichTextEditor\r\n                                                                        value={\r\n                                                                            field.value\r\n                                                                        }\r\n                                                                        onChange={field.onChange(\r\n                                                                            field.name\r\n                                                                        )}\r\n                                                                    ></RichTextEditor>\r\n                                                                )}\r\n                                                            </Field>\r\n                                                        </FormItem>\r\n                                                    </div>\r\n                                                </FormContainer>\r\n                                            </AdaptableCard>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mt-4 text-right\">\r\n                                <>\r\n                                    <Link\r\n                                        className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                        to=\"/offers\"\r\n                                    >\r\n                                        <Button\r\n                                           type={'button'}\r\n                                           className=\"mx-2\"\r\n                                           onClick={() =>\r\n                                               console.log('cancel')\r\n                                           }\r\n                                           variant=\"solid\"\r\n                                           style={{\r\n                                               backgroundColor: '#4D4D4D',\r\n                                           }}\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n                                    </Link>\r\n                                </>\r\n                                <Button variant=\"solid\" type={'submit'}>\r\n                                    {'Next'}\r\n                                </Button>\r\n                            </div>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n","import { Button, Card, Notification, toast } from 'components/ui'\r\nimport React from 'react'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { useSelector } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { apiCreateOfferCashback, apiUpdateOfferCashback } from 'services/OfferService'\r\nimport { GetErrorMsg } from 'views/Servicefile'\r\n\r\nfunction OffersPreview(props) {\r\n    const {\r\n        onPrevious,\r\n        configIntialValues,\r\n        offerInitialValues,\r\n        goToFirstStep,\r\n        selectedMode,\r\n    } = props\r\n    const { customerCategories, productCategories } = useSelector(\r\n        (state) => state.offerCashback.data\r\n    )\r\n    const navigate = useNavigate()\r\n    const prodCategory = productCategories?.find(\r\n        (prod) => prod.id == offerInitialValues.rel_offr_prod_cat\r\n    )?.label\r\n    const custCategory = customerCategories?.find(\r\n        (cust) => cust.id == offerInitialValues.rel_offr_cust_cat\r\n    )?.label\r\n\r\n    const handleSubmit = async () => {\r\n        let payload\r\n        let resp\r\n        if (selectedMode === 'EDIT') {\r\n            payload = {\r\n                ...offerInitialValues,\r\n                dgl_offrs_configs: configIntialValues,\r\n            }\r\n            resp = await apiUpdateOfferCashback(payload)\r\n        } else {\r\n            payload = {\r\n                ...offerInitialValues,\r\n                dgl_offrs_configs: configIntialValues,\r\n            }\r\n            resp = await apiCreateOfferCashback(payload)\r\n        }\r\n        if (resp.status === 'success') {\r\n            toast.push(\r\n                <Notification\r\n                    title={\r\n                        selectedMode === 'EDIT'\r\n                            ? 'Offer Updation'\r\n                            : 'Offer Creation'\r\n                    }\r\n                    type=\"success\"\r\n                    duration={2500}\r\n                >\r\n                    {selectedMode === 'EDIT'\r\n                        ? 'Offer Updated Successfuly'\r\n                        : 'Offer Created Successfuly'}\r\n                </Notification>,\r\n                {\r\n                    placement: 'top-end',\r\n                }\r\n            )\r\n\r\n            navigate('/offers')\r\n        } else {\r\n            const errorMsg = GetErrorMsg(resp) || 'Error'\r\n            toast.push(\r\n                <Notification title={'Failed'} type=\"danger\" duration={2500}>\r\n                    {errorMsg}\r\n                </Notification>,\r\n                {\r\n                    placement: 'top-end',\r\n                }\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"mt-6 dark:bg-gray-700 rounded \">\r\n                <Card className=\"mx-3 mb-4 mt-1\">\r\n                    <div className=\"md:grid grid-cols-2\">\r\n                        <h6 className=\" mb-4 mt-1 font-bold \">\r\n                            OFFERS CREATION{' '}\r\n                        </h6>\r\n                        <div className=\" text-xs text-black font-bold flex justify-end cursor-pointer\">\r\n                            <MdModeEdit className=\"mt-1\" />\r\n                            <p onClick={() => goToFirstStep()}>EDIT</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"md:grid grid-cols-5\">\r\n                        <div className=\"mb-4\">\r\n                            <div className=\"text-xs text-black font-bold decoration-2\">\r\n                                Offer Code\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-xs\">\r\n                                    {offerInitialValues?.offr_code}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mb-4\">\r\n                            <div className=\"text-xs text-black font-bold decoration-2\">\r\n                                Offer Title\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-xs\">\r\n                                    {offerInitialValues?.offr_name}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mb-4\">\r\n                            <div className=\"text-xs text-black font-bold decoration-2\">\r\n                                Start Date\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-xs\">\r\n                                    {new Date(\r\n                                        offerInitialValues?.offr_start_date\r\n                                    ).toLocaleDateString()}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mb-4\">\r\n                            <div className=\"text-xs text-black font-bold decoration-2\">\r\n                                End Date\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-xs\">\r\n                                    {new Date(\r\n                                        offerInitialValues?.offr_end_date\r\n                                    ).toLocaleDateString()}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mb-4\">\r\n                            <div className=\"text-xs text-black font-bold decoration-2\">\r\n                                Product Category\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-xs\">{prodCategory}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mb-4\">\r\n                            <div className=\"text-xs text-black font-bold decoration-2\">\r\n                                Customer Category\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-xs\">{custCategory}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mb-4\">\r\n                            <div className=\"text-xs text-black font-bold decoration-2\">\r\n                                Offer Type\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-xs\">\r\n                                    {offerInitialValues?.offr_type}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mb-4\">\r\n                            <div className=\"text-xs text-black font-bold decoration-2\">\r\n                                Coupon Brearer Account\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-xs\">{`N/A`}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mb-4\">\r\n                            <div className=\"text-xs text-black font-bold decoration-2\">\r\n                                Description\r\n                            </div>\r\n                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                <p className=\"mt-2 text-xs\">\r\n                                    {offerInitialValues?.offr_desc}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Card>\r\n                {/* <Card className=\"mx-3 mb-4 mt-1\">\r\n                    <div className=\"md:grid grid-cols-2\">\r\n                        <h6 className=\"mx-2 mb-4 mt-1 font-bold\">\r\n                            CONFIG DETAILS{' '}\r\n                        </h6>\r\n                        <div className=\" text-xs text-black font-bold flex justify-end cursor-pointer\">\r\n                            <MdModeEdit className=\"mt-1\" />\r\n                            <p onClick={()=>onPrevious()}>EDIT</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"md:grid grid-cols-1\">\r\n                        <div className=\"mx-2\">\r\n                            <p className=\"text-xs text-black font-bold mb-2\">\r\n                                Title\r\n                            </p>\r\n                            <p className=\"text-xs\">{configIntialValues?.offr_config_title}</p>\r\n                        </div>\r\n                        <div className=\"mx-2 my-4\">\r\n                            <p className=\"text-xs text-black font-bold mb-2\">\r\n                                IF\r\n                            </p>\r\n                            <ul>\r\n                                <li className=\"my-4\">\r\n                                    1.Order Quantity Greater Than or Equal to\r\n                                    10000.00\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div className=\"mx-2 my-4\">\r\n                            <p className=\"text-xs text-black font-bold mb-2\">\r\n                                THEN\r\n                            </p>\r\n                            <ul>\r\n                                <li className=\"my-4\">\r\n                                    1.Discount Amount Equal to 1000.00\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </Card> */}\r\n            </div>\r\n            <div className=\"mt-4 text-right\">\r\n                <Button className=\"mx-2\" onClick={onPrevious}>\r\n                    Previous\r\n                </Button>\r\n                <Button onClick={() => handleSubmit()} variant=\"solid\">\r\n                    {'Submit for Approval'}\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OffersPreview\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { Steps, Button } from 'components/ui'\r\nimport CreateConfig from './CreateConfig'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport CreateOffers from './CreateOffers'\r\nimport OffersPreview from './OffersPreview'\r\nimport * as Yup from 'yup'\r\nimport {\r\n    getCustCatList,\r\n    getProdCatList,\r\n} from 'views/offers&cashback/store/dataSlice'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { injectReducer } from 'store'\r\nimport reducer from 'views/offers&cashback/store'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\ninjectReducer('offerCashback', reducer)\r\nconst CreateOfferForm = () => {\r\n    const [step, setStep] = useState(0)\r\n    const location = useLocation()\r\n    const mode = location.state?.mode === 'EDIT' ? location.state?.mode : 'ADD'\r\n    const [selectedMode, setSelectedMode] = useState(mode)\r\n    const rowForEdit = location.state?.data\r\n    const dispatch = useDispatch()\r\n    let step1InitialValues = {\r\n        offr_name: '',\r\n        offr_start_date: '',\r\n        offr_end_date: '',\r\n        offr_code: '',\r\n        offr_max_cpns_applcbl: 0,\r\n        offr_timeperiod: '',\r\n        offr_no_of_cpns: 0,\r\n        rel_offr_prod_cat: '',\r\n        rel_offr_cust_cat: '',\r\n        offr_type_fxd_amnt: true,\r\n        offr_value: 0,\r\n        operator_share: 0,\r\n        provider_share: 0,\r\n        offr_desc: '',\r\n        offr_type: 'OFFER',\r\n        cust_type: '',\r\n        cust_id: '',\r\n    }\r\n    let stpe2IntialValues = [\r\n        {\r\n            offr_config_title: '',\r\n            offr_config_details: '',\r\n        },\r\n    ]\r\n    if (rowForEdit) {\r\n        step1InitialValues = rowForEdit\r\n        stpe2IntialValues = rowForEdit?.dgl_offrs_configs\r\n    }\r\n    const [offerInitialValues, setOfferInitialValues] =\r\n        useState(step1InitialValues)\r\n    const [configIntialValues, setConfigIntialValues] =\r\n        useState(stpe2IntialValues)\r\n    const offerValidationSchema = Yup.object({\r\n        offr_name: Yup.string().required('Offer Name is required'),\r\n        offr_start_date: Yup.date().required('Start Date is required'),\r\n        offr_end_date: Yup.date().required('End Date is required'),\r\n        offr_code: Yup.string().required('Offer Code is required'),\r\n        offr_max_cpns_applcbl: Yup.string().required(\r\n            'Max Allowed Usages is required'\r\n        ),\r\n        offr_timeperiod: Yup.string().required('Frequency is required'),\r\n        offr_no_of_cpns: Yup.string().required(\r\n            'Max Allowed Usages perCustomer is required'\r\n        ),\r\n        rel_offr_prod_cat: Yup.string().required(\r\n            'Product Category is required'\r\n        ),\r\n        rel_offr_cust_cat: Yup.string().required(\r\n            'Customer Category is required'\r\n        ),\r\n        offr_type_fxd_amnt: Yup.string().required('Offer Type is required'),\r\n        offr_value: Yup.string().required('Offer Value is required'),\r\n        operator_share: Yup.string().required('Operator Share is required'),\r\n        provider_share: Yup.string().required('Provider Share is required'),\r\n        offr_desc: Yup.string().required('Offer Description is required'),\r\n    })\r\n    const { unq_id } = useSelector((state) => state.auth.user)\r\n    const fetchData = useCallback(() => {\r\n        dispatch(getProdCatList({ page_no: 0, page_size: 100, unqId: unq_id }))\r\n        dispatch(getCustCatList({ page_no: 0, page_size: 100, unqId: unq_id }))\r\n    }, [dispatch])\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [dispatch, fetchData])\r\n\r\n    const onChange = (nextStep) => {\r\n        if (nextStep < 0) {\r\n            setStep(0)\r\n        } else if (nextStep > 3) {\r\n            setStep(3)\r\n        } else {\r\n            setStep(nextStep)\r\n        }\r\n    }\r\n\r\n    const handleFirstStepSubmit = (values) => {\r\n        setOfferInitialValues(values)\r\n        onNext()\r\n    }\r\n    const handleSecondStepSubmit = (values) => {\r\n        setConfigIntialValues(values)\r\n        onNext()\r\n    }\r\n    const goToFirstStep = () => {\r\n        setStep(0)\r\n    }\r\n\r\n    const onNext = () => {\r\n        setStep(step + 1)\r\n    }\r\n\r\n    const onPrevious = () => onChange(step - 1)\r\n    const breadCrumbList=[{\r\n        name:'Home',\r\n        link:\"/home\"\r\n    },{\r\n        name:'Offers & Cashback',\r\n        link:\"/offers\"\r\n    },{\r\n        name: `${mode === 'EDIT' ? 'Edit' : 'Create'} Offer`,\r\n    }]\r\n    return (\r\n        <div className=\"mt-5\">\r\n            <CustomBreadcrumbs list={breadCrumbList}/>\r\n\r\n            <div>\r\n                <Steps current={step}>\r\n                    <Steps.Item\r\n                        title={\r\n                            selectedMode === 'EDIT'\r\n                                ? 'EDIT OFFERS'\r\n                                : 'CREATE OFFERS'\r\n                        }\r\n                    />\r\n                    {/* <Steps.Item title=\"CREATE CONFIG \" /> */}\r\n                    <Steps.Item title=\"PREVIEW\" />\r\n                </Steps>\r\n\r\n                {step == 0 && (\r\n                    <CreateOffers\r\n                        offerInitialValues={offerInitialValues}\r\n                        offerValidationSchema={offerValidationSchema}\r\n                        handleFirstStepSubmit={handleFirstStepSubmit}\r\n                        selectedMode={selectedMode}\r\n                    />\r\n                )}\r\n                {/* {step == 1 && (\r\n                <CreateConfig\r\n                    configIntialValues={configIntialValues}\r\n                    handleSecondStepSubmit={handleSecondStepSubmit}\r\n                    onPrevious={onPrevious}\r\n                />\r\n            )} */}\r\n                {step == 1 && (\r\n                    <OffersPreview\r\n                        offerInitialValues={offerInitialValues}\r\n                        configIntialValues={configIntialValues}\r\n                        onPrevious={onPrevious}\r\n                        goToFirstStep={goToFirstStep}\r\n                        selectedMode={selectedMode}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateOfferForm\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport {\r\n    apiGetCashBackDetails,\r\n    apiGetCustomerCategoryData,\r\n    apiGetOfferDetails,\r\n} from 'services/OfferService'\r\nimport { apiGetProductCategoryData } from 'services/ProductCategoryService'\r\n\r\nexport const getOffersList = createAsyncThunk(\r\n    'offerCashback/data/getOffersList',\r\n    async (data) => {\r\n        const response = await apiGetOfferDetails(data)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const getCashbacksList = createAsyncThunk(\r\n    'offerCashback/data/getCashbacksList',\r\n    async (data) => {\r\n        const response = await apiGetCashBackDetails(data)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const getProdCatList = createAsyncThunk(\r\n    'offerCashback/data/getProdCatList',\r\n    async (data) => {\r\n        const response = await apiGetProductCategoryData(data)\r\n        return response.data\r\n    }\r\n)\r\nexport const getCustCatList = createAsyncThunk(\r\n    'offerCashback/data/getCustCatList',\r\n    async (data) => {\r\n        const response = await apiGetCustomerCategoryData(data)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const initialTableData = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    query: '',\r\n    sort: {\r\n        order: '',\r\n        key: '',\r\n    },\r\n}\r\n\r\nconst dataSlice = createSlice({\r\n    name: 'offerCashback/data',\r\n    initialState: {\r\n        loading: false,\r\n        offerList: [],\r\n        tableData: initialTableData,\r\n        productCategories: [],\r\n        customerCategories: [],\r\n        //cashbacks\r\n        cashbackTableData: initialTableData,\r\n        cashbackList: [],\r\n    },\r\n    reducers: {\r\n        setOfferList: (state, action) => {\r\n            state.offerList = action.payload\r\n        },\r\n        setTableData: (state, action) => {\r\n            state.tableData = action.payload\r\n        },\r\n        setCashbackTableData: (state, action) => {\r\n            state.cashbackTableData = action.payload\r\n        },\r\n        setCashbackList: (state, action) => {\r\n            state.cashbackList = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [getOffersList.fulfilled]: (state, action) => {\r\n            state.offerList = action.payload.res\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getOffersList.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getProdCatList.fulfilled]: (state, action) => {\r\n            const modified=action.payload.res?.map((product)=> {\r\n                return {...product,\"value\":product?.id,\"label\":product?.prod_cat_title}\r\n            })\r\n        \r\n            state.productCategories = modified\r\n            state.loading = false\r\n        },\r\n        [getProdCatList.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getCustCatList.fulfilled]: (state, action) => {\r\n            const modified=action.payload.res?.map((customer)=> {\r\n                return {...customer,\"value\":customer?.id,\"label\":customer?.cust_cat_title}\r\n            })\r\n            state.customerCategories = modified\r\n            state.loading = false\r\n        },\r\n        [getCustCatList.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n\r\n        //cashback\r\n        [getCashbacksList.fulfilled]: (state, action) => {\r\n            state.cashbackList = action.payload.res\r\n            state.cashbackTableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getCashbacksList.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    setOfferList,\r\n    setTableData,\r\n    setCashbackTableData,\r\n    setCashbackList,\r\n} = dataSlice.actions\r\n\r\nexport default dataSlice.reducer\r\n","import { createSlice, current } from '@reduxjs/toolkit'\r\n\r\nconst stateSlice = createSlice({\r\n    name: 'salesOrderList/state',\r\n    initialState: {\r\n        selectedRows: [],\r\n        selectedRow: [],\r\n        deleteMode: '',\r\n        newOrderDialog: false,\r\n    },\r\n    reducers: {\r\n        setSelectedRows: (state, action) => {\r\n            state.selectedRows = action.payload\r\n        },\r\n        setSelectedRow: (state, action) => {\r\n            state.selectedRow = action.payload\r\n        },\r\n        addRowOrder: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (!currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: [...currentState.selectedRows, ...payload],\r\n                }\r\n            }\r\n        },\r\n        removeRowOrder: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: currentState.selectedRows.filter(\r\n                        (id) => id !== payload\r\n                    ),\r\n                }\r\n            }\r\n        },\r\n        setDeleteMode: (state, action) => {\r\n            state.deleteMode = action.payload\r\n        },\r\n        toggleNewOrderDialog: (state, action) => {\r\n            state.newOrderDialog = action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    setSelectedRows,\r\n    setSelectedRow,\r\n    addRowOrder,\r\n    removeRowOrder,\r\n    toggleDeleteConfirmation,\r\n    setDeleteMode,\r\n    toggleNewOrderDialog\r\n} = stateSlice.actions\r\n\r\nexport default stateSlice.reducer\r\n","import { combineReducers } from '@reduxjs/toolkit'\r\nimport state from './stateSlice'\r\nimport data from './dataSlice'\r\n\r\nconst reducer = combineReducers({\r\n    state,\r\n    data,\r\n})\r\n\r\nexport default reducer\r\n"],"names":["list","class","map","val","index","link","state","to","data","style","textDecoration","color","name","length","apiGetOfferDetails","params","ApiService","url","method","apiGetCustomerCategoryData","apiGetCashBackDetails","apiCreateOfferCashback","resp","status","message","response","toString","apiUpdateOfferCashback","apiUpdateOfferStatus","id","apiGetProductCategoryData","apiProdCategoryCreateUser","apiUpdateProdCatAccStatus","apiUpdateProdCat","apiGetParentAccountProduct","enterAccount","apiUploadFiles","file","loc1","loc2","formData","FormData","append","headers","getKeyByValue","object","value","Object","keys","find","key","PercentageInput","props","field","suffix","PriceInput","prefix","FrequencyList","label","CreateOffers","offerInitialValues","offerValidationSchema","handleFirstStepSubmit","useSelector","offerCashback","customerCategories","productCategories","initialValues","validationSchema","onSubmit","values","setSubmitting","touched","errors","handleSubmit","isSubmitting","className","backgroundColor","bodyClass","divider","invalid","offr_code","errorMessage","type","autoComplete","placeholder","component","Input","width","offr_name","offr_start_date","form","Date","onChange","date","setFieldValue","offr_end_date","offr_max_cpns_applcbl","offr_no_of_cpns","offr_timeperiod","options","filter","fq","rel_offr_prod_cat","rel_offr_cust_cat","pc","JSON","parse","cust_cat_type","replace","display","flexDirection","offr_type_fxd_amnt","height","marginLeft","offr_value","customInput","onValueChange","e","operator_share","provider_share","offr_desc","onClick","console","log","variant","onPrevious","configIntialValues","goToFirstStep","selectedMode","navigate","useNavigate","prodCategory","prod","custCategory","cust","payload","dgl_offrs_configs","toast","title","duration","placement","errorMsg","GetErrorMsg","toLocaleDateString","offr_type","injectReducer","reducer","useState","step","setStep","location","useLocation","mode","rowForEdit","dispatch","useDispatch","step1InitialValues","cust_type","cust_id","stpe2IntialValues","offr_config_title","offr_config_details","setOfferInitialValues","Yup","required","unq_id","auth","user","fetchData","useCallback","getProdCatList","page_no","page_size","unqId","getCustCatList","useEffect","onNext","breadCrumbList","current","nextStep","getOffersList","createAsyncThunk","getCashbacksList","initialTableData","total","pageIndex","pageSize","query","sort","order","dataSlice","createSlice","initialState","loading","offerList","tableData","cashbackTableData","cashbackList","reducers","setOfferList","action","setTableData","setCashbackTableData","setCashbackList","extraReducers","fulfilled","res","pending","modified","product","prod_cat_title","customer","cust_cat_title","actions","stateSlice","selectedRows","selectedRow","deleteMode","newOrderDialog","setSelectedRows","setSelectedRow","addRowOrder","currentState","includes","removeRowOrder","setDeleteMode","toggleNewOrderDialog","toggleDeleteConfirmation","combineReducers"],"sourceRoot":""}