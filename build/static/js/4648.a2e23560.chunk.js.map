{"version":3,"file":"static/js/4648.a2e23560.chunk.js","mappings":"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","sources":["views/catalogue/Templates/components/TemplatesTable.js","views/catalogue/Templates/components/TemplatesTableSearch.js","views/catalogue/Templates/components/TemplatesFilter.js","views/catalogue/Templates/components/TemplatesTableTools.js","views/catalogue/Templates/components/TemplatesDeleteConfirmation.js","views/catalogue/Templates/index.js"],"sourcesContent":["import React, { useEffect, useCallback, useMemo, useRef, useState } from 'react'\r\nimport { Badge, Tooltip, Dialog, Button } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getTemplates, setTableData, } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowItem,\r\n    removeRowItem,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport dayjs from 'dayjs'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { AiFillCopy } from \"react-icons/ai\";\r\nimport { RiCheckboxCircleFill, RiCloseCircleFill } from 'react-icons/ri'\r\nimport { BsPatchCheckFill } from 'react-icons/bs'\r\nimport GetDropdownLabel, { OpenNotification, snakeToCamel } from 'views/Servicefile'\r\nimport { apiUpdateTemplateAccStatus } from 'services/TemplateService'\r\nimport ReactHtmlParser from 'html-react-parser'\r\n\r\n\r\n// const TemplateStatusColor = {\r\n//     1: {\r\n//         label: 'Active',\r\n//         dotClass: 'bg-emerald-500',\r\n//         textClass: 'text-emerald-500',\r\n//     },\r\n//     2: {\r\n//         label: 'Submitted',\r\n//         dotClass: 'bg-blue-500',\r\n//         textClass: 'text-amber-500',\r\n//     },\r\n//     0: { label: 'Inactive', dotClass: 'bg-red-500', textClass: 'text-red-500' },\r\n// }\r\nconst orderStatusColor = {\r\n    ACTIVE: {\r\n        label: 'Active',\r\n        dotClass: 'bg-black-400',\r\n        textClass: 'text-black-400',\r\n        backgroundColor: 'bg-[#F5F5F5]',\r\n    },\r\n    SUBMITTED: {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-400',\r\n        textClass: 'text-black-400',\r\n        backgroundColor: 'bg-[#F0F7FF]',\r\n    },\r\n    IN_ACTIVE: {\r\n        label: 'Inactive',\r\n        dotClass: 'bg-blue-400',\r\n        textClass: 'text-black-400',\r\n        backgroundColor: 'bg-[#F5F5F5]',\r\n    },\r\n}\r\nexport const templateTypeOptions = [\r\n    { label: 'Product', value: 'P' },\r\n    { label: 'Data Plan', value: 'D' },\r\n    { label: 'Service Plan', value: 'S' }\r\n]\r\n\r\nconst TemplateColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Item-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst TemplatesTable = ({ actionPermissions }) => {\r\n    const [isDeactivate, setDeactivate] = useState(false)\r\n    const [row, setRow] = useState('')\r\n    const tableRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { pageIndex, pageSize, sort, query, total, sort_field, order } = useSelector(\r\n        (state) => state.templatesList.data.tableData\r\n    )\r\n    const loading = useSelector((state) => state.templatesList.data.loading)\r\n    const data = useSelector((state) => state.templatesList.data.ItemList.res)\r\n    const totalCount = useSelector((state) => state.templatesList.data.ItemList.total)\r\n\r\n    const { enterAccount, password, rememberMe, usernameOrEmail } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n   \r\n    const ActionColumn = ({ row }) => {\r\n        const dispatch = useDispatch()\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n\r\n\r\n        const IconComponent = row.tp_status != 'ACTIVE' ? RiCheckboxCircleFill : RiCloseCircleFill;\r\n        const iconColor = row.tp_status  != 'ACTIVE' ? \"green\" : \"rose\";\r\n        const disableIconStyle = { color: 'grey', pointerEvents: 'none' }\r\n        const { canAdd, canEdit, canView, canActivate, canClone, canApprove } =\r\n        actionPermissions\r\n        const onEdit = () => {\r\n            navigate(`/catalogue-new-templates/edit`, { state: { data: row, mode: \"EDIT\" } })\r\n        }\r\n\r\n        const onClone = () => {\r\n            navigate(`/catalogue-new-templates`, {\r\n                state: { data: row, mode: 'ADD' },\r\n            })\r\n        }\r\n        const handleClick = () => {\r\n            setDeactivate(true);\r\n            setRow(row);\r\n        };\r\n        return (\r\n            <div className=\"flex justify-end text-lg\">\r\n\r\n\r\n                {/* <Tooltip title=\"Edit\">\r\n                    <span className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`} onClick={onEdit}>\r\n                        <MdModeEdit />\r\n                    </span>\r\n                </Tooltip> */}\r\n\r\n                <span\r\n                    className={`cursor-pointer p-1  hover:${textTheme}`}\r\n                    onClick={onClone}\r\n                    style={canClone ? null : disableIconStyle}\r\n                >\r\n                    <AiFillCopy />\r\n                </span>\r\n\r\n                <Tooltip title={`${row.tp_status != 'ACTIVE' ? \"Activate\" : \"Deactivate\"}`}>\r\n                    <span onClick={handleClick} className={`cursor-pointer p-1 text-${iconColor}-800 hover:text-${iconColor}-800`} style={canActivate ? null : disableIconStyle}>\r\n                        <IconComponent />\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    }\r\n    const fetchData = useCallback(() => {\r\n        \r\n        dispatch(getTemplates({\r\n            page: pageIndex - 1,\r\n            size: pageSize,\r\n            //sort_field: sort_field ? sort_field : 'id',\r\n            accId: enterAccount,\r\n            order: order\r\n        }))\r\n    }, [dispatch, pageIndex, pageSize, sort_field, enterAccount, order,isDeactivate])\r\n\r\n    useEffect(() => {\r\n        dispatch(setSelectedRows([]))\r\n        fetchData()\r\n    }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    useEffect(() => {\r\n        if (tableRef) {\r\n            tableRef.current?.resetSelected()\r\n        }\r\n    }, [data])\r\n\r\n    const tableData = useMemo(\r\n        () => ({ pageIndex, pageSize, sort, query, total: totalCount }),\r\n        [pageIndex, pageSize, sort, query, totalCount]\r\n    )\r\n    //console.log(\"datadatadatadata\", data)\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Actions',\r\n                flex: 1,\r\n                id: 'action',\r\n                cell: (props) => <ActionColumn row={props.row.original} />,\r\n            },\r\n            {\r\n                header: 'Template ID',\r\n                accessorKey: 'tp_unq_id',\r\n            },\r\n\r\n            {\r\n                header: 'Template Type',\r\n                accessorKey: 'tp_type',\r\n                cell: (props) => {\r\n                   \r\n                    const { tp_type   } = props.row.original\r\n                    return(\r\n                        \r\n                    <span>{GetDropdownLabel(tp_type,templateTypeOptions)}</span>\r\n                    )} \r\n            },\r\n            {\r\n                header: 'Template Title',\r\n                accessorKey: 'tp_title',\r\n            },\r\n            {\r\n                header: 'Item Category',\r\n                accessorKey: 'rel_prod_cat_name',\r\n            },\r\n            {\r\n                header: 'Description',\r\n                accessorKey: 'tp_desc',\r\n                cell: (props) => {\r\n                    const { tp_desc } = props.row.original;\r\n                    const htmlString = typeof tp_desc === \"string\" ? tp_desc : String(tp_desc);\r\n                    return (\r\n                      <span>{ReactHtmlParser(htmlString)}</span>\r\n                    );\r\n                  }\r\n            },\r\n            {\r\n                header: 'Status',\r\n                accessorKey: 'tp_status',\r\n                flex: 1,\r\n                cell: (props) => {\r\n                    const { tp_status } = props.row.original\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n                            <span\r\n                                className={`flex ml-2 rtl:mr-2 capitalize font-semibold rounded-full border ${orderStatusColor[tp_status]?.backgroundColor} mt-4 px-2 py-1 text-${orderStatusColor[tp_status]?.dotClass}`}\r\n                            >\r\n                                {tp_status === 'ACTIVE' && (<RiCheckboxCircleFill className=\"mt-1 mr-2 text-[#3B8C59]\" />)}\r\n                                {tp_status  === 'IN_ACTIVE' && (<RiCloseCircleFill className=\"mt-1 mr-2 text-[#FF0000]\" />)}\r\n                                {tp_status === 'SUBMITTED' && (<BsPatchCheckFill className=\"mt-1 mr-2 text-blue-500\" />)}\r\n                                {orderStatusColor[tp_status]?.label}\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                },\r\n            },\r\n\r\n        ],\r\n        []\r\n    )\r\n\r\n\r\n    const updateOperatorStatus = async () => {\r\n        let isStatus = row.tp_status === 'ACTIVE' ? 'IN_ACTIVE' : 'ACTIVE'\r\n        const resp = await apiUpdateTemplateAccStatus(row.id, isStatus);\r\n\r\n        if (resp.data) {\r\n\r\n            if (isStatus === 'ACTIVE') {\r\n\r\n                setDeactivate(false)\r\n                OpenNotification('success', 'Activated successfully')\r\n\r\n            } else {\r\n\r\n                setDeactivate(false)\r\n                OpenNotification('success', 'Deactivated successfully')\r\n\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n    const onPaginationChange = (page) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageIndex = page\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSelectChange = (value) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageSize = Number(value)\r\n        newTableData.pageIndex = 1\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSort = (sort) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        const sortfield = snakeToCamel(sort.key)\r\n        newTableData[\"sort_field\"] = sortfield;\r\n        newTableData[\"order\"] = sort.order;\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onRowSelect = (checked, row) => {\r\n        if (checked) {\r\n            dispatch(addRowItem([row.id]))\r\n        } else {\r\n            dispatch(removeRowItem(row.id))\r\n        }\r\n    }\r\n\r\n    const onAllRowSelect = useCallback(\r\n        (checked, rows) => {\r\n            if (checked) {\r\n                const originalRows = rows.map((row) => row.original)\r\n                const selectedIds = []\r\n                originalRows.forEach((row) => {\r\n                    selectedIds.push(row.id)\r\n                })\r\n                dispatch(setSelectedRows(selectedIds))\r\n            } else {\r\n                dispatch(setSelectedRows([]))\r\n            }\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <DataTable\r\n                ref={tableRef}\r\n                columns={columns}\r\n                data={data}\r\n                loading={loading}\r\n                pagingData={tableData}\r\n                onPaginationChange={onPaginationChange}\r\n                onSelectChange={onSelectChange}\r\n                onSort={onSort}\r\n                onCheckBoxChange={onRowSelect}\r\n                onIndeterminateCheckBoxChange={onAllRowSelect}\r\n                selectable\r\n            />\r\n\r\n            <Dialog\r\n                isOpen={isDeactivate}\r\n                onClose={() => setDeactivate(false)}>\r\n                <h6 style={{  fontStyle: 'normal', fontSize: 700, fontSize: '18px', color: '#212121' }}>\r\n                    {row.tp_status != 'ACTIVE' ? `Activate` : `Deactivate`}</h6>\r\n                <hr className='text-gary-500 mt-4 mb-4' />\r\n                <p>{row.tp_status != 'ACTIVE'\r\n                    ? `Are you sure you want to activate this Template ?`\r\n                    : `Are you sure you want to deactivate this Template ?`}</p>\r\n                <div className='mt-6 text-end'>\r\n                    <Button style={{ backgroundColor: \"#4D4D4D\", color: \"white\" }} className='mr-3'\r\n                        onClick={() => setDeactivate(false)}\r\n                    >No</Button>\r\n                    <Button variant='solid'\r\n                        onClick={() => updateOperatorStatus()}\r\n                    >Yes</Button>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TemplatesTable\r\n","import React, { useRef } from 'react'\r\nimport { Input } from 'components/ui'\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getTemplates, setTableData } from '../store/dataSlice'\r\nimport debounce from 'lodash/debounce'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\n\r\nconst TemplateTableSearch = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const searchInput = useRef()\r\n\r\n    const tableData = useSelector(\r\n        (state) => state.templatesList.data.tableData\r\n    )\r\n\r\n    const debounceFn = debounce(handleDebounceFn, 500)\r\n\r\n    function handleDebounceFn(val) {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.query = val\r\n        newTableData.pageIndex = 1\r\n        if (typeof val === 'string' && val.length > 1) {\r\n            fetchData(newTableData)\r\n        }\r\n\r\n        if (typeof val === 'string' && val.length === 0) {\r\n            fetchData(newTableData)\r\n        }\r\n    }\r\n\r\n    const fetchData = (data) => {\r\n        dispatch(setTableData(data))\r\n        dispatch(getTemplates(data))\r\n    }\r\n\r\n    const onEdit = (e) => {\r\n        debounceFn(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <Input\r\n            ref={searchInput}\r\n            className=\"lg:w-52\"\r\n            size=\"sm\"\r\n            placeholder=\"Search\"\r\n            prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n            onChange={onEdit}\r\n        />\r\n    )\r\n}\r\n\r\nexport default TemplateTableSearch\r\n","import React from 'react'\r\nimport { HiOutlineFilter} from 'react-icons/hi'\r\nimport {\r\n   \r\n    Button,\r\n  \r\n} from 'components/ui'\r\n\r\n\r\n\r\nconst TemplateFilter = () => {\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                size=\"sm\"\r\n                className=\"block md:inline-block ltr:md:ml-2 rtl:md:mr-2 md:mb-0 mb-4\"\r\n                icon={<HiOutlineFilter />}\r\n                onClick={() => {}}\r\n            >\r\n                Filter\r\n            </Button>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default TemplateFilter\r\n","import React from 'react'\r\nimport { HiDownload, HiPlusCircle } from 'react-icons/hi'\r\nimport TemplateTableSearch from './TemplatesTableSearch'\r\nimport { Link } from 'react-router-dom'\r\nimport OperatorsFilter from './TemplatesFilter'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Radio,\r\n    FormItem,\r\n    FormContainer,\r\n    Drawer,\r\n} from 'components/ui'\r\nimport NewOperators from './NewTemplates'\r\n\r\n\r\nconst TemplatesTableTools = ({ actionPermissions }) => {\r\n    const { canAdd } = actionPermissions\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center\">\r\n            <TemplateTableSearch />\r\n            <OperatorsFilter />\r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n                target=\"_blank\"\r\n                download\r\n            >\r\n                <Button block size=\"sm\" icon={<HiDownload />}>\r\n                    Export\r\n                </Button>\r\n            </Link>\r\n            <Link\r\n                className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                to=\"/catalogue-new-templates\"\r\n            >\r\n                <Button block variant='solid' disabled={!canAdd} size=\"sm\" icon={<HiPlusCircle />}>\r\n                   Create\r\n                </Button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TemplatesTableTools\r\n","import React from 'react'\r\nimport { toast, Notification } from 'components/ui'\r\nimport { ConfirmDialog } from 'components/shared'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n    setSelectedRows,\r\n} from '../store/stateSlice'\r\nimport { deleteTemplates, getTemplates } from '../store/dataSlice'\r\n\r\nconst TemplateDeleteConfirmation = () => {\r\n    const dispatch = useDispatch()\r\n    const selectedRows = useSelector(\r\n        (state) => state.templatesList.state.selectedRows\r\n    )\r\n    const selectedRow = useSelector(\r\n        (state) => state.templatesList.state.selectedRow\r\n    )\r\n    const deleteMode = useSelector(\r\n        (state) => state.templatesList.state.deleteMode\r\n    )\r\n    const tableData = useSelector(\r\n        (state) => state.templatesList.data.tableData\r\n    )\r\n\r\n    const onDialogClose = () => {\r\n        dispatch(setDeleteMode(''))\r\n\r\n        if (deleteMode === 'single') {\r\n            dispatch(setSelectedRow([]))\r\n        }\r\n    }\r\n\r\n    const onDelete = async () => {\r\n        dispatch(setDeleteMode(''))\r\n\r\n        if (deleteMode === 'single') {\r\n            const success = await deleteTemplates({ id: selectedRow })\r\n            deleteSucceed(success)\r\n            dispatch(setSelectedRow([]))\r\n        }\r\n\r\n        if (deleteMode === 'batch') {\r\n            const success = await deleteTemplates({ id: selectedRows })\r\n            deleteSucceed(success, selectedRows.length)\r\n            dispatch(setSelectedRows([]))\r\n        }\r\n    }\r\n\r\n    const deleteSucceed = (success, Templates) => {\r\n        if (success) {\r\n            dispatch(getTemplates(tableData))\r\n            toast.push(\r\n                <Notification\r\n                    title={'Successfuly Deleted'}\r\n                    type=\"success\"\r\n                    duration={2500}\r\n                >\r\n                    {deleteMode === 'single' && 'Template '}\r\n                    {deleteMode === 'batch' && `${Templates} Templates `}\r\n                    successfuly deleted\r\n                </Notification>,\r\n                {\r\n                    placement: 'top-center',\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ConfirmDialog\r\n            isOpen={deleteMode === 'single' || deleteMode === 'batch'}\r\n            onClose={onDialogClose}\r\n            onRequestClose={onDialogClose}\r\n            type=\"danger\"\r\n            title=\"Delete product\"\r\n            onCancel={onDialogClose}\r\n            onConfirm={onDelete}\r\n            confirmButtonColor=\"red-600\"\r\n        >\r\n            <p>\r\n                Are you sure you want to delete this Template? All record related\r\n                to this Template will be deleted as well. This action cannot be\r\n                undone.\r\n            </p>\r\n        </ConfirmDialog>\r\n    )\r\n}\r\n\r\nexport default TemplateDeleteConfirmation\r\n","import React, { useState } from 'react'\r\nimport reducer from './store'\r\nimport { injectReducer } from 'store/index'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport TemplatesTable from './components/TemplatesTable'\r\nimport TemplatesTableTools from './components/TemplatesTableTools'\r\nimport TemplateDeleteConfirmation from './components/TemplatesDeleteConfirmation'\r\nimport { useSelector } from 'react-redux'\r\n\r\ninjectReducer('templatesList', reducer)\r\n\r\nconst Templates = () => {\r\n    const { permissionsList } = useSelector((state) => state.auth.user)\r\n    const [canAdd, setCanAdd] = useState(permissionsList.includes('CATTEMADD'))\r\n    const [canEdit, setCanEdit] = useState(\r\n        permissionsList.includes('CATTEMEDI')\r\n    )\r\n    const [canView, setCanView] = useState(permissionsList.includes('CATTEMVIE'))\r\n    const [canActivate, setCanActivate] = useState(permissionsList.includes('CATTEMDEA'))\r\n    const [canClone, setCanClone] = useState(permissionsList.includes('CATTEMCLO'))\r\n    const [canApprove, setCanApprove] = useState(permissionsList.includes('CATTEMAPP'))\r\n\r\n    const actionPermissions = {\r\n        canAdd,\r\n        canEdit,\r\n        canClone,\r\n        canView,\r\n        canActivate,\r\n        canApprove,\r\n    }\r\n\r\n    return (\r\n        <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n            <div className=\"lg:flex items-center justify-between mb-4\">\r\n                <h3 className=\"mb-4 lg:mb-0\">Templates</h3>\r\n                <TemplatesTableTools actionPermissions={actionPermissions}/>\r\n            </div>\r\n            <TemplatesTable actionPermissions={actionPermissions} />\r\n            <TemplateDeleteConfirmation  />\r\n        </AdaptableCard>\r\n    )\r\n}\r\n\r\nexport default Templates\r\n"],"names":["orderStatusColor","ACTIVE","label","dotClass","textClass","backgroundColor","SUBMITTED","IN_ACTIVE","templateTypeOptions","value","actionPermissions","useState","isDeactivate","setDeactivate","row","setRow","tableRef","useRef","dispatch","useDispatch","useSelector","state","templatesList","data","tableData","pageIndex","pageSize","sort","query","sort_field","total","order","loading","ItemList","res","totalCount","auth","user","enterAccount","ActionColumn","password","rememberMe","usernameOrEmail","textTheme","useThemeClass","navigate","useNavigate","IconComponent","tp_status","RiCheckboxCircleFill","RiCloseCircleFill","iconColor","disableIconStyle","color","pointerEvents","canActivate","canAdd","canEdit","canView","canClone","canApprove","className","onClick","mode","style","title","fetchData","useCallback","getTemplates","page","size","accId","useEffect","setSelectedRows","current","resetSelected","useMemo","columns","header","flex","id","cell","props","original","accessorKey","tp_type","GetDropdownLabel","tp_desc","htmlString","String","ReactHtmlParser","updateOperatorStatus","isStatus","apiUpdateTemplateAccStatus","OpenNotification","onAllRowSelect","checked","rows","originalRows","map","selectedIds","forEach","push","ref","pagingData","onPaginationChange","newTableData","cloneDeep","setTableData","onSelectChange","Number","onSort","sortfield","snakeToCamel","key","onCheckBoxChange","addRowItem","removeRowItem","onIndeterminateCheckBoxChange","selectable","isOpen","onClose","fontStyle","fontSize","variant","searchInput","debounceFn","debounce","val","length","placeholder","prefix","onChange","e","target","icon","download","block","to","disabled","selectedRows","selectedRow","deleteMode","onDialogClose","setDeleteMode","setSelectedRow","onDelete","deleteTemplates","success","deleteSucceed","Templates","toast","type","duration","placement","onRequestClose","onCancel","onConfirm","confirmButtonColor","injectReducer","reducer","permissionsList","includes","bodyClass"],"sourceRoot":""}