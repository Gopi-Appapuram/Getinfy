{"version":3,"file":"static/js/5707.27f09152.chunk.js","mappings":"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","sources":["views/settings/generalSettings/components/settingsDialog.js","views/settings/generalSettings/store/stateSlice.js","views/settings/generalSettings/components/GeneralSettingsDetails.js","views/settings/generalSettings/store/index.js","views/settings/generalSettings/index.js"],"sourcesContent":["import { DataTable } from 'components/shared'\r\nimport { Input } from 'components/ui'\r\nimport { cloneDeep } from 'lodash'\r\nimport React, { useCallback, useMemo, useRef } from 'react'\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\nimport { MdNavigateNext } from 'react-icons/md'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nfunction SettingsDialog() {\r\n\r\n    const columns = useMemo(() => [\r\n        {\r\n            header: 'Operator ID',\r\n            accessorKey: 'operaterId',\r\n        },\r\n        {\r\n            header: 'Operator Name',\r\n            accessorKey: 'operaterName',\r\n        },\r\n        \r\n    ])\r\n\r\n    const data = [\r\n      {\r\n        operaterId : \"#000001\",\r\n        operaterName : 'Operater 1'\r\n      },\r\n      {\r\n        operaterId : \"#000001\",\r\n        operaterName : 'Operater 1'\r\n      },\r\n      {\r\n        operaterId : \"#000001\",\r\n        operaterName : 'Operater 1'\r\n      },\r\n      {\r\n        operaterId : \"#000001\",\r\n        operaterName : 'Operater 1'\r\n      },\r\n      {\r\n        operaterId : \"#000001\",\r\n        operaterName : 'Operater 1'\r\n      },\r\n      {\r\n        operaterId : \"#000001\",\r\n        operaterName : 'Operater 1'\r\n      },\r\n      {\r\n        operaterId : \"#000001\",\r\n        operaterName : 'Operater 1'\r\n      },      \r\n    ]\r\n\r\n\r\n    return (\r\n        <div className=\"p-3\">\r\n            <h3>Settings For</h3>\r\n            <Input\r\n                className=\"w-72 mt-4\"\r\n                size=\"sm\"\r\n                placeholder=\"Search Operater / Operater ID\"\r\n                prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n                onChange={''}\r\n            />\r\n            <div className='mt-4'>\r\n              <DataTable\r\n                columns={columns}\r\n                data={data}\r\n                \r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SettingsDialog","import { createSlice, current } from '@reduxjs/toolkit'\r\n\r\nconst stateSlice = createSlice({\r\n    name: 'myaccountList/state',\r\n    initialState: {\r\n        selectedRows: [],\r\n        selectedRow: [],\r\n        deleteMode: '',\r\n    },\r\n    reducers: {\r\n        setSelectedRows: (state, action) => {\r\n            state.selectedRows = action.payload\r\n        },\r\n        setSelectedRow: (state, action) => {\r\n            state.selectedRow = action.payload\r\n        },\r\n        addRowItem: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (!currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: [...currentState.selectedRows, ...payload],\r\n                }\r\n            }\r\n        },\r\n        removeRowItem: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: currentState.selectedRows.filter(\r\n                        (id) => id !== payload\r\n                    ),\r\n                }\r\n            }\r\n        },\r\n        setDeleteMode: (state, action) => {\r\n            state.deleteMode = action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    setSelectedRows,\r\n    setSelectedRow,\r\n    addRowItem,\r\n    removeRowItem,\r\n    toggleDeleteConfirmation,\r\n    setDeleteMode,\r\n} = stateSlice.actions\r\n\r\nexport default stateSlice.reducer\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport { AdaptableCard, DataTable, RichTextEditor } from 'components/shared'\r\nimport { Input, FormItem, FormContainer, select, Button, Dialog, Select, InputGroup } from 'components/ui'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { MdModeEdit, MdNavigateNext } from 'react-icons/md'\r\nimport SettingsDialog from './settingsDialog'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getByOperaterId, getOperaters ,setTableData} from '../store/dataSlice'\r\nimport { addRowItem, removeRowItem, setSelectedRows } from '../store/stateSlice'\r\nimport GetDropdownLabel, { snakeToCamel } from 'views/Servicefile'\r\nimport { cloneDeep } from 'lodash'\r\nimport { HiArrowRight, HiOutlineSearch } from 'react-icons/hi'\r\nimport { timeZone } from 'mock/data/timezones'\r\n\r\nconst language = [\r\n    { label: 'English', value: 'en' },  \r\n    { label: 'Spanish', value: 'es'},\r\n    { label: 'Arabic', value: 'ar'},\r\n    { label: 'Portuguese', value: 'pt'},\r\n]\r\n\r\nexport default function GeneralSettingsDetails() {\r\n\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const [operater,setOperater] = useState({selectedOperator : \"\"})\r\n\r\n    const { enterAccount, acc_mno_id,user_type} = useSelector((state) => state.auth.user)\r\n    const operatorsList = useSelector((state) => state.genSettings?.data?.operatorsList)\r\n    const { pageIndex, pageSize, sort, query, total ,sort_field,order} = useSelector((state) => state.genSettings?.data?.tableData)\r\n    const loading = useSelector((state) => state.genSettings?.data?.loading)\r\n    const getOpInfoId = useSelector((state) => state.genSettings?.data?.opInfoByID)\r\n    const currencyList = useSelector((state) => state.genSettings?.data?.currencyList)\r\n    const totalCount = operatorsList.length\r\n\r\n    useEffect(() => {\r\n        dispatch(getOperaters({enterAccount}))\r\n    },[dispatch,enterAccount])\r\n\r\n    useEffect(()=>{\r\n        if(user_type!== \"GlobalMno\"){\r\n            setOperater({selectedOperator : operatorsList[0]?.value})\r\n            dispatch(getByOperaterId(operatorsList[0]?.value))\r\n        }\r\n    },[operatorsList])\r\n    const tableData = useMemo(  \r\n        () => ({ pageIndex, pageSize, sort, query, total:totalCount }),\r\n        [pageIndex, pageSize, sort, query, totalCount]\r\n    )\r\n\r\n    const onSeletOperator = useCallback((form,field,label) => {\r\n        form.setFieldValue(field.name,label.value)\r\n        setOperater({selectedOperator : label.value})\r\n        dispatch(getByOperaterId(label.value))\r\n    },[dispatch])  \r\n\r\n    const onClickEdit = () => {\r\n        navigate(`/settings-menu-general-settings-edit`, {\r\n            state: { data : getOpInfoId[0] ,account :  operater.selectedOperator, mode: 'EDIT' },\r\n        })\r\n    }\r\n    const GetValueTimeZone = (key,arr) =>{\r\n        let a = arr.find(e => e?.id == key)\r\n        return  a\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='mt-5'>\r\n                <h3>General Settings</h3>\r\n                <div className=\"mt-6  bg-gray-50 dark:bg-gray-700 rounded\">\r\n                    <div className=\"p-5\" style={{ backgroundColor: \"#f5f5f5\" }}>\r\n                    \r\n                        <Formik\r\n                            initialValues={operater}\r\n                            // validationSchema={}\r\n                            onSubmit={(values) => {\r\n                                console.log('submit', values);\r\n                            }}\r\n                        >\r\n                            {({values, touched, errors, isSubmitting, handleSubmit}) => {\r\n                                return(\r\n                                <Form>\r\n                                    <AdaptableCard className=\"h-full p-5\" bodyClass=\"h-full\" divider>\r\n                                    <FormContainer>\r\n                                        <FormItem label='Select Operator'>\r\n                                            <div className='md:grid grid-cols-3 gap-4'>\r\n                                            <Field name=\"selectedOperator\">\r\n                                                {({ field, form }) => (\r\n                                                    <Select placeholder=\"Select Operater\" field={field} form={form}\r\n                                                        options={operatorsList} isDisabled={user_type !== \"GlobalMno\" ? true : false}\r\n                                                        // value={operatorsList.filter((label) => (label.value === values.selectedOperator))}\r\n                                                        value={user_type !== \"GlobalMno\" ? \r\n                                                              operatorsList?.filter((label) =>label.value === enterAccount) \r\n                                                            : operatorsList?.filter((label) =>label.value === values.selectedOperator)}\r\n                                                        onChange={(label) =>onSeletOperator(form,field,label)}\r\n                                                />)}\r\n                                            </Field>\r\n                                            </div>\r\n                                        </FormItem>\r\n                                    </FormContainer>\r\n                                    </AdaptableCard>\r\n                                    {(operater?.selectedOperator || values?.selectedOperator) && \r\n                                    <AdaptableCard className=\"h-full p-5 mt-4\" bodyClass=\"h-full\" divider>\r\n                                            <div className=\"md:grid grid-cols-2\">\r\n                                                <h6 className=\" mb-4 mt-1 font-bold\">BASIC DETAILS{' '}</h6>\r\n                                                <div className=\" text-base  font-bold flex justify-end cursor-pointer\">\r\n                                                        <div style={{display:\"flex\"}} onClick={onClickEdit}>\r\n                                                            <MdModeEdit className='mr-2 h-6'/>\r\n                                                            <p>EDIT</p>\r\n                                                        </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"md:grid grid-cols-5 mt-4\">\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\" }} >\r\n                                                    <h6 className='mb-3'>Roundoff Values</h6>\r\n                                                    <p className='mb-3'>{getOpInfoId[0]?.gen_set_rndoff_val === true ? \"Up\" : 'Down'}</p>\r\n                                                </div>\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\" }} >\r\n                                                    <h6 className='mb-3'>Solution Price</h6>\r\n                                                    <p className='mb-3'>Exclusive</p>\r\n                                                </div>\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                                                    <h6 className='mb-3'>Language Preferences</h6>\r\n                                                    <p className='mb-3'>{GetDropdownLabel(getOpInfoId[0]?.gen_set_lang_pref,language)}</p>\r\n                                                </div>\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                                                    <h6 className='mb-3'>Time Zone</h6>\r\n                                                    <p className='mb-3'>{GetValueTimeZone(getOpInfoId[0]?.gen_set_timezone,timeZone)?.value}</p>\r\n                                                </div>\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                                                    <h6 className='mb-3'>Date Format</h6>\r\n                                                    <p className='mb-3'>{getOpInfoId[0]?.gen_set_date_format}</p>\r\n                                                </div>\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                                                    <h6 className='mb-3'>Time Format</h6>\r\n                                                    <p className='mb-3'>{getOpInfoId[0]?.gen_set_time_format}</p>\r\n                                                </div>\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"10px\" }}>\r\n                                                    <h6 className='mb-3'>Currency Preferance</h6>\r\n                                                    <p className='mb-3'>{GetDropdownLabel(getOpInfoId[0]?.rel_gen_set_curncy_pref,currencyList)}</p>\r\n                                                </div>\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"10px\" }}>\r\n                                                    <h6 className='mb-3'>Select Measurement</h6>\r\n                                                    <p className='mb-3'>{getOpInfoId[0]?.gen_set_measr_unit === true ? \"CI\" : \"SI\"}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                    </AdaptableCard>}\r\n                                </Form>\r\n                            )}}\r\n                        </Formik>                    \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { combineReducers } from '@reduxjs/toolkit'\r\nimport state from './stateSlice'\r\nimport data from './dataSlice'\r\n\r\nconst reducer = combineReducers({\r\n    state,\r\n    data,\r\n})\r\n\r\nexport default reducer\r\n","import React from 'react'\r\nimport GeneralSettingsDetails from './components/GeneralSettingsDetails'\r\nimport { injectReducer } from 'store'\r\nimport reducer from './store'\r\n\r\ninjectReducer(\"genSettings\",reducer)\r\n\r\nfunction GeneralSettings() {\r\n  return (\r\n    <>\r\n    <div>Settings / GeneralSettings</div>\r\n    <GeneralSettingsDetails/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GeneralSettings"],"names":["stateSlice","createSlice","name","initialState","selectedRows","selectedRow","deleteMode","reducers","setSelectedRows","state","action","payload","setSelectedRow","addRowItem","currentState","current","includes","removeRowItem","filter","id","setDeleteMode","actions","toggleDeleteConfirmation","language","label","value","GeneralSettingsDetails","navigate","useNavigate","dispatch","useDispatch","useState","selectedOperator","operater","setOperater","useSelector","auth","user","enterAccount","user_type","acc_mno_id","operatorsList","genSettings","data","tableData","pageIndex","pageSize","sort","query","getOpInfoId","total","sort_field","order","loading","opInfoByID","currencyList","totalCount","length","useEffect","getOperaters","getByOperaterId","useMemo","onSeletOperator","useCallback","form","field","setFieldValue","onClickEdit","account","mode","className","style","backgroundColor","initialValues","onSubmit","values","console","log","key","arr","touched","errors","isSubmitting","handleSubmit","bodyClass","divider","placeholder","options","isDisabled","onChange","display","onClick","flexDirection","gen_set_rndoff_val","GetDropdownLabel","gen_set_lang_pref","gen_set_timezone","timeZone","find","e","gen_set_date_format","gen_set_time_format","marginTop","rel_gen_set_curncy_pref","gen_set_measr_unit","combineReducers","injectReducer","reducer"],"sourceRoot":""}