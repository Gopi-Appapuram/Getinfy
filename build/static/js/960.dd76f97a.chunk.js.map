{"version":3,"file":"static/js/960.dd76f97a.chunk.js","mappings":"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","sources":["views/wareHouse/WareHouse/components/Inventory/AddInventory.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react'\r\n\r\nimport {\r\n    Input,\r\n    FormItem,\r\n    FormContainer,\r\n    Select,\r\n    Button,\r\n    Radio,\r\n    toast,\r\n    Notification,\r\n} from 'components/ui'\r\nimport { AdaptableCard } from 'components/shared'\r\n\r\nimport { Formik, Form, Field } from 'formik'\r\n// import * as Yup from 'yup'\r\nimport { HiMinus, HiPlus } from 'react-icons/hi'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    getItemVariants,\r\n    getItems,\r\n    getWareHouseList,\r\n} from '../../store/dataSlice'\r\nimport * as Yup from 'yup'\r\nimport { ApiToUiConversionInventory, UiToApiConversionInventory } from 'utils/campareandCopy'\r\nimport { apiCreateInventory, apiUpdateInventory } from 'services/InventoryService'\r\nimport { GetErrorMsg } from 'views/Servicefile'\r\nimport { injectReducer } from 'store'\r\nimport reducer from '../../store'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\n\r\nconst validationSchema = Yup.object({\r\n    whWarehouse: Yup.string().required('Warehouse is required'),\r\n    catItemsInfo: Yup.string().required('Item is required'),\r\n    catItemVar: Yup.string().required('Item Variant is required'),\r\n    skuCode: Yup.string().required('SKU Code is required'),\r\n    shelfCode: Yup.string().required('Shelf Code is required'),\r\n    shelfArea: Yup.string().required('Shelf Area is required'),\r\n    holdingQty: Yup.number()\r\n        .required('Holding Qty is required')\r\n        .integer('Holding Qty should be number')\r\n        .positive('Holding Qty should not be in negative'),\r\n})\r\ninjectReducer('wareHouse', reducer)\r\nconst AddInventory = () => {\r\n    const location = useLocation();\r\n    const warehouseData = location.state.data || {};\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const wareHouseList = useSelector((state) => state.wareHouse?.data?.whList)\r\n    const itemsList = useSelector((state) => state.wareHouse?.data?.itemList)\r\n    const itemVariants = useSelector(\r\n        (state) => state.wareHouse?.data?.itemVariants\r\n    )\r\n\r\n    const fetchData = useCallback(() => {\r\n        dispatch(getWareHouseList())\r\n        dispatch(getItems())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [dispatch])\r\n\r\n    let initialValues = {\r\n        whWarehouse: warehouseData.id,\r\n        catItemsInfo: '',\r\n        catItemVar: '',\r\n        skuCode: '',\r\n        shelfCode: '',\r\n        shelfArea: '',\r\n        holdingQty: 0,\r\n    }\r\n    \r\n\r\n    const mode = location.state?.mode === 'EDIT' ? location.state?.mode : 'ADD'\r\n    const [selectedMode, setSelectedMode] = useState(mode)\r\n    const rowForEdit = location.state?.data\r\n    let warehouseItem=location.state?.data\r\n    if(mode === \"EDIT\"){\r\n        warehouseItem=location.state?.warehouseData\r\n    }\r\n    if (rowForEdit && mode === \"EDIT\") {\r\n        initialValues = ApiToUiConversionInventory(initialValues, rowForEdit)\r\n    }\r\n    const [initialState, setInitValues] = useState(initialValues);\r\n\r\n    const { acc_mno_id } = useSelector((state) => state.auth.user);\r\n\r\n    useEffect(() => {\r\n        if(selectedMode === \"EDIT\" && rowForEdit.cat_items_info) {\r\n            dispatch(\r\n                getItemVariants(\r\n                    rowForEdit.cat_items_info\r\n                )\r\n            )\r\n        }\r\n    }, [selectedMode])\r\n    const submitApi = async (values, setSubmitting) => {\r\n        let submittedValues = { ...values, accId: acc_mno_id }\r\n        let payload = {}\r\n        if (selectedMode === 'ADD') {\r\n            const reqAddPayload = UiToApiConversionInventory(\r\n                payload,\r\n                submittedValues\r\n            )\r\n            const resp = await apiCreateInventory(reqAddPayload)\r\n            if (resp.status === 'success') {\r\n                toast.push(\r\n                    <Notification\r\n                        title={'Inventory Creation'}\r\n                        type=\"success\"\r\n                        duration={2500}\r\n                    >\r\n                        Inventory Added Successfuly\r\n                    </Notification>,\r\n                    {\r\n                        placement: 'top-end',\r\n                    }\r\n                )\r\n\r\n                navigate('/wareHouse-menu-item-view-2')\r\n            } else if (resp.status === 'failed') {\r\n                const errorMsg = GetErrorMsg(resp) || 'Error'\r\n                toast.push(\r\n                    <Notification\r\n                        title={'Failed'}\r\n                        type=\"danger\"\r\n                        duration={2500}\r\n                    >\r\n                        {errorMsg}\r\n                    </Notification>,\r\n                    {\r\n                        placement: 'top-end',\r\n                    }\r\n                )\r\n            }\r\n        } else if (selectedMode === 'EDIT') {\r\n            const reqEditPayload = UiToApiConversionInventory(\r\n                payload,\r\n                submittedValues,\r\n                true\r\n            )\r\n            const resp = await apiUpdateInventory(reqEditPayload)\r\n            if (resp.status === 'success') {\r\n                toast.push(\r\n                    <Notification\r\n                        title={'Inventory Updation'}\r\n                        type=\"success\"\r\n                        duration={2500}\r\n                    >\r\n                        Inventory Updated Successfuly\r\n                    </Notification>,\r\n                    {\r\n                        placement: 'top-end',\r\n                    }\r\n                )\r\n                navigate('/wareHouse-menu-item-view-2')\r\n            } else if (resp.status === 'failed') {\r\n                const errorMsg = GetErrorMsg(resp) || 'Error'\r\n                toast.push(\r\n                    <Notification\r\n                        title={'Failed'}\r\n                        type=\"danger\"\r\n                        duration={2500}\r\n                    >\r\n                        {errorMsg}\r\n                    </Notification>,\r\n                    {\r\n                        placement: 'top-end',\r\n                    }\r\n                )\r\n            }\r\n        }\r\n        setSubmitting(false);\r\n    }\r\n    const breadCrumbList = [\r\n            {\r\n                name: 'Home',\r\n                link: '/home',\r\n            },\r\n            {\r\n                name: 'WareHouse',\r\n                link: '/wareHouse-menu-item-view-2',\r\n            },\r\n            {\r\n                name: warehouseItem?.wh_title,\r\n                link: '/warehouse-view-warehouse',\r\n                state:warehouseItem\r\n            },\r\n            {\r\n               \r\n                name : selectedMode === 'EDIT' ? \"Edit Inventory\": \"Add Inventory\"\r\n            },\r\n        ]\r\n    return (\r\n        <>\r\n            <CustomBreadcrumbs list={breadCrumbList} />\r\n            <br />\r\n            <div className=\"mt-5\">\r\n                <h3>{selectedMode === 'EDIT' ? \"Edit Inventory\": \"Add Inventory\"}</h3>\r\n                <Formik\r\n                    initialValues={initialState}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        setSubmitting(true);\r\n                        submitApi(values, setSubmitting);\r\n                    }}\r\n                >\r\n                    {({\r\n                        values,\r\n                        touched,\r\n                        errors,\r\n                        handleSubmit,\r\n                        isSubmitting,\r\n                    }) => {\r\n                        return (\r\n                            <Form onSubmit={handleSubmit}>\r\n                                <FormContainer>\r\n                                    <div className=\"mt-6 dark:bg-gray-700 rounded \">\r\n                                        <div\r\n                                            className=\" p-5\"\r\n                                            style={{\r\n                                                backgroundColor: '#F5F5F5',\r\n                                            }}\r\n                                        >\r\n                                            <AdaptableCard\r\n                                                className=\"h-full\"\r\n                                                bodyClass=\"h-full\"\r\n                                                divider\r\n                                            >\r\n                                                <div className=\"md:grid grid-cols-2 gap-4 mx-4 \">\r\n                                                    <FormItem\r\n                                                        label=\"Warehouse\"\r\n                                                        invalid={\r\n                                                            errors.whWarehouse &&\r\n                                                            touched.whWarehouse\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.whWarehouse\r\n                                                        }\r\n                                                        disabled\r\n                                                    >\r\n                                                        <Field name=\"whWarehouse\" disabled>\r\n                                                            {({\r\n                                                                field,\r\n                                                                form,\r\n                                                            }) => (\r\n                                                                <>\r\n                                                                    <Select\r\n                                                                        placeholder=\"Select Warehouse\"\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={\r\n                                                                            form\r\n                                                                        }\r\n                                                                        isDisabled\r\n                                                                        options={\r\n                                                                            wareHouseList\r\n                                                                        }\r\n                                                                        value={wareHouseList?.filter(\r\n                                                                            (\r\n                                                                                wh\r\n                                                                            ) =>\r\n                                                                                wh.value ===\r\n                                                                                values.whWarehouse\r\n                                                                        )}\r\n                                                                        onChange={(\r\n                                                                            wh\r\n                                                                        ) =>\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                wh.value\r\n                                                                            )\r\n                                                                        }\r\n                                                                    />\r\n                                                                </>\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"Item\"\r\n                                                        invalid={\r\n                                                            errors.catItemsInfo &&\r\n                                                            touched.catItemsInfo\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.catItemsInfo\r\n                                                        }\r\n                                                    >\r\n                                                        <Field name=\"catItemsInfo\">\r\n                                                            {({\r\n                                                                field,\r\n                                                                form,\r\n                                                            }) => (\r\n                                                                <>\r\n                                                                    <Select\r\n                                                                        placeholder=\"Select Item\"\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={\r\n                                                                            form\r\n                                                                        }\r\n                                                                        options={\r\n                                                                            itemsList\r\n                                                                        }\r\n                                                                        value={itemsList?.filter(\r\n                                                                            (\r\n                                                                                wh\r\n                                                                            ) =>\r\n                                                                                wh.value ===\r\n                                                                                values.catItemsInfo\r\n                                                                        )}\r\n                                                                        onChange={(\r\n                                                                            wh\r\n                                                                        ) => {\r\n                                                                            dispatch(\r\n                                                                                getItemVariants(\r\n                                                                                    wh.value\r\n                                                                                )\r\n                                                                            )\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                wh.value\r\n                                                                            )\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </>\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"Item Variant\"\r\n                                                        invalid={\r\n                                                            errors.catItemVar &&\r\n                                                            touched.catItemVar\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.catItemVar\r\n                                                        }\r\n                                                    >\r\n                                                        <Field name=\"catItemVar\">\r\n                                                            {({\r\n                                                                field,\r\n                                                                form,\r\n                                                            }) => (\r\n                                                                <>\r\n                                                               \r\n                                                                    <Select\r\n                                                                        placeholder=\"Select Item Variant\"\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={\r\n                                                                            form\r\n                                                                        }\r\n                                                                        options={\r\n                                                                            itemVariants\r\n                                                                        }\r\n                                                                        value={itemVariants?.filter(\r\n                                                                            (\r\n                                                                                wh\r\n                                                                            ) =>\r\n                                                                                wh.value ===\r\n                                                                                values[\r\n                                                                                    field\r\n                                                                                        .name\r\n                                                                                ]\r\n                                                                        )}\r\n                                                                        onChange={(\r\n                                                                            wh\r\n                                                                        ) => {\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                wh.value\r\n                                                                            )\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </>\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"SKU Code\"\r\n                                                        invalid={\r\n                                                            errors.skuCode &&\r\n                                                            touched.skuCode\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.skuCode\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"skuCode\"\r\n                                                            placeholder=\"Enter SKU Code\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"Shelf Code\"\r\n                                                        invalid={\r\n                                                            errors.shelfCode &&\r\n                                                            touched.shelfCode\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.shelfCode\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"shelfCode\"\r\n                                                            placeholder=\"Enter Shelf Code\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"Shelf Area\"\r\n                                                        invalid={\r\n                                                            errors.shelfArea &&\r\n                                                            touched.shelfArea\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.shelfArea\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"shelfArea\"\r\n                                                            placeholder=\"Enter Shelf Area\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"Quantity\"\r\n                                                        invalid={\r\n                                                            errors.holdingQty &&\r\n                                                            touched.holdingQty\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.holdingQty\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"number\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"holdingQty\"\r\n                                                            placeholder=\"Enter Quantity\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                            </AdaptableCard>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        <div className=\"mt-6  bg-gray-50 dark:bg-gray-700 rounded \"></div>\r\n                                        <div className=\"mt-4 text-right\">\r\n                                            <>\r\n                                                <Link\r\n                                                    className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                                    to=\"/wareHouse-menu-item-view-2\"\r\n                                                >\r\n                                                    <Button\r\n                                                type={'button'}\r\n                                                className=\"mx-2\"\r\n                                                onClick={() =>\r\n                                                    console.log('cancel')\r\n                                                }\r\n                                                variant=\"solid\"\r\n                                                style={{\r\n                                                    backgroundColor: '#4D4D4D',\r\n                                                }}\r\n                                                    >\r\n                                                        Cancel\r\n                                                    </Button>\r\n                                                </Link>\r\n                                                <Button\r\n                                                    className=\"mx-2\"\r\n                                                    variant=\"solid\"\r\n                                                    type={'submit'}\r\n                                                    disabled={isSubmitting}\r\n                                                >\r\n                                                    Submit For Approval\r\n                                                </Button>\r\n                                            </>\r\n                                        </div>\r\n                                    </div>\r\n                                </FormContainer>\r\n                            </Form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddInventory\r\n"],"names":["validationSchema","Yup","whWarehouse","required","catItemsInfo","catItemVar","skuCode","shelfCode","shelfArea","holdingQty","integer","positive","injectReducer","reducer","location","useLocation","warehouseData","state","data","dispatch","useDispatch","navigate","useNavigate","wareHouseList","useSelector","wareHouse","whList","itemsList","itemList","itemVariants","fetchData","useCallback","getWareHouseList","getItems","useEffect","initialValues","id","mode","useState","selectedMode","rowForEdit","warehouseItem","ApiToUiConversionInventory","initialState","acc_mno_id","auth","user","cat_items_info","getItemVariants","submitApi","values","setSubmitting","submittedValues","accId","payload","reqAddPayload","UiToApiConversionInventory","apiCreateInventory","resp","status","toast","title","type","duration","placement","errorMsg","GetErrorMsg","reqEditPayload","apiUpdateInventory","breadCrumbList","name","link","wh_title","list","className","onSubmit","touched","errors","handleSubmit","isSubmitting","style","backgroundColor","bodyClass","divider","label","invalid","errorMessage","disabled","field","form","placeholder","isDisabled","options","value","filter","wh","onChange","setFieldValue","autoComplete","component","Input","to","onClick","console","log","variant"],"sourceRoot":""}