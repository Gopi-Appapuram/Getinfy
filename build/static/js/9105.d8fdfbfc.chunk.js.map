{"version":3,"file":"static/js/9105.d8fdfbfc.chunk.js","mappings":"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","sources":["views/billing/Settlements/components/Settlements/SettlementsTableSearch.js","views/billing/Settlements/components/Settlements/SettlementsFilters.js","views/billing/Settlements/components/Settlements/SettlementsTableTools.js","views/billing/Settlements/components/Settlements/SettlementsTable.js","views/billing/Settlements/components/PartnerSettlements/PartnerSettlementsTableSearch.js","views/billing/Settlements/components/PartnerSettlements/PartnerSettlementsFilters.js","views/billing/Settlements/components/PartnerSettlements/PartnerSettlementsTableTools.js","views/billing/Settlements/components/PartnerSettlements/PartnerSettlementsTable.js","views/billing/Settlements/components/CashBackSettlements/CashbackSettlementsTableSearch.js","views/billing/Settlements/components/CashBackSettlements/CashbackSettlementsFilters.js","views/billing/Settlements/components/CashBackSettlements/CashbackSettlementsTableTools.js","views/billing/Settlements/components/CashBackSettlements/CashbackSettlementsTable.js","views/billing/Settlements/components/TaxSettlements/TaxSettlementsTableSearch.js","views/billing/Settlements/components/TaxSettlements/TaxSettlementsFilters.js","views/billing/Settlements/components/TaxSettlements/TaxSettlementsTableTools.js","views/billing/Settlements/components/TaxSettlements/TaxSettlementsTable.js","views/billing/Settlements/components/SettlementsTabs.js","views/billing/Settlements/index.js"],"sourcesContent":["import React, { useRef } from 'react'\r\nimport { Input } from 'components/ui'\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\n\r\nconst SettlementsTableSearch = () => {\r\n    // const dispatch = useDispatch()\r\n\r\n    const searchInput = useRef()\r\n\r\n   \r\n    // // const onEdit = (e) => {\r\n    //     debounceFn(e.target.value)\r\n    // }\r\n\r\n    return (\r\n        <Input\r\n            ref={searchInput}\r\n            className=\"lg:w-52\"\r\n            size=\"sm\"\r\n            placeholder=\"Search\"\r\n            prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n            // onChange={onEdit}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SettlementsTableSearch\r\n","import React from 'react'\r\nimport { HiOutlineFilter} from 'react-icons/hi'\r\nimport {\r\n   \r\n    Button,\r\n  \r\n} from 'components/ui'\r\n\r\n\r\n\r\nconst SettlementsFilters = () => {\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                size=\"sm\"\r\n                className=\"block md:inline-block ltr:md:ml-2 rtl:md:mr-2 md:mb-0 mb-4\"\r\n                icon={<HiOutlineFilter />}\r\n                onClick={() => {}}\r\n            >\r\n                Filter\r\n            </Button>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default SettlementsFilters\r\n","import React from 'react'\r\nimport { HiDownload, HiPlusCircle } from 'react-icons/hi'\r\n import { Link } from 'react-router-dom'\r\nimport {\r\n    Button,\r\n   \r\n} from 'components/ui'\r\nimport SettlementsTableSearch from './SettlementsTableSearch'\r\nimport SettlementsFilters from './SettlementsFilters'\r\n\r\n\r\nconst SettlementsTableTools = () => {\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center\">\r\n            {/* <SettlementsTableSearch/>\r\n            <SettlementsFilters/> */}\r\n            <SettlementsTableSearch/>\r\n            <SettlementsFilters/>\r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n                target=\"_blank\"\r\n                download\r\n                \r\n            >\r\n                <Button block size=\"sm\" icon={<HiDownload />}>\r\n                    Export\r\n                </Button>\r\n            </Link>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SettlementsTableTools\r\n","import React, { useEffect, useCallback, useMemo, useRef, useState } from 'react'\r\nimport { Badge, Button, Dialog, Select, Tooltip, Input, DatePicker, TimeInput,Progress,Spinner } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye } from 'react-icons/hi'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\r\nimport { IoMdDownload, IoMdClose } from 'react-icons/io'\r\n\r\nimport { AiFillCopy } from 'react-icons/ai'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// import { getOrders, setTableData } from '../../store/dataSlice'\r\n// import {\r\n//     setSelectedRows,\r\n//     addRowItem,\r\n//     removeRowItem,\r\n//     setDeleteMode,\r\n//     setSelectedRow,\r\n// } from '../../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\n\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Active',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n    2: { label: 'Inactive', dotClass: 'bg-red-500', textClass: 'text-red-500' },\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst SettlementsTable = () => {\r\n\r\n    const tableRef = useRef(null)\r\n\r\n    const [providerEdit, setProviderEdit] = useState(false)\r\n\r\n    const [changeStatus, setChangeStatus] = useState()\r\n\r\n    const [exportValue, setExportValue] = useState(false)\r\n\r\n    const ActionColumn = ({ row }) => {\r\n\r\n\r\n        // const onDialogueClose = (e) => {\r\n        //     setIsOpen(false)\r\n        // }\r\n\r\n\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n\r\n\r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n\r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                    >\r\n                        <MdModeEdit onClick={() => setProviderEdit(true)} />\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                    //onClick={onView}\r\n                    >\r\n                        <IoMdDownload className='text-red-800' onClick = {() => setExportValue(true)}/>\r\n\r\n                    </span>\r\n                </Tooltip>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    // const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n    //     (state) => state.myaccountList.data.tableData\r\n    // )\r\n    // const loading = useSelector((state) => state?.myaccountList?.data?.loading)\r\n\r\n    // const data = useSelector((state) => state?.myaccountList?.data?.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getOrders())\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    // const tableData = useMemo(\r\n    //     () => ({ pageIndex, pageSize, sort, query, total }),\r\n    //     [pageIndex, pageSize, sort, query, total]\r\n    // )\r\n\r\n    const data = [\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"PID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"16 hrs\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"PID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"12 hrs\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"PID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"1 day\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"PID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"N/A\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"N/A\",\r\n            paymentDateAndTime: \"N/A\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"PID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"12 hrs\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"PID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"1 day\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n    ]\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Actions',\r\n                id: 'action',\r\n                cell: (props) => <ActionColumn row={props.row.original} />,\r\n            },\r\n            {\r\n                header: 'SETTLEMENT ID',\r\n                accessorKey: 'settlementId',\r\n                cell: (props) => {\r\n                    return (\r\n                        <div>\r\n                            <Link to=\"/billing-settlements-id\"><span className='text-blue-500 text-sm'>{props.row.original.settlementId}</span></Link>\r\n                        </div>\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                header: 'PROVIDER ID',\r\n                accessorKey: 'providerId',\r\n            },\r\n            {\r\n                header: 'NO.OF INVOICES',\r\n                accessorKey: 'numberOfInvoices',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'DURATION',\r\n                accessorKey: 'duration',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'PROCESSED DATE AND TIME',\r\n                accessorKey: 'processessDateAndTime',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'REFERENCE ID',\r\n                accessorKey: 'referenceId',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'PAYMENT DATE AND TIME',\r\n                accessorKey: 'paymentDateAndTime',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Status',\r\n                accessorKey: 'status',\r\n\r\n                cell: (props) => {\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n                            <Badge\r\n                                className={ItemStatusColor[0].dotClass}\r\n                            />\r\n                            <span\r\n                                className={`ml-2 rtl:mr-2 capitalize font-semibold ${ItemStatusColor[0].textClass}`}\r\n                            >\r\n                                {ItemStatusColor[0].label}\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                },\r\n            }\r\n        ],\r\n        []\r\n    )\r\n\r\n    // const onPaginationChange = (page) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageIndex = page\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSelectChange = (value) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageSize = Number(value)\r\n    //     newTableData.pageIndex = 1\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSort = (sort) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.sort = sort\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n\r\n    const statusOptions = [\r\n        {\r\n            label: \"Pending\",\r\n            value: \"pending\"\r\n        },\r\n        {\r\n            label: \"Success\",\r\n            value: \"success\"\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <DataTable\r\n                ref={tableRef}\r\n                columns={columns}\r\n                data={data}\r\n            // loading={loading}\r\n            // pagingData={tableData}\r\n            // onPaginationChange={onPaginationChange}\r\n            // onSelectChange={onSelectChange}\r\n            // onSort={onSort}\r\n            // onCheckBoxChange={onRowSelect}\r\n            // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n            // selectable\r\n            />\r\n            <Dialog\r\n                isOpen={providerEdit}\r\n                onClose={() =>setProviderEdit(false)}\r\n\r\n\r\n            >\r\n                <div>\r\n                    <h6>Change Status</h6>\r\n                    <hr className='text-gray mb-3 mt-3' />\r\n                    <label className='mb-2'>Update Status</label>\r\n                    <Select className='mt-2'\r\n                        // placeholder=\"Select Parent Account\"\r\n                        options={statusOptions}\r\n                        value={statusOptions.filter(e => e.value === changeStatus)}\r\n                        onChange={(e) => setChangeStatus(e.value)}\r\n                    />\r\n                </div>\r\n                {changeStatus === \"success\" &&\r\n                    <>\r\n                        <div className='mb-4 mt-4'>\r\n                            <label>Reference Id</label>\r\n                            <Input placeholder=\"Enter Reference Id\" className='mt-2' />\r\n                        </div>\r\n                        <div className='flex'>\r\n                            <div>\r\n                                <label>Processed Date</label>\r\n                                <DatePicker className='mt-2' />\r\n                            </div>\r\n                            <div className='w-56 ml-3'>\r\n                                <label>Processed Time</label>\r\n                                <TimeInput className='mt-2' />\r\n                            </div>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <div>\r\n                                <label>Payment Date</label>\r\n                                <DatePicker className='mt-2' />\r\n                            </div>\r\n                            <div className='w-56 ml-3'>\r\n                                <label>Payment Time</label>\r\n                                <TimeInput className='mt-2' />\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </>\r\n                }\r\n                <hr className='1px solid gray mt-6 mb-5'/>\r\n                <div className='text-end mt-3'>\r\n                    <Button className='mr-3' onClick = {() =>setProviderEdit(false)}>Cancel</Button>\r\n                    <Button variant='solid' disabled = {changeStatus===\"success\" ? false: true}>Update</Button>\r\n\r\n                </div>\r\n\r\n\r\n            </Dialog>\r\n            <Dialog isOpen={exportValue} onClose={() =>setExportValue(false)}>\r\n            <div>\r\n                    <h6>Export Settlements</h6>\r\n                    <hr className='text-gray mb-3 mt-3' />\r\n                    <p className='mb-4'>Are you sure you want to Export this All Settlements ?</p>\r\n                    <div className='text-end'>\r\n                        <Button className='mr-3' onClick={() =>setExportValue(false)}>No</Button>\r\n                        <Button variant=\"solid\">Yes</Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n          \r\n           \r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default SettlementsTable\r\n\r\n","import React, { useRef } from 'react'\r\nimport { Input } from 'components/ui'\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\n\r\nconst PartnerSettlementsTableSearch = () => {\r\n    // const dispatch = useDispatch()\r\n\r\n    const searchInput = useRef()\r\n\r\n   \r\n    // // const onEdit = (e) => {\r\n    //     debounceFn(e.target.value)\r\n    // }\r\n\r\n    return (\r\n        <Input\r\n            ref={searchInput}\r\n            className=\"lg:w-52\"\r\n            size=\"sm\"\r\n            placeholder=\"Search\"\r\n            prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n            // onChange={onEdit}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PartnerSettlementsTableSearch\r\n","import React from 'react'\r\nimport { HiOutlineFilter} from 'react-icons/hi'\r\nimport {\r\n   \r\n    Button,\r\n  \r\n} from 'components/ui'\r\n\r\n\r\n\r\nconst PartnerSettlementsFilters = () => {\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                size=\"sm\"\r\n                className=\"block md:inline-block ltr:md:ml-2 rtl:md:mr-2 md:mb-0 mb-4\"\r\n                icon={<HiOutlineFilter />}\r\n                onClick={() => {}}\r\n            >\r\n                Filter\r\n            </Button>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default PartnerSettlementsFilters\r\n","import React from 'react'\r\nimport { HiDownload, HiPlusCircle } from 'react-icons/hi'\r\n import { Link } from 'react-router-dom'\r\nimport {\r\n    Button,\r\n   \r\n} from 'components/ui'\r\nimport PartnerSettlementsTableSearch from './PartnerSettlementsTableSearch'\r\nimport PartnerSettlementsFilters from './PartnerSettlementsFilters'\r\n\r\n\r\nconst PartnerSettlementsTableTools = () => {\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center\">\r\n            <PartnerSettlementsTableSearch/>\r\n            <PartnerSettlementsFilters/>\r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n                target=\"_blank\"\r\n                download\r\n                \r\n            >\r\n                <Button block size=\"sm\" icon={<HiDownload />}>\r\n                    Export\r\n                </Button>\r\n            </Link>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PartnerSettlementsTableTools\r\n","import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react'\r\nimport { Badge, Tooltip, Dialog, Button, Select, Input, DatePicker, TimeInput } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye } from 'react-icons/hi'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { IoMdDownload } from 'react-icons/io'\r\n\r\nimport { AiFillCopy } from 'react-icons/ai'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// import { getOrders, setTableData } from '../../store/dataSlice'\r\n// import {\r\n//     setSelectedRows,\r\n//     addRowItem,\r\n//     removeRowItem,\r\n//     setDeleteMode,\r\n//     setSelectedRow,\r\n// } from '../../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\n\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Active',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n    2: { label: 'Inactive', dotClass: 'bg-red-500', textClass: 'text-red-500' },\r\n}\r\n\r\n\r\n\r\n\r\nconst PartnerSettlementsTable = () => {\r\n\r\n    const tableRef = useRef(null)\r\n\r\n    const [providerEdit, setProviderEdit] = useState(false)\r\n\r\n    const [changeStatus, setChangeStatus] = useState()\r\n\r\n    const [exportValue, setExportValue] = useState(false)\r\n\r\n\r\n\r\n    const ActionColumn = ({ row }) => {\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n\r\n\r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n\r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                    >\r\n                        <MdModeEdit onClick={() => setProviderEdit(true)} />\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                    //onClick={onView}\r\n                    >\r\n                        <IoMdDownload className='text-red-800' onClick={() => setExportValue(true)} />\r\n\r\n                    </span>\r\n                </Tooltip>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    // const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n    //     (state) => state.myaccountList.data.tableData\r\n    // )\r\n    // const loading = useSelector((state) => state?.myaccountList?.data?.loading)\r\n\r\n    // const data = useSelector((state) => state?.myaccountList?.data?.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getOrders())\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    // const tableData = useMemo(\r\n    //     () => ({ pageIndex, pageSize, sort, query, total }),\r\n    //     [pageIndex, pageSize, sort, query, total]\r\n    // )\r\n\r\n    const data = [\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"PID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"16 hrs\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"PID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"12 hrs\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"PID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"1 day\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"PID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"N/A\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"N/A\",\r\n            paymentDateAndTime: \"N/A\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"PID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"12 hrs\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"PID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"1 day\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n    ]\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Actions',\r\n                id: 'action',\r\n                cell: (props) => <ActionColumn row={props.row.original} />,\r\n            },\r\n            {\r\n                header: 'SETTLEMENT ID',\r\n                accessorKey: 'settlementId',\r\n                cell: (props) => {\r\n                    return (\r\n                        <div>\r\n                            <Link to=\"/billing-settlements-id\"><span className='text-blue-500 text-sm'>{props.row.original.settlementId}</span></Link>\r\n                        </div>\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                header: 'PARTNER ID',\r\n                accessorKey: 'providerId',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'NO.OF INVOICES',\r\n                accessorKey: 'numberOfInvoices',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'DURATION',\r\n                accessorKey: 'duration',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'PROCESSED DATE AND TIME',\r\n                accessorKey: 'processessDateAndTime',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'REFERENCE ID',\r\n                accessorKey: 'referenceId',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'PAYMENT DATE AND TIME',\r\n                accessorKey: 'paymentDateAndTime',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Status',\r\n                accessorKey: 'status',\r\n\r\n                cell: (props) => {\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n                            <Badge\r\n                                className={ItemStatusColor[0].dotClass}\r\n                            />\r\n                            <span\r\n                                className={`ml-2 rtl:mr-2 capitalize font-semibold ${ItemStatusColor[0].textClass}`}\r\n                            >\r\n                                {ItemStatusColor[0].label}\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                },\r\n            }\r\n        ],\r\n        []\r\n    )\r\n\r\n    // const onPaginationChange = (page) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageIndex = page\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSelectChange = (value) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageSize = Number(value)\r\n    //     newTableData.pageIndex = 1\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSort = (sort) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.sort = sort\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n\r\n\r\n    const statusOptions = [\r\n        {\r\n            label: \"Pending\",\r\n            value: \"pending\"\r\n        },\r\n        {\r\n            label: \"Success\",\r\n            value: \"success\"\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <DataTable\r\n                ref={tableRef}\r\n                columns={columns}\r\n                data={data}\r\n            // loading={loading}\r\n            // pagingData={tableData}\r\n            // onPaginationChange={onPaginationChange}\r\n            // onSelectChange={onSelectChange}\r\n            // onSort={onSort}\r\n            // onCheckBoxChange={onRowSelect}\r\n            // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n            // selectable\r\n            />\r\n            <Dialog\r\n                isOpen={providerEdit}\r\n                onClose = {() =>setProviderEdit(false)}\r\n\r\n            >\r\n                <div className='mb-4'>\r\n                    <h6>Change Status</h6>\r\n                    <hr className='text-gray mb-3 mt-3' />\r\n                    <label className='mb-2'>Update Status</label>\r\n                    <Select className='mt-2'\r\n                        // placeholder=\"Select Parent Account\"\r\n                        options={statusOptions}\r\n                        value={statusOptions.filter(e => e.value === changeStatus)}\r\n                        onChange={(e) => setChangeStatus(e.value)}\r\n                    />\r\n\r\n                </div>\r\n                {changeStatus === \"success\" &&\r\n                    <>\r\n                        <div className='mb-4'>\r\n                            <label>Reference Id</label>\r\n                            <Input placeholder=\"Enter Reference Id\" className='mt-2' />\r\n                        </div>\r\n                        <div className='flex'>\r\n                            <div>\r\n                                <label>Processed Date</label>\r\n                                <DatePicker className='mt-2' />\r\n                            </div>\r\n                            <div className='w-56 ml-3'>\r\n                                <label>Processed Time</label>\r\n                                <TimeInput className='mt-2' />\r\n                            </div>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <div>\r\n                                <label>Payment Date</label>\r\n                                <DatePicker className='mt-2' />\r\n                            </div>\r\n                            <div className='w-56 ml-3'>\r\n                                <label>Payment Time</label>\r\n                                <TimeInput className='mt-2' />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </>}\r\n                <hr className='1px solid gray mt-6 mb-5' />\r\n                <div className='text-end mt-5'>\r\n                    <Button className='mr-3' onClick = {() =>setProviderEdit(false)}>Cancel</Button>\r\n                    <Button variant='solid' disabled = {changeStatus===\"success\" ? false: true}>Update</Button>\r\n                </div>\r\n\r\n            </Dialog>\r\n            <Dialog isOpen={exportValue} onClose={() =>setExportValue(false)}>\r\n                <div>\r\n                    <h6>Export Settlements</h6>\r\n                    <hr className='text-gray mb-3 mt-3' />\r\n                    <p className='mb-4'>Are you sure you want to Export this All Settlements ?</p>\r\n                    <div className='text-end'>\r\n                        <Button className='mr-3' onClick={() =>setExportValue(false)}>No</Button>\r\n                        <Button variant=\"solid\">Yes</Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default PartnerSettlementsTable\r\n\r\n","import React, { useRef } from 'react'\r\nimport { Input } from 'components/ui'\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\n\r\nconst CashbackSettlementsTableSearch = () => {\r\n    // const dispatch = useDispatch()\r\n\r\n    const searchInput = useRef()\r\n\r\n   \r\n    // // const onEdit = (e) => {\r\n    //     debounceFn(e.target.value)\r\n    // }\r\n\r\n    return (\r\n        <Input\r\n            ref={searchInput}\r\n            className=\"lg:w-52\"\r\n            size=\"sm\"\r\n            placeholder=\"Search\"\r\n            prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n            // onChange={onEdit}\r\n        />\r\n    )\r\n}\r\n\r\nexport default CashbackSettlementsTableSearch\r\n","import React from 'react'\r\nimport { HiOutlineFilter} from 'react-icons/hi'\r\nimport {\r\n   \r\n    Button,\r\n  \r\n} from 'components/ui'\r\n\r\n\r\n\r\nconst CashbackSettlementsFilters = () => {\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                size=\"sm\"\r\n                className=\"block md:inline-block ltr:md:ml-2 rtl:md:mr-2 md:mb-0 mb-4\"\r\n                icon={<HiOutlineFilter />}\r\n                onClick={() => {}}\r\n            >\r\n                Filter\r\n            </Button>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default CashbackSettlementsFilters\r\n","import React from 'react'\r\nimport { HiDownload, HiPlusCircle } from 'react-icons/hi'\r\n import { Link } from 'react-router-dom'\r\nimport {\r\n    Button,\r\n   \r\n} from 'components/ui'\r\n\r\nimport CashbackSettlementsTableSearch from './CashbackSettlementsTableSearch'\r\nimport CashbackSettlementsFilters from './CashbackSettlementsFilters'\r\n\r\n\r\nconst CashbackSettlementsTableTools = () => {\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center\">\r\n         <CashbackSettlementsTableSearch/>\r\n         <CashbackSettlementsFilters/>\r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n                target=\"_blank\"\r\n                download\r\n                \r\n            >\r\n                <Button block size=\"sm\" icon={<HiDownload />}>\r\n                    Export\r\n                </Button>\r\n            </Link>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CashbackSettlementsTableTools\r\n","import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react'\r\nimport { Badge, Tooltip, Dialog, Button, Select, Input, DatePicker, TimeInput } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye } from 'react-icons/hi'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\r\nimport { IoMdDownload } from 'react-icons/io'\r\n\r\nimport { AiFillCopy } from 'react-icons/ai'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// import { getOrders, setTableData } from '../../store/dataSlice'\r\n// import {\r\n//     setSelectedRows,\r\n//     addRowItem,\r\n//     removeRowItem,\r\n//     setDeleteMode,\r\n//     setSelectedRow,\r\n// } from '../../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\n\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Active',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n    2: { label: 'Inactive', dotClass: 'bg-red-500', textClass: 'text-red-500' },\r\n}\r\n\r\n\r\n\r\n\r\nconst CashbackSettlementsTable = () => {\r\n\r\n    const tableRef = useRef(null)\r\n\r\n    const [providerEdit, setProviderEdit] = useState(false)\r\n\r\n    const [changeStatus, setChangeStatus] = useState()\r\n\r\n    const [exportValue, setExportValue] = useState(false)\r\n\r\n\r\n\r\n    const ActionColumn = ({ row }) => {\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n\r\n\r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n\r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                    >\r\n                        <MdModeEdit onClick={() => setProviderEdit(true)} />\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                    //onClick={onView}\r\n                    >\r\n                        <IoMdDownload className='text-red-800' onClick={() =>setExportValue(true)}/>\r\n\r\n                    </span>\r\n                </Tooltip>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    // const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n    //     (state) => state.myaccountList.data.tableData\r\n    // )\r\n    // const loading = useSelector((state) => state?.myaccountList?.data?.loading)\r\n\r\n    // const data = useSelector((state) => state?.myaccountList?.data?.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getOrders())\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    // const tableData = useMemo(\r\n    //     () => ({ pageIndex, pageSize, sort, query, total }),\r\n    //     [pageIndex, pageSize, sort, query, total]\r\n    // )\r\n\r\n    const data = [\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"ID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"16 hrs\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"ID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"12 hrs\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"ID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"1 day\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"ID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"N/A\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"N/A\",\r\n            paymentDateAndTime: \"N/A\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"ID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"12 hrs\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId: \"SID963451655\",\r\n            providerId: \"ID963451655\",\r\n            numberOfInvoices: \"01\",\r\n            duration: \"1 day\",\r\n            processessDateAndTime: \"15 May 2020 10pm\",\r\n            referenceId: \"IHV93N674\",\r\n            paymentDateAndTime: \"15 May 2020 10pm\",\r\n\r\n        },\r\n    ]\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Actions',\r\n                id: 'action',\r\n                cell: (props) => <ActionColumn row={props.row.original} />,\r\n            },\r\n            {\r\n                header: 'SETTLEMENT ID',\r\n                accessorKey: 'settlementId',\r\n                cell: (props) => {\r\n                    return (\r\n                        <div>\r\n                            <Link to=\"/billing-settlements-id\"><span className='text-blue-500 text-sm'>{props.row.original.settlementId}</span></Link>\r\n                        </div>\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                header: 'CUSTOMER ID',\r\n                accessorKey: 'providerId',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'NO.OF INVOICES',\r\n                accessorKey: 'numberOfInvoices',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'DURATION',\r\n                accessorKey: 'duration',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'PROCESSED DATE AND TIME',\r\n                accessorKey: 'processessDateAndTime',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'REFERENCE ID',\r\n                accessorKey: 'referenceId',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'PAYMENT DATE AND TIME',\r\n                accessorKey: 'paymentDateAndTime',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Status',\r\n                accessorKey: 'status',\r\n\r\n                cell: (props) => {\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n                            <Badge\r\n                                className={ItemStatusColor[0].dotClass}\r\n                            />\r\n                            <span\r\n                                className={`ml-2 rtl:mr-2 capitalize font-semibold ${ItemStatusColor[0].textClass}`}\r\n                            >\r\n                                {ItemStatusColor[0].label}\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                },\r\n            }\r\n        ],\r\n        []\r\n    )\r\n\r\n    // const onPaginationChange = (page) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageIndex = page\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSelectChange = (value) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageSize = Number(value)\r\n    //     newTableData.pageIndex = 1\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSort = (sort) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.sort = sort\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n\r\n    const statusOptions = [\r\n        {\r\n            label: \"Pending\",\r\n            value: \"pending\"\r\n        },\r\n        {\r\n            label: \"Success\",\r\n            value: \"success\"\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <DataTable\r\n                ref={tableRef}\r\n                columns={columns}\r\n                data={data}\r\n            // loading={loading}\r\n            // pagingData={tableData}\r\n            // onPaginationChange={onPaginationChange}\r\n            // onSelectChange={onSelectChange}\r\n            // onSort={onSort}\r\n            // onCheckBoxChange={onRowSelect}\r\n            // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n            // selectable\r\n            />\r\n\r\n            <Dialog\r\n                isOpen={providerEdit}\r\n                onClose = {() =>setProviderEdit(false)}\r\n                \r\n\r\n            >\r\n                <div className='mb-4'>\r\n                    <h6>Change Status</h6>\r\n                    <hr className='text-gray mb-3 mt-3' />\r\n                    <label className='mb-2'>Update Status</label>\r\n                    <Select className='mt-2'\r\n                        // placeholder=\"Select Parent Account\"\r\n                        options={statusOptions}\r\n                        value={statusOptions.filter(e => e.value === changeStatus)}\r\n                        onChange={(e) => setChangeStatus(e.value)}\r\n                    />\r\n\r\n                </div>\r\n                {changeStatus === \"success\" &&\r\n                    <>\r\n                        <div className='mb-4 mt-4'>\r\n                            <label>Reference Id</label>\r\n                            <Input placeholder=\"Enter Reference Id\" className='mt-2' />\r\n                        </div>\r\n                        <div className='flex'>\r\n                            <div>\r\n                                <label>Processed Date</label>\r\n                                <DatePicker className='mt-2' />\r\n                            </div>\r\n                            <div className='w-56 ml-3'>\r\n                                <label>Processed Time</label>\r\n                                <TimeInput className='mt-2' />\r\n                            </div>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <div>\r\n                                <label>Payment Date</label>\r\n                                <DatePicker className='mt-2' />\r\n                            </div>\r\n                            <div className='w-56 ml-3'>\r\n                                <label>Payment Time</label>\r\n                                <TimeInput className='mt-2' />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </>}\r\n                    <hr  className='1px solid gray mt-6 mb-5'/>\r\n                <div className='text-end mt-3'>\r\n                    <Button className='mr-3' onClick = {() =>setProviderEdit(false)}>Cancel</Button>\r\n                    <Button  variant='solid' disabled = {changeStatus===\"success\" ? false: true}>Update</Button>\r\n                </div>\r\n            </Dialog>\r\n            <Dialog\r\n             isOpen={exportValue}\r\n             onClose={() =>setExportValue(false)}\r\n             >\r\n            <div>\r\n                    <h6>Export Settlements</h6>\r\n                    <hr className='text-gray mb-3 mt-3' />\r\n                    <p className='mb-4'>Are you sure you want to Export this All Settlements ?</p>\r\n                    <div className='text-end'>\r\n                        <Button className='mr-3' onClick={() =>setExportValue(false)}>No</Button>\r\n                        <Button variant=\"solid\">Yes</Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CashbackSettlementsTable\r\n\r\n","import React, { useRef } from 'react'\r\nimport { Input } from 'components/ui'\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\n\r\nconst TaxSettlementsTableSearch = () => {\r\n    // const dispatch = useDispatch()\r\n\r\n    const searchInput = useRef()\r\n\r\n   \r\n    // // const onEdit = (e) => {\r\n    //     debounceFn(e.target.value)\r\n    // }\r\n\r\n    return (\r\n        <Input\r\n            ref={searchInput}\r\n            className=\"lg:w-52\"\r\n            size=\"sm\"\r\n            placeholder=\"Search\"\r\n            prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n            // onChange={onEdit}\r\n        />\r\n    )\r\n}\r\n\r\nexport default TaxSettlementsTableSearch\r\n","import React from 'react'\r\nimport { HiOutlineFilter} from 'react-icons/hi'\r\nimport {\r\n   \r\n    Button,\r\n  \r\n} from 'components/ui'\r\n\r\n\r\n\r\nconst TaxSettlementsFilters = () => {\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                size=\"sm\"\r\n                className=\"block md:inline-block ltr:md:ml-2 rtl:md:mr-2 md:mb-0 mb-4\"\r\n                icon={<HiOutlineFilter />}\r\n                onClick={() => {}}\r\n            >\r\n                Filter\r\n            </Button>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaxSettlementsFilters\r\n","import React from 'react'\r\nimport { HiDownload, HiPlusCircle } from 'react-icons/hi'\r\n import { Link } from 'react-router-dom'\r\nimport {\r\n    Button,\r\n   \r\n} from 'components/ui'\r\n\r\nimport TaxSettlementsTableSearch from './TaxSettlementsTableSearch'\r\nimport TaxSettlementsFilters from './TaxSettlementsFilters'\r\n\r\n\r\nconst TaxSettlementsTableTools = () => {\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center\">\r\n        <TaxSettlementsTableSearch/>\r\n        <TaxSettlementsFilters/>\r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n                target=\"_blank\"\r\n                download\r\n                \r\n            >\r\n                <Button block size=\"sm\" icon={<HiDownload />}>\r\n                    Export\r\n                </Button>\r\n            </Link>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaxSettlementsTableTools\r\n","import React, {useState, useEffect, useCallback, useMemo, useRef } from 'react'\r\nimport { Badge, Tooltip, Dialog, Button } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye } from 'react-icons/hi'\r\nimport {MdModeEdit} from 'react-icons/md'\r\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\r\nimport {IoMdDownload} from 'react-icons/io'\r\n\r\nimport {AiFillCopy} from 'react-icons/ai'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// import { getOrders, setTableData } from '../../store/dataSlice'\r\n// import {\r\n//     setSelectedRows,\r\n//     addRowItem,\r\n//     removeRowItem,\r\n//     setDeleteMode,\r\n//     setSelectedRow,\r\n// } from '../../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\n\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Active',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n    2: { label: 'Inactive', dotClass: 'bg-red-500', textClass: 'text-red-500' },\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst TaxSettlementsTable = () => {\r\n\r\n     const tableRef = useRef(null)\r\n\r\n     const [exportValue, setExportValue] = useState(false)\r\n\r\n\r\n     const ActionColumn = ({ row }) => {\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n    \r\n    \r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n    \r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                    >\r\n                        <MdModeEdit />\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title=\"Edit\">\r\n                <span\r\n                    className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                    //onClick={onView}\r\n                >\r\n                   <IoMdDownload className='text-red-800' onClick={() =>setExportValue(true)}/>\r\n                   \r\n                </span>\r\n            </Tooltip>\r\n    \r\n            </div>\r\n        )\r\n    }\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    // const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n    //     (state) => state.myaccountList.data.tableData\r\n    // )\r\n    // const loading = useSelector((state) => state?.myaccountList?.data?.loading)\r\n\r\n    // const data = useSelector((state) => state?.myaccountList?.data?.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getOrders())\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    // const tableData = useMemo(\r\n    //     () => ({ pageIndex, pageSize, sort, query, total }),\r\n    //     [pageIndex, pageSize, sort, query, total]\r\n    // )\r\n\r\n    const data = [\r\n        {\r\n            settlementId:\"SID963451655\",\r\n            numberOfInvoices:\"01\",\r\n            duration:\"16 hrs\",\r\n            processessDateAndTime:\"15 May 2020 10pm\",\r\n            referenceId:\"IHV93N674\",\r\n            paymentDateAndTime:\"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId:\"SID963451655\",\r\n            numberOfInvoices:\"01\",\r\n            duration:\"N/A\",\r\n            processessDateAndTime:\"15 May 2020 10pm\",\r\n            referenceId:\"N/A\",\r\n            paymentDateAndTime:\"N/A\",\r\n\r\n        },\r\n        {\r\n            settlementId:\"SID963451655\",\r\n            numberOfInvoices:\"01\",\r\n            duration:\"16 hrs\",\r\n            processessDateAndTime:\"15 May 2020 10pm\",\r\n            referenceId:\"IHV93N674\",\r\n            paymentDateAndTime:\"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId:\"SID963451655\",\r\n            numberOfInvoices:\"01\",\r\n            duration:\"16 hrs\",\r\n            processessDateAndTime:\"15 May 2020 10pm\",\r\n            referenceId:\"IHV93N674\",\r\n            paymentDateAndTime:\"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId:\"SID963451655\",\r\n            numberOfInvoices:\"01\",\r\n            duration:\"16 hrs\",\r\n            processessDateAndTime:\"15 May 2020 10pm\",\r\n            referenceId:\"IHV93N674\",\r\n            paymentDateAndTime:\"15 May 2020 10pm\",\r\n\r\n        },\r\n        {\r\n            settlementId:\"SID963451655\",\r\n            numberOfInvoices:\"01\",\r\n            duration:\"16 hrs\",\r\n            processessDateAndTime:\"15 May 2020 10pm\",\r\n            referenceId:\"IHV93N674\",\r\n            paymentDateAndTime:\"15 May 2020 10pm\",\r\n\r\n        },  \r\n    ]\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Actions',\r\n                id: 'action',\r\n                cell: (props) => <ActionColumn row={props.row.original} />,\r\n            },\r\n            {\r\n                header: 'SETTLEMENT ID',\r\n                accessorKey: 'settlementId',\r\n                cell: (props) => {\r\n                    return(\r\n                        <div>\r\n                            <Link to=\"/billing-settlements-id\"><span className='text-blue-500 text-sm'>{props.row.original.settlementId}</span></Link> \r\n                        </div>\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                header: 'NO.OF INVOICES',\r\n                accessorKey: 'numberOfInvoices',\r\n                \r\n               \r\n            },\r\n            {\r\n                header: 'DURATION',\r\n                accessorKey: 'duration',\r\n                \r\n               \r\n            },\r\n            {\r\n                header: 'PROCESSED DATE AND TIME',\r\n                accessorKey: 'processessDateAndTime',\r\n                \r\n               \r\n            },\r\n            {\r\n                header: 'REFERENCE ID',\r\n                accessorKey: 'referenceId',\r\n                \r\n               \r\n            },\r\n            {\r\n                header: 'PAYMENT DATE AND TIME',\r\n                accessorKey: 'paymentDateAndTime',\r\n                \r\n               \r\n            },\r\n            {\r\n                header: 'Status',\r\n                accessorKey: 'status',\r\n               \r\n                cell: (props) => {\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n                            <Badge\r\n                                className={ItemStatusColor[0].dotClass}\r\n                            />\r\n                            <span\r\n                                className={`ml-2 rtl:mr-2 capitalize font-semibold ${ItemStatusColor[0].textClass}`}\r\n                            >\r\n                                {ItemStatusColor[0].label}\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                },\r\n            }\r\n        ],\r\n        []\r\n    )\r\n\r\n    // const onPaginationChange = (page) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageIndex = page\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSelectChange = (value) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageSize = Number(value)\r\n    //     newTableData.pageIndex = 1\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSort = (sort) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.sort = sort\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n\r\n    return (\r\n        <>\r\n        <DataTable\r\n            ref={tableRef}\r\n            columns={columns}\r\n            data={data}\r\n            // loading={loading}\r\n            // pagingData={tableData}\r\n            // onPaginationChange={onPaginationChange}\r\n            // onSelectChange={onSelectChange}\r\n            // onSort={onSort}\r\n            // onCheckBoxChange={onRowSelect}\r\n            // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n            // selectable\r\n        />\r\n        <Dialog isOpen={exportValue} onClose={() =>setExportValue(false)}>\r\n                <div>\r\n                    <h6>Export Settlements</h6>\r\n                    <hr className='text-gray mb-3 mt-3' />\r\n                    <p className='mb-4'>Are you sure you want to Export this All Settlements ?</p>\r\n                    <div className='text-end'>\r\n                        <Button className='mr-3' onClick={() =>setExportValue(false)}>No</Button>\r\n                        <Button variant=\"solid\">Yes</Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default TaxSettlementsTable\r\n\r\n","import React from 'react'\r\nimport { Tabs } from 'components/ui'\r\nimport SettlementsTableTools from './Settlements/SettlementsTableTools'\r\nimport SettlementsTable from './Settlements/SettlementsTable'\r\nimport PartnerSettlementsTableTools from './PartnerSettlements/PartnerSettlementsTableTools'\r\nimport PartnerSettlementsTable from './PartnerSettlements/PartnerSettlementsTable'\r\nimport CashbackSettlementsTableTools from './CashBackSettlements/CashbackSettlementsTableTools'\r\nimport CashbackSettlementsTable from './CashBackSettlements/CashbackSettlementsTable'\r\nimport TaxSettlementsTableTools from './TaxSettlements/TaxSettlementsTableTools'\r\nimport TaxSettlementsTable from './TaxSettlements/TaxSettlementsTable'\r\n\r\n\r\n\r\nconst { TabNav, TabList, TabContent } = Tabs\r\n\r\nconst SettlementsTab = () => {\r\n    return (\r\n        <div>\r\n            <Tabs defaultValue=\"providerSettlements\">\r\n                <TabList>\r\n                    <TabNav value=\"providerSettlements\">Provider Settlements</TabNav>\r\n                    <TabNav value=\"partnerSettlements\">Partner Settlemets</TabNav>\r\n                    <TabNav value=\"cashbackSettllements\">Cashback Settlements</TabNav>\r\n                    <TabNav value=\"taxSettlements\">Tax Settlements</TabNav>\r\n                </TabList>\r\n                <div>\r\n                    <TabContent value=\"providerSettlements\">\r\n                        <div className=\"lg:flex items-center justify-between mt-6 mb-6\">\r\n                            <h3 className=\"mb-4 lg:mb-0\">Settlements</h3>\r\n                            <SettlementsTableTools/>\r\n                        </div>\r\n                        <SettlementsTable/>\r\n                    </TabContent>\r\n                </div>\r\n                <div>\r\n                    <TabContent value=\"partnerSettlements\">\r\n                        <div className=\"lg:flex items-center justify-between mt-6 mb-6\">\r\n                            <h3 className=\"mb-4 lg:mb-0\">Settlements</h3>\r\n                            <PartnerSettlementsTableTools/>\r\n                        </div>\r\n                        <PartnerSettlementsTable/>\r\n                    </TabContent>\r\n                </div>\r\n                <div>\r\n                    <TabContent value=\"cashbackSettllements\">\r\n                        <div className=\"lg:flex items-center justify-between mt-6 mb-6\">\r\n                            <h3 className=\"mb-4 lg:mb-0\">Settlements</h3>\r\n                            <CashbackSettlementsTableTools/>\r\n                        </div>\r\n                        <CashbackSettlementsTable/>\r\n                    </TabContent>\r\n                </div>\r\n                <div>\r\n                    <TabContent value=\"taxSettlements\">\r\n                        <div className=\"lg:flex items-center justify-between mt-6 mb-6\">\r\n                            <h3 className=\"mb-4 lg:mb-0\">Settlements</h3>\r\n                            <TaxSettlementsTableTools/>\r\n                        </div>\r\n                       <TaxSettlementsTable/>\r\n                    </TabContent>\r\n                </div>\r\n            </Tabs>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SettlementsTab\r\n\r\n","import React from 'react'\r\nimport SettlementsTabs from './components/SettlementsTabs'\r\n\r\nfunction Settlements() {\r\n  return (\r\n    <>\r\n      <div>Billing/Settlements</div>\r\n      <div className='mt-3'>\r\n        <SettlementsTabs />\r\n        \r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Settlements"],"names":["searchInput","useRef","ref","className","size","placeholder","prefix","icon","onClick","target","download","block","ItemStatusColor","label","dotClass","textClass","tableRef","useState","providerEdit","setProviderEdit","changeStatus","setChangeStatus","exportValue","setExportValue","ActionColumn","row","textTheme","useThemeClass","navigate","useNavigate","useCallback","id","title","columns","useMemo","header","cell","props","original","accessorKey","to","settlementId","statusOptions","value","data","providerId","numberOfInvoices","duration","processessDateAndTime","referenceId","paymentDateAndTime","isOpen","onClose","options","filter","e","onChange","variant","disabled","TabNav","Tabs","TabList","TabContent","defaultValue","SettlementsTabs"],"sourceRoot":""}