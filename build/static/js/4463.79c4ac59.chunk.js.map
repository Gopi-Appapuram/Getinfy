{"version":3,"file":"static/js/4463.79c4ac59.chunk.js","mappings":"4IACA,EAA6BA,EAAQ,OAA7BC,EAAQ,EAARA,SAAUC,EAAM,EAANA,OACZC,EAAgB,SAACC,GAAW,IAAD,EACvBC,EAAYH,IACVI,EAA8BF,EAA9BE,aAAcC,EAAgBH,EAAhBG,OAAQC,EAAQJ,EAARI,IACtBC,EAAyBD,EAAzBC,MAAOC,EAAkBF,EAAlBE,GAAIC,EAAcH,EAAdG,UAEnB,OACI,iBAAKC,UAAU,oBAAmB,WAC9B,gBAAKA,UAAU,sBAAqB,UAChC,iBACIA,UAAS,kCACLL,IAAWG,EAAK,SAAW,IAE/BG,QAAS,kBAAMP,EAAaI,EAAG,EAAC,WAEhC,eAAIE,UAAU,qBAAoB,SAAEH,KACpC,SAAC,MAAa,UAGtB,gBACIK,IAAKT,EACLO,UAAS,sBAAiBL,IAAWG,EAAK,OAAS,IACnDK,MACIR,IAAWG,EACL,CAAEM,OAAiB,OAATX,QAAS,IAATA,GAAkB,QAAT,EAATA,EAAWY,eAAO,WAAT,EAAT,EAAoBC,cAC9B,CAAEF,OAAQ,OACnB,UAED,gBAAKJ,UAAU,oBAAmB,UAC9B,cAAGA,UAAU,OAAM,SAAED,UAKzC,EA0CA,IAxCkB,SAACP,GAAW,IAAD,EACzB,EAA4BH,EAAS,MAAK,eAAnCM,EAAM,KAAEY,EAAS,KAElBb,EAAe,SAACc,GAEdD,EADAZ,IAAWa,EACD,KAEAA,EAElB,EAEA,OAAoB,KAAZ,OAALhB,QAAK,IAALA,OAAK,EAALA,EAAOiB,QACE,yBAGR,+BACI,gBAAKT,UAAU,4BAA2B,UACtC,gBAAKA,UAAU,6BAA4B,UACvC,gBAAKA,UAAU,gBAAe,UAC1B,gBAAKA,UAAU,OAAM,UACjB,gBAAKA,UAAU,YAAW,SAChB,OAALR,QAAK,IAALA,GAAY,QAAP,EAALA,EAAOiB,aAAK,WAAP,EAAL,EAAcC,KAAI,SAACd,EAAKY,GACrB,OACI,SAACjB,EAAa,CAEVI,OAAQA,EACRD,aAAcA,EACdE,IAAKA,GAHAY,EAMjB,eAQhC,C,mECjCA,IAtC0B,SAAH,GAAkB,IAAZG,EAAI,EAAJA,KACzB,OACI,gBAAKC,MAAM,yBAAwB,UAC/B,eAAIA,MAAM,kBAAiB,SAEnB,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAMD,KAAI,SAACG,EAAKL,GACZ,OAAO,iCACH,wBACKK,EAAIC,KACF,OAAHD,QAAG,IAAHA,GAAAA,EAAKE,OACL,SAAC,KAAI,CACDC,GAAIH,EAAIC,KAAMC,MAAO,CAACE,KAAQ,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKE,OAChCZ,MAAO,CAACe,eAAe,YAAYC,MAAM,QAAQ,SAEhDN,EAAIO,QACE,SAAC,KAAI,CACZJ,GAAIH,EAAIC,KACRX,MAAO,CAACe,eAAe,YAAYC,MAAM,QAAQ,SAEhDN,EAAIO,QAEP,8BAAGP,EAAIO,SAGTZ,EAAQ,EAAIG,EAAKU,SAAU,yBAC3B,iBAAMT,MAAM,8CAA6C,mBAMrE,OAKhB,C,8UCUO,SAAeU,EAAiB,GAAD,+BAMrC,8CANM,WAAgCC,GAAM,+FAClCC,EAAAA,EAAAA,UAAqB,CACxBC,IAAK,+BACLC,OAAQ,MACRH,OAAAA,KACF,4CACL,sBAEM,SAAeI,EAAwB,GAAD,+BAK5C,8CALM,WAAuC7B,GAAE,+FACrC0B,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,wBAAD,OAA0B3B,GAC7B4B,OAAQ,SACV,4CACL,sBAEM,SAAeE,EAAgC,GAAD,+BAKpD,8CALM,WAA+C9B,GAAE,+FAC7C0B,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,+BAAD,OAAiC3B,GACpC4B,OAAQ,SACV,4CACL,sBAGM,SAAeG,EAAoB,GAAD,+BAMxC,8CANM,WAAmCZ,GAAI,+FACnCO,EAAAA,EAAAA,UAAqB,CACxBC,IAAK,uBACLC,OAAQ,SACRT,KAAAA,KACF,4CACL,sBAUM,SAAea,EAAc,GAAD,+BAiBlC,8CAjBM,WAA6Bb,GAAI,uGAEbO,EAAAA,EAAAA,UAAqB,CACpCC,IAAK,+BACLC,OAAQ,OACRT,KAAAA,IACF,OAJQ,OAAJc,EAAI,yBAKH,CACHC,OAAQ,UACRf,KAAMc,IACT,yDAEM,CACHC,OAAQ,SACRC,SAAS,4BAAgB,QAAhB,OAAQC,gBAAQ,WAAhB,IAAkBjB,OAAQ,KAAOkB,aAC7C,0DAER,sBAEM,SAAeC,EAAgB,GAAD,+BAMpC,8CANM,WAA+Bb,GAAM,+FACjCC,EAAAA,EAAAA,UAAqB,CACxBC,IAAK,wBACLC,OAAQ,MACRH,OAAAA,KACF,4CACL,sBAkBM,SAAec,EAAuB,EAAD,kCAK3C,8CALM,WAAsCd,EAAOS,GAAM,+FAC/CR,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,gCAAD,OAAkCF,EAAM,YAAIS,GAC/CN,OAAQ,WACV,4CACL,sBAEM,SAAeY,EAAqB,GAAD,+BAMzC,8CANM,WAAoCf,GAAM,+FACtCC,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,iCACJC,OAAQ,MACRH,OAAAA,KACF,4CACL,sBAEM,SAAegB,EAA0B,GAAD,+BAM9C,8CANM,WAAyChB,GAAM,+FAE3CC,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,uCAAD,OAAyCF,EAAOiB,QACnDd,OAAQ,SACV,4CACL,sBAEM,SAAee,EAAuB,GAAD,+BAK3C,8CALM,WAAsClB,GAAM,+FACxCC,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,6BAAD,OAA+BF,EAAOiB,OAAM,YAAIjB,EAAOmB,SAAQ,YAAInB,EAAOoB,KAAI,oBACjFjB,OAAQ,SACV,4CACL,sBAEM,SAAekB,EAA8B,GAAD,+BAKlD,8CALM,WAA6CrB,GAAM,+FAC/CC,EAAAA,EAAAA,UAAqB,CACxBC,IAAI,6BAAD,OAA+BF,GAClCG,OAAQ,SACV,4CACL,sB,kICpKYmB,G,UAAWC,EAAAA,EAAAA,IACpB,oCAAmC,yCACnC,WAAO7B,GAAI,4EACY,OAAbiB,EAAW,GAAE,kBACZA,GAAQ,2CAClB,mDAJkC,KAuBjCa,GAAYC,EAAAA,EAAAA,IAAY,CAC1B5B,KAAM,2BACN6B,aAAc,CACVC,SAAS,EACTC,SAAU,GACVC,UAhBwB,CAC5BC,MAAO,EACPC,UAAW,EACXC,SAAU,GACVC,MAAO,GACPC,KAAM,CACFC,KAAM,GACNC,IAAK,MAWTC,SAAU,CACNC,YAAa,SAAC9C,EAAO+C,GACjB/C,EAAMoC,SAAWW,EAAOC,OAC5B,EACAC,aAAc,SAACjD,EAAO+C,GAClB/C,EAAMqC,UAAYU,EAAOC,OAC7B,GAEJE,eAAa,eACRpB,EAASqB,WAAY,SAACnD,EAAO+C,GAC1B/C,EAAMoC,SAAWW,EAAOC,QACxBhD,EAAMqC,UAAUC,MAAQS,EAAOC,QAAQV,MACvCtC,EAAMmC,SAAU,CACpB,KAAC,SACAL,EAASsB,SAAU,SAACpD,GACjBA,EAAMmC,SAAU,CACpB,IAAC,KAIF,EAAsCH,EAAUqB,QAA3BJ,GAAF,EAAXH,YAAyB,EAAZG,cAE5B,KAAejB,EAAiB,O,0NCgRhC,IA5Q6B,WAAO,IAAD,IAE/B,GAAmC1D,EAAAA,EAAAA,WAAS,GAAM,eAA3CgF,EAAa,KAAEC,EAAS,KAwEzBC,GAAWC,EAAAA,EAAAA,MAEXvD,EAAe,OAARsD,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUxD,aAAK,WAAP,EAAR,EAAiB0D,QAExBC,EAAc,OAAJzD,QAAI,IAAJA,OAAI,EAAJA,EAAM0D,aAChBC,GAAUC,EAAAA,EAAAA,UACZ,iBAAM,CAMF,CACIC,OAAQ,gBACRC,YAAa,MAEjB,CACID,OAAQ,mBACRC,YAAa,eAIjB,CACID,OAAQ,YACRC,YAAa,WAIjB,CACID,OAAQ,WACRC,YAAa,YAIjB,CACID,OAAQ,6BACRC,YAAa,eAIjB,CACID,OAAQ,cACRC,YAAa,eAMjB,CACID,OAAQ,SACRC,YAAa,aAiBpB,GACD,IA6CJ,OACI,iCACI,SAAC,KACG,CACAH,QAASA,EACT3D,KAAa,OAAPyD,QAAO,IAAPA,GAEJ,QAFW,EAAPA,EAAShE,KAAI,SAAAG,GACf,MAAW,CAACA,GAAI,eAAKA,EAAImE,yBAC7B,WAAE,WAFW,EAAP,EAEFC,KAAK,MAUb,SAAC,KAAM,CACHC,OAAQb,EAIZ,UAGI,iBAAKrE,UAAU,uCAAsC,WACjD,eAAIA,UAAU,OAAM,uBACpB,eAAIG,MAAO,CAAEgB,MAAO,qBACpB,iBAAKhB,MAAO,CAAEgF,QAAS,OAAQC,eAAgB,SAAUC,UAAW,QAAS,WACzE,iBAAKrF,UAAU,oCAAmC,WAC9C,SAAC,MAAU,KACX,+CAEJ,iBAAKA,UAAU,qBAAoB,WAC/B,SAAC,MAAS,KACV,cAAGG,MAAO,CAAEgB,MAAO,QAAS,qBAEhC,iBAAKnB,UAAU,mCAAkC,WAC7C,SAAC,MAAU,KACX,0CAGR,gBAAKA,UAAU,mBAAkB,UAC7B,mBAAQA,UAAU,gBAAgBG,MAAO,CAAEmF,OAAQ,iBAAkBlF,OAAQ,OAAQmF,MAAO,QAAS,qBAEzG,4BACI,iDACA,iBAAKvF,UAAU,YAAW,WACtB,SAAC,MAAoB,CAACA,UAAU,8BAChC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAACA,UAAU,8BAChC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAACA,UAAU,8BAChC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAACA,UAAU,8BAChC,yEAGR,iBAAKA,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACHA,UAAU,OACVwF,QAAQ,QAAO,qBAInB,SAAC,KAAM,CAACA,QAAQ,QAAQvF,QAAS,kBAAMqE,GAAU,EAAM,EAAC,4BAQhF,C,6DC3SA,IAxBmC,WAE/B,OACI,iBAAKtE,UAAU,4CAA2C,WACtD,SAAC,KAAI,CACDA,UAAU,qCACVgB,GAAG,UAAS,UACZ,SAAC,KAAM,CAACyE,OAAK,EAACD,QAAQ,QAAO,+BAKjC,SAAC,KAAI,CACDxF,UAAU,6CACV0F,OAAO,SACPC,UAAQ,YACR,SAAC,KAAM,CAACF,OAAK,oCAM7B,C,8HCiEA,IA/EgC,WAC5B,IAAMG,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,KACjB,SAAChF,GAAK,OAAKA,EAAMiF,eAAejF,MAAM+E,YAAY,IAEhDG,GAAcF,EAAAA,EAAAA,KAChB,SAAChF,GAAK,OAAKA,EAAMiF,eAAejF,MAAMkF,WAAW,IAE/CC,GAAaH,EAAAA,EAAAA,KACf,SAAChF,GAAK,OAAKA,EAAMiF,eAAejF,MAAMmF,UAAU,IAE9C9C,GAAY2C,EAAAA,EAAAA,KACd,SAAChF,GAAK,OAAKA,EAAMiF,eAAe/E,KAAKmC,SAAS,IAG5C+C,EAAgB,WAClBP,GAASQ,EAAAA,EAAAA,IAAc,KAEJ,WAAfF,GACAN,GAASS,EAAAA,EAAAA,IAAe,IAEhC,EAEMC,EAAQ,yCAAG,2FACc,GAA3BV,GAASQ,EAAAA,EAAAA,IAAc,KAEJ,WAAfF,EAAuB,iCACDK,EAAAA,EAAAA,IAAa,CAAEzG,GAAImG,IAAc,OAAjDO,EAAO,OACbC,EAAcD,GACdZ,GAASS,EAAAA,EAAAA,IAAe,KAAI,UAGb,UAAfH,EAAsB,mCACAK,EAAAA,EAAAA,IAAa,CAAEzG,GAAIgG,IAAe,QAAlDU,EAAO,OACbC,EAAcD,EAASV,EAAazE,QACpCuE,GAASc,EAAAA,EAAAA,IAAgB,KAAI,4CAEpC,kBAda,mCAgBRD,EAAgB,SAACD,EAASG,GACxBH,IACAZ,GAASgB,EAAAA,EAAAA,IAAUxD,IACnByD,EAAAA,GAAAA,MACI,UAAC,KAAY,CACThH,MAAO,sBACP8C,KAAK,UACLmE,SAAU,KAAK,UAEC,WAAfZ,GAA2B,SACZ,UAAfA,GAAsB,UAAOS,EAAM,YAAU,yBAGlD,CACII,UAAW,eAI3B,EAEA,OACI,SAAC,KAAa,CACV7B,OAAuB,WAAfgB,GAA0C,UAAfA,EACnCc,QAASb,EACTc,eAAgBd,EAChBxD,KAAK,SACL9C,MAAM,iBACNqH,SAAUf,EACVgB,UAAWb,EACXc,mBAAmB,UAAS,UAE5B,gKAOZ,C,wKCoKA,IApKoB,WAEhB,IAAMC,GAAW/H,EAAAA,EAAAA,QAAO,MAElBsG,GAAWC,EAAAA,EAAAA,MAEjB,GAAoDE,EAAAA,EAAAA,KAChD,SAAChF,GAAK,OAAKA,EAAMiF,eAAe/E,KAAKmC,SAAS,IAD1CE,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAUE,EAAI,EAAJA,KAAMD,EAAK,EAALA,MAAOH,EAAK,EAALA,MAGpCH,GAAU6C,EAAAA,EAAAA,KAAY,SAAChF,GAAK,OAAKA,EAAMiF,eAAe/E,KAAKiC,OAAO,IAElEjC,GAAO8E,EAAAA,EAAAA,KAAY,SAAChF,GAAK,OAAKA,EAAMiF,eAAe/E,KAAKkC,QAAQ,IAEhEmE,GAAYC,EAAAA,EAAAA,cAAY,WAC1B3B,GAASgB,EAAAA,EAAAA,IAAU,CAAEY,QAASlE,EAAY,EAAGmE,UAAWlE,IAC5D,GAAG,KAEHmE,EAAAA,EAAAA,YAAU,WACN9B,GAASc,EAAAA,EAAAA,IAAgB,KACzBY,GACJ,GAAG,CAAC1B,EAAU0B,EAAWhE,EAAWC,EAAUE,IAQ9C,IAAML,GAAYyB,EAAAA,EAAAA,UACd,iBAAO,CAAEvB,UAAAA,EAAWC,SAAAA,EAAUE,KAAAA,EAAMD,MAAAA,EAAOH,MAAAA,EAAO,GAClD,CAACC,EAAWC,EAAUE,EAAMD,EAAOH,IAGjCuB,GAAUC,EAAAA,EAAAA,UACZ,iBAAM,CAOF,CACIC,OAAQ,WACRC,YAAa,KACb4C,KAAK,EACLC,KAAM,SAACpI,GAEH,IAAQM,EAAON,EAAMqI,IAAIC,SAAjBhI,GACR,OACI,SAAC,KAAI,CAACE,UAAU,8CAA8CgB,GAAG,iBAAiBD,MAAO,CAAC0D,QAAQjF,EAAMqI,IAAIC,UAAW,SAClHhI,GAGb,GAGJ,CACIgF,OAAQ,cACRC,YAAa,mBAIjB,CACID,OAAQ,gBACRC,YAAa,gBAGjB,CACID,OAAQ,gBACRC,YAAa,iBAIjB,CACID,OAAQ,iBACRC,YAAa,kBACb6C,KAAM,SAACpI,GAEH,IAAQuI,EAAqBvI,EAAMqI,IAAIC,SAA/BC,iBACR,OACI,2BACqB,OAAhBA,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkB1G,QAAS,EAAI0G,EAAiB,GAAGC,SAAW,IAG3E,GAGJ,CACIlD,OAAQ,cACRC,YAAa,aAIjB,CACID,OAAQ,SACRC,YAAa,cAMpB,GACD,KA8BmBwC,EAAAA,EAAAA,cACnB,SAACU,EAASC,GACN,GAAID,EAAS,CACT,IAAME,EAAeD,EAAKxH,KAAI,SAACmH,GAAG,OAAKA,EAAIC,QAAQ,IAC7CM,EAAc,GACpBD,EAAaE,SAAQ,SAACR,GAClBO,EAAYE,KAAKT,EAAI/H,GACzB,IACA8F,GAASc,EAAAA,EAAAA,IAAgB0B,GAC7B,MACIxC,GAASc,EAAAA,EAAAA,IAAgB,IAEjC,GACA,CAACd,IAGL,OACI,SAAC,KAAS,CACN1F,IAAKmH,EACLzC,QAASA,EACT3D,KAAMA,EACNiC,QAASA,EACTqF,WAAYnF,EACZoF,mBAlDmB,SAACC,GACxB,IAAMC,EAAeC,IAAUvF,GAC/BsF,EAAapF,UAAYmF,EACzB7C,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EA+CQE,eA7Ce,SAACC,GACpB,IAAMH,EAAeC,IAAUvF,GAC/BsF,EAAanF,SAAWuF,OAAOD,GAC/BH,EAAapF,UAAY,EACzBsC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EAyCQK,OAvCO,SAACtF,GACZ,IAAMiF,EAAeC,IAAUvF,GAC/BsF,EAAajF,KAAOA,EACpBmC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,GAwCJ,C,sKCrMA,EA7CyB,WACrB,IAAM9C,GAAWC,EAAAA,EAAAA,MAEXmD,GAAc1J,EAAAA,EAAAA,UAEd8D,GAAY2C,EAAAA,EAAAA,KACd,SAAChF,GAAK,OAAKA,EAAMiF,eAAe/E,KAAKmC,SAAS,IAG5C6F,EAAaC,KAEnB,SAA0BrI,GACtB,IAAM6H,EAAeC,IAAUvF,GAC/BsF,EAAalF,MAAQ3C,EACrB6H,EAAapF,UAAY,EACN,kBAARzC,GAAoBA,EAAIQ,OAAS,GACxCiG,EAAUoB,GAGK,kBAAR7H,GAAmC,IAAfA,EAAIQ,QAC/BiG,EAAUoB,EAElB,GAb8C,KAe9C,IAAMpB,EAAY,SAACrG,GACf2E,GAAS5B,EAAAA,EAAAA,IAAa/C,IACtB2E,GAASgB,EAAAA,EAAAA,IAAU3F,GACvB,EAMA,OACI,SAAC,KAAK,CACFf,IAAK8I,EACLhJ,UAAU,UACVmJ,KAAK,KACLC,YAAY,SACZC,QAAQ,SAAC,MAAe,CAACrJ,UAAU,YACnCsJ,SAXO,SAACC,GACZN,EAAWM,EAAE7D,OAAOmD,MACxB,GAYJ,E,WCvBA,EAlBoB,WAGhB,OACI,+BACI,SAAC,KAAM,CACHM,KAAK,KACLnJ,UAAU,6DACVwJ,MAAM,SAAC,MAAe,IACtBvJ,QAAS,WAAO,EAAE,qBAOlC,ECiBA,G,SA1ByB,WACrB,OACI,iBAAKD,UAAU,4CAA2C,WACtD,SAAC,EAAgB,KACjB,SAAC,EAAe,KAChB,SAAC,KAAI,CACDA,UAAU,6CACV0F,OAAO,SACPC,UAAQ,YAER,SAAC,KAAM,CAACF,OAAK,EAAC0D,KAAK,KAAKK,MAAM,SAAC,MAAU,IAAI,wBAc7D,E,0RCmRA,EA/P2B,WAEvB,OAAmCnK,EAAAA,EAAAA,WAAS,GAAM,eAA3CgF,EAAa,KAAEC,EAAS,KAuCzBsB,IAFWtG,EAAAA,EAAAA,QAAO,OAEPuG,EAAAA,EAAAA,OAEjB,GAAoDE,EAAAA,EAAAA,KAChD,SAAChF,GAAK,OAAKA,EAAMiF,eAAe/E,KAAKmC,SAAS,IAD1CE,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAUE,EAAI,EAAJA,KAAMD,EAAK,EAALA,MAAOH,EAAK,EAALA,MAqBpCD,GAAYyB,EAAAA,EAAAA,UACd,iBAAO,CAAEvB,UAAAA,EAAWC,SAAAA,EAAUE,KAAAA,EAAMD,MAAAA,EAAOH,MAAAA,EAAO,GAClD,CAACC,EAAWC,EAAUE,EAAMD,EAAOH,IAsBjCuB,GAAUC,EAAAA,EAAAA,UACZ,iBAAM,CACF,CACIC,OAAQ,YACRC,YAAa,UAEjB,CACID,OAAQ,+BACRC,YAAa,8BAIjB,CACID,OAAQ,yBACRC,YAAa,yBAIjB,CACID,OAAQ,SACRC,YAAa,SAIjB,CACID,OAAQ,uBACRC,YAAa,sBAEjB,CACID,OAAQ,SACRC,YAAa,SACb6C,KAAM,SAACpI,GACH,OACI,gBAAKQ,UAAU,oBAAmB,UAC9B,SAAC,KAAM,CAACwF,QAAQ,QAAO,4BAKnC,GAEP,GACD,IA8CJ,OACI,iCACA,SAAC,KACG,CACAZ,QAASA,EACT3D,KAhHK,CACT,CACIwI,OAAQ,cACRC,2BAA4B,iBAC5BC,sBAAuB,qBACvBC,MAAO,WACPC,mBAAoB,oBACpB/F,OAAQ,YAEZ,CACI2F,OAAQ,cACRC,2BAA4B,gBAC5BC,sBAAuB,qBACvBC,MAAO,WACPC,mBAAoB,oBACpB/F,OAAQ,aAmGRyE,WAAYnF,EACZoF,mBAnDmB,SAACC,GACxB,IAAMC,EAAeC,IAAUvF,GAC/BsF,EAAapF,UAAYmF,EACzB7C,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EAgDQE,eA9Ce,SAACC,GACpB,IAAMH,EAAeC,IAAUvF,GAC/BsF,EAAanF,SAAWuF,OAAOD,GAC/BH,EAAapF,UAAY,EACzBsC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EA0CQK,OAxCO,SAACtF,GACZ,IAAMiF,EAAeC,IAAUvF,GAC/BsF,EAAajF,KAAOA,EACpBmC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,KAyCI,SAAC,KAAM,CACCxD,OAAQb,EAIR,UAGA,iBAAKrE,UAAU,uCAAsC,WACjD,eAAIA,UAAU,OAAM,uBACpB,eAAIG,MAAO,CAACgB,MAAO,qBACnB,iBAAKhB,MAAO,CAACgF,QAAQ,OAAOC,eAAe,SAASC,UAAU,QAAQ,WAClE,iBAAKrF,UAAU,yCAAwC,WACnD,SAAC,MAAU,KACX,+CAEJ,iBAAKA,UAAU,qBAAoB,WAC/B,SAAC,MAAS,KACV,cAAGG,MAAO,CAACgB,MAAM,QAAQ,qBAE7B,iBAAKnB,UAAU,mCAAkC,WAC7C,SAAC,MAAU,KACX,0CAGR,gBAAKA,UAAU,mBAAkB,UACjC,mBAAQA,UAAU,gBAAgBG,MAAO,CAACmF,OAAO,iBAAkBlF,OAAO,OAAQmF,MAAM,QAAQ,qBAEhG,4BACI,iDACA,iBAAKvF,UAAU,YAAW,WACtB,SAAC,MAAoB,CAACA,UAAU,8BAChC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,yEAGR,iBAAKA,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACHA,UAAU,OACVwF,QAAQ,QAAO,qBAInB,SAAC,KAAM,CAACA,QAAQ,QAAQvF,QAAS,kBAAKqE,GAAU,EAAM,EAAC,4BAQ/E,E,WCMA,EAnQwB,SAAH,GAAmB,IAAD,EAAbwF,EAAO,EAAPA,QAEtB,GAAmCzK,EAAAA,EAAAA,WAAS,GAAM,eAA3CgF,EAAa,KAAEC,EAAS,KACzBC,GAAWC,EAAAA,EAAAA,MACXuF,EAAkB,OAARxF,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUxD,aAAK,WAAP,EAAR,EAAiB0D,QAC3BC,EAAiB,OAAPqF,QAAO,IAAPA,OAAO,EAAPA,EAASpF,aAAamF,GAgDhClE,IAFWtG,EAAAA,EAAAA,QAAO,OAEPuG,EAAAA,EAAAA,OAEjB,GAAoDE,EAAAA,EAAAA,KAChD,SAAChF,GAAK,OAAKA,EAAMiF,eAAe/E,KAAKmC,SAAS,IAD1CE,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAUE,EAAI,EAAJA,KAAMD,EAAK,EAALA,MAAOH,EAAK,EAALA,MAqCpCD,IAlCU2C,EAAAA,EAAAA,KAAY,SAAChF,GAAK,OAAKA,EAAMiF,eAAe/E,KAAKiC,OAAO,KAkCtD2B,EAAAA,EAAAA,UACd,iBAAO,CAAEvB,UAAAA,EAAWC,SAAAA,EAAUE,KAAAA,EAAMD,MAAAA,EAAOH,MAAAA,EAAO,GAClD,CAACC,EAAWC,EAAUE,EAAMD,EAAOH,KAGjCuB,GAAUC,EAAAA,EAAAA,UACZ,iBAAM,CACF,CACIC,OAAQ,aACRC,YAAa,WAEjB,CACID,OAAQ,gBACRC,YAAa,WAIjB,CACID,OAAQ,WACRC,YAAa,WAIjB,CACID,OAAQ,WACRC,YAAa,YAIjB,CACID,OAAQ,oBACRC,YAAa,YACb6C,KAAM,WACF,OACI,gBAAK5H,UAAU,oBAAmB,SAC7B0E,EAAQsF,WAGrB,GAGP,GACD,IA8CJ,OACI,iCACA,SAAC,KACG,CACApF,QAASA,EACT3D,KAAMyD,EAAQM,wBAEduD,WAAYnF,EACZoF,mBAnDmB,SAACC,GACxB,IAAMC,EAAeC,IAAUvF,GAC/BsF,EAAapF,UAAYmF,EACzB7C,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EAgDQE,eA9Ce,SAACC,GACpB,IAAMH,EAAeC,IAAUvF,GAC/BsF,EAAanF,SAAWuF,OAAOD,GAC/BH,EAAapF,UAAY,EACzBsC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EA0CQK,OAxCO,SAACtF,GACZ,IAAMiF,EAAeC,IAAUvF,GAC/BsF,EAAajF,KAAOA,EACpBmC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,KAyCI,SAAC,KAAM,CACCxD,OAAQb,EAIR,UAGA,iBAAKrE,UAAU,uCAAsC,WACjD,eAAIA,UAAU,OAAM,uBACpB,eAAIG,MAAO,CAACgB,MAAO,qBACnB,iBAAKhB,MAAO,CAACgF,QAAQ,OAAOC,eAAe,SAASC,UAAU,QAAQ,WAClE,iBAAKrF,UAAU,yCAAwC,WACnD,SAAC,MAAU,KACX,+CAEJ,iBAAKA,UAAU,qBAAoB,WAC/B,SAAC,MAAS,KACV,cAAGG,MAAO,CAACgB,MAAM,QAAQ,qBAE7B,iBAAKnB,UAAU,mCAAkC,WAC7C,SAAC,MAAU,KACX,0CAGR,gBAAKA,UAAU,mBAAkB,UACjC,mBAAQA,UAAU,gBAAgBG,MAAO,CAACmF,OAAO,iBAAkBlF,OAAO,OAAQmF,MAAM,QAAQ,qBAEhG,4BACI,iDACA,iBAAKvF,UAAU,YAAW,WACtB,SAAC,MAAoB,CAACA,UAAU,8BAChC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,yEAGR,iBAAKA,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACHA,UAAU,OACVwF,QAAQ,QAAO,qBAInB,SAAC,KAAM,CAACA,QAAQ,QAAQvF,QAAS,kBAAKqE,GAAU,EAAM,EAAC,4BAQ/E,ECkBA,EApRuB,SAAH,GAAmB,IAAD,EAAbwF,EAAO,EAAPA,QAErB,GAAmCzK,EAAAA,EAAAA,WAAS,GAAM,eAA3CgF,EAAa,KAAEC,EAAS,KACzBC,GAAWC,EAAAA,EAAAA,MACXyF,EAAkB,OAAR1F,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUxD,aAAK,WAAP,EAAR,EAAiB0D,QAE3BC,EAAiB,OAAPuF,QAAO,IAAPA,OAAO,EAAPA,EAAStF,aAAamF,GAChC7I,EAAOyD,EAAQhE,KAAI,SAASwJ,EAAM1J,GACpC,MAAO,CAACwJ,UAAWE,EAAKF,UAAWG,YAAazF,EAAQlE,GAAOwE,wBAAwBxE,GAAO4J,yBAAyBD,YAC3H,IAuCMvE,IAFWtG,EAAAA,EAAAA,QAAO,OAEPuG,EAAAA,EAAAA,OAEjB,GAAoDE,EAAAA,EAAAA,KAChD,SAAChF,GAAK,OAAKA,EAAMiF,eAAe/E,KAAKmC,SAAS,IAD1CE,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAUE,EAAI,EAAJA,KAAMD,EAAK,EAALA,MAAOH,EAAK,EAALA,MAqBpCD,GAAYyB,EAAAA,EAAAA,UACd,iBAAO,CAAEvB,UAAAA,EAAWC,SAAAA,EAAUE,KAAAA,EAAMD,MAAAA,EAAOH,MAAAA,EAAO,GAClD,CAACC,EAAWC,EAAUE,EAAMD,EAAOH,IAwBjCuB,GAAUC,EAAAA,EAAAA,UACZ,iBAAM,CACF,CACIC,OAAQ,UACRC,YAAa,eAEjB,CACID,OAAQ,aACRC,YAAa,eAIjB,CACID,OAAQ,WACRC,YAAa,eAIjB,CACID,OAAQ,qBACRC,YAAa,eAIjB,CACID,OAAQ,WACRC,YAAa,eAIjB,CACID,OAAQ,SACRC,YAAa,aAIjB,CACID,OAAQ,SACRC,YAAa,SACb6C,KAAM,SAACpI,GAEH,OADA6K,QAAQC,IAAI9K,EAAMqI,IAAI/H,KAElB,gBAAKE,UAAU,oBAAmB,SACb,KAAhBR,EAAMqI,IAAI/H,IAAa,SAAC,KAAM,CAAC0F,QAAQ,QAAO,iCAEnC,SAAC,KAAM,CAACA,QAAQ,QAAO,4BAM/C,GAEP,GACD,IA8CJ,OACI,iCACA,SAAC,KACG,CACAZ,QAASA,EACT3D,KAAMA,EAENsH,WAAYnF,EACZoF,mBAnDmB,SAACC,GACxB,IAAMC,EAAeC,IAAUvF,GAC/BsF,EAAapF,UAAYmF,EACzB7C,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EAgDQE,eA9Ce,SAACC,GACpB,IAAMH,EAAeC,IAAUvF,GAC/BsF,EAAanF,SAAWuF,OAAOD,GAC/BH,EAAapF,UAAY,EACzBsC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EA0CQK,OAxCO,SAACtF,GACZ,IAAMiF,EAAeC,IAAUvF,GAC/BsF,EAAajF,KAAOA,EACpBmC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,KAyCI,SAAC,KAAM,CACCxD,OAAQb,EAIR,UAGA,iBAAKrE,UAAU,uCAAsC,WACjD,eAAIA,UAAU,OAAM,uBACpB,eAAIG,MAAO,CAACgB,MAAO,qBACnB,iBAAKhB,MAAO,CAACgF,QAAQ,OAAOC,eAAe,SAASC,UAAU,QAAQ,WAClE,iBAAKrF,UAAU,yCAAwC,WACnD,SAAC,MAAU,KACX,+CAEJ,iBAAKA,UAAU,qBAAoB,WAC/B,SAAC,MAAS,KACV,cAAGG,MAAO,CAACgB,MAAM,QAAQ,qBAE7B,iBAAKnB,UAAU,mCAAkC,WAC7C,SAAC,MAAU,KACX,0CAGR,gBAAKA,UAAU,mBAAkB,UACjC,mBAAQA,UAAU,gBAAgBG,MAAO,CAACmF,OAAO,iBAAkBlF,OAAO,OAAQmF,MAAM,QAAQ,qBAEhG,4BACI,iDACA,iBAAKvF,UAAU,YAAW,WACtB,SAAC,MAAoB,CAACA,UAAU,8BAChC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,yEAGR,iBAAKA,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACHA,UAAU,OACVwF,QAAQ,QAAO,qBAInB,SAAC,KAAM,CAACA,QAAQ,QAAQvF,QAAS,kBAAKqE,GAAU,EAAM,EAAC,4BAQ/E,E,WCnTMiG,EACC,CACCC,MAAO,YACPC,SAAU,iBACVC,UAAW,oBAsTnB,EAxRqB,SAAH,GAAmB,IAAD,EAAbZ,EAAO,EAAPA,QAEnB,GAAmCzK,EAAAA,EAAAA,WAAS,GAAM,eAA3CgF,EAAa,KAAEC,EAAS,KACzBC,GAAWC,EAAAA,EAAAA,MACXuF,EAAkB,OAARxF,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUxD,aAAK,WAAP,EAAR,EAAiB0D,QAC3BC,EAAiB,OAAPqF,QAAO,IAAPA,OAAO,EAAPA,EAASpF,aAAamF,GAyChClE,IAFWtG,EAAAA,EAAAA,QAAO,OAEPuG,EAAAA,EAAAA,OAEjB,GAAoDE,EAAAA,EAAAA,KAChD,SAAChF,GAAK,OAAKA,EAAMiF,eAAe/E,KAAKmC,SAAS,IAD1CE,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAUE,EAAI,EAAJA,KAAMD,EAAK,EAALA,MAAOH,EAAK,EAALA,MAqBpCD,GAAYyB,EAAAA,EAAAA,UACd,iBAAO,CAAEvB,UAAAA,EAAWC,SAAAA,EAAUE,KAAAA,EAAMD,MAAAA,EAAOH,MAAAA,EAAO,GAClD,CAACC,EAAWC,EAAUE,EAAMD,EAAOH,IAwBjCuB,GAAUC,EAAAA,EAAAA,UACZ,iBAAM,CACF,CACIC,OAAQ,eACRC,YAAa,cAEjB,CACID,OAAQ,eACRC,YAAa,SAIjB,CACID,OAAQ,qBACRC,YAAa,MAIjB,CACID,OAAQ,2BACRC,YAAa,cAIjB,CACID,OAAQ,sBACRC,YAAa,YACb6C,KAAM,SAACpI,GACH,OACI,iBAAKQ,UAAU,oBAAmB,WAE9B,SAAC,MAAiB,CAACA,UAAU,OAAMG,MAAO,CAACgB,MAAM,YACjD,iBACInB,UAAS,2BAA6B,SAErCuK,EAAmBC,UAIpC,GAGJ,CACI1F,OAAQ,gCACRC,YAAa,uBAIjB,CACID,OAAQ,UACRC,YAAa,UACb6C,KAAM,SAACpI,GACH,OACI,gBAAKW,MAAO,CAAEgF,QAAS,QAAS,UAC5B,SAAC,MAAS,CAACnF,UAAU,OAAMG,MAAO,CAACgB,MAAM,QAASlB,QAAS,kBAAIqE,GAAU,EAAK,KAG1F,GAEP,GACD,IA8CJ,OACI,iCACA,SAAC,KACG,CACAM,QAASA,EACT3D,KAAMyD,EAAQiG,yBAEdpC,WAAYnF,EACZoF,mBAnDmB,SAACC,GACxB,IAAMC,EAAeC,IAAUvF,GAC/BsF,EAAapF,UAAYmF,EACzB7C,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EAgDQE,eA9Ce,SAACC,GACpB,IAAMH,EAAeC,IAAUvF,GAC/BsF,EAAanF,SAAWuF,OAAOD,GAC/BH,EAAapF,UAAY,EACzBsC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EA0CQK,OAxCO,SAACtF,GACZ,IAAMiF,EAAeC,IAAUvF,GAC/BsF,EAAajF,KAAOA,EACpBmC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,KAyCI,SAAC,KAAM,CACCxD,OAAQb,EAIR,UAGA,iBAAKrE,UAAU,uCAAsC,WACjD,eAAIA,UAAU,OAAM,uBACpB,eAAIG,MAAO,CAACgB,MAAO,qBACnB,iBAAKhB,MAAO,CAACgF,QAAQ,OAAOC,eAAe,SAASC,UAAU,QAAQ,WAClE,iBAAKrF,UAAU,yCAAwC,WACnD,SAAC,MAAU,KACX,+CAEJ,iBAAKA,UAAU,qBAAoB,WAC/B,SAAC,MAAS,KACV,cAAGG,MAAO,CAACgB,MAAM,QAAQ,qBAE7B,iBAAKnB,UAAU,mCAAkC,WAC7C,SAAC,MAAU,KACX,0CAGR,gBAAKA,UAAU,mBAAkB,UACjC,mBAAQA,UAAU,gBAAgBG,MAAO,CAACmF,OAAO,iBAAkBlF,OAAO,OAAQmF,MAAM,QAAQ,qBAEhG,4BACI,iDACA,iBAAKvF,UAAU,YAAW,WACtB,SAAC,MAAoB,CAACA,UAAU,8BAChC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,yEAGR,iBAAKA,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACHA,UAAU,OACVwF,QAAQ,QAAO,qBAInB,SAAC,KAAM,CAACA,QAAQ,QAAQvF,QAAS,kBAAKqE,GAAU,EAAM,EAAC,4BAQ/E,E,WCxTMiG,EAMC,CACCC,MAAO,kBACPC,SAAU,cACVC,UAAW,kBAsSnB,EA7QsB,SAAH,GAAmB,IAAD,EAAbZ,EAAO,EAAPA,QAEpB,GAAmCzK,EAAAA,EAAAA,WAAS,GAAM,eAA3CgF,EAAa,KAAEC,EAAS,KACzBC,GAAWC,EAAAA,EAAAA,MACXuF,EAAkB,OAARxF,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUxD,aAAK,WAAP,EAAR,EAAiB0D,QAC3BC,EAAiB,OAAPqF,QAAO,IAAPA,OAAO,EAAPA,EAASpF,aAAamF,GAsChClE,IAFWtG,EAAAA,EAAAA,QAAO,OAEPuG,EAAAA,EAAAA,OAEjB,GAAoDE,EAAAA,EAAAA,KAChD,SAAChF,GAAK,OAAKA,EAAMiF,eAAe/E,KAAKmC,SAAS,IAD1CE,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAUE,EAAI,EAAJA,KAAMD,EAAK,EAALA,MAAOH,EAAK,EAALA,MAqBpCD,GAAYyB,EAAAA,EAAAA,UACd,iBAAO,CAAEvB,UAAAA,EAAWC,SAAAA,EAAUE,KAAAA,EAAMD,MAAAA,EAAOH,MAAAA,EAAO,GAClD,CAACC,EAAWC,EAAUE,EAAMD,EAAOH,IAsBjCuB,GAAUC,EAAAA,EAAAA,UACZ,iBAAM,CACF,CACIC,OAAQ,cACRC,YAAa,mBAEjB,CACID,OAAQ,cACRC,YAAa,gBAIjB,CACID,OAAQ,yBACRC,YAAa,oBAIjB,CACID,OAAQ,qBACRC,YAAa,gBAIjB,CACID,OAAQ,qBACRC,YAAa,sBACb6C,KAAM,SAACpI,GACH,OACI,iBAAKQ,UAAU,oBAAmB,WAE9B,SAAC,MAAe,CAACA,UAAU,OAAMG,MAAO,CAACgB,MAAM,aAC/C,iBACInB,UAAS,2BAA6B,SAErCuK,EAAmBC,UAIpC,GAGJ,CACI1F,OAAQ,UACRC,YAAa,UACb6C,KAAM,SAACpI,GACH,OACI,gBAAKW,MAAO,CAAEgF,QAAS,QAAS,UAC5B,SAAC,MAAS,CAACnF,UAAU,OAAMG,MAAO,CAACgB,MAAM,QAASlB,QAAS,kBAAIqE,GAAU,EAAK,KAG1F,GAEP,GACD,IA8CJ,OACI,iCACA,SAAC,KACG,CACAM,QAASA,EACT3D,KAAMyD,EAAQkG,yBAEdrC,WAAYnF,EACZoF,mBAnDmB,SAACC,GACxB,IAAMC,EAAeC,IAAUvF,GAC/BsF,EAAapF,UAAYmF,EACzB7C,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EAgDQE,eA9Ce,SAACC,GACpB,IAAMH,EAAeC,IAAUvF,GAC/BsF,EAAanF,SAAWuF,OAAOD,GAC/BH,EAAapF,UAAY,EACzBsC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EA0CQK,OAxCO,SAACtF,GACZ,IAAMiF,EAAeC,IAAUvF,GAC/BsF,EAAajF,KAAOA,EACpBmC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,KAyCI,SAAC,KAAM,CACCxD,OAAQb,EAIR,UAGA,iBAAKrE,UAAU,uCAAsC,WACjD,eAAIA,UAAU,OAAM,uBACpB,eAAIG,MAAO,CAACgB,MAAO,qBACnB,iBAAKhB,MAAO,CAACgF,QAAQ,OAAOC,eAAe,SAASC,UAAU,QAAQ,WAClE,iBAAKrF,UAAU,yCAAwC,WACnD,SAAC,MAAU,KACX,+CAEJ,iBAAKA,UAAU,qBAAoB,WAC/B,SAAC,MAAS,KACV,cAAGG,MAAO,CAACgB,MAAM,QAAQ,qBAE7B,iBAAKnB,UAAU,mCAAkC,WAC7C,SAAC,MAAU,KACX,0CAGR,gBAAKA,UAAU,mBAAkB,UACjC,mBAAQA,UAAU,gBAAgBG,MAAO,CAACmF,OAAO,iBAAkBlF,OAAO,OAAQmF,MAAM,QAAQ,qBAEhG,4BACI,iDACA,iBAAKvF,UAAU,YAAW,WACtB,SAAC,MAAoB,CAACA,UAAU,8BAChC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,yEAGR,iBAAKA,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACHA,UAAU,OACVwF,QAAQ,QAAO,qBAInB,SAAC,KAAM,CAACA,QAAQ,QAAQvF,QAAS,kBAAKqE,GAAU,EAAM,EAAC,4BAQ/E,EC7SMiG,EACC,CACCC,MAAO,YACPC,SAAU,iBACVC,UAAW,oBA2TnB,EA7RsB,SAAH,GAAmB,IAAD,EAAbZ,EAAO,EAAPA,QAEpB,GAAmCzK,EAAAA,EAAAA,WAAS,GAAM,eAA3CgF,EAAa,KAAEC,EAAS,KACzBC,GAAWC,EAAAA,EAAAA,MACXuF,EAAkB,OAARxF,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUxD,aAAK,WAAP,EAAR,EAAiB0D,QAC3BC,EAAiB,OAAPqF,QAAO,IAAPA,OAAO,EAAPA,EAASpF,aAAamF,GAsChClE,IAFWtG,EAAAA,EAAAA,QAAO,OAEPuG,EAAAA,EAAAA,OAEjB,GAAoDE,EAAAA,EAAAA,KAChD,SAAChF,GAAK,OAAKA,EAAMiF,eAAe/E,KAAKmC,SAAS,IAD1CE,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAUE,EAAI,EAAJA,KAAMD,EAAK,EAALA,MAAOH,EAAK,EAALA,MAqBpCD,GAAYyB,EAAAA,EAAAA,UACd,iBAAO,CAAEvB,UAAAA,EAAWC,SAAAA,EAAUE,KAAAA,EAAMD,MAAAA,EAAOH,MAAAA,EAAO,GAClD,CAACC,EAAWC,EAAUE,EAAMD,EAAOH,IA0BjCuB,GAAUC,EAAAA,EAAAA,UACZ,iBAAM,CACF,CACIC,OAAQ,cACRC,YAAa,mBAEjB,CACID,OAAQ,cACRC,YAAa,gBAIjB,CACID,OAAQ,0BACRC,YAAa,gBAIjB,CACID,OAAQ,kBACRC,YAAa,cAIjB,CACID,OAAQ,eACRC,YAAa,cAIjB,CACID,OAAQ,0BACRC,YAAa,uBAIjB,CACID,OAAQ,iBACRC,YAAa,aACb6C,KAAM,SAACpI,GACH,OACI,iBAAKQ,UAAU,oBAAmB,WAE9B,SAAC,MAAiB,CAACA,UAAU,OAAMG,MAAO,CAACgB,MAAM,YACjD,iBACInB,UAAS,2BAA6B,SAErCuK,EAAmBC,UAIpC,GAGJ,CACI1F,OAAQ,UACRC,YAAa,UACb6C,KAAM,SAACpI,GACH,OACI,gBAAKW,MAAO,CAAEgF,QAAS,QAAS,UAC5B,SAAC,MAAS,CAACnF,UAAU,OAAMG,MAAO,CAACgB,MAAM,QAASlB,QAAS,kBAAIqE,GAAU,EAAK,KAG1F,GAEP,GACD,IA8CJ,OACI,iCACA,SAAC,KACG,CACAM,QAASA,EACT3D,KAAMyD,EAAQkG,yBAEdrC,WAAYnF,EACZoF,mBAnDmB,SAACC,GACxB,IAAMC,EAAeC,IAAUvF,GAC/BsF,EAAapF,UAAYmF,EACzB7C,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EAgDQE,eA9Ce,SAACC,GACpB,IAAMH,EAAeC,IAAUvF,GAC/BsF,EAAanF,SAAWuF,OAAOD,GAC/BH,EAAapF,UAAY,EACzBsC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,EA0CQK,OAxCO,SAACtF,GACZ,IAAMiF,EAAeC,IAAUvF,GAC/BsF,EAAajF,KAAOA,EACpBmC,GAAS5B,EAAAA,EAAAA,IAAa0E,GAC1B,KAyCI,SAAC,KAAM,CACCxD,OAAQb,EAIR,UAGA,iBAAKrE,UAAU,uCAAsC,WACjD,eAAIA,UAAU,OAAM,uBACpB,eAAIG,MAAO,CAACgB,MAAO,qBACnB,iBAAKhB,MAAO,CAACgF,QAAQ,OAAOC,eAAe,SAASC,UAAU,QAAQ,WAClE,iBAAKrF,UAAU,yCAAwC,WACnD,SAAC,MAAU,KACX,+CAEJ,iBAAKA,UAAU,qBAAoB,WAC/B,SAAC,MAAS,KACV,cAAGG,MAAO,CAACgB,MAAM,QAAQ,qBAE7B,iBAAKnB,UAAU,mCAAkC,WAC7C,SAAC,MAAU,KACX,0CAGR,gBAAKA,UAAU,mBAAkB,UACjC,mBAAQA,UAAU,gBAAgBG,MAAO,CAACmF,OAAO,iBAAkBlF,OAAO,OAAQmF,MAAM,QAAQ,qBAEhG,4BACI,iDACA,iBAAKvF,UAAU,YAAW,WACtB,SAAC,MAAoB,CAACA,UAAU,8BAChC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,sEAEJ,iBAAKA,UAAU,YAAW,WACtB,SAAC,MAAoB,CAAEA,UAAU,8BACjC,yEAGR,iBAAKA,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACHA,UAAU,OACVwF,QAAQ,QAAO,qBAInB,SAAC,KAAM,CAACA,QAAQ,QAAQvF,QAAS,kBAAKqE,GAAU,EAAM,EAAC,4BAQ/E,EC7OA,EA/FuB,SAAH,GAAmB,IAAdwF,EAAO,EAAPA,QACrB,GAAwBzK,EAAAA,EAAAA,UAAS,GAAE,eAA5BwL,EAAI,KAAEC,EAAO,KACdC,EAAa,WAAH,OAASzB,EAASuB,EAAO,EAAE,EAErCvB,EAAW,SAAC0B,GAEVF,EADAE,EAAW,EACH,EACDA,EAAW,EACV,EAEAA,EAEhB,EAEMC,GACF,UAAC,KAAK,CAAC5K,QAASwK,EAAK,WACjB,SAAC,UAAU,CAAChL,MAAO,gBACnB,SAAC,UAAU,CAACA,MAAO,eACnB,SAAC,UAAU,CAACA,MAAO,aACnB,SAAC,UAAU,CAACA,MAAO,cACnB,SAAC,UAAU,CAACA,MAAO,gBAGrBqL,EAAS,WACXJ,EAAQD,EAAO,EACnB,EAEA,OACI,gBAAK7K,UAAU,2CAA0C,UACjD,UAAC,KAAI,CAAC8E,OAASmG,EAAM,UAEf,IAATJ,IACG,0BACI,SAAC,EAAe,CAACf,QAASA,EAASoB,OAAQA,EAAQH,WAAYA,MAG7D,IAATF,IACG,0BACI,SAAC,EAAc,CAACf,QAASA,EAASoB,OAAQA,EAAQH,WAAYA,MAG5D,IAATF,IACG,0BACI,SAAC,EAAY,CAACf,QAASA,EAASoB,OAAQA,EAAQH,WAAYA,MAG1D,IAATF,IACG,0BACI,SAAC,EAAa,CAACf,QAASA,EAASoB,OAAQA,EAAQH,WAAYA,MAG1D,IAATF,IAEE,0BACI,SAAC,EAAa,CAACf,QAASA,EAASiB,WAAYA,OAGjD,iBAAK/K,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACH2C,KAAM,SACN3C,UAAU,OACVC,QAAS,kBAAM8K,GAAY,EAC3BvF,QAAQ,QACRrF,MAAO,CACHgL,gBAAiB,WACnB,qBAIK,IAATN,GACI,SAAC,KAAI,CACP7J,GAAE,UAAY,UAEd,SAAC,KAAM,CACH2B,KAAM,SACN3C,UAAU,OACVwF,QAAQ,QAAO,uBAKb,SAAC,KAAM,CACTA,QAAQ,QACRvF,QAAS,kBAAMiL,GAAQ,EAAC,SAEvB,gBAQ7B,EC3EA,EAzB4B,WAAO,IAAD,EACxB3G,GAAWC,EAAAA,EAAAA,MAGX4G,GADe,OAAR7G,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUxD,aAAK,WAAP,EAAR,EAAiB0D,SACFE,aAAajE,KAAI,SAACG,EAAIL,GAC9C,MAAmB,sBAAhBK,EAAIwK,QACI,CACHxL,OAAO,2CAAS,wBAAKgB,EAAIyK,eACzBvL,WAAW,SAAC,EAAc,CAAC+J,QAAStJ,KAGzB,iBAAhBK,EAAIwK,SAA8C,iBAAhBxK,EAAIwK,QAC9B,CACHxL,OAAO,6CAAW,wBAAKgB,EAAIyK,eAC3BvL,WAAW,SAAC,EAAkB,CAAC+J,QAAStJ,UAHhD,CAMJ,IACA,OACI,gBAAKR,UAAU,OAAM,UACjB,SAACuL,EAAA,EAAS,CAAC9K,MAAO2K,KAG9B,C,sMCsBO,SAAeI,EAAkB,GAAD,+BAMtC,8CANM,WAAiCjK,GAAM,+FACnCC,EAAAA,EAAAA,UAAqB,CACxBC,IAAK,iBACLC,OAAQ,MACRH,OAAAA,KACF,4CACL,sBAEM,SAAekK,EAAqB,GAAD,+BAMzC,8CANM,WAAoCxK,GAAI,+FACpCO,EAAAA,EAAAA,UAAqB,CACxBC,IAAK,gCACLC,OAAQ,SACRT,KAAAA,KACF,4CACL,sBC5DM,IAAM2F,GAAY9D,EAAAA,EAAAA,IACrB,iCAAgC,yCAChC,WAAO7B,GAAI,4FACgBuK,EAAkBvK,GAAK,OACnB,OADrBiB,EAAQ,OACdmI,QAAQC,IAAIpI,EAASjB,MAAM,kBACpBiB,EAASjB,MAAI,2CACvB,mDAL+B,IAQvBsF,EAAY,yCAAG,WAAOtF,GAAI,4FACZwK,EAAqBxK,GAAK,OAAnC,OAARiB,EAAQ,yBACPA,EAASjB,MAAI,2CACvB,gBAHwB,sCAgBnB8B,GAAYC,EAAAA,EAAAA,IAAY,CAC1B5B,KAAM,sBACN6B,aAAc,CACVC,SAAS,EACTC,SAAU,GACVC,UAhBwB,CAC5BC,MAAO,EACPC,UAAW,EACXC,SAAU,GACVC,MAAO,GACPC,KAAM,CACFC,KAAM,GACNC,IAAK,MAWTC,SAAU,CACNC,YAAa,SAAC9C,EAAO+C,GACjB/C,EAAMoC,SAAWW,EAAOC,OAC5B,EACAC,aAAc,SAACjD,EAAO+C,GAClB/C,EAAMqC,UAAYU,EAAOC,OAC7B,GAEJE,eAAa,eACR2C,EAAU1C,WAAY,SAACnD,EAAO+C,GAC3B/C,EAAMoC,SAAWW,EAAOC,QAAQ2H,IAChC3K,EAAMqC,UAAUC,MAAQS,EAAOC,QAAQV,MACvCtC,EAAMmC,SAAU,CACpB,KAAC,SACA0D,EAAUzC,SAAU,SAACpD,GAClBA,EAAMmC,SAAU,CACpB,IAAC,KAIF,EAAsCH,EAAUqB,QAA3BJ,GAAF,EAAXH,YAAyB,EAAZG,cAE5B,EAAejB,EAAiB,O,8LCxD1B4I,GAAa3I,EAAAA,EAAAA,IAAY,CAC3B5B,KAAM,uBACN6B,aAAc,CACV6C,aAAc,GACdG,YAAa,GACbC,WAAY,GACZ0F,gBAAgB,GAEpBhI,SAAU,CACN8C,gBAAiB,SAAC3F,EAAO+C,GACrB/C,EAAM+E,aAAehC,EAAOC,OAChC,EACAsC,eAAgB,SAACtF,EAAO+C,GACpB/C,EAAMkF,YAAcnC,EAAOC,OAC/B,EACA8H,YAAa,SAAC9K,EAAM,GAAkB,IAAfgD,EAAO,EAAPA,QACb+H,GAAezL,EAAAA,EAAAA,IAAQU,GAC7B,IAAK+K,EAAahG,aAAaiG,SAAShI,GACpC,MAAO,CACH+B,aAAa,GAAD,eAAMgG,EAAahG,eAAY,OAAK/B,IAG5D,EACAiI,eAAgB,SAACjL,EAAM,GAAkB,IAAfgD,EAAO,EAAPA,QAChB+H,GAAezL,EAAAA,EAAAA,IAAQU,GAC7B,GAAI+K,EAAahG,aAAaiG,SAAShI,GACnC,MAAO,CACH+B,aAAcgG,EAAahG,aAAamG,QACpC,SAACnM,GAAE,OAAKA,IAAOiE,CAAO,IAItC,EACAqC,cAAe,SAACrF,EAAO+C,GACnB/C,EAAMmF,WAAapC,EAAOC,OAC9B,EACAmI,qBAAsB,SAACnL,EAAO+C,GAC1B/C,EAAM6K,eAAiB9H,EAAOC,OAClC,KAID,EAQH4H,EAAWvH,QAPXsC,EAAe,EAAfA,gBACAL,EAAc,EAAdA,eACAwF,EAAW,EAAXA,YACAG,EAAc,EAAdA,eAEA5F,GADwB,EAAxB+F,yBACa,EAAb/F,eACoB,EAApB8F,qBAGJ,KAAeP,EAAkB,O","sources":["components/shared/Accordion.js","components/template/CustomBreadCrumb.js","services/ItemsService.js","views/accounts/PendingApproval/store/dataSlice.js","views/orders/components/CancelledOrdersTable.js","views/orders/components/OrderOverviewHeaderActions.js","views/orders/components/OrdersDeleteConfirmation.js","views/orders/components/OrdersTable.js","views/orders/components/OrdersTableSearch.js","views/orders/components/OrdersFilter.js","views/orders/components/OrdersTableTools.js","views/orders/components/DataPlanActivation.js","views/orders/components/OrderAllocation.js","views/orders/components/OrderLabelling.js","views/orders/components/OrderPacking.js","views/orders/components/OrderDispatch.js","views/orders/components/OrderDelivery.js","views/orders/components/AccordionSteps.js","views/orders/components/ReplacedOrdersTable.js","services/OrdersService.js","views/orders/store/dataSlice.js","views/orders/store/stateSlice.js"],"sourcesContent":["import { BsChevronDown } from 'react-icons/bs'\r\nconst { useState, useRef } = require('react')\r\nconst AccordionItem = (props) => {\r\n    const contentEl = useRef()\r\n    const { handleToggle, active, faq } = props\r\n    const { title, id, component } = faq\r\n\r\n    return (\r\n        <div className=\"rc-accordion-card\">\r\n            <div className=\"rc-accordion-header\">\r\n                <div\r\n                    className={`rc-accordion-toggle p-3 ${\r\n                        active === id ? 'active' : ''\r\n                    }`}\r\n                    onClick={() => handleToggle(id)}\r\n                >\r\n                    <h5 className=\"rc-accordion-title\">{title}</h5>\r\n                    <BsChevronDown />\r\n                </div>\r\n            </div>\r\n            <div\r\n                ref={contentEl}\r\n                className={`rc-collapse ${active === id ? 'show' : ''}`}\r\n                style={\r\n                    active === id\r\n                        ? { height: contentEl?.current?.scrollHeight }\r\n                        : { height: '0px' }\r\n                }\r\n            >\r\n                <div className=\"rc-accordion-body\">\r\n                    <p className=\"mb-0\">{component}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Accordion = (props) => {\r\n    const [active, setActive] = useState(null)\r\n\r\n    const handleToggle = (index) => {\r\n        if (active === index) {\r\n            setActive(null)\r\n        } else {\r\n            setActive(index)\r\n        }\r\n    }\r\n\r\n    if(props?.Items === 0){\r\n        return (<></>)\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container-fluid mt-5 mb-5\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-md-8 mt-2\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                {props?.Items?.map((faq, index) => {\r\n                                    return (\r\n                                        <AccordionItem\r\n                                            key={index}\r\n                                            active={active}\r\n                                            handleToggle={handleToggle}\r\n                                            faq={faq}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Accordion\r\n","import { ActionLink } from 'components/shared'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CustomBreadcrumbs = ({ list }) => {\r\n    return (\r\n        <nav class=\"w-full rounded-md pb-2\">\r\n            <ol class=\"list-reset flex\">\r\n            {\r\n                list?.map((val, index) => {\r\n                    return <>\r\n                        <li>\r\n                            {val.link ? \r\n                            val?.state ?\r\n                            <Link\r\n                                to={val.link} state={{data:val?.state}}\r\n                                style={{textDecoration:'underline',color:'blue'}}\r\n                            >\r\n                                {val.name}\r\n                            </Link> :  <Link\r\n                                to={val.link}\r\n                                style={{textDecoration:'underline',color:'blue'}}\r\n                            >\r\n                                {val.name}\r\n                            </Link> \r\n                            : <>{val.name}</>}\r\n                        </li>\r\n                        {\r\n                            index + 1 < list.length && <li>\r\n                            <span class=\"mx-2 text-neutral-500 dark:text-neutral-400\">\r\n                                /\r\n                            </span>\r\n                        </li>\r\n                        }\r\n                    </>\r\n                })\r\n            }\r\n            </ol>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default CustomBreadcrumbs\r\n","import ApiService from './ApiService'\r\n\r\nexport async function apiGetSalesDashboardData(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/dashboard',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProduct(params) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/product',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiPutSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products/update',\r\n        method: 'put',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiCreateSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/products/create',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesItems(params) {\r\n    return ApiService.fetchData({\r\n        url: '/catalogs/dgl-cat-items-info',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesItemVariants(id) {\r\n    return ApiService.fetchData({\r\n        url: `catalogs/admin/items/${id}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesItemVariantsByItemId(id) {\r\n    return ApiService.fetchData({\r\n        url: `catalogs/admin/item/variant/${id}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\n\r\nexport async function apiDeleteSalesItems(data) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/orders/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesItemDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/sales/orders-details',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiCreateItem(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/catalogs/dgl-cat-items-info',\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp,\r\n        }\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        }\r\n    }\r\n}\r\n\r\nexport async function apiGetTemplates(params) {\r\n    return ApiService.fetchData({\r\n        url: '/catalogs/cat-tp-info',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiProductCategoryItems(params) {\r\n    return ApiService.fetchData({\r\n        url: '/catalogs/cat-items-info/items',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiGetProductCategory(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/prod-cats?page_no=1&page_size=4`,\r\n        method: 'get',\r\n        data\r\n    })\r\n}\r\n\r\nexport async function apiUpdateItemAccStatus(params,status) {\r\n    return ApiService.fetchData({\r\n        url: `/catalogs/dgl-cat-items-info/${params}/${status}`,\r\n        method: 'patch',\r\n    })\r\n}\r\n\r\nexport async function apiGetItemsTableData(params) {\r\n    return ApiService.fetchData({\r\n        url: `/catalogs/admin/items-pageable`,\r\n        method: 'get',\r\n        params\r\n    })\r\n}\r\n\r\nexport async function apiGetProductCategoryData(params) {\r\n    \r\n    return ApiService.fetchData({\r\n        url: `/account/prod-cats/unq-id/drop-down/${params.unq_id}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetTemplatesInItems(params) {\r\n    return ApiService.fetchData({\r\n        url: `/catalogs/admin/templates/${params.unq_id}/${params.category}/${params.type}?tpStatus=ACTIVE`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport async function apiGetItemsTemplateComponents(params) {\r\n    return ApiService.fetchData({\r\n        url: `/catalogs/admin/items-tax/${params}`,\r\n        method: 'get',\r\n    })\r\n}","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { apiGetSalesItems, apiDeleteSalesItems } from 'services/ItemsService'\r\n\r\nexport const getItems = createAsyncThunk(\r\n    'PendingArrovalsList/data/getItems',\r\n    async (data) => {\r\n        const response = []\r\n        return response\r\n    }\r\n)\r\n\r\nexport const deleteItems = async (data) => {\r\n    const response = await apiDeleteSalesItems(data)\r\n    return response.data\r\n}\r\n\r\nexport const initialTableData = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    query: '',\r\n    sort: {\r\n        Item: '',\r\n        key: '',\r\n    },\r\n}\r\n\r\nconst dataSlice = createSlice({\r\n    name: 'PendingArrovalsList/data',\r\n    initialState: {\r\n        loading: false,\r\n        ItemList: [],\r\n        tableData: initialTableData,\r\n    },\r\n    reducers: {\r\n        setItemList: (state, action) => {\r\n            state.ItemList = action.payload\r\n        },\r\n        setTableData: (state, action) => {\r\n            state.tableData = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [getItems.fulfilled]: (state, action) => {\r\n            state.ItemList = action.payload\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getItems.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n    },\r\n})\r\n\r\nexport const { setItemList, setTableData } = dataSlice.actions\r\n\r\nexport default dataSlice.reducer\r\n","import React, { useEffect, useCallback, useMemo, useRef, useState } from 'react'\r\nimport { Badge, Tooltip, Dialog, Button } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setTableData } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowItem,\r\n    removeRowItem,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport { HiDatabase } from 'react-icons/hi'\r\nimport { FiDatabase } from 'react-icons/fi'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\n// import cloneDeep from 'lodash/cloneDeep'\r\n// import dayjs from 'dayjs'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { AiFillCopy } from \"react-icons/ai\"\r\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\r\nimport { BiRefresh } from 'react-icons/bi'\r\nimport { getItems } from 'views/accounts/PendingApproval/store/dataSlice'\r\n\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Active',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n    2: { label: 'Inactive', dotClass: 'bg-red-500', textClass: 'text-red-500' },\r\n}\r\n\r\n\r\nconst ItemColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Item-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\nconst CancelledOrdersTable = () => {\r\n\r\n    const [isOpenRefresh, setIsOpen] = useState(false)\r\n\r\n    const ActionColumn = ({ row }) => {\r\n        const dispatch = useDispatch()\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n\r\n        const onDelete = () => {\r\n            dispatch(setDeleteMode('single'))\r\n            dispatch(setSelectedRow([row.id]))\r\n        }\r\n\r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Delete\">\r\n                    <span\r\n                        className=\"cursor-pointer p-2 hover:text-red-500\"\r\n                    //  onClick={onDelete}\r\n                    >\r\n                        <MdModeEdit />\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title=\"Opendialogue\">\r\n                    <span\r\n                        className=\"cursor-pointer p-2 hover:text-green-500\"\r\n                    //  onClick={onDelete}\r\n                    >\r\n                        <BiRefresh onClick={() => setIsOpen(true)} />\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n\r\n    // const tableRef = useRef(null)\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    // const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n    //     (state) => state.prodCatList.data.tableData\r\n    // )\r\n    // const loading = useSelector((state) => state.prodCatList.data.loading)\r\n\r\n    // const data = useSelector((state) => state.prodCatList.data.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getItems())\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    // const tableData = useMemo(\r\n    //     () => ({ pageIndex, pageSize, sort, query, total }),\r\n    //     [pageIndex, pageSize, sort, query, total]\r\n    // )\r\n\r\n    const location = useLocation()\r\n\r\n    const data = location?.state?.rowData;\r\n\r\n    const wo_info = data?.dgl_wo_infos\r\n    const columns = useMemo(\r\n        () => [\r\n            // {\r\n            //     header: 'Actions',\r\n            //     id: 'action',\r\n            //     cell: (props) => <ActionColumn row={props.row.original} />,\r\n            // },\r\n            {\r\n                header: 'Work Order Id',\r\n                accessorKey: 'id',\r\n            },\r\n            {\r\n                header: 'Date of creation',\r\n                accessorKey: 'wo_alltd_dt',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Item Name',\r\n                accessorKey: 'item_id',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Item Qty',\r\n                accessorKey: 'quantity',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Estimated Time of delivery',\r\n                accessorKey: 'description',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Delivery to',\r\n                accessorKey: 'description',\r\n\r\n\r\n            },\r\n\r\n\r\n            {\r\n                header: 'Status',\r\n                accessorKey: 'wo_status',\r\n\r\n                // cell: (props) => {\r\n                //     return (\r\n                //         <div className=\"flex items-center\">\r\n                //             <Badge\r\n                //                 className={ItemStatusColor[0].dotClass}\r\n                //             />\r\n                //             <span\r\n                //                 className={`ml-2 rtl:mr-2 capitalize font-semibold ${ItemStatusColor[0].textClass}`}\r\n                //             >\r\n                //                 {ItemStatusColor[0].label}\r\n                //             </span>\r\n                //         </div>\r\n                //     )\r\n                // },\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    // const onPaginationChange = (page) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageIndex = page\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSelectChange = (value) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageSize = Number(value)\r\n    //     newTableData.pageIndex = 1\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSort = (sort) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.sort = sort\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n    return (\r\n        <>\r\n            <DataTable\r\n                // ref={tableRef}\r\n                columns={columns}\r\n                data={wo_info?.map(val => {\r\n                    return [...[val], ...val.dgl_wo_intry_allocation]\r\n                })?.flat(1)}\r\n            // loading={loading}\r\n            // pagingData={tableData}\r\n            // onPaginationChange={onPaginationChange}\r\n            // onSelectChange={onSelectChange}\r\n            // onSort={onSort}\r\n            // onCheckBoxChange={onRowSelect}\r\n            // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n            // selectable\r\n            />\r\n            <Dialog\r\n                isOpen={isOpenRefresh}\r\n            // onClose={onDialogClose}\r\n            // onRequestClose={onDialogClose}\r\n            // width={800}\r\n            // height={450}\r\n            >\r\n\r\n                <div className=\"flex flex-col h-full justify-between\">\r\n                    <h5 className=\"mb-4\">Sync API</h5>\r\n                    <hr style={{ color: \"1px solid gray\" }} />\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"20px\" }}>\r\n                        <div className='flex flex-col ml-5 text-green-800'>\r\n                            <HiDatabase />\r\n                            <p>Sync Database-1</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6'>\r\n                            <BiRefresh />\r\n                            <p style={{ color: \"gray\" }}>and</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6 text-blue-800'>\r\n                            <FiDatabase />\r\n                            <p>OD-1 DB</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-center mt-5\">\r\n                        <button className=\"text-blue-800\" style={{ border: \"2px solid blue\", height: \"30px\", width: \"70px\" }}>Sync</button>\r\n                    </div>\r\n                    <div>\r\n                        <h6>Syncing in progress</h6>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill className='mt-1 mr-3 text-green-800' />\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill className='mt-1 mr-3 text-green-800' />\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill className='mt-1 mr-3 text-green-800' />\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill className='mt-1 mr-3 text-green-800' />\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-right mt-6\">\r\n                        <Button\r\n                            className=\"mr-2\"\r\n                            variant=\"plain\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"solid\" onClick={() => setIsOpen(false)}>\r\n                            Done\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CancelledOrdersTable\r\n","import { Link } from 'react-router-dom'\r\nimport { Tabs, Button } from 'components/ui'\r\n\r\nconst OrderOverviewHeaderActions = () => {\r\n\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center\">\r\n            <Link\r\n                className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                to=\"/orders\" >\r\n                <Button block variant=\"solid\">\r\n                    Back to Orders\r\n                </Button>\r\n            </Link>\r\n\r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n                target=\"_blank\"\r\n                download>\r\n                <Button block>\r\n                    Download Invoice\r\n                </Button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderOverviewHeaderActions","import React from 'react'\r\nimport { toast, Notification } from 'components/ui'\r\nimport { ConfirmDialog } from 'components/shared'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n    setSelectedRows,\r\n} from '../store/stateSlice'\r\nimport { deleteOrders, getOrders } from '../store/dataSlice'\r\n\r\nconst OrderDeleteConfirmation = () => {\r\n    const dispatch = useDispatch()\r\n    const selectedRows = useSelector(\r\n        (state) => state.salesOrderList.state.selectedRows\r\n    )\r\n    const selectedRow = useSelector(\r\n        (state) => state.salesOrderList.state.selectedRow\r\n    )\r\n    const deleteMode = useSelector(\r\n        (state) => state.salesOrderList.state.deleteMode\r\n    )\r\n    const tableData = useSelector(\r\n        (state) => state.salesOrderList.data.tableData\r\n    )\r\n\r\n    const onDialogClose = () => {\r\n        dispatch(setDeleteMode(''))\r\n\r\n        if (deleteMode === 'single') {\r\n            dispatch(setSelectedRow([]))\r\n        }\r\n    }\r\n\r\n    const onDelete = async () => {\r\n        dispatch(setDeleteMode(''))\r\n\r\n        if (deleteMode === 'single') {\r\n            const success = await deleteOrders({ id: selectedRow })\r\n            deleteSucceed(success)\r\n            dispatch(setSelectedRow([]))\r\n        }\r\n\r\n        if (deleteMode === 'batch') {\r\n            const success = await deleteOrders({ id: selectedRows })\r\n            deleteSucceed(success, selectedRows.length)\r\n            dispatch(setSelectedRows([]))\r\n        }\r\n    }\r\n\r\n    const deleteSucceed = (success, Orders) => {\r\n        if (success) {\r\n            dispatch(getOrders(tableData))\r\n            toast.push(\r\n                <Notification\r\n                    title={'Successfuly Deleted'}\r\n                    type=\"success\"\r\n                    duration={2500}\r\n                >\r\n                    {deleteMode === 'single' && 'Order '}\r\n                    {deleteMode === 'batch' && `${Orders} Orders `}\r\n                    successfuly deleted\r\n                </Notification>,\r\n                {\r\n                    placement: 'top-center',\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ConfirmDialog\r\n            isOpen={deleteMode === 'single' || deleteMode === 'batch'}\r\n            onClose={onDialogClose}\r\n            onRequestClose={onDialogClose}\r\n            type=\"danger\"\r\n            title=\"Delete product\"\r\n            onCancel={onDialogClose}\r\n            onConfirm={onDelete}\r\n            confirmButtonColor=\"red-600\"\r\n        >\r\n            <p>\r\n                Are you sure you want to delete this Order? All record related\r\n                to this Order will be deleted as well. This action cannot be\r\n                undone.\r\n            </p>\r\n        </ConfirmDialog>\r\n    )\r\n}\r\n\r\nexport default OrderDeleteConfirmation\r\n","import React, { useEffect, useCallback, useMemo, useRef } from 'react'\r\nimport { Badge, Tooltip } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getOrders, setTableData } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowOrder,\r\n    removeRowOrder,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport dayjs from 'dayjs'\r\n\r\nconst OrderStatusColor = {\r\n    0: {\r\n        label: 'Active',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n    2: { label: 'Inactive', dotClass: 'bg-red-500', textClass: 'text-red-500' },\r\n}\r\n\r\n\r\nconst OrderColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Order-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\nconst ActionColumn = ({ row }) => {\r\n    const dispatch = useDispatch()\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onDelete = () => {\r\n        dispatch(setDeleteMode('single'))\r\n        dispatch(setSelectedRow([row.id]))\r\n    }\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Order-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <div className=\"flex justify-end text-lg\">\r\n            <Tooltip title=\"View\">\r\n                <span\r\n                    className={`cursor-pointer p-2 hover:${textTheme}`}\r\n                    onClick={onView}\r\n                >\r\n                    <HiOutlineEye />\r\n                </span>\r\n            </Tooltip>\r\n            <Tooltip title=\"Delete\">\r\n                <span\r\n                    className=\"cursor-pointer p-2 hover:text-red-500\"\r\n                    onClick={onDelete}\r\n                >\r\n                    <HiOutlineTrash />\r\n                </span>\r\n            </Tooltip>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst OrdersTable = () => {\r\n\r\n    const tableRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n        (state) => state.salesOrderList.data.tableData\r\n    )\r\n    const loading = useSelector((state) => state.salesOrderList.data.loading)\r\n\r\n    const data = useSelector((state) => state.salesOrderList.data.ItemList)\r\n\r\n    const fetchData = useCallback(() => {\r\n        dispatch(getOrders({ page_no: pageIndex - 1, page_size: pageSize }))\r\n    }, [])\r\n    \r\n    useEffect(() => {\r\n        dispatch(setSelectedRows([]))\r\n        fetchData()\r\n    }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    const tableData = useMemo(\r\n        () => ({ pageIndex, pageSize, sort, query, total }),\r\n        [pageIndex, pageSize, sort, query, total]\r\n    )\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            // {\r\n            //     header: 'Actions',\r\n            //     flex:1,\r\n            //     id: 'action',\r\n            //     cell: (props) => <ActionColumn row={props.row.original} />,\r\n            // },\r\n            {\r\n                header: 'Order ID',\r\n                accessorKey: 'id',\r\n                flex:1,\r\n                cell: (props) => {\r\n                    \r\n                    const { id } = props.row.original\r\n                    return (\r\n                        <Link className='underline decoration-blue-500 text-blue-500' to=\"/order-details\" state={{rowData:props.row.original} }>\r\n                            {id}\r\n                        </Link>\r\n                    )\r\n                },\r\n                \r\n            },\r\n            {\r\n                header: 'Customer ID',\r\n                accessorKey: 'rel_ord_cust_id',\r\n                \r\n               \r\n            },\r\n            {\r\n                header: 'Customer Name',\r\n                accessorKey: 'cust_user_id',\r\n               \r\n            },\r\n            {\r\n                header: 'Date of Order',\r\n                accessorKey: 'ord_dt_of_ord',\r\n               \r\n            \r\n            },\r\n            {\r\n                header: 'Payment Method',\r\n                accessorKey: 'ordPayModeOfPay',\r\n                cell: (props) => {\r\n                    \r\n                    const { dgl_ord_payments } = props.row.original\r\n                    return (\r\n                        <span>\r\n                            {dgl_ord_payments?.length > 0 ? dgl_ord_payments[0].pay_mode : \"\"}\r\n                        </span>\r\n                    )\r\n                },\r\n               \r\n            },\r\n            {\r\n                header: 'Order Value',\r\n                accessorKey: 'ord_value',\r\n              \r\n                \r\n            },\r\n            {\r\n                header: 'Status',\r\n                accessorKey: 'ord_status',\r\n              \r\n               \r\n            },\r\n         \r\n           \r\n        ],\r\n        []\r\n    )\r\n\r\n    const onPaginationChange = (page) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageIndex = page\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSelectChange = (value) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageSize = Number(value)\r\n        newTableData.pageIndex = 1\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSort = (sort) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.sort = sort\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onRowSelect = (checked, row) => {\r\n        if (checked) {\r\n            dispatch(addRowOrder([row.id]))\r\n        } else {\r\n            dispatch(removeRowOrder(row.id))\r\n        }\r\n    }\r\n\r\n    const onAllRowSelect = useCallback(\r\n        (checked, rows) => {\r\n            if (checked) {\r\n                const originalRows = rows.map((row) => row.original)\r\n                const selectedIds = []\r\n                originalRows.forEach((row) => {\r\n                    selectedIds.push(row.id)\r\n                })\r\n                dispatch(setSelectedRows(selectedIds))\r\n            } else {\r\n                dispatch(setSelectedRows([]))\r\n            }\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    return (\r\n        <DataTable\r\n            ref={tableRef}\r\n            columns={columns}\r\n            data={data}\r\n            loading={loading}\r\n            pagingData={tableData}\r\n            onPaginationChange={onPaginationChange}\r\n            onSelectChange={onSelectChange}\r\n            onSort={onSort}\r\n            // onCheckBoxChange={onRowSelect}\r\n            // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n        />\r\n    )\r\n}\r\n\r\nexport default OrdersTable\r\n","import React, { useRef } from 'react'\r\nimport { Input } from 'components/ui'\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getOrders, setTableData } from '../store/dataSlice'\r\nimport debounce from 'lodash/debounce'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\n\r\nconst OrderTableSearch = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const searchInput = useRef()\r\n\r\n    const tableData = useSelector(\r\n        (state) => state.salesOrderList.data.tableData\r\n    )\r\n\r\n    const debounceFn = debounce(handleDebounceFn, 500)\r\n\r\n    function handleDebounceFn(val) {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.query = val\r\n        newTableData.pageIndex = 1\r\n        if (typeof val === 'string' && val.length > 1) {\r\n            fetchData(newTableData)\r\n        }\r\n\r\n        if (typeof val === 'string' && val.length === 0) {\r\n            fetchData(newTableData)\r\n        }\r\n    }\r\n\r\n    const fetchData = (data) => {\r\n        dispatch(setTableData(data))\r\n        dispatch(getOrders(data))\r\n    }\r\n\r\n    const onEdit = (e) => {\r\n        debounceFn(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <Input\r\n            ref={searchInput}\r\n            className=\"lg:w-52\"\r\n            size=\"sm\"\r\n            placeholder=\"Search\"\r\n            prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n            onChange={onEdit}\r\n        />\r\n    )\r\n}\r\n\r\nexport default OrderTableSearch\r\n","import React from 'react'\r\nimport { HiOutlineFilter} from 'react-icons/hi'\r\nimport {\r\n   \r\n    Button,\r\n  \r\n} from 'components/ui'\r\n\r\n\r\n\r\nconst OrderFilter = () => {\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                size=\"sm\"\r\n                className=\"block md:inline-block ltr:md:ml-2 rtl:md:mr-2 md:mb-0 mb-4\"\r\n                icon={<HiOutlineFilter />}\r\n                onClick={() => {}}\r\n            >\r\n                Filter\r\n            </Button>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default OrderFilter\r\n","import React from 'react'\r\nimport { HiDownload, HiPlusCircle } from 'react-icons/hi'\r\nimport OrderTableSearch from './OrdersTableSearch'\r\nimport { Link } from 'react-router-dom'\r\nimport OperatorsFilter from './OrdersFilter'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Radio,\r\n    FormItem,\r\n    FormContainer,\r\n    Drawer,\r\n} from 'components/ui'\r\nimport NewOrders from './NewOrders'\r\n\r\n\r\nconst OrdersTableTools = () => {\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center\">\r\n            <OrderTableSearch />\r\n            <OperatorsFilter />\r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n                target=\"_blank\"\r\n                download\r\n            >\r\n                <Button block size=\"sm\" icon={<HiDownload />}>\r\n                    Export\r\n                </Button>\r\n            </Link>\r\n            {/* <Link\r\n                className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                to=\"/warehouse-new-order\"\r\n            >\r\n                <Button block variant=\"solid\" size=\"sm\" icon={<HiPlusCircle />}>\r\n                   Create\r\n                </Button>\r\n            </Link> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrdersTableTools\r\n","import React, {useState, useEffect, useCallback, useMemo, useRef } from 'react'\r\nimport { Badge, Tooltip,Button,Dialog } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setTableData } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowItem,\r\n    removeRowItem,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport dayjs from 'dayjs'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport {HiDatabase} from 'react-icons/hi'\r\nimport {FiDatabase} from 'react-icons/fi'\r\nimport { AiFillCopy } from \"react-icons/ai\"\r\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\r\nimport { getItems } from 'views/accounts/PendingApproval/store/dataSlice'\r\nimport { BiRefresh } from 'react-icons/bi'\r\nimport { BsCheckCircleFill } from 'react-icons/bs'\r\n\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Completed',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'Not yet Shipped',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n}\r\n\r\n\r\nconst ItemColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Item-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst DataPlanActivation = () => {\r\n\r\n    const [isOpenRefresh, setIsOpen] = useState(false)\r\n\r\n    const ActionColumn = ({ row }) => {\r\n        const dispatch = useDispatch()\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n    \r\n        const onDelete = () => {\r\n            dispatch(setDeleteMode('single'))\r\n            dispatch(setSelectedRow([row.id]))\r\n        }\r\n    \r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n    \r\n    \r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                        //  onClick={onView}\r\n                    >\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <MdModeEdit />\r\n                            <BiRefresh className='ml-2'style={{color:\"gray\"}} onClick={()=>setIsOpen(true)}/>\r\n                        </div>\r\n    \r\n    \r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    \r\n    }\r\n\r\n    const tableRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n        (state) => state.salesOrderList.data.tableData\r\n    )\r\n    // const loading = useSelector((state) => state.prodCatList.data.loading)\r\n\r\n    // const data = useSelector((state) => state.prodCatList.data.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getItems())\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    const tableData = useMemo(\r\n        () => ({ pageIndex, pageSize, sort, query, total }),\r\n        [pageIndex, pageSize, sort, query, total]\r\n    )\r\n\r\n    const data = [\r\n        {\r\n            SimiNo: 'SIM Sr.No.1',\r\n            uniqueIdentificationNumber: '74589632105858',\r\n            activationDateAndTime: \"28/072023,05:30 PM\",\r\n            simId: \"#ID23145\",\r\n            statusOfActivation: \"Not Yet Activated\",\r\n            action: \"5,499.00\",\r\n        },\r\n        {\r\n            SimiNo: 'SIM Sr.No.2',\r\n            uniqueIdentificationNumber: '5489787545646',\r\n            activationDateAndTime: \"25/062023,08:42 AM\",\r\n            simId: \"#ID23145\",\r\n            statusOfActivation: \"Not Yet Activated\",\r\n            action: \"5,499.00\",\r\n        },\r\n    ]\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'SIM SI.No',\r\n                accessorKey: 'SimiNo',\r\n            },\r\n            {\r\n                header: 'Unique Identification Number',\r\n                accessorKey: 'uniqueIdentificationNumber',\r\n        \r\n        \r\n            },\r\n            {\r\n                header: 'Activation Date & Time',\r\n                accessorKey: 'activationDateAndTime',\r\n        \r\n        \r\n            },\r\n            {\r\n                header: 'SIM ID',\r\n                accessorKey: 'simId',\r\n        \r\n        \r\n            },\r\n            {\r\n                header: 'Status Of Activation',\r\n                accessorKey: 'statusOfActivation',\r\n            },\r\n            {\r\n                header: 'Action',\r\n                accessorKey: 'action',\r\n                cell: (props) => {\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n                            <Button variant=\"solid\">\r\n                                Activate Plan\r\n                            </Button>\r\n                        </div>\r\n                    )\r\n                },\r\n            }\r\n        ],\r\n        []\r\n    )\r\n\r\n    const onPaginationChange = (page) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageIndex = page\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSelectChange = (value) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageSize = Number(value)\r\n        newTableData.pageIndex = 1\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSort = (sort) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.sort = sort\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n\r\n    return (\r\n        <>\r\n        <DataTable\r\n            // ref={tableRef}\r\n            columns={columns}\r\n            data={data}\r\n            // loading={loading}\r\n            pagingData={tableData}\r\n            onPaginationChange={onPaginationChange}\r\n            onSelectChange={onSelectChange}\r\n            onSort={onSort}\r\n        // onCheckBoxChange={onRowSelect}\r\n        // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n        // selectable\r\n        />\r\n        <Dialog\r\n                isOpen={isOpenRefresh}\r\n                // onClose={onDialogClose}\r\n                // onRequestClose={onDialogClose}\r\n                // width={800}\r\n                // height={450}\r\n            >\r\n            \r\n                <div className=\"flex flex-col h-full justify-between\">\r\n                    <h5 className=\"mb-4\">Sync API</h5>\r\n                    <hr style={{color: \"1px solid gray\"}} />   \r\n                    <div style={{display:\"flex\",justifyContent:\"center\",marginTop:\"20px\"}}>\r\n                        <div className='flex flex-col ml-5 text-green-800 h-14'>\r\n                            <HiDatabase/>\r\n                            <p>Sync Database-1</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6'>\r\n                            <BiRefresh/>\r\n                            <p style={{color:\"gray\"}}>and</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6 text-blue-800'>\r\n                            <FiDatabase/>\r\n                            <p>OD-1 DB</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-center mt-5\">\r\n                    <button className=\"text-blue-800\" style={{border:\"2px solid blue\", height:\"30px\", width:\"70px\"}}>Sync</button>\r\n                    </div>\r\n                    <div>\r\n                        <h6>Syncing in progress</h6>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>   \r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-right mt-6\">\r\n                        <Button\r\n                            className=\"mr-2\"\r\n                            variant=\"plain\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"solid\" onClick={() =>setIsOpen(false)}>\r\n                            Done\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DataPlanActivation\r\n","import React, {useState, useEffect, useCallback, useMemo, useRef } from 'react'\r\nimport { Badge, Tooltip,Button,Dialog } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setTableData } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowItem,\r\n    removeRowItem,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport dayjs from 'dayjs'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport {HiDatabase} from 'react-icons/hi'\r\nimport {FiDatabase} from 'react-icons/fi'\r\nimport { AiFillCopy } from \"react-icons/ai\"\r\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\r\nimport { getItems } from 'views/accounts/PendingApproval/store/dataSlice'\r\nimport { BiRefresh } from 'react-icons/bi'\r\n\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Active',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n    2: { label: 'Inactive', dotClass: 'bg-red-500', textClass: 'text-red-500' },\r\n}\r\n\r\n\r\nconst ItemColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Item-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst OrderAllocation = ({woIndex}) => {\r\n\r\n    const [isOpenRefresh, setIsOpen] = useState(false)\r\n    const location = useLocation()\r\n    const rawData = location?.state?.rowData;\r\n    const wo_info = rawData?.dgl_wo_infos[woIndex]\r\n    // const data2 = data?.dgl_wo_infos.concat(array[1]);\r\n    // let data2 = [];\r\n    // let i = '';\r\n    // for(i=0;i<data.dgl_wo_infos.length;i++){\r\n    //     data2.push(data.dgl_wo_infos[i].dgl_wo_intry_allocation);\r\n    // }\r\n\r\n    // const data = wo_info.map(function(item, index) {\r\n    //     return {wo_status: item.wo_status, item_id: wo_info[index].dgl_wo_intry_allocation[index].item_id, quantity: wo_info[index].dgl_wo_intry_allocation[index].quantity};\r\n    // });\r\n    const ActionColumn = ({ row }) => {\r\n        const dispatch = useDispatch()\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n    \r\n        const onDelete = () => {\r\n            dispatch(setDeleteMode('single'))\r\n            dispatch(setSelectedRow([row.id]))\r\n        }\r\n    \r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n    \r\n    \r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                        //  onClick={onView}\r\n                    >\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <MdModeEdit />\r\n                            <BiRefresh className='ml-2'style={{color:\"gray\"}} onClick={()=>setIsOpen(true)}/>\r\n                        </div>\r\n    \r\n    \r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    \r\n    }\r\n\r\n    const tableRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n        (state) => state.salesOrderList.data.tableData\r\n    )\r\n    const loading = useSelector((state) => state.salesOrderList.data.loading)\r\n    // console.log(loading)\r\n    // const data = useSelector((state) => state.prodCatList.data.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(data)\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // const data = [\r\n    //     {\r\n    //         productId: '#ID23012',\r\n    //         productTitle: 'Amazon Echo Show 5',\r\n    //         skuCode: \"WB1234567\",\r\n    //         quantity: \"100 Pcs\",\r\n    //         workOrderStatus: \"Accepted By Warehouse\",\r\n    //     },\r\n    //     {\r\n    //         productId: '#ID23013',\r\n    //         productTitle: 'Amazon Fire TV Stick Lite',\r\n    //         skuCode: \"WB1234756\",\r\n    //         quantity: \"200 Pcs\",\r\n    //         workOrderStatus: \"Accepted By Warehouse\",\r\n    //     },\r\n    // ]\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    const tableData = useMemo(\r\n        () => ({ pageIndex, pageSize, sort, query, total }),\r\n        [pageIndex, pageSize, sort, query, total]\r\n    )\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Product Id',\r\n                accessorKey: 'item_id',\r\n            },\r\n            {\r\n                header: 'Product Title',\r\n                accessorKey: 'item_id',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'SKU Code',\r\n                accessorKey: 'item_id',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Quantity',\r\n                accessorKey: 'quantity',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Work Order Status',\r\n                accessorKey: 'wo_status',\r\n                cell: () => {\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n                            {wo_info.wo_status}\r\n                        </div>\r\n                    )\r\n                },\r\n\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const onPaginationChange = (page) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageIndex = page\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSelectChange = (value) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageSize = Number(value)\r\n        newTableData.pageIndex = 1\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSort = (sort) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.sort = sort\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n\r\n    return (\r\n        <>\r\n        <DataTable\r\n            // ref={tableRef}\r\n            columns={columns}\r\n            data={wo_info.dgl_wo_intry_allocation}\r\n            // loading={loading}\r\n            pagingData={tableData}\r\n            onPaginationChange={onPaginationChange}\r\n            onSelectChange={onSelectChange}\r\n            onSort={onSort}\r\n            // onCheckBoxChange={onRowSelect}\r\n            // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n            // selectable\r\n        />\r\n        <Dialog\r\n                isOpen={isOpenRefresh}\r\n                // onClose={onDialogClose}\r\n                // onRequestClose={onDialogClose}\r\n                // width={800}\r\n                // height={450}\r\n            >\r\n            \r\n                <div className=\"flex flex-col h-full justify-between\">\r\n                    <h5 className=\"mb-4\">Sync API</h5>\r\n                    <hr style={{color: \"1px solid gray\"}} />   \r\n                    <div style={{display:\"flex\",justifyContent:\"center\",marginTop:\"20px\"}}>\r\n                        <div className='flex flex-col ml-5 text-green-800 h-14'>\r\n                            <HiDatabase/>\r\n                            <p>Sync Database-1</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6'>\r\n                            <BiRefresh/>\r\n                            <p style={{color:\"gray\"}}>and</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6 text-blue-800'>\r\n                            <FiDatabase/>\r\n                            <p>OD-1 DB</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-center mt-5\">\r\n                    <button className=\"text-blue-800\" style={{border:\"2px solid blue\", height:\"30px\", width:\"70px\"}}>Sync</button>\r\n                    </div>\r\n                    <div>\r\n                        <h6>Syncing in progress</h6>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>   \r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-right mt-6\">\r\n                        <Button\r\n                            className=\"mr-2\"\r\n                            variant=\"plain\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"solid\" onClick={() =>setIsOpen(false)}>\r\n                            Done\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OrderAllocation\r\n","import React, {useState, useEffect, useCallback, useMemo, useRef } from 'react'\r\nimport { Badge, Tooltip,Button,Dialog } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setTableData } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowItem,\r\n    removeRowItem,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport dayjs from 'dayjs'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport {HiDatabase} from 'react-icons/hi'\r\nimport {FiDatabase} from 'react-icons/fi'\r\nimport { AiFillCopy } from \"react-icons/ai\"\r\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\r\nimport { getItems } from 'views/accounts/PendingApproval/store/dataSlice'\r\nimport { BiRefresh } from 'react-icons/bi'\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom'\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Active',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n    2: { label: 'Inactive', dotClass: 'bg-red-500', textClass: 'text-red-500' },\r\n}\r\n\r\n\r\nconst ItemColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Item-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst OrderLabelling = ({woIndex}) => {\r\n\r\n    const [isOpenRefresh, setIsOpen] = useState(false)\r\n    const location = useLocation()\r\n    const rawdata = location?.state?.rowData;\r\n\r\n    const wo_info = rawdata?.dgl_wo_infos[woIndex]\r\n    const data = wo_info.map(function(item, index) {\r\n        return {wo_status: item.wo_status, item_var_id: wo_info[index].dgl_wo_intry_allocation[index].dgl_work_order_labelling.item_var_id};\r\n    });\r\n\r\n    const ActionColumn = ({ row }) => {\r\n        const dispatch = useDispatch()\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n    \r\n        const onDelete = () => {\r\n            dispatch(setDeleteMode('single'))\r\n            dispatch(setSelectedRow([row.id]))\r\n        }\r\n    \r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n    \r\n    \r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                        //  onClick={onView}\r\n                    >\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <MdModeEdit />\r\n                            <BiRefresh className='ml-2'style={{color:\"gray\"}} onClick={()=>setIsOpen(true)}/>\r\n                        </div>\r\n    \r\n    \r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    \r\n    }\r\n\r\n    const tableRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n        (state) => state.salesOrderList.data.tableData\r\n    )\r\n    // const loading = useSelector((state) => state.prodCatList.data.loading)\r\n\r\n    // const data = useSelector((state) => state.prodCatList.data.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getItems())\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    const tableData = useMemo(\r\n        () => ({ pageIndex, pageSize, sort, query, total }),\r\n        [pageIndex, pageSize, sort, query, total]\r\n    )\r\n\r\n    // const data = [\r\n    //     {\r\n    //         itemId: '#ID23012',\r\n    //         itemTitle: 'Amazon Echo Show 5',\r\n    //         skuCode: \"WB1234567\",\r\n    //         conflictRaisedBy: \"N/A\",\r\n    //         barCode: \"5448548\",\r\n    //         status: \"Proceeded to Package\",\r\n    //         action: \"1\",\r\n    //     },\r\n    //     {\r\n    //         itemId: '#ID23013',\r\n    //         itemTitle: 'Amazon Fire TV Stick Lite',\r\n    //         skuCode: \"WB1234756\",\r\n    //         conflictRaisedBy: \"Raju Warehouse Manger,#ID6596\",\r\n    //         barCode: \"2598712\",\r\n    //         status: \"Conflict Raised By Warehouse, Conflict ID - #196781\",\r\n    //         action: \"2\",\r\n    //     },\r\n    // ]\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Item Id',\r\n                accessorKey: 'item_var_id',\r\n            },\r\n            {\r\n                header: 'Item Title',\r\n                accessorKey: 'item_var_id',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'SKU Code',\r\n                accessorKey: 'item_var_id',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Conflict Raised By',\r\n                accessorKey: 'item_var_id',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Bar Code',\r\n                accessorKey: 'item_var_id',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Status',\r\n                accessorKey: 'wo_status',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Action',\r\n                accessorKey: 'action',\r\n                cell: (props) => {\r\n                    console.log(props.row.id);\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n                            {props.row.id == '0' ? (<Button variant=\"solid\">\r\n                                Download QC Report\r\n                            </Button>):(<Button variant=\"solid\">\r\n                                View Conflict\r\n                            </Button>\r\n                            )}\r\n                        </div>\r\n                    )\r\n                },\r\n            }\r\n        ],\r\n        []\r\n    )\r\n\r\n    const onPaginationChange = (page) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageIndex = page\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSelectChange = (value) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageSize = Number(value)\r\n        newTableData.pageIndex = 1\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSort = (sort) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.sort = sort\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n\r\n    return (\r\n        <>\r\n        <DataTable\r\n            // ref={tableRef}\r\n            columns={columns}\r\n            data={data}\r\n            // loading={loading}\r\n            pagingData={tableData}\r\n            onPaginationChange={onPaginationChange}\r\n            onSelectChange={onSelectChange}\r\n            onSort={onSort}\r\n        // onCheckBoxChange={onRowSelect}\r\n        // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n        // selectable\r\n        />\r\n        <Dialog\r\n                isOpen={isOpenRefresh}\r\n                // onClose={onDialogClose}\r\n                // onRequestClose={onDialogClose}\r\n                // width={800}\r\n                // height={450}\r\n            >\r\n            \r\n                <div className=\"flex flex-col h-full justify-between\">\r\n                    <h5 className=\"mb-4\">Sync API</h5>\r\n                    <hr style={{color: \"1px solid gray\"}} />   \r\n                    <div style={{display:\"flex\",justifyContent:\"center\",marginTop:\"20px\"}}>\r\n                        <div className='flex flex-col ml-5 text-green-800 h-14'>\r\n                            <HiDatabase/>\r\n                            <p>Sync Database-1</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6'>\r\n                            <BiRefresh/>\r\n                            <p style={{color:\"gray\"}}>and</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6 text-blue-800'>\r\n                            <FiDatabase/>\r\n                            <p>OD-1 DB</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-center mt-5\">\r\n                    <button className=\"text-blue-800\" style={{border:\"2px solid blue\", height:\"30px\", width:\"70px\"}}>Sync</button>\r\n                    </div>\r\n                    <div>\r\n                        <h6>Syncing in progress</h6>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>   \r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-right mt-6\">\r\n                        <Button\r\n                            className=\"mr-2\"\r\n                            variant=\"plain\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"solid\" onClick={() =>setIsOpen(false)}>\r\n                            Done\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OrderLabelling\r\n","import React, {useState, useEffect, useCallback, useMemo, useRef } from 'react'\r\nimport { Badge, Tooltip,Button,Dialog } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setTableData } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowItem,\r\n    removeRowItem,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport dayjs from 'dayjs'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport {HiDatabase} from 'react-icons/hi'\r\nimport {FiDatabase} from 'react-icons/fi'\r\nimport { AiFillCopy } from \"react-icons/ai\"\r\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\r\nimport { getItems } from 'views/accounts/PendingApproval/store/dataSlice'\r\nimport { BiRefresh } from 'react-icons/bi'\r\nimport { BsCheckCircleFill } from 'react-icons/bs'\r\n\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Completed',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'In Completed',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n}\r\n\r\n\r\nconst ItemColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Item-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst OrderPacking = ({woIndex}) => {\r\n\r\n    const [isOpenRefresh, setIsOpen] = useState(false)\r\n    const location = useLocation()\r\n    const rawData = location?.state?.rowData;\r\n    const wo_info = rawData?.dgl_wo_infos[woIndex]\r\n    // const data = wo_info.map(function(item, index) {\r\n    //     return {wo_status: item.wo_status, item_id: wo_info[index].dgl_work_order_packaging[index].item_id};\r\n    // });\r\n    const ActionColumn = ({ row }) => {\r\n        const dispatch = useDispatch()\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n    \r\n        const onDelete = () => {\r\n            dispatch(setDeleteMode('single'))\r\n            dispatch(setSelectedRow([row.id]))\r\n        }\r\n    \r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n    \r\n    \r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                        //  onClick={onView}\r\n                    >\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <MdModeEdit />\r\n                            <BiRefresh className='ml-2'style={{color:\"gray\"}} onClick={()=>setIsOpen(true)}/>\r\n                        </div>\r\n    \r\n    \r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    \r\n    }\r\n\r\n    const tableRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n        (state) => state.salesOrderList.data.tableData\r\n    )\r\n    // const loading = useSelector((state) => state.prodCatList.data.loading)\r\n\r\n    // const data = useSelector((state) => state.prodCatList.data.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getItems())\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    const tableData = useMemo(\r\n        () => ({ pageIndex, pageSize, sort, query, total }),\r\n        [pageIndex, pageSize, sort, query, total]\r\n    )\r\n\r\n    // const data = [\r\n    //     {\r\n    //         packagingId: '#ID23001',\r\n    //         noOfItems: '14',\r\n    //         packageDimensions: \"6x5.7x3.2\",\r\n    //         packageWeight: \"5000Lbs\",\r\n    //         statusOfPackaging: \"Completed\",\r\n    //         specialInstructions: \"Since these are electronic items\",\r\n    //         actions: \"Accepted By Warehouse\",\r\n    //     },\r\n    //     {\r\n    //         packagingId: '#ID23013',\r\n    //         noOfItems: '1',\r\n    //         packageDimensions: \"7x5.6x3.2\",\r\n    //         packageWeight: \"5000Lbs\",\r\n    //         statusOfPackaging: \"Completed\",\r\n    //         specialInstructions: \"Since these are electronic items\",\r\n    //         actions: \"Accepted By Warehouse\",\r\n    //     },\r\n    // ]\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Packaging ID',\r\n                accessorKey: 'package_id',\r\n            },\r\n            {\r\n                header: 'No. Of Items',\r\n                accessorKey: 'wh_id',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Package Dimensions',\r\n                accessorKey: 'id',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Package Weight (Kgs/Lbs)',\r\n                accessorKey: 'net_weight',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Status Of Packaging',\r\n                accessorKey: 'wo_status',\r\n                cell: (props) => {\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n    \r\n                            <BsCheckCircleFill className='ml-4'style={{color:\"green\"}} />\r\n                            <span\r\n                                className={`ml-2 rtl:mr-2 capitalize`}\r\n                            >\r\n                                {ItemStatusColor[0].label}\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                },\r\n\r\n            },\r\n            {\r\n                header: 'Special Instructions (If Any)',\r\n                accessorKey: 'special_instruction',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Actions',\r\n                accessorKey: 'actions',\r\n                cell: (props) => {\r\n                    return (\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <BiRefresh className='ml-4'style={{color:\"gray\"}} onClick={()=>setIsOpen(true)}/>\r\n                        </div>\r\n                    )\r\n                },\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const onPaginationChange = (page) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageIndex = page\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSelectChange = (value) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageSize = Number(value)\r\n        newTableData.pageIndex = 1\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSort = (sort) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.sort = sort\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n\r\n    return (\r\n        <>\r\n        <DataTable\r\n            // ref={tableRef}\r\n            columns={columns}\r\n            data={wo_info.dgl_work_order_packaging}\r\n            // loading={loading}\r\n            pagingData={tableData}\r\n            onPaginationChange={onPaginationChange}\r\n            onSelectChange={onSelectChange}\r\n            onSort={onSort}\r\n        // onCheckBoxChange={onRowSelect}\r\n        // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n        // selectable\r\n        />\r\n        <Dialog\r\n                isOpen={isOpenRefresh}\r\n                // onClose={onDialogClose}\r\n                // onRequestClose={onDialogClose}\r\n                // width={800}\r\n                // height={450}\r\n            >\r\n            \r\n                <div className=\"flex flex-col h-full justify-between\">\r\n                    <h5 className=\"mb-4\">Sync API</h5>\r\n                    <hr style={{color: \"1px solid gray\"}} />   \r\n                    <div style={{display:\"flex\",justifyContent:\"center\",marginTop:\"20px\"}}>\r\n                        <div className='flex flex-col ml-5 text-green-800 h-14'>\r\n                            <HiDatabase/>\r\n                            <p>Sync Database-1</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6'>\r\n                            <BiRefresh/>\r\n                            <p style={{color:\"gray\"}}>and</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6 text-blue-800'>\r\n                            <FiDatabase/>\r\n                            <p>OD-1 DB</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-center mt-5\">\r\n                    <button className=\"text-blue-800\" style={{border:\"2px solid blue\", height:\"30px\", width:\"70px\"}}>Sync</button>\r\n                    </div>\r\n                    <div>\r\n                        <h6>Syncing in progress</h6>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>   \r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-right mt-6\">\r\n                        <Button\r\n                            className=\"mr-2\"\r\n                            variant=\"plain\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"solid\" onClick={() =>setIsOpen(false)}>\r\n                            Done\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OrderPacking\r\n","import React, {useState, useEffect, useCallback, useMemo, useRef } from 'react'\r\nimport { Badge, Tooltip,Button,Dialog } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setTableData } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowItem,\r\n    removeRowItem,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport dayjs from 'dayjs'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport {HiDatabase} from 'react-icons/hi'\r\nimport {FiDatabase} from 'react-icons/fi'\r\nimport { AiFillCopy } from \"react-icons/ai\"\r\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\r\nimport { getItems } from 'views/accounts/PendingApproval/store/dataSlice'\r\nimport { BiRefresh } from 'react-icons/bi'\r\nimport { TbTruckDelivery } from 'react-icons/tb'\r\n\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Shipped',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'Not yet Shipped',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n}\r\n\r\n\r\nconst ItemColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Item-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst OrderDispatch = ({woIndex}) => {\r\n\r\n    const [isOpenRefresh, setIsOpen] = useState(false)\r\n    const location = useLocation()\r\n    const rawData = location?.state?.rowData;\r\n    const wo_info = rawData?.dgl_wo_infos[woIndex]\r\n    const ActionColumn = ({ row }) => {\r\n        const dispatch = useDispatch()\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n    \r\n        const onDelete = () => {\r\n            dispatch(setDeleteMode('single'))\r\n            dispatch(setSelectedRow([row.id]))\r\n        }\r\n    \r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n    \r\n    \r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                        //  onClick={onView}\r\n                    >\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <MdModeEdit />\r\n                            <BiRefresh className='ml-2'style={{color:\"gray\"}} onClick={()=>setIsOpen(true)}/>\r\n                        </div>\r\n    \r\n    \r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    \r\n    }\r\n\r\n    const tableRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n        (state) => state.salesOrderList.data.tableData\r\n    )\r\n    // const loading = useSelector((state) => state.prodCatList.data.loading)\r\n\r\n    // const data = useSelector((state) => state.prodCatList.data.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getItems())\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    const tableData = useMemo(\r\n        () => ({ pageIndex, pageSize, sort, query, total }),\r\n        [pageIndex, pageSize, sort, query, total]\r\n    )\r\n\r\n    // const data = [\r\n    //     {\r\n    //         trackingId: '2312456',\r\n    //         shipmentId: '#SH54748',\r\n    //         deliveryPartnerTitle: \"Showze Retailers\",\r\n    //         pickupDateAndTime: \"28/072023,05:30 PM\",\r\n    //         statusOfShipment: \"Not yet Shipped\",\r\n    //         actions: \"Accepted By Warehouse\",\r\n    //     },\r\n    //     {\r\n    //         trackingId: '23000254',\r\n    //         shipmentId: '#SH54541',\r\n    //         deliveryPartnerTitle: \"Showze Retailers\",\r\n    //         pickupDateAndTime: \"25/062023,08:42 AM\",\r\n    //         statusOfShipment: \"Not yet Shipped\",\r\n    //         actions: \"Accepted By Warehouse\",\r\n    //     },\r\n    // ]\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Tracking ID',\r\n                accessorKey: 'tracking_number',\r\n            },\r\n            {\r\n                header: 'Shipment ID',\r\n                accessorKey: 'shippment_id',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Delivery Partner Title',\r\n                accessorKey: 'delivery_partner',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Pickup Date & Time',\r\n                accessorKey: 'dispatchdate',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Status Of Shipment',\r\n                accessorKey: 'wo_shippment_status',\r\n                cell: (props) => {\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n    \r\n                            <TbTruckDelivery className='ml-4'style={{color:\"orange\"}} />\r\n                            <span\r\n                                className={`ml-2 rtl:mr-2 capitalize`}\r\n                            >\r\n                                {ItemStatusColor[1].label}\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                },\r\n\r\n            },\r\n            {\r\n                header: 'Actions',\r\n                accessorKey: 'actions',\r\n                cell: (props) => {\r\n                    return (\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <BiRefresh className='ml-4'style={{color:\"gray\"}} onClick={()=>setIsOpen(true)}/>\r\n                        </div>\r\n                    )\r\n                },\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const onPaginationChange = (page) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageIndex = page\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSelectChange = (value) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageSize = Number(value)\r\n        newTableData.pageIndex = 1\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSort = (sort) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.sort = sort\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n\r\n    return (\r\n        <>\r\n        <DataTable\r\n            // ref={tableRef}\r\n            columns={columns}\r\n            data={wo_info.dgl_wo_shippment_details}\r\n            // loading={loading}\r\n            pagingData={tableData}\r\n            onPaginationChange={onPaginationChange}\r\n            onSelectChange={onSelectChange}\r\n            onSort={onSort}\r\n        // onCheckBoxChange={onRowSelect}\r\n        // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n        // selectable\r\n        />\r\n        <Dialog\r\n                isOpen={isOpenRefresh}\r\n                // onClose={onDialogClose}\r\n                // onRequestClose={onDialogClose}\r\n                // width={800}\r\n                // height={450}\r\n            >\r\n            \r\n                <div className=\"flex flex-col h-full justify-between\">\r\n                    <h5 className=\"mb-4\">Sync API</h5>\r\n                    <hr style={{color: \"1px solid gray\"}} />   \r\n                    <div style={{display:\"flex\",justifyContent:\"center\",marginTop:\"20px\"}}>\r\n                        <div className='flex flex-col ml-5 text-green-800 h-14'>\r\n                            <HiDatabase/>\r\n                            <p>Sync Database-1</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6'>\r\n                            <BiRefresh/>\r\n                            <p style={{color:\"gray\"}}>and</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6 text-blue-800'>\r\n                            <FiDatabase/>\r\n                            <p>OD-1 DB</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-center mt-5\">\r\n                    <button className=\"text-blue-800\" style={{border:\"2px solid blue\", height:\"30px\", width:\"70px\"}}>Sync</button>\r\n                    </div>\r\n                    <div>\r\n                        <h6>Syncing in progress</h6>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>   \r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-right mt-6\">\r\n                        <Button\r\n                            className=\"mr-2\"\r\n                            variant=\"plain\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"solid\" onClick={() =>setIsOpen(false)}>\r\n                            Done\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OrderDispatch\r\n","import React, {useState, useEffect, useCallback, useMemo, useRef } from 'react'\r\nimport { Badge, Tooltip,Button,Dialog } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setTableData } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowItem,\r\n    removeRowItem,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport dayjs from 'dayjs'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport {HiDatabase} from 'react-icons/hi'\r\nimport {FiDatabase} from 'react-icons/fi'\r\nimport { AiFillCopy } from \"react-icons/ai\"\r\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\r\nimport { getItems } from 'views/accounts/PendingApproval/store/dataSlice'\r\nimport { BiRefresh } from 'react-icons/bi'\r\nimport { BsCheckCircleFill } from 'react-icons/bs'\r\n\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Completed',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'Not yet Shipped',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n}\r\n\r\n\r\nconst ItemColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Item-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst OrderDelivery = ({woIndex}) => {\r\n\r\n    const [isOpenRefresh, setIsOpen] = useState(false)\r\n    const location = useLocation()\r\n    const rawData = location?.state?.rowData;\r\n    const wo_info = rawData?.dgl_wo_infos[woIndex]\r\n    const ActionColumn = ({ row }) => {\r\n        const dispatch = useDispatch()\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n    \r\n        const onDelete = () => {\r\n            dispatch(setDeleteMode('single'))\r\n            dispatch(setSelectedRow([row.id]))\r\n        }\r\n    \r\n        const onView = useCallback(() => {\r\n            navigate(`/app/sales/Item-details/${row.id}`)\r\n        }, [navigate, row])\r\n    \r\n    \r\n        return (\r\n            <div className=\"text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                        //  onClick={onView}\r\n                    >\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <MdModeEdit />\r\n                            <BiRefresh className='ml-2'style={{color:\"gray\"}} onClick={()=>setIsOpen(true)}/>\r\n                        </div>\r\n    \r\n    \r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    \r\n    }\r\n\r\n    const tableRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n        (state) => state.salesOrderList.data.tableData\r\n    )\r\n    // const loading = useSelector((state) => state.prodCatList.data.loading)\r\n\r\n    // const data = useSelector((state) => state.prodCatList.data.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getItems())\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    const tableData = useMemo(\r\n        () => ({ pageIndex, pageSize, sort, query, total }),\r\n        [pageIndex, pageSize, sort, query, total]\r\n    )\r\n\r\n    const data = [\r\n        {\r\n            trackingId: '2315400085',\r\n            shipmentId: '#SH54748',\r\n            dateAndTimeOfDelivery: \"28/072023,05:30 PM\",\r\n            deliveryStatus: \"Not yet Delivery\",\r\n            paymentMode: \"Pay Online\",\r\n            amountToBePaid: \"5,499.00\",\r\n            paymentStatus: \"Not yet Shipped\",\r\n            actions: \"Accepted By Warehouse\",\r\n        },\r\n        {\r\n            trackingId: '231005864',\r\n            shipmentId: '#SH54541',\r\n            dateAndTimeOfDelivery: \"25/062023,08:42 AM\",\r\n            deliveryStatus: \"Not yet Delivery\",\r\n            paymentMode: \"Pay Online\",\r\n            amountToBePaid: \"5,499.00\",\r\n            paymentStatus: \"Not yet Shipped\",\r\n            actions: \"Accepted By Warehouse\",\r\n        },\r\n    ]\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Tracking ID',\r\n                accessorKey: 'tracking_number',\r\n            },\r\n            {\r\n                header: 'Shipment ID',\r\n                accessorKey: 'shippment_id',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Date & Time Of Delivery',\r\n                accessorKey: 'dispatchdate',\r\n                \r\n                \r\n            },\r\n            {\r\n                header: 'Delivery Status',\r\n                accessorKey: 'ord_status',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Payment Mode',\r\n                accessorKey: 'wo_info_id',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Amount to be paid (INR)',\r\n                accessorKey: 'ord_cart_tot_amount',\r\n\r\n\r\n            },\r\n            {\r\n                header: 'Payment Status',\r\n                accessorKey: 'rel_mno_id',\r\n                cell: (props) => {\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n    \r\n                            <BsCheckCircleFill className='ml-4'style={{color:\"green\"}} />\r\n                            <span\r\n                                className={`ml-2 rtl:mr-2 capitalize`}\r\n                            >\r\n                                {ItemStatusColor[0].label}\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                },\r\n\r\n            },\r\n            {\r\n                header: 'Actions',\r\n                accessorKey: 'actions',\r\n                cell: (props) => {\r\n                    return (\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <BiRefresh className='ml-4'style={{color:\"gray\"}} onClick={()=>setIsOpen(true)}/>\r\n                        </div>\r\n                    )\r\n                },\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const onPaginationChange = (page) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageIndex = page\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSelectChange = (value) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageSize = Number(value)\r\n        newTableData.pageIndex = 1\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSort = (sort) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.sort = sort\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n\r\n    return (\r\n        <>\r\n        <DataTable\r\n            // ref={tableRef}\r\n            columns={columns}\r\n            data={wo_info.dgl_wo_shippment_details}\r\n            // loading={loading}\r\n            pagingData={tableData}\r\n            onPaginationChange={onPaginationChange}\r\n            onSelectChange={onSelectChange}\r\n            onSort={onSort}\r\n        // onCheckBoxChange={onRowSelect}\r\n        // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n        // selectable\r\n        />\r\n        <Dialog\r\n                isOpen={isOpenRefresh}\r\n                // onClose={onDialogClose}\r\n                // onRequestClose={onDialogClose}\r\n                // width={800}\r\n                // height={450}\r\n            >\r\n            \r\n                <div className=\"flex flex-col h-full justify-between\">\r\n                    <h5 className=\"mb-4\">Sync API</h5>\r\n                    <hr style={{color: \"1px solid gray\"}} />   \r\n                    <div style={{display:\"flex\",justifyContent:\"center\",marginTop:\"20px\"}}>\r\n                        <div className='flex flex-col ml-5 text-green-800 h-14'>\r\n                            <HiDatabase/>\r\n                            <p>Sync Database-1</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6'>\r\n                            <BiRefresh/>\r\n                            <p style={{color:\"gray\"}}>and</p>\r\n                        </div>\r\n                        <div className='flex flex-col ml-6 text-blue-800'>\r\n                            <FiDatabase/>\r\n                            <p>OD-1 DB</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-center mt-5\">\r\n                    <button className=\"text-blue-800\" style={{border:\"2px solid blue\", height:\"30px\", width:\"70px\"}}>Sync</button>\r\n                    </div>\r\n                    <div>\r\n                        <h6>Syncing in progress</h6>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>\r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                        <div className='flex mt-4'>   \r\n                            <RiCheckboxCircleFill  className='mt-1 mr-3 text-green-800'/>\r\n                            <p>Lorem Ipsum dolar sit amet consectetur</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-right mt-6\">\r\n                        <Button\r\n                            className=\"mr-2\"\r\n                            variant=\"plain\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"solid\" onClick={() =>setIsOpen(false)}>\r\n                            Done\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OrderDelivery\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport {\r\n    Steps,\r\n    Button,\r\n    Card\r\n} from 'components/ui'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport OrderAllocation from './OrderAllocation'\r\nimport OrderLabelling from './OrderLabelling'\r\nimport OrderPacking from './OrderPacking'\r\nimport OrderDispatch from './OrderDispatch'\r\nimport OrderDelivery from './OrderDelivery'\r\nconst AccordionSteps = ({woIndex}) => {\r\n    const [step, setStep] = useState(0)\r\n    const onPrevious = () => onChange(step - 1)\r\n\r\n    const onChange = (nextStep) => {\r\n        if (nextStep < 0) {\r\n            setStep(0)\r\n        } else if (nextStep > 3) {\r\n            setStep(3)\r\n        } else {\r\n            setStep(nextStep)\r\n        }\r\n    }\r\n\r\n    const steps = (\r\n        <Steps current={step}>\r\n            <Steps.Item title={'ALLOCATION'} />\r\n            <Steps.Item title={'LABELLING'} />\r\n            <Steps.Item title={'PACKING'} />\r\n            <Steps.Item title={'DISPATCH'} />\r\n            <Steps.Item title={'DELIVERY'} />\r\n        </Steps>\r\n    )\r\n    const onNext = () => {\r\n        setStep(step + 1)\r\n    }\r\n    \r\n    return (\r\n        <div className=\"max-h-96 overflow-y-auto overflow-x-auto\">\r\n                <Card header= {steps}\r\n            >\r\n            {step === 0 && (\r\n                <div >\r\n                    <OrderAllocation woIndex={woIndex} onNext={onNext} onPrevious={onPrevious} />\r\n                </div>\r\n            )}\r\n            {step === 1 && (\r\n                <div >\r\n                    <OrderLabelling woIndex={woIndex} onNext={onNext} onPrevious={onPrevious} />\r\n                </div>\r\n            )}\r\n            {step === 2 && (\r\n                <div >\r\n                    <OrderPacking woIndex={woIndex} onNext={onNext} onPrevious={onPrevious} />\r\n                </div>\r\n            )}\r\n            {step === 3 && (\r\n                <div>\r\n                    <OrderDispatch woIndex={woIndex} onNext={onNext} onPrevious={onPrevious} />\r\n                </div>\r\n            )}\r\n             {step === 4 && (\r\n                \r\n                <div>\r\n                    <OrderDelivery woIndex={woIndex} onPrevious={onPrevious} />\r\n                </div>\r\n            )}\r\n                <div className=\"mt-4 text-right\">\r\n                    <Button\r\n                        type={'button'}\r\n                        className=\"mx-2\"\r\n                        onClick={() => onPrevious()}\r\n                        variant=\"solid\"\r\n                        style={{\r\n                            backgroundColor: '#4D4D4D',\r\n                        }}\r\n                    >\r\n                        Preview\r\n                    </Button>\r\n                    {(step === 4)\r\n                        ? <Link\r\n                        to={`/orders`}\r\n                    >\r\n                        <Button\r\n                            type={'button'}\r\n                            className=\"mx-2\"\r\n                            variant=\"solid\"\r\n                        >\r\n                            Finish\r\n                        </Button>\r\n                        </Link>\r\n                            : <Button\r\n                            variant=\"solid\"\r\n                            onClick={() => onNext()}\r\n                        >\r\n                            {'Next'}\r\n                        </Button>\r\n                    }\r\n                    \r\n                </div>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccordionSteps","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport Accordion from 'components/shared/Accordion'\r\nimport DataPlanActivation from './DataPlanActivation'\r\nimport AccordionSteps from './AccordionSteps'\r\nconst ReplacedOrdersTable = () => {\r\n    const location = useLocation()\r\n\r\n    const data = location?.state?.rowData;\r\n    const AccordionItems = data.dgl_wo_infos.map((val,index) => {\r\n        if(val.wo_desc === \"Product WorkOrder\"){\r\n            return {\r\n                title: <>Product<h4>{val.wo_number}</h4></>,\r\n                component: <AccordionSteps woIndex={index}/>,\r\n            }\r\n        }\r\n        if(val.wo_desc === \"SP WorkOrder\" || val.wo_desc === \"DP WorkOrder\"){\r\n            return {\r\n                title: <>Data Plan<h4>{val.wo_number}</h4></>,\r\n                component: <DataPlanActivation woIndex={index}/>,\r\n            }\r\n        }\r\n    })\r\n    return (\r\n        <div className=\"mt-5\">\r\n            <Accordion Items={AccordionItems} />  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReplacedOrdersTable","import ApiService from './ApiService'\r\n\r\nexport async function apiGetSalesDashboardData(data) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/dashboard',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/products',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/products/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProduct(params) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/product',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiPutSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/products/update',\r\n        method: 'put',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiCreateSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/products/create',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesOrders(params) {\r\n    return ApiService.fetchData({\r\n        url: 'order/ord-info',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesOrders(data) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/orders/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesOrderDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/provider/sales/orders-details',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { deburr } from 'lodash'\r\nimport { apiGetSalesOrders,apiDeleteSalesOrders} from 'services/OrdersService'\r\n\r\nexport const getOrders = createAsyncThunk(\r\n    'salesProductList/data/getItems',\r\n    async (data) => {  \r\n        const response = await apiGetSalesOrders(data)\r\n        console.log(response.data);\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport const deleteOrders = async (data) => {\r\n    const response = await apiDeleteSalesOrders(data)\r\n    return response.data\r\n}\r\n\r\nexport const initialTableData = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    query: '',\r\n    sort: {\r\n        Item: '',\r\n        key: '',\r\n    },\r\n}\r\n\r\nconst dataSlice = createSlice({\r\n    name: 'salesOrderList/data',\r\n    initialState: {\r\n        loading: false,\r\n        ItemList: [],\r\n        tableData: initialTableData,\r\n    },\r\n    reducers: {\r\n        setItemList: (state, action) => {\r\n            state.ItemList = action.payload\r\n        },\r\n        setTableData: (state, action) => {\r\n            state.tableData = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [getOrders.fulfilled]: (state, action) => {\r\n            state.ItemList = action.payload.res\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getOrders.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n    },\r\n})\r\n\r\nexport const { setItemList, setTableData } = dataSlice.actions\r\n\r\nexport default dataSlice.reducer\r\n","import { createSlice, current } from '@reduxjs/toolkit'\r\n\r\nconst stateSlice = createSlice({\r\n    name: 'salesOrderList/state',\r\n    initialState: {\r\n        selectedRows: [],\r\n        selectedRow: [],\r\n        deleteMode: '',\r\n        newOrderDialog: false,\r\n    },\r\n    reducers: {\r\n        setSelectedRows: (state, action) => {\r\n            state.selectedRows = action.payload\r\n        },\r\n        setSelectedRow: (state, action) => {\r\n            state.selectedRow = action.payload\r\n        },\r\n        addRowOrder: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (!currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: [...currentState.selectedRows, ...payload],\r\n                }\r\n            }\r\n        },\r\n        removeRowOrder: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: currentState.selectedRows.filter(\r\n                        (id) => id !== payload\r\n                    ),\r\n                }\r\n            }\r\n        },\r\n        setDeleteMode: (state, action) => {\r\n            state.deleteMode = action.payload\r\n        },\r\n        toggleNewOrderDialog: (state, action) => {\r\n            state.newOrderDialog = action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    setSelectedRows,\r\n    setSelectedRow,\r\n    addRowOrder,\r\n    removeRowOrder,\r\n    toggleDeleteConfirmation,\r\n    setDeleteMode,\r\n    toggleNewOrderDialog\r\n} = stateSlice.actions\r\n\r\nexport default stateSlice.reducer\r\n"],"names":["require","useState","useRef","AccordionItem","props","contentEl","handleToggle","active","faq","title","id","component","className","onClick","ref","style","height","current","scrollHeight","setActive","index","Items","map","list","class","val","link","state","to","data","textDecoration","color","name","length","apiGetSalesItems","params","ApiService","url","method","apiGetSalesItemVariants","apiGetSalesItemVariantsByItemId","apiDeleteSalesItems","apiCreateItem","resp","status","message","response","toString","apiGetTemplates","apiUpdateItemAccStatus","apiGetItemsTableData","apiGetProductCategoryData","unq_id","apiGetTemplatesInItems","category","type","apiGetItemsTemplateComponents","getItems","createAsyncThunk","dataSlice","createSlice","initialState","loading","ItemList","tableData","total","pageIndex","pageSize","query","sort","Item","key","reducers","setItemList","action","payload","setTableData","extraReducers","fulfilled","pending","actions","isOpenRefresh","setIsOpen","location","useLocation","rowData","wo_info","dgl_wo_infos","columns","useMemo","header","accessorKey","dgl_wo_intry_allocation","flat","isOpen","display","justifyContent","marginTop","border","width","variant","block","target","download","dispatch","useDispatch","selectedRows","useSelector","salesOrderList","selectedRow","deleteMode","onDialogClose","setDeleteMode","setSelectedRow","onDelete","deleteOrders","success","deleteSucceed","setSelectedRows","Orders","getOrders","toast","duration","placement","onClose","onRequestClose","onCancel","onConfirm","confirmButtonColor","tableRef","fetchData","useCallback","page_no","page_size","useEffect","flex","cell","row","original","dgl_ord_payments","pay_mode","checked","rows","originalRows","selectedIds","forEach","push","pagingData","onPaginationChange","page","newTableData","cloneDeep","onSelectChange","value","Number","onSort","searchInput","debounceFn","debounce","size","placeholder","prefix","onChange","e","icon","SimiNo","uniqueIdentificationNumber","activationDateAndTime","simId","statusOfActivation","woIndex","rawData","wo_status","rawdata","item","item_var_id","dgl_work_order_labelling","console","log","ItemStatusColor","label","dotClass","textClass","dgl_work_order_packaging","dgl_wo_shippment_details","step","setStep","onPrevious","nextStep","steps","onNext","backgroundColor","AccordionItems","wo_desc","wo_number","Accordion","apiGetSalesOrders","apiDeleteSalesOrders","res","stateSlice","newOrderDialog","addRowOrder","currentState","includes","removeRowOrder","filter","toggleNewOrderDialog","toggleDeleteConfirmation"],"sourceRoot":""}