{"version":3,"file":"static/js/2196.3d3cbd19.chunk.js","mappings":"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","sources":["utils/hooks/useTimeOutMessage.js","views/accounts/MyAccounts/components/UserRoles/MasterPermissionBox.js","views/accounts/MyAccounts/components/UserRoles/UserRoleDetails.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import {\r\n    Card,\r\n    Checkbox,\r\n    FormContainer,\r\n    FormItem,\r\n    Input,\r\n    Select,\r\n} from 'components/ui'\r\nimport React, {\r\n    forwardRef,\r\n    useEffect,\r\n    useImperativeHandle,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\nimport { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport { Field, Formik, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getPublicRoles, getRolePermissions } from '../../store/dataSlice'\r\nimport { useLocation } from 'react-router'\r\nimport { RolePermitEditValuesToFields } from 'utils/campareandCopy'\r\nimport _ from 'lodash'\r\n\r\nconst tHeading = ['VIEW', 'ADD', 'CLONE', 'EDIT', 'DEACT.', 'APPR.']\r\n\r\nconst initValues = {\r\n    publicRole: '',\r\n    userRole: '',\r\n    description: '',\r\n}\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    publicRole: Yup.string().required('Please select master role ').nullable(),\r\n    userRole: Yup.string().required('Please enter user role').nullable(),\r\n})\r\n\r\nconst MasterPermissionBox = forwardRef((props, ref) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const fomikRef = useRef()\r\n\r\n    const location = useLocation()\r\n    const mode = location.state?.mode ? location.state.mode : 'ADD'\r\n    const rowForEdit = location.state?.data\r\n\r\n    // const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n    //     (state) => state?.myaccountList?.data?.tableData\r\n    // )\r\n\r\n    const [rolePermitArr,setRolePermitArr]= useState()\r\n    const [rolePermitInitValues, setRolePermitInitValues] = useState(rowForEdit ? RolePermitEditValuesToFields(initValues,rowForEdit) : initValues)\r\n\r\n    const [selectedRole, setSelectedRole] = useState(false)\r\n    const [roleId, setRoleId] = useState('')\r\n\r\n    const publicRolesList = useSelector(\r\n        (state) => state.myaccountList?.data?.publicRolesList\r\n    )\r\n    const rolePermissions = useSelector(\r\n        (state) => state.myaccountList?.data?.rolePermissions\r\n    )\r\n    const {\r\n        enterAccount,\r\n        password,\r\n        rememberMe,\r\n        usernameOrEmail,\r\n        acc_mno_parent_unq_id,\r\n    } = useSelector((state) => state.auth.user)\r\n    const onChangeCheckBox = (e, index, mi, ci) => {\r\n        // arrMain.module_dto[index].sub_module_dto[mi].dgl_permissions_resp_dto[ci].enabled = e\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getRolePermissions({ roleId }))\r\n        dispatch(getPublicRoles({ acc_mno_parent_unq_id }))\r\n    }, [dispatch, roleId,rowForEdit])\r\n\r\n    const onChangeRole = (label, form, field) => {\r\n        form.setFieldValue(field.name, label.value)\r\n        setRoleId(label.value)\r\n        setSelectedRole(true)\r\n    }\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        getChildValues: () => {\r\n            let payload = {\r\n                fomikRef,\r\n                rolePermissions,\r\n                rowData: rowForEdit,\r\n                edit: rowForEdit ? true : false,\r\n            }\r\n            return payload\r\n        },\r\n    }))\r\n\r\n    // const onChangeSelectAll = (item,index,e) =>{\r\n    //     let temp = _.cloneDeep(item);\r\n    //     temp.module_dto[index].sub_module_dto.forEach(function(subModule) {\r\n    //         subModule.dgl_permissions_resp_dto.forEach(function(permission) {\r\n    //           permission.enabled = e; \r\n    //         });\r\n    //       });\r\n    //     temp.module_dto[index].enabled = e\r\n    //     setRolePermitArr(temp)  \r\n    // } \r\n\r\n    useEffect(() => {\r\n        if(mode===\"EDIT\"){\r\n            // rolePermitInitValues.publicRole = rowForEdit.public_role_id\r\n            // rolePermitInitValues.userRole = rowForEdit.role_name\r\n            // rolePermitInitValues.description =  rowForEdit.role_desc\r\n            // setRolePermitInitValues(rolePermitInitValues)\r\n            setRoleId(rolePermitInitValues.publicRole)\r\n            setSelectedRole(true)\r\n        }\r\n    }, [mode])\r\n\r\n    return (\r\n        <>\r\n            {/* <MasterPermissionBoxOtherDetails/> */}\r\n            <div className=\"mt-6 bg-gray-50 dark:bg-gray-700 rounded \">\r\n                <div className=\"bg-gray-50 p-5\">\r\n                    <AdaptableCard\r\n                        className=\"h-full\"\r\n                        bodyClass=\"h-full\"\r\n                        divider\r\n                    >\r\n                        <Formik\r\n                            innerRef={fomikRef}\r\n                            initialValues={rolePermitInitValues}\r\n                            validationSchema={validationSchema}\r\n                            onSubmit={(values, { setSubmitting }) => {\r\n                                setSubmitting(true)\r\n                            }}\r\n                        >\r\n                            {({ errors, touched, values, setFieldValue }) => (\r\n                                <FormContainer>\r\n                                    <div className=\"md:grid gap-4 mx-4\">\r\n                                        <div className=\"md:grid grid-cols-2 gap-4\">\r\n                                            <FormItem\r\n                                                label={\r\n                                                    <p>\r\n                                                        Master Role{' '}\r\n                                                        <span\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            {'*'}\r\n                                                        </span>\r\n                                                    </p>\r\n                                                }\r\n                                                invalid={\r\n                                                    errors.publicRole &&\r\n                                                    touched.publicRole\r\n                                                }\r\n                                                errorMessage={errors.publicRole}\r\n                                            >\r\n                                                <Field name=\"publicRole\">\r\n                                                    {({ field, form }) => (\r\n                                                        <Select\r\n                                                            placeholder=\"Select Master Role\"\r\n                                                            field={field}\r\n                                                            form={form}\r\n                                                            options={\r\n                                                                publicRolesList\r\n                                                            }\r\n                                                            value={publicRolesList?.filter(\r\n                                                                (label) =>\r\n                                                                    label.value ===\r\n                                                                    values.publicRole\r\n                                                            )}\r\n                                                            onChange={(label) =>\r\n                                                                onChangeRole(\r\n                                                                    label,\r\n                                                                    form,\r\n                                                                    field\r\n                                                                )\r\n                                                            }\r\n                                                        />\r\n                                                    )}\r\n                                                </Field>\r\n                                            </FormItem>\r\n                                            <FormItem\r\n                                                label={\r\n                                                    <p>\r\n                                                        User Role Title{' '}\r\n                                                        <span\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            {'*'}\r\n                                                        </span>\r\n                                                    </p>\r\n                                                }\r\n                                                invalid={\r\n                                                    errors.userRole &&\r\n                                                    touched.userRole\r\n                                                }\r\n                                                errorMessage={errors.userRole}\r\n                                            >\r\n                                                <Field\r\n                                                    type=\"text\"\r\n                                                    autoComplete=\"off\"\r\n                                                    name=\"userRole\"\r\n                                                    placeholder=\"Enter Role\"\r\n                                                    component={Input}\r\n                                                />\r\n                                            </FormItem>\r\n                                        </div>\r\n                                        <FormItem label=\"Description\">\r\n                                            <Field name=\"description\">\r\n                                                {({ field, form }) => (\r\n                                                    <RichTextEditor\r\n                                                        style={{ width: '60%' }}\r\n                                                        value={field.value}\r\n                                                        onChange={(val) =>\r\n                                                            form.setFieldValue(\r\n                                                                field.name,\r\n                                                                val\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                )}\r\n                                            </Field>\r\n                                        </FormItem>\r\n                                    </div>\r\n                                </FormContainer>\r\n                            )}\r\n                        </Formik>\r\n                    </AdaptableCard>\r\n                </div>\r\n            </div>\r\n\r\n            {selectedRole && (\r\n                <div className=\"bg-gray-50 p-5\">\r\n                    <div className=\"md:grid grid-cols-2 gap-4\">\r\n                        {rolePermissions?.module_dto?.map((item, index) => {\r\n                            return (\r\n                                <>\r\n                                    <Card\r\n                                        className={`rounded-none border-t-4 border-indigo-500 border-r-0 border-b-0 border-l-0`}\r\n                                    >\r\n                                        <div className=\"flex justify-between\">\r\n                                            <p className=\"text-base font-bold\">\r\n                                                {item.title}\r\n                                            </p>\r\n                                            <div className=\"flex\">\r\n                                                <Checkbox className=\"\" disabled/>\r\n                                                <p className=\"text-base font-medium\">\r\n                                                    Select All\r\n                                                </p>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"flex\">\r\n                                            <table className=\"w-full mt-4\">\r\n                                                <thead className=\"flex md:grid grid-cols-4  h-8 border-b-2 border-zinc-300\">\r\n                                                    <div className=\"col-span-1\">\r\n                                                        <th className=\"\"></th>\r\n                                                    </div>\r\n                                                    <div className=\"col-span-3 md:grid grid-cols-6\">\r\n                                                        {tHeading.map((e) => {\r\n                                                            return (\r\n                                                                <>\r\n                                                                    <th className=\"col-span-1\">\r\n                                                                        {e}\r\n                                                                    </th>\r\n                                                                </>\r\n                                                            )\r\n                                                        })}\r\n                                                    </div>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {item.sub_module_dto.map(\r\n                                                        (i, mi) => {\r\n                                                            return (\r\n                                                                <>\r\n                                                                    <tr className=\"flex justify-between md:grid grid-cols-4 mt-4 border-b-2 border-zinc-300 h-14\">\r\n                                                                        <div className=\"col-span-1\">\r\n                                                                            <td className=\"w-24 mr-3\">\r\n                                                                                {\r\n                                                                                    i.title\r\n                                                                                }\r\n                                                                            </td>\r\n                                                                        </div>\r\n                                                                        <div className=\"col-span-3 md:grid grid-cols-6\">\r\n                                                                            {i.dgl_permissions_resp_dto.map(\r\n                                                                                (\r\n                                                                                    c,\r\n                                                                                    ci\r\n                                                                                ) => {\r\n                                                                                    return (\r\n                                                                                        <>\r\n                                                                                            {ci >\r\n                                                                                            0 ? (\r\n                                                                                                <Checkbox\r\n                                                                                                    className=\"col-span-1 ml-5\"\r\n                                                                                                    checked={\r\n                                                                                                        c.enabled\r\n                                                                                                    }\r\n                                                                                                    onChange={(\r\n                                                                                                        e\r\n                                                                                                    ) => {\r\n                                                                                                        onChangeCheckBox(\r\n                                                                                                            e,\r\n                                                                                                            index,\r\n                                                                                                            mi,\r\n                                                                                                            ci\r\n                                                                                                        )\r\n                                                                                                    }}\r\n                                                                                                />\r\n                                                                                            ) : (\r\n                                                                                                <>\r\n\r\n                                                                                                </>\r\n                                                                                            )}\r\n                                                                                        </>\r\n                                                                                    )\r\n                                                                                }\r\n                                                                            )}\r\n                                                                        </div>\r\n                                                                    </tr>\r\n                                                                </>\r\n                                                            )\r\n                                                        }\r\n                                                    )}\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                    </Card>\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n})\r\n\r\nexport default MasterPermissionBox\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport { Button } from 'components/ui'\r\nimport UserRoleInfo from './UserRoleInfo'\r\nimport UserRolePermissionInfo from './UserRolePermissionInfo'\r\nimport MasterPermissionBox from './MasterPermissionBox'\r\nimport { apiPostUserRole, apiUpdateUserRole } from 'services/MyAccountService'\r\nimport { useSelector } from 'react-redux'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { GetErrorMsg, OpenNotification } from 'views/Servicefile'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\n\r\nconst UserRoleDetails = () => {\r\n    const location = useLocation()\r\n\r\n    const { enterAccount, password, rememberMe, usernameOrEmail } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n    const rowForEdit = location.state?.data\r\n\r\n    const navigate = useNavigate()\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    const childRef = useRef()\r\n    const mode = location?.state?.mode ? location?.state?.mode : 'ADD'\r\n\r\n    const onSubmitPublicRole = async (payload) => {\r\n        const childState = childRef.current.getChildValues()\r\n        let validationErrors = false;\r\n        await childState.fomikRef.current?.validateForm().then(errors => {\r\n            if (errors && Object.keys(errors).length > 0) {\r\n                childState.fomikRef.current.setTouched(errors, true);\r\n              validationErrors = true;\r\n            }\r\n          });\r\n          if(!validationErrors){\r\n            let body = {\r\n                dgl_roles_dto: {\r\n                    role_name: childState.fomikRef.current.values.userRole,\r\n                    status: 'ACTIVE',\r\n                    role_desc: childState.fomikRef.current.values.description,\r\n                    dgl_acc_mno_id: 1,\r\n                    public_role_id: childState.fomikRef.current.values.publicRole,\r\n                    permissions: 'json string',\r\n                },\r\n                dgl_role_permission_request_dto: childState.rolePermissions,\r\n            }\r\n            if (childState.fomikRef.current.isValid === true) {\r\n                if (childState.edit === false) {\r\n                    const response = await apiPostUserRole(body, enterAccount)\r\n                    if (response.status === 'success') {\r\n                        OpenNotification('success', 'Created successfully ')\r\n                            navigate('/account-menu-item-view-1/userRoles')\r\n                    }\r\n                    if (response.status === 'failed') {\r\n                        setMessage(GetErrorMsg(response))\r\n                    }\r\n                } else if (childState.edit === true) {\r\n                    body.dgl_roles_dto.id = childState.rowData.id\r\n                    const response = await apiUpdateUserRole(body, enterAccount)\r\n                    if (response.status === 'success') {\r\n                        OpenNotification('success', 'Updated successfully')\r\n                            navigate('/account-menu-item-view-1/userRoles')\r\n                        \r\n                    \r\n                    }\r\n                    if (response.status === 'failed') {\r\n                        setMessage(GetErrorMsg(response))\r\n                    }\r\n                }\r\n            } else {\r\n                childState.fomikRef.current.handleSubmit()\r\n            }\r\n    }\r\n    }\r\n\r\n    let breadCrumbList = [{\r\n        name: 'Accounts',\r\n        // link:\"/account-menu-item-view-1/accounts\"\r\n    }, {\r\n        name: 'My Account',\r\n        link: \"/account-menu-item-view-1/userRoles\"\r\n    }, {\r\n        name: `Create User Roles & Permissions`,\r\n    }]\r\n\r\n    if (mode === \"EDIT\") {\r\n        breadCrumbList = [\r\n            {\r\n                name: 'Accounts',\r\n                // link:\"/account-menu-item-view-1/accounts\",\r\n            },\r\n            {\r\n                name: 'My Account',\r\n                link: \"/account-menu-item-view-1/userRoles\",\r\n            },\r\n            {\r\n                name: rowForEdit?.role_unq_id,\r\n                link: '/account-menu-item-view-1/userRoles',\r\n                state:rowForEdit\r\n            },\r\n            {\r\n                name: \"Edit User Roles & Permissions\"\r\n            },\r\n        ]\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {/* Account / My Account / {mode === 'EDIT' ? 'Edit' : 'Create'}{' '}\r\n                User Roles & Permissions */}\r\n                <CustomBreadcrumbs list={breadCrumbList} />\r\n            </div>\r\n            <div className=\"mt-5\">\r\n                <h3>\r\n                    {mode === 'EDIT' ? 'Edit' : 'Create'} User Roles &\r\n                    Permissions\r\n                </h3>\r\n            </div>\r\n            <div className=\"mt-6  bg-gray-50 dark:bg-gray-700 rounded \">\r\n                <MasterPermissionBox ref={childRef} />\r\n                {/* <UserRoleInfo /> */}\r\n                {/* <UserRolePermissionInfo /> */}\r\n            </div>\r\n            <div className=\"mt-4 text-right\">\r\n                <>\r\n                    <Link\r\n                        className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                        to=\"/account-menu-item-view-1/userRoles\"\r\n                    >\r\n                        <Button\r\n                            className=\"mx-2\"\r\n                            variant=\"solid\"\r\n                            style={{ backgroundColor: '#4D4D4D' }}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Link>\r\n                    {/* <Link\r\n                        className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                        to=\"/account-menu-item-view-1\"> */}\r\n                    <Button\r\n                        className=\"mx-2\"\r\n                        variant=\"solid\"\r\n                        onClick={onSubmitPublicRole}\r\n                    >\r\n                        Submit For Approval\r\n                    </Button>\r\n                    {/* </Link> */}\r\n                </>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserRoleDetails\r\n"],"names":["interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","tHeading","initValues","publicRole","userRole","description","validationSchema","Yup","shape","required","nullable","forwardRef","props","ref","dispatch","useDispatch","fomikRef","useRef","location","useLocation","mode","state","rowForEdit","data","RolePermitEditValuesToFields","rolePermitInitValues","selectedRole","setSelectedRole","roleId","setRoleId","publicRolesList","useSelector","myaccountList","rolePermissions","auth","user","acc_mno_parent_unq_id","enterAccount","password","rememberMe","usernameOrEmail","getRolePermissions","getPublicRoles","useImperativeHandle","getChildValues","rowData","edit","className","bodyClass","divider","innerRef","initialValues","onSubmit","values","setSubmitting","errors","touched","setFieldValue","label","style","color","invalid","errorMessage","name","field","form","placeholder","options","value","filter","onChange","onChangeRole","type","autoComplete","component","Input","width","val","module_dto","map","item","index","title","disabled","e","sub_module_dto","i","mi","dgl_permissions_resp_dto","c","ci","checked","enabled","navigate","useNavigate","useTimeOutMessage","childRef","onSubmitPublicRole","payload","childState","current","validationErrors","validateForm","then","Object","keys","length","setTouched","body","dgl_roles_dto","role_name","status","role_desc","dgl_acc_mno_id","public_role_id","permissions","dgl_role_permission_request_dto","isValid","apiPostUserRole","response","OpenNotification","GetErrorMsg","id","apiUpdateUserRole","handleSubmit","breadCrumbList","link","role_unq_id","list","to","variant","backgroundColor","onClick"],"sourceRoot":""}