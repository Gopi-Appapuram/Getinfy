{"version":3,"file":"static/js/2744.85bbb001.chunk.js","mappings":"4IACA,EAA6BA,EAAQ,OAA7BC,EAAQ,EAARA,SAAUC,EAAM,EAANA,OACZC,EAAgB,SAACC,GAAW,IAAD,EACvBC,EAAYH,IACVI,EAA8BF,EAA9BE,aAAcC,EAAgBH,EAAhBG,OAAQC,EAAQJ,EAARI,IACtBC,EAAyBD,EAAzBC,MAAOC,EAAkBF,EAAlBE,GAAIC,EAAcH,EAAdG,UAEnB,OACI,iBAAKC,UAAU,oBAAmB,WAC9B,gBAAKA,UAAU,sBAAqB,UAChC,iBACIA,UAAS,kCACLL,IAAWG,EAAK,SAAW,IAE/BG,QAAS,kBAAMP,EAAaI,EAAG,EAAC,WAEhC,eAAIE,UAAU,qBAAoB,SAAEH,KACpC,SAAC,MAAa,UAGtB,gBACIK,IAAKT,EACLO,UAAS,sBAAiBL,IAAWG,EAAK,OAAS,IACnDK,MACIR,IAAWG,EACL,CAAEM,OAAiB,OAATX,QAAS,IAATA,GAAkB,QAAT,EAATA,EAAWY,eAAO,WAAT,EAAT,EAAoBC,cAC9B,CAAEF,OAAQ,OACnB,UAED,gBAAKJ,UAAU,oBAAmB,UAC9B,cAAGA,UAAU,OAAM,SAAED,UAKzC,EA0CA,IAxCkB,SAACP,GAAW,IAAD,EACzB,EAA4BH,EAAS,MAAK,eAAnCM,EAAM,KAAEY,EAAS,KAElBb,EAAe,SAACc,GAEdD,EADAZ,IAAWa,EACD,KAEAA,EAElB,EAEA,OAAoB,KAAZ,OAALhB,QAAK,IAALA,OAAK,EAALA,EAAOiB,QACE,yBAGR,+BACI,gBAAKT,UAAU,4BAA2B,UACtC,gBAAKA,UAAU,6BAA4B,UACvC,gBAAKA,UAAU,gBAAe,UAC1B,gBAAKA,UAAU,OAAM,UACjB,gBAAKA,UAAU,YAAW,SAChB,OAALR,QAAK,IAALA,GAAY,QAAP,EAALA,EAAOiB,aAAK,WAAP,EAAL,EAAcC,KAAI,SAACd,EAAKY,GACrB,OACI,SAACjB,EAAa,CAEVI,OAAQA,EACRD,aAAcA,EACdE,IAAKA,GAHAY,EAMjB,eAQhC,C,kDCzDA,IAhBA,WAA6C,IAAlBG,EAAQ,uDAAG,IAClC,GAA8BtB,EAAAA,EAAAA,UAAS,IAAG,eAAnCuB,EAAO,KAAEC,EAAU,KAY1B,OAVAC,EAAAA,EAAAA,YAAU,WACN,GAAIF,EAAS,CACT,IAAIG,EAAUC,YAAW,kBAAMH,EAAW,GAAG,GAAEF,GAC/C,OAAO,WACHM,aAAaF,EACjB,CACJ,CAEJ,GAAG,CAACH,IAEG,CAACA,EAASC,EACrB,C,gICoDA,EAhE0B,WACtB,IAAMK,GAAW5B,EAAAA,EAAAA,QAAO,MAClB6B,GAAMC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,IAAI,IACjDC,EAAmB,OAAHL,QAAG,IAAHA,OAAG,EAAHA,EAAKK,cAErBD,EAAkB,OAAbC,QAAa,IAAbA,OAAa,EAAbA,EAAeC,wBAEpBC,GAAUC,EAAAA,EAAAA,UACZ,iBAAM,CACF,CACIC,OAAQ,gBACRC,YAAa,eAEjB,CACID,OAAQ,aACRC,YAAa,eAEjB,CACID,OAAQ,WACRC,YAAa,YAMjB,CACID,OAAQ,uBACRC,YAAa,SACbC,KAAM,SAACtC,GAaH,OACI,8BAAgB,OAAbgC,QAAa,IAAbA,OAAa,EAAbA,EAAeO,WAE1B,GAEP,GACD,IAIJ,OACI,+BACI,SAAC,KAAS,CACN7B,IAAKgB,EACLQ,QAASA,EACTH,KAAMA,KAMtB,E,oBCuCA,EAnG4B,WAAO,IAAD,IACxBJ,GAAMC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,IAAI,IACjDS,EAAmB,OAAHb,QAAG,IAAHA,OAAG,EAAHA,EAAKK,cACrBS,EAAmB,OAAbD,QAAa,IAAbA,GAAsC,QAAzB,EAAbA,EAAeP,+BAAuB,WAAzB,EAAb,EAAwCS,QAChD,SAACC,EAAaC,GAAY,OAAKD,EAAcC,EAAaC,QAAQ,GAClE,GAEJ,OACI,iCACI,SAAC,KAAI,CAACrC,UAAU,YAAW,UACvB,iBAAKA,UAAU,sBAAqB,WAChC,iBAAKA,UAAU,eAAc,WACzB,gBAAKA,UAAU,gDAA+C,4BAG9D,gBAAKA,UAAU,uCAAsC,UACjD,cAAGA,UAAU,iBAAgB,SACX,OAAbgC,QAAa,IAAbA,OAAa,EAAbA,EAAeM,kBAI5B,iBAAKtC,UAAU,eAAc,WACzB,gBAAKA,UAAU,gDAA+C,+BAG9D,gBAAKA,UAAU,6BAA4B,UACvC,cAAGA,UAAU,iBAAgB,SACX,OAAbgC,QAAa,IAAbA,OAAa,EAAbA,EAAeO,gBAI5B,iBAAKvC,UAAU,eAAc,WACzB,gBAAKA,UAAU,gDAA+C,uBAG9D,gBAAKA,UAAU,4BAA2B,UACtC,cAAGA,UAAU,iBAAgB,SACX,OAAbgC,QAAa,IAAbA,OAAa,EAAbA,EAAeQ,wBAI5B,iBAAKxC,UAAU,eAAc,WACzB,gBAAKA,UAAU,gDAA+C,qBAG9D,gBAAKA,UAAU,6BAA4B,UACvC,cAAGA,UAAU,iBAAgB,SACX,OAAbgC,QAAa,IAAbA,OAAa,EAAbA,EAAeD,kBAI5B,iBAAK/B,UAAU,oBAAmB,WAC9B,gBAAKA,UAAU,gDAA+C,8BAG9D,gBAAKA,UAAU,4BAA2B,UACtC,cAAGA,UAAU,iBAAgB,SAIxB,QAJwB,EACxByC,IACgB,OAAbT,QAAa,IAAbA,OAAa,EAAbA,EAAeU,YACf,qBACH,aAHA,EAGEC,OAAO,sBAItB,iBAAK3C,UAAU,qBAAoB,WAC/B,gBAAKA,UAAU,gDAA+C,6BAG9D,gBAAKA,UAAU,6BAA4B,UACvC,cAAGA,UAAU,iBAAgB,SAAEiC,UAGvC,iBAAKjC,UAAU,oBAAmB,WAC9B,gBAAKA,UAAU,gDAA+C,mCAG9D,gBAAKA,UAAU,4BAA2B,UACtC,cAAGA,UAAU,iBAAgB,sBAGrC,iBAAKA,UAAU,oBAAmB,WAC9B,gBAAKA,UAAU,gDAA+C,gCAG9D,gBAAKA,UAAU,4BAA2B,UACtC,cAAGA,UAAU,iBAAgB,SACX,OAAbgC,QAAa,IAAbA,OAAa,EAAbA,EAAeO,qBAMpC,gBAAKvC,UAAU,OAAM,UACjB,SAAC,EAAiB,QAIlC,E,gCC7EA,EAtB4B,WAGxB,IAAM4C,GAActD,EAAAA,EAAAA,UAOpB,OACI,SAAC,KAAK,CACFY,IAAK0C,EACL5C,UAAU,UACV6C,KAAK,KACLC,YAAY,SACZC,QAAQ,SAAC,MAAe,CAAC/C,UAAU,aAI/C,ECIA,EAlB4B,WAGxB,OACI,+BACI,SAAC,KAAM,CACH6C,KAAK,KACL7C,UAAU,6DACVgD,MAAM,SAAC,MAAe,IACtB/C,QAAS,WAAO,EAAE,qBAOlC,ECeA,EAvB2B,WACvB,OACI,iBAAKD,UAAU,4CAA2C,WAIzD,SAAC,EAAmB,KACpB,SAAC,EAAmB,KAEjB,SAAC,KAAI,CACDA,UAAU,6CAEd,UAEI,SAAC,KAAM,CAACiD,OAAK,EAACJ,KAAK,KAAK1C,MAAO,CAAE+C,gBAAiB,OAAQC,MAAO,SAAWH,MAAM,SAAC,MAAS,IAAI,sBAOhH,E,iCCDMI,EAAe,SAAH,GAAiB,IAAXC,EAAG,EAAHA,IACZC,GAAcC,EAAAA,EAAAA,KAAdD,UACFE,GAAWC,EAAAA,EAAAA,OAGFC,EAAAA,EAAAA,cAAY,WACvBF,EAAS,2BAAD,OAA4BH,EAAIvD,IAC5C,GAAG,CAAC0D,EAAUH,IAEd,OACI,gBAAKrD,UAAU,UAAS,UACpB,SAAC,IAAO,CAACH,MAAM,OAAM,UACrB,iBACIG,UAAS,iDAA4CsD,GACrD,UAED,SAAC,MAAiB,CAACtD,UAAU,sBAO5C,EAuLA,EArLsB,WAEjB,IAAMkB,GAAW5B,EAAAA,EAAAA,QAAO,MAiEnBoC,GAAUC,EAAAA,EAAAA,UACZ,iBAAM,CACF,CACIC,OAAQ,UACR+B,KAAM,EACN7D,GAAI,SACJgC,KAAM,SAACtC,GAAK,OAAK,SAAC4D,EAAY,CAACC,IAAK7D,EAAM6D,IAAIO,UAAY,GAE9D,CACIhC,OAAQ,aACRC,YAAa,eAEjB,CACID,OAAQ,OACRC,YAAa,kBAIjB,CACID,OAAQ,WACRC,YAAa,eAIjB,CACID,OAAQ,cACRC,YAAa,aAwBpB,GACD,IA8CJ,OACI,SAAC,KAAS,CACN3B,IAAKgB,EACLQ,QAASA,EACTH,KAxIK,CACT,CACIsC,YAAY,UACZC,eAAe,eACfC,YAAY,8EACZC,UAAU,cAGd,CACIH,YAAY,UACZC,eAAe,eACfC,YAAY,8EACZC,UAAU,cAEd,CACIH,YAAY,UACZC,eAAe,eACfC,YAAY,8EACZC,UAAU,cAEd,CACIH,YAAY,UACZC,eAAe,eACfC,YAAY,8EACZC,UAAU,cAEd,CACIH,YAAY,UACZC,eAAe,eACfC,YAAY,8EACZC,UAAU,gBAqHtB,ECxNA,MAjBA,WACE,OACE,UAAC,KAAa,CAAChE,UAAU,SAASiE,UAAU,SAAQ,WAC3C,iBAAKjE,UAAU,4CAA2C,WACvD,eAAIA,UAAU,eAAc,2BAE5B,SAAC,EAAkB,QAGvB,gBAAKA,UAAU,OAAM,UACrB,SAAC,EAAa,QAK1B,E,sFCsBA,EA5CgC,SAACR,GAC7B,IAAQ0E,EAAa1E,EAAb0E,SACR,OACI,SAAC,KAAI,CAAClE,UAAU,YAAW,UACvB,iBAAKA,UAAU,sBAAqB,WAChC,iBAAKA,UAAU,eAAc,WACzB,gBAAKA,UAAU,gDAA+C,0BAG9D,gBAAKA,UAAU,uCAAsC,UACjD,cAAGA,UAAU,iBAAgB,SAAU,OAARkE,QAAQ,IAARA,OAAQ,EAARA,EAAUC,oBAGjD,iBAAKnE,UAAU,eAAc,WACzB,gBAAKA,UAAU,gDAA+C,4BAG9D,gBAAKA,UAAU,6BAA4B,UACvC,cAAGA,UAAU,iBAAgB,SAChB,OAARkE,QAAQ,IAARA,OAAQ,EAARA,EAAUE,kBAIvB,iBAAKpE,UAAU,eAAc,WACzB,gBAAKA,UAAU,gDAA+C,wBAG9D,gBAAKA,UAAU,4BAA2B,UACtC,cAAGA,UAAU,iBAAgB,SAAE,aAGvC,iBAAKA,UAAU,eAAc,WACzB,gBAAKA,UAAU,gDAA+C,iCAG9D,gBAAKA,UAAU,6BAA4B,UACvC,cAAGA,UAAU,iBAAgB,SAAU,OAARkE,QAAQ,IAARA,OAAQ,EAARA,EAAU7B,oBAMjE,ECmCA,EAxE4B,SAAC7C,GACzB,OAA4CH,EAAAA,EAAAA,UAAS,IAAG,eAAjDgF,EAAc,KAAEC,EAAiB,KAClC/C,GAAOH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,IAAI,IAGlDE,GAFoB,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMC,eAEkBC,yBAC9CX,EAAAA,EAAAA,YAAU,WACNyD,EAAuB9C,EAC3B,GAAG,CAACA,IACJ,IAAM8C,EAAyB,SAACC,GAC5B,IAAMC,EAAc,OAAPD,QAAO,IAAPA,OAAO,EAAPA,EAAS9D,KAAI,SAACgE,GAQvB,IAAI3E,GACA,SAAC,EAAuB,CAAEmE,SAAUQ,IAGxC,MAAO,CAAE5E,GAAK,OAAD4E,QAAC,IAADA,OAAC,EAADA,EAAGP,YAAatE,MAAO,OAAD6E,QAAC,IAADA,OAAC,EAADA,EAAGP,YAAapE,UAAAA,EACvD,IACAuE,EAAkBG,EACtB,EAcA,OACI,4BACI,SAACE,EAAA,EAAS,CAAClE,MAAO4D,KAClB,iBAAKrE,UAAU,kBAAiB,WAC5B,+BACI,SAAC,KAAI,CACDA,UAAU,qCACV4E,GAAE,uBAAyB,UAE3B,SAAC,KAAM,CACHC,KAAM,SACN7E,UAAU,OACVC,QAAS,kBAAM6E,QAAQC,IAAI,SAAS,EACpCC,QAAQ,QACR7E,MAAO,CACH+C,gBAAiB,WACnB,yBAMd,SAAC,KAAM,CACH8B,QAAQ,QACR/E,QAAS,kBAAW,OAALT,QAAK,IAALA,OAAK,EAALA,EAAOyF,QAAQ,EAAC,SAE9B,yBAKrB,E,iEC2TA,EA/WsB,SAACzF,GAAW,IAAD,IACvB0B,GAAW5B,EAAAA,EAAAA,QAAO,MAClB4F,GAAWC,EAAAA,EAAAA,MACX5D,GAAOH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,IAAI,IAClDC,EAAoB,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAMC,cAC5B,GAA8B4D,EAAAA,EAAAA,KAAmB,eAAjCvE,GAAF,KAAY,MAC1B,GAAoCxB,EAAAA,EAAAA,WAAS,GAAM,eAA5CgG,EAAU,KAAEC,EAAa,KACxBpB,EAAa1E,EAAb0E,SACFd,EAAe,SAAH,GAAiB,IAAXC,EAAG,EAAHA,IACZC,GAAcC,EAAAA,EAAAA,KAAdD,UAEFiC,GAAW7B,EAAAA,EAAAA,cAAW,uBAAC,2FACP,OAAZ8B,EAAQ,OAAHnC,QAAG,IAAHA,OAAG,EAAHA,EAAKvD,GAAE,UACA2F,EAAAA,EAAAA,IAAgCD,GAAG,OAClC,aADbrE,EAAG,QACDuE,OACJR,GAASS,EAAAA,EAAAA,IAA8B,OAAbnE,QAAa,IAAbA,OAAa,EAAbA,EAAe1B,KACnB,WAAfqB,EAAIuE,QACX7E,GAAW+E,EAAAA,EAAAA,IAAYzE,IAC1B,2CACF,CAACkC,IACEwC,GAASnC,EAAAA,EAAAA,cAAY,WACvB4B,GAAc,GACdQ,EAAczC,EAClB,GAAG,CAACA,IAEJ,OACI,iBAAKrD,UAAU,2BAA0B,WACrC,SAAC,IAAO,CAACH,MAAM,OAAM,UACjB,iBACIG,UAAS,iDAA4CsD,GACrDrD,QAAS4F,EAAO,UAEhB,SAAC,MAAU,SAGnB,SAAC,IAAO,CAAChG,MAAM,SAAQ,UACnB,iBACIG,UAAS,gDAA2CsD,GACpDrD,QAASsF,EAAS,UAElB,SAAC,MAAQ,UAK7B,EACM7D,GAAUC,EAAAA,EAAAA,UACZ,iBAAM,CACF,CACIC,OAAQ,UACRC,YAAa,cAEjB,CACID,OAAQ,WACRC,YAAa,eAEjB,CACID,OAAQ,aACRC,YAAa,qBAEjB,CACID,OAAQ,UACRC,YAAa,YAEjB,CACID,OAAQ,cACRC,YAAa,cAEjB,CACID,OAAQ,UACR+B,KAAM,EACN9B,YAAa,SACbC,KAAM,SAACtC,GAAK,OAAK,SAAC4D,EAAY,CAACC,IAAK7D,EAAM6D,IAAIO,UAAY,GAEjE,GACD,IAGEmC,EAAgB,CAClBC,SAAU,GACVC,WAAY,GACZC,kBAAkB,EAClBC,WAAY,GACZC,YAAa,GACbC,kBAAmB,GACnBC,YAAqB,OAARpC,QAAQ,IAARA,GAAkC,QAA1B,EAARA,EAAUqC,gCAAwB,WAA1B,EAAR,EAAoCzG,IAErD,GAAsCT,EAAAA,EAAAA,UAAS0G,GAAc,eAAtDS,EAAY,KAAEV,EAAa,KAC5BW,EAAiB,yCAAG,WAAOC,EAAQC,GAAa,mFAExC,OAAND,QAAM,IAANA,IAAAA,EAAQ5G,GAAE,gBAG6C,OAFjD8G,GAAG,kBACFF,GAAM,IACTJ,YAAqB,OAARpC,QAAQ,IAARA,GAAkC,QAA1B,EAARA,EAAUqC,gCAAwB,WAA1B,EAAR,EAAoCzG,KAAE,UAE1C+G,EAAAA,EAAAA,IAAgCD,GAAI,OAAjDE,EAAI,+CAESC,EAAAA,EAAAA,IAAgCL,GAAO,OAApDI,EAAI,eAEY,YAAhBA,EAAKpB,QACLR,GAASS,EAAAA,EAAAA,IAA8B,OAAbnE,QAAa,IAAbA,OAAa,EAAbA,EAAe1B,KACzCwF,GAAc,IACS,WAAhBwB,EAAKpB,QACZ7E,GAAW+E,EAAAA,EAAAA,IAAYkB,IAC1B,4CACJ,gBAjBsB,wCAkBvB,OACI,iCACI,UAAC,KAAI,CAAC9G,UAAU,YAAW,WACvB,iBAAKA,UAAU,2BAA0B,WACrC,iBAAKA,UAAU,eAAc,WACzB,gBAAKA,UAAU,gDAA+C,0BAG9D,gBAAKA,UAAU,uCAAsC,UACjD,cAAGA,UAAU,iBAAgB,SAChB,OAARkE,QAAQ,IAARA,OAAQ,EAARA,EAAUC,oBAIvB,iBAAKnE,UAAU,eAAc,WACzB,gBAAKA,UAAU,gDAA+C,4BAG9D,gBAAKA,UAAU,6BAA4B,UACvC,cAAGA,UAAU,iBAAgB,SAChB,OAARkE,QAAQ,IAARA,OAAQ,EAARA,EAAUE,kBAIvB,iBAAKpE,UAAU,eAAc,WACzB,gBAAKA,UAAU,gDAA+C,wBAG9D,gBAAKA,UAAU,4BAA2B,UACtC,cAAGA,UAAU,iBAAgB,SAAE,aAGvC,iBAAKA,UAAU,eAAc,WACzB,gBAAKA,UAAU,gDAA+C,iCAG9D,gBAAKA,UAAU,6BAA4B,UACvC,cAAGA,UAAU,iBAAgB,SAChB,OAARkE,QAAQ,IAARA,OAAQ,EAARA,EAAU7B,oBAK3B,mBACA,gBAAKrC,UAAU,wBAAuB,UAClC,SAAC,KAAM,CAACgF,QAAQ,QAAQ/E,QAAS,kBAAMqF,GAAc,EAAK,EAAC,SACtD,eAGT,SAAC,KAAS,CACNpF,IAAKgB,EACLQ,QAASA,EACTH,KAAc,OAAR2C,QAAQ,IAARA,GAAkC,QAA1B,EAARA,EAAUqC,gCAAwB,WAA1B,EAAR,EAAoCS,sBAGlD,UAAC,KAAM,CAACC,OAAQ5B,EAAY6B,QAAS,kBAAM5B,GAAc,EAAM,EAAC,WAC5D,eACInF,MAAO,CACHgH,WAAY,SACZC,UAAW,SACXC,WAAY,IACZC,SAAU,OACVnE,MAAO,WACT,SAEW,OAAZqD,QAAY,IAAZA,GAAAA,EAAc1G,GAAE,kBAErB,eAAIE,UAAU,6BACd,SAAC,KAAM,CACH+F,cAAeS,EAEfe,SAAU,SAACb,EAAO,GAAwB,IAArBC,EAAa,EAAbA,cACjBA,GAAc,GACdF,EAAkBC,EAAQC,EAC9B,EAAE,SAED,YAMM,IALHD,EAAM,EAANA,OACAc,EAAO,EAAPA,QACAC,EAAM,EAANA,OACAC,EAAY,EAAZA,aACAC,EAAY,EAAZA,aAEA,OACI,SAAC,KAAI,CAACJ,SAAUG,EAAa,UACzB,UAAC,KAAa,YACV,gBAAK1H,UAAU,iCAAgC,UAC3C,gBACIA,UAAU,MAGV,UAEA,UAAC,KAAa,CACVA,UAAU,SACViE,UAAU,SACV,WAEA,gBAAKjE,UAAU,kCAAiC,UAC5C,SAAC,KAAQ,CACL4H,MAAM,WACNC,QACIJ,EAAOzB,UACPwB,EAAQxB,SAEZ8B,aACIL,EAAOzB,SACV,UAED,SAAC,KAAK,CACFnB,KAAK,OACLkD,aAAa,MACbC,KAAK,WACLlF,YAAY,iBACZ/C,UAAWkI,EAAAA,UAIvB,iBAAKjI,UAAU,kCAAiC,WAC5C,SAAC,KAAQ,CACL4H,MAAM,eACNC,QACIJ,EAAOxB,YACPuB,EAAQvB,WAEZ6B,aACIL,EAAOxB,WACV,UAED,SAAC,KAAK,CACFpB,KAAK,OACLkD,aAAa,MACbC,KAAK,aACLlF,YAAY,qBACZ/C,UAAWkI,EAAAA,QAGnB,SAAC,KAAQ,CACLL,MAAM,aACNC,QACIJ,EAAOvB,kBACPsB,EAAQtB,iBAEZ4B,aACIL,EAAOvB,iBACV,UAED,SAAC,KAAK,CACF8B,KAAK,mBACLjI,UAAWmI,EAAAA,QAGZ,OAANxB,QAAM,IAANA,OAAM,EAANA,EAAQR,oBACL,iCACI,SAAC,KAAQ,CACL0B,MAAM,aACNC,QACIJ,EAAOtB,YACPqB,EAAQrB,WAEZ2B,aACIL,EAAOtB,WACV,UAED,SAAC,KAAK,CACFtB,KAAK,SACLkD,aAAa,MACbC,KAAK,aACLlF,YAAY,mBACZ/C,UACIkI,EAAAA,QAIZ,SAAC,KAAQ,CACLL,MAAM,cACNC,QACIJ,EAAOrB,aACPoB,EAAQpB,YAEZ0B,aACIL,EAAOrB,YACV,UAED,SAAC,KAAK,CACFvB,KAAK,SACLkD,aAAa,MACbC,KAAK,cACLlF,YAAY,oBACZ/C,UACIkI,EAAAA,QAIZ,SAAC,KAAQ,CACLL,MAAM,oBACNC,QACIJ,EAAOpB,mBACPmB,EAAQnB,kBAEZyB,aACIL,EAAOpB,kBACV,UAED,SAAC,KAAK,CACFxB,KAAK,SACLkD,aAAa,MACbC,KAAK,oBACLlF,YAAY,0BACZ/C,UACIkI,EAAAA,qBAUpC,0BACI,gBAAKjI,UAAU,kBAAiB,UAC5B,iCACI,SAAC,KAAM,CACHG,MAAO,CACH+C,gBACI,UACJC,MAAO,QACPgF,aAAc,OAElBtD,KAAM,SACN7E,UAAU,OACVC,QAAS,kBACLqF,GAAc,EAAM,EACvB,qBAIL,SAAC,KAAM,CACHtF,UAAU,OACVgF,QAAQ,QACRH,KAAM,SACNuD,SAAUT,EAAa,SAEhB,OAANjB,QAAM,IAANA,GAAAA,EAAQ5G,GACH,SACA,mBAQtC,SAKpB,EC9UA,EAlDkB,SAACN,GACf,OAA4CH,EAAAA,EAAAA,UAAS,IAAG,eAAjDgF,EAAc,KAAEC,EAAiB,KAClC/C,GAAOH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,IAAI,IAGlDE,GAFoB,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMC,eAEkBC,yBAC9CX,EAAAA,EAAAA,YAAU,WACNyD,EAAuB9C,EAC3B,GAAG,CAACA,IACJ,IAAM8C,EAAyB,SAACC,GAC5B,IAAMC,EAAc,OAAPD,QAAO,IAAPA,OAAO,EAAPA,EAAS9D,KAAI,SAACgE,GAQvB,IAAI3E,GACA,SAAC,EAAa,CAACmE,SAAUQ,IAG7B,MAAO,CAAE5E,GAAK,OAAD4E,QAAC,IAADA,OAAC,EAADA,EAAGP,YAAatE,MAAO,OAAD6E,QAAC,IAADA,OAAC,EAADA,EAAGP,YAAapE,UAAAA,EACvD,IACAuE,EAAkBG,EACtB,EAEA,OACI,4BACI,SAACE,EAAA,EAAS,CAAClE,MAAO4D,KAClB,iBAAKrE,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACH6E,KAAM,SACN7E,UAAU,OACVC,QAAS,kBAAW,OAALT,QAAK,IAALA,OAAK,EAALA,EAAO6I,YAAY,EAClCrD,QAAQ,QACR7E,MAAO,CACH+C,gBAAiB,WACnB,SAED,cAEL,SAAC,KAAM,CAAC8B,QAAQ,QAAQ/E,QAAS,kBAAW,OAALT,QAAK,IAALA,OAAK,EAALA,EAAOyF,QAAQ,EAAC,SAClD,yBAKrB,E,sBC0bA,EA9dsB,SAACzF,GACnB,IAAM+B,GAAOH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,IAAI,IAElDC,EAAoB,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAMC,cACtBC,EAAuC,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAeC,wBACzC6G,EAA8C,OAAvB7G,QAAuB,IAAvBA,OAAuB,EAAvBA,EAAyBf,KAAI,SAAAgE,GACtD,MAAO,CAAC6D,MAAO,OAAD7D,QAAC,IAADA,OAAC,EAADA,EAAG8D,QAAQZ,MAAM,GAAD,OAAK,OAADlD,QAAC,IAADA,OAAC,EAADA,EAAG8D,SACzC,IACQtE,EAAa1E,EAAb0E,SAIFuE,GAAW,kBACVvE,GAAQ,IACXwE,aAAc,IAAIC,KAAa,OAARzE,QAAQ,IAARA,OAAQ,EAARA,EAAUwE,cACjCE,WAAwB,OAAbpH,QAAa,IAAbA,OAAa,EAAbA,EAAe1B,KAE9B,GAAsCT,EAAAA,EAAAA,UAASoJ,GAAY,eAApDjC,EAAY,KACXqC,GAD0B,KACGC,EAAAA,GAAAA,IAAzBC,EAAyBD,EAAAA,GAAAA,GAArBE,EAAqBF,EAAAA,GAAAA,GAAjBG,EAAiBH,EAAAA,GAAAA,MAAVI,EAAUJ,EAAAA,GAAAA,MAE/BK,EAAmBC,EAAAA,KAAaC,MAAM,CACxCC,WAAYF,EAAAA,KAAaG,OAAOC,SAAS,4BAA4BC,WACrEf,aAAcU,EAAAA,KAAWG,OAAOC,SAAS,gCAAgCC,WACzEC,WAAYN,EAAAA,KAAaG,OAAOC,SAAS,oCAAoCC,WAC7EE,aAAcP,EAAAA,KAAaG,OAAOC,SAAS,sCAAsCC,WACjFG,OAAQR,EAAAA,KAAaG,OAAOC,SAAS,wBAAwBC,WAC7DI,MAAOT,EAAAA,KAAaG,OAAOC,SAAS,uBAAuBC,WAC3DrJ,OAAQgJ,EAAAA,KAAaG,OAAOC,SAAS,wBAAwBC,WAC7DzD,SAAUoD,EAAAA,KAAaG,OAAOC,SAAS,yBAAyBC,WAChEK,oBAAqBV,EAAAA,KAAaG,OAAOC,SAAS,qCAAqCC,WACvFM,YAAaX,EAAAA,KAAaG,OAAOC,SAAS,6BAA6BC,aAG3E,OACI,+BACI,SAAC,KAAI,CAACzJ,UAAU,YAAW,UACvB,SAAC,KAAM,CACH+F,cAAeS,EACf2C,iBAAkBA,EAClB5B,SAAU,SAACb,EAAO,GAAwB,IAArBC,EAAa,EAAbA,cACjBA,GAAc,GA/BF,SAACD,EAAQC,GAChC,OAALnH,QAAK,IAALA,GAAAA,EAAOwK,iBAAiBtD,EAC5B,CA8BoBuD,CAAwBvD,EAC5B,EAAE,SAED,YAMM,IALHA,EAAM,EAANA,OACAc,EAAO,EAAPA,QACAC,EAAM,EAANA,OACAC,EAAY,EAAZA,aACY,EAAZC,aAEA,OACI,SAAC,KAAI,CAACJ,SAAUG,EAAa,UACzB,UAAC,KAAa,YACV,iBAAK1H,UAAU,iCAAgC,WAC3C,gBAAKA,UAAU,MAAK,UAChB,UAAC,KAAa,CACVA,UAAU,SACViE,UAAU,SACV,WAEA,iBAAKjE,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CACL4H,MAAM,aACNC,QACIJ,EAAO6B,YACP9B,EAAQ8B,WAEZxB,aACIL,EAAO6B,WACV,UAED,SAAC,KAAK,CACFzE,KAAK,OACLkD,aAAa,MACbC,KAAK,aACLI,UAAU,EACVtF,YAAY,mBACZ/C,UAAWkI,EAAAA,QAGnB,SAAC,KAAQ,CACLL,MAAM,iBACNC,QACIJ,EAAOiB,cACPlB,EAAQkB,aAEZZ,aACIL,EAAOiB,aACV,UAED,SAAC,KAAK,CACFV,KAAK,eACLlF,YAAY,cAAa,SAExB,gBACGoH,EAAK,EAALA,MACAC,EAAI,EAAJA,KAAI,OAEJ,SAAC,KAAU,CACPD,MACIA,EAEJC,KAAMA,EACN5B,MACI2B,EAAM3B,MAEVzF,YAAY,cACZsH,SAAU,SACNC,GAEAF,EAAKG,cACDJ,EAAMlC,KACNqC,EAER,EACAE,YAlH7C,cAqH2C,OAId,SAAC,KAAQ,CACL3C,MAAM,qBACNC,QACIJ,EAAOiC,YACPlC,EAAQkC,WAEZ5B,aACIL,EAAOiC,WACV,UAED,SAAC,KAAK,CACF7E,KAAK,OACLmD,KAAK,aACLD,aAAa,MACbjF,YAAY,2BACZ/C,UAAWkI,EAAAA,QAGnB,SAAC,KAAQ,CACLL,MAAM,uBACNC,QACIJ,EAAOkC,cACPnC,EAAQmC,aAEZ7B,aACIL,EAAOkC,aACV,UAED,SAAC,KAAK,CACF9E,KAAK,OACLmD,KAAK,eACLD,aAAa,MACbjF,YAAY,6BACZ/C,UAAWkI,EAAAA,WAIvB,iBAAKjI,UAAU,kCAAiC,WAC5C,SAAC,KAAQ,CACL4H,MAAM,SACNC,QACIJ,EAAOmC,QACPpC,EAAQoC,OAEZ9B,aACIL,EAAOmC,OACV,UAED,SAAC,KAAK,CACF/E,KAAK,OACLmD,KAAK,SACLD,aAAa,MACbjF,YAAY,eACZ/C,UAAWkI,EAAAA,QAGnB,SAAC,KAAQ,CACLL,MAAM,QACNC,QACIJ,EAAOoC,OACPrC,EAAQqC,MAEZ/B,aACIL,EAAOoC,MACV,UAED,SAAC,KAAK,CACFhF,KAAK,OACLmD,KAAK,QACLD,aAAa,MACbjF,YAAY,cACZ/C,UAAWkI,EAAAA,QAGnB,SAAC,KAAQ,CACLL,MAAM,SACNC,QACIJ,EAAOrH,QACPoH,EAAQpH,OAEZ0H,aACIL,EAAOrH,OACV,UAED,SAAC,KAAK,CACFyE,KAAK,OACLmD,KAAK,SACLD,aAAa,MACbjF,YAAY,eACZ/C,UAAWkI,EAAAA,QAGnB,SAAC,KAAQ,CACLL,MAAM,UACNC,QACIJ,EAAOzB,UACPwB,EAAQxB,SAEZ8B,aACIL,EAAOzB,SACV,UAED,SAAC,KAAK,CACFnB,KAAK,OACLmD,KAAK,WACLD,aAAa,MACbjF,YAAY,gBACZ/C,UAAWkI,EAAAA,WAIvB,eAAIjI,UAAU,wBACd,gBAAKA,UAAU,kCAAiC,UAC5C,SAAC,KAAQ,CACL4H,MAAM,sBACNC,QACIJ,EAAOqC,qBACPtC,EAAQsC,oBAEZhC,aACIL,EAAOqC,oBACV,UAED,SAAC,KAAK,CACFjF,KAAK,OACLmD,KAAK,sBACLD,aAAa,MACbjF,YAAY,4BACZ0H,UAAQ,EACRzK,UAAWkI,EAAAA,UAIvB,gBAAKjI,UAAU,kCAAiC,UAC5C,SAAC,KAAQ,CACL4H,MAAM,cACNC,QACIJ,EAAOsC,aACPvC,EAAQuC,YAEZjC,aACIL,EAAOsC,YACV,UAED,SAAC,KAAK,CACF/B,KAAK,cACLjI,UAAWmI,EAAAA,eAM/B,gBAAKlI,UAAU,kBAAiB,UAC5B,SAAC,KAAU,CAACgI,KAAK,gBAAe,SAC3B,YAAS,EAANyC,OAAH,MAAWC,EAAM,EAANA,OAAQC,EAAI,EAAJA,KAAI,OACpB,iCACI,gBAAK3K,UAAU,mBAAkB,UAC7B,SAAC,KAAM,CACHgF,QAAQ,UACR7B,MAAM,WACN0B,KAAK,SACL5E,QAAS,kBACL0K,EAAK,CACDC,mBACI,GACJC,aACI,GACJC,aAAc,EACdC,YACI,GACJC,iBAAkB,EAClBC,cACI,MACN,EACL,oBAKT,UAAC,KAAK,YACF,SAAChC,EAAK,WACF,UAACJ,EAAE,YACC,SAACE,EAAE,+BAGH,SAACA,EAAE,4BAGH,SAACA,EAAE,gCAIH,SAACA,EAAE,2BAGH,SAACA,EAAE,gCAIH,SAACA,EAAE,UAGX,SAACG,EAAK,UACK,OAANxC,QAAM,IAANA,GAAqB,QAAf,EAANA,EAAQwE,qBAAa,WAAf,EAAN,EAAuBxK,KACpB,SACIyK,EACA3K,GAEA,OACI,UAACqI,EAAE,YAKC,SAACG,EAAE,WACH,SAAC,KAAK,CAAEhB,KAAI,wBAAmBxH,EAAK,uBAAsB,SACjD,gBACG0J,EAAK,EAALA,MACAC,EAAI,EAAJA,KAAI,OAEJ,+BACI,SAAC,KAAM,CACHrH,YAAY,cACZoH,MACIA,EAEJC,KACIA,EAEJiB,QACI9C,EAEJC,MAA6B,OAAtBD,QAAsB,IAAtBA,OAAsB,EAAtBA,EAAwB+C,QAC3B,SACIC,GAAE,OAEFA,EAAG/C,OACH4C,EAAEP,kBAAkB,IAE5BR,SAAU,SACNkB,GAEAnB,EAAKG,cACDJ,EAAMlC,KACNsD,EAAG/C,MAEX,KAEL,OAIf,SAACS,EAAE,WACC,SAAC,KAAK,CACFnE,KAAK,OACLmD,KAAI,wBAAmBxH,EAAK,iBAC5BuH,aAAa,MACbjF,YAAY,qBACZ/C,UACIkI,EAAAA,QAMZ,SAACe,EAAE,WACC,SAAC,KAAK,CACFnE,KAAK,SACLmD,KAAI,wBAAmBxH,EAAK,iBAC5BuH,aAAa,MACbjF,YAAY,kBACZ/C,UACIkI,EAAAA,QAIZ,SAACe,EAAE,WACC,SAAC,KAAK,CACFnE,KAAK,OACLmD,KAAI,wBAAmBxH,EAAK,gBAC5BuH,aAAa,MACbjF,YAAY,oBACZ/C,UACIkI,EAAAA,QAIZ,SAACe,EAAE,WACC,SAAC,KAAK,CACFnE,KAAK,SACLmD,KAAI,wBAAmBxH,EAAK,qBAC5BuH,aAAa,MACbjF,YAAY,iBACZ/C,UACIkI,EAAAA,QAIZ,SAACe,EAAE,WACC,SAAC,MAAa,CACV7F,MAAM,MACNN,KACI,SAEJ5C,QAAS,kBACLyK,EACIlK,EACH,QAhGR,OAAD2K,QAAC,IAADA,OAAC,EAADA,EAAGrL,GAsGnB,WAIb,UAKnB,0BACI,gBAAKE,UAAU,kBAAiB,UAC5B,iCACI,SAAC,KAAM,CACHA,UAAU,OACVgF,QAAQ,UACR7B,MAAM,WACN0B,KAAM,SAAS,SAEd,oBAEL,SAAC,KAAM,CACH7E,UAAU,OACVgF,QAAQ,UACR7B,MAAM,UACNlD,QAAS,kBAAS,OAALT,QAAK,IAALA,OAAK,EAALA,EAAO+L,iBAAuB,OAAN7E,QAAM,IAANA,OAAM,EAANA,EAAQ4C,WAAW,EACxDzE,KAAM,SAAS,SAEd,8BAQjC,OAKpB,ECxWA,EA5HkB,SAACrF,GACf,OAA4CH,EAAAA,EAAAA,UAAS,IAAG,eAAjDgF,EAAc,KAAEC,EAAiB,KAClC/C,GAAOH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,IAAI,IAClD2D,GAAWC,EAAAA,EAAAA,MACX3D,EAAoB,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAMC,cAC5B,GAA8B4D,EAAAA,EAAAA,KAAmB,eAAjCvE,GAAF,KAAY,MAC1B,GAA4CxB,EAAAA,EAAAA,UACxCmC,EAAcgK,0BACjB,eAFMC,EAAe,KAAEC,EAAgB,MAGxC5K,EAAAA,EAAAA,YAAU,WACNyD,EAAuBkH,EAC3B,GAAG,CAACA,KACJ3K,EAAAA,EAAAA,YAAU,WACwB,KAAZ,OAAf2K,QAAe,IAAfA,OAAe,EAAfA,EAAiB7B,SAChB+B,GAER,GAAG,IACH,IAAMJ,EAAmB,SAACzL,GACtB,IAAMyB,GAAI,OAAOkK,GACXG,EAAgB,OAAJrK,QAAI,IAAJA,OAAI,EAAJA,EAAMqK,WAAU,SAAClH,GAAC,OAAM,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG4E,cAAexJ,CAAE,IAC7DyB,EAAKsK,OAAOD,EAAW,GACvBF,EAAiBnK,EACrB,EAEMyI,EAAmB,SAAC9F,GACtB,IAAM3C,GAAI,OAAOkK,GACXK,EAAiB,OAAJvK,QAAI,IAAJA,OAAI,EAAJA,EAAMb,KAAI,SAACgE,GAC1B,OAAK,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG4E,eAAuB,OAARpF,QAAQ,IAARA,OAAQ,EAARA,EAAUoF,aACrB,kBAAI5E,GAAKR,IAET,UAAKQ,EAEpB,IACAgH,EAAiBI,EACrB,EAEMvH,EAAyB,SAACC,GAC5B,IAAMC,EAAc,OAAPD,QAAO,IAAPA,OAAO,EAAPA,EAAS9D,KAAI,SAACgE,GACvBI,QAAQC,IAAI,aAAc,OAADL,QAAC,IAADA,OAAC,EAADA,EAAG4E,YAC5B,IAAIvJ,GACA,SAAC,EAAa,CACVmE,SAAUQ,EACV6G,iBAAkBA,EAClBvB,iBAAkBA,IAI1B,MAAO,CAAElK,GAAK,OAAD4E,QAAC,IAADA,OAAC,EAADA,EAAG4E,WAAYzJ,MAAQ,OAAD6E,QAAC,IAADA,OAAC,EAADA,EAAG4E,WAAYvJ,UAAAA,EACtD,IACAuE,EAAkBG,EACtB,EAEMsH,EAAyB,yCAAG,6FACE,MACxB,QADFxK,GAAI,OAAOkK,UACT,IAAJlK,OAAI,EAAJA,EAAMqI,QAAS,GAAC,gBAC+D,OAAzEhD,EAAM,CAAEoF,6BAA8BzK,EAAKqH,WAAwB,OAAbpH,QAAa,IAAbA,OAAa,EAAbA,EAAe1B,IAAI,UAC5DmM,EAAAA,EAAAA,IAAqCrF,GAAI,OACxC,aADdE,EAAI,QACDpB,QACLR,GAASS,EAAAA,EAAAA,IAA8B,OAAbnE,QAAa,IAAbA,OAAa,EAAbA,EAAe1B,KACpC,OAALN,QAAK,IAALA,GAAAA,EAAOyF,UACgB,WAAhB6B,EAAKpB,QACZ7E,GAAW+E,EAAAA,EAAAA,IAAYkB,IAC1B,uBAEDjG,EAAW,oDAAmD,4CAErE,kBAd8B,mCAgBzB8K,EAAsB,WACxB,IAAIpK,GAAI,OAAOkK,GACTS,EAAU,CACZ5C,WAAW,OAAD,OAAS6C,KAAKC,MACP,IAAbD,KAAKE,SAA6B,MAEtC3D,aAAc,IAAIC,KAClBe,WAAY,GACZC,aAAc,GACdC,OAAQ,GACRC,MAAO,GACPzJ,OAAQ,GACR4F,SAAU,GACV+D,aAAa,EACbmB,cAAe,GACfoB,eAAgB,KAChBC,SAAU,KACVzC,oBAAqB,GACrBlB,WAAY,KACZ4D,oBAAqB,MAEzBjL,EAAKoJ,KAAKuB,GACVR,EAAiBnK,EACrB,EAEA,OACI,4BACI,SAACoD,EAAA,EAAS,CAAClE,MAAO4D,KAClB,gBAAKrE,UAAU,kBAAiB,UAC5B,SAAC,KAAM,CAACgF,QAAQ,UAAU/E,QAAS,kBAAM0L,GAAqB,EAAC,SAC1D,uBAGT,iBAAK3L,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACH6E,KAAM,SACN7E,UAAU,OACVC,QAAS,kBAAW,OAALT,QAAK,IAALA,OAAK,EAALA,EAAO6I,YAAY,EAClCrD,QAAQ,QACR7E,MAAO,CACH+C,gBAAiB,WACnB,SAED,cAEL,SAAC,KAAM,CACH8B,QAAQ,QACR/E,QAAS,kBAAM8L,GAA2B,EAAC,SAE1C,+BAKrB,E,WC9GQlD,EAA6BC,EAAAA,GAAAA,GAAzBC,EAAyBD,EAAAA,GAAAA,GAArBE,EAAqBF,EAAAA,GAAAA,GAAjBG,EAAiBH,EAAAA,GAAAA,MAAVI,EAAUJ,EAAAA,GAAAA,MAqTrC,EApTiB,SAACtJ,GACd,IAAM+B,GAAOH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,IAAI,IAClDC,EAAoB,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAMC,cACtBiL,EAAgC,OAAbjL,QAAa,IAAbA,OAAa,EAAbA,EAAekL,yBAClCC,EAA+B,OAAbnL,QAAa,IAAbA,OAAa,EAAbA,EAAegK,yBACvC,GAA8BpG,EAAAA,EAAAA,KAAmB,eAAjCvE,GAAF,KAAY,MAC1B,GAAyCxB,EAAAA,EAAAA,WAAS,kBAAIoN,GAAgB,IAAC7D,WAAwB,OAAbpH,QAAa,IAAbA,OAAa,EAAbA,EAAe1B,MAAI,eAA9F8M,EAAc,KAEfC,GAFiC,KAElB,SAACC,GAElB,OAAO,CACX,GACMC,EAAoB,yCAAG,WAAOrG,GAAM,4EACnB,OAAnB5B,QAAQC,IAAI2B,GAAO,UACAsG,EAAAA,EAAAA,IAA2BtG,GAAO,OACjC,aADdI,EAAI,QACDpB,OACA,OAALlG,QAAK,IAALA,GAAAA,EAAOyF,SACgB,WAAhB6B,EAAKpB,QACZ7E,GAAW+E,EAAAA,EAAAA,IAAYkB,IAC1B,2CAEJ,gBATyB,sCAWpBqC,EAAmBC,EAAAA,KAAaC,MAAM,CACxC4D,iBAAkB7D,EAAAA,KAAaG,OAAOC,SAAS,kCAAkCC,WACjFyD,eAAgB9D,EAAAA,KAAaG,OAAOC,SAAS,gCAAgCC,WAC7E0D,YAAa/D,EAAAA,KAAaG,OAAOC,SAAS,6BAA6BC,WACvE2D,cAAehE,EAAAA,KAAaG,OAAO8D,IAAI,EAAG,uCAAuCC,IAAI,GAAI,iCACpF9D,SAAS,+BAA+BC,aAGjD,OACI,0BACI,SAAC,KAAM,CACH1D,cAAe6G,EACfzD,iBAAkBA,EAClB5B,SAAU,SAACb,EAAO,GAAwB,IAArBC,EAAa,EAAbA,cACjBA,GAAc,GACdoG,EAAqBrG,EAAQC,EACjC,EAAE,SAED,YAAS,EAAND,OAA2D,IAAD,EAAlDc,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAQC,EAAY,EAAZA,aAA0B,EAAZC,aACvC,OACI,SAAC,KAAI,CAACJ,SAAUG,EAAa,UACzB,UAAC,KAAa,YACV,iBAAK1H,UAAU,iBAAgB,WAC3B,gBAAKA,UAAU,2BAA0B,UACrC,gBAAIA,UAAU,oBAAmB,yBAChB,KACb,iBAAMA,UAAU,iBAAgB,oBAAsB,OAAhByM,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBc,sBAGhE,iBAAKvN,UAAU,sBAAqB,WAChC,4BACI,gBAAKA,UAAU,8CAA6C,6BAG5D,gBAAKA,UAAU,4BAA2B,UACtC,cAAGA,UAAU,iBAAgB,SAIxB,QAJwB,EACxByC,IACmB,OAAhBgK,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBe,aAClB,qBACH,aAHA,EAGE7K,OAAO,sBAItB,4BACI,gBAAK3C,UAAU,8CAA6C,yBAG5D,gBAAKA,UAAU,4BAA2B,UACtC,cAAGA,UAAU,iBAAgB,qCAKrC,4BACI,gBAAKA,UAAU,wDAAuD,2BAGtE,cACIA,UAAU,gBACVyN,KAAK,qBAAoB,SAGL,OAAhBhB,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBiB,sBAI9B,4BACI,gBAAK1N,UAAU,8CAA6C,+BAG5D,gBAAKA,UAAU,4BAA2B,UACtC,eAAGA,UAAU,+BAA8B,WACvC,iBAAMA,UAAU,OAAM,UAClB,iBAAM2N,MAAM,uEAGI,OAAhBlB,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBmB,gCAMtC,gBAAK5N,UAAU,uBAAsB,UACjC,gBAAKA,UAAU,WAAU,UACrB,UAAC,KAAK,CAACA,UAAU,aAAY,WACzB,SAACiJ,EAAK,CAACjJ,UAAU,aAAY,UACzB,UAAC6I,EAAE,CAAC7I,UAAU,WAAU,WACpB,SAAC+I,EAAE,0BACH,SAACA,EAAE,4BACH,SAACA,EAAE,sBACH,SAACA,EAAE,0BACH,SAACA,EAAE,8BACH,SAACA,EAAE,6BAGX,SAACG,EAAK,UACc,OAAfyD,QAAe,IAAfA,OAAe,EAAfA,EAAiBjM,KACd,SAACgE,GAAO,IAAD,EACH,OACI,UAACmE,EAAE,YACC,SAACG,EAAE,UAEM,OAADtE,QAAC,IAADA,OAAC,EAADA,EAAG4E,cAGX,UAACN,EAAE,WACE,IAIA,QAJG,EACHvG,IACI,OAADiC,QAAC,IAADA,OAAC,EAADA,EAAGgE,aACH,qBACH,aAHA,EAGE/F,OACC,kBAGR,SAACqG,EAAE,UAEM,OAADtE,QAAC,IAADA,OAAC,EAADA,EAAGgF,cAGX,SAACV,EAAE,oBAAM,OAADtE,QAAC,IAADA,OAAC,EAADA,EAAGkF,OAAM,YAAK,OAADlF,QAAC,IAADA,OAAC,EAADA,EAAGmF,MAAK,YAAK,OAADnF,QAAC,IAADA,OAAC,EAADA,EAAGtE,WACpC,SAAC4I,EAAE,WACC,SAAC,MAAY,OAEjB,SAACA,EAAE,WACC,SAAC,MAAY,QAI7B,cAMpB,gBAAKhJ,UAAU,sCACf,iBAAKA,UAAU,8BAA6B,WACxC,0BACI,SAAC,KAAQ,CACL4H,MAAM,mBACNC,QACIJ,EAAOwF,kBACPzF,EAAQyF,iBAEZnF,aACIL,EAAOwF,iBACV,UAED,SAAC,KAAK,CACFpI,KAAK,OACLkD,aAAa,MACbC,KAAK,mBACLI,UAAU,EACVtF,YAAY,yBACZ/C,UAAWkI,EAAAA,UAIvB,0BACI,SAAC,KAAQ,CACLL,MAAM,iBACNC,QACIJ,EAAOyF,gBACP1F,EAAQ0F,eAEZpF,aACIL,EAAOyF,eACV,UAED,SAAC,KAAK,CACFrI,KAAK,OACLkD,aAAa,MACbC,KAAK,iBACLlF,YAAY,uBACZ/C,UAAWkI,EAAAA,UAIvB,0BACI,SAAC,KAAQ,CACLL,MAAM,cACNC,QACIJ,EAAO0F,aACP3F,EAAQ2F,YAEZrF,aACIL,EAAO0F,YACV,UAED,SAAC,KAAK,CACFtI,KAAK,OACLkD,aAAa,MACbC,KAAK,cACLlF,YAAY,oBACZ/C,UAAWkI,EAAAA,UAIvB,0BACI,SAAC,KAAQ,CACLL,MAAM,iBACNC,QACIJ,EAAO2F,eACP5F,EAAQ4F,cAEZtF,aACIL,EAAO2F,cACV,UAED,SAAC,KAAK,CACFvI,KAAK,OACLkD,aAAa,MACbC,KAAK,gBACLlF,YAAY,uBACZ/C,UAAWkI,EAAAA,aAK3B,gBAAKjI,UAAU,sCACf,gBAAKA,UAAU,sBAAqB,UAChC,iBAAKA,UAAU,wBAAuB,WAClC,gBAAKA,UAAU,8CAA6C,wCAG5D,SAAC,KAAM,CACH6N,WAAS,EACT7N,UAAU,qCACVG,MAAO,CAAE2N,UAAW,QACpBjB,aAAcA,EACdzC,SAAU,SACN2D,EACAC,EACAC,EACAC,GAGA,EACF,UAEF,gBAAKlO,UAAU,oBAAmB,UAC9B,eAAGA,UAAU,gBAAe,WACxB,iBAAMA,UAAU,mCAChB,kBAAMA,UAAU,gBAAe,WAC3B,iBAAMA,UAAU,gBAAe,0CAI/B,iBAAMA,UAAU,WAAU,UACtB,SAAC,MAAe,yBAShD,iBAAKA,UAAU,kBAAiB,WAC5B,SAAC,KAAM,CACH6E,KAAM,SACN7E,UAAU,OACVC,QAAS,kBAAW,OAALT,QAAK,IAALA,OAAK,EAALA,EAAO6I,YAAY,EAClCrD,QAAQ,QACR7E,MAAO,CACH+C,gBAAiB,WACnB,SAED,cAEL,SAAC,KAAM,CACH8B,QAAQ,QACRH,KAAK,SAAQ,SAEZ,sBAMzB,KAIhB,ECjGA,EAxNuB,SAACrF,GAEpB,IAAOkH,EAKYlH,EALZkH,OACHc,EAIehI,EAJfgI,QACAC,EAGejI,EAHfiI,OAGejI,EAFfmI,aAEenI,EADfkI,aACelI,EAAf2O,WACJ,OAEI,UAAC,KAAI,YACD,SAAC,KAAa,WACV,iBAAKnO,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CAEL4H,OAAO,4CAAkB,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SACzD0E,QACIJ,EAAO2G,qBACP5G,EAAQ4G,oBAEZtG,aACIL,EAAO2G,oBACV,UAED,SAAC,KAAK,CACFvJ,KAAK,OACLkD,aAAa,MACbC,KAAK,sBACLlF,YAAY,gBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAO0H,yBAGtB,SAAC,KAAQ,CAELxG,OAAO,4CAAkB,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SACzD0E,QACIJ,EAAO4G,qBACP7G,EAAQ6G,oBAEZvG,aACIL,EAAO4G,oBACV,UAED,SAAC,KAAK,CACFxJ,KAAK,OACLkD,aAAa,MACbC,KAAK,sBACLlF,YAAY,gBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAO2H,8BAK9B,SAAC,KAAa,WACV,iBAAKrO,UAAU,iCAAgC,WAC3C,SAAC,KACG,CACA4H,OAAO,qCAAW,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SAClD0E,QACIJ,EAAO6G,uBACP9G,EAAQ8G,sBAEZxG,aACIL,EAAO6G,sBACV,UAED,SAAC,KAAK,CACFzJ,KAAK,OACLkD,aAAa,MACbC,KAAK,wBACLlF,YAAY,gBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAO4H,2BAGtB,SAAC,KACG,CACA1G,OAAO,mCAAS,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SAChD0E,QACIJ,EAAO8G,qBACP/G,EAAQ+G,oBAEZzG,aACIL,EAAO8G,oBACV,UAED,SAAC,KAAK,CACF1J,KAAK,OACLkD,aAAa,MACbC,KAAK,sBACLlF,YAAY,cACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAO6H,8BAK9B,SAAC,KAAa,WACV,iBAAKvO,UAAU,iCAAgC,WAC3C,SAAC,KACG,CACA4H,OAAO,kCAAQ,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SAC/C0E,QACIJ,EAAO+G,oBACPhH,EAAQgH,mBAEZ1G,aACIL,EAAO+G,mBACV,UAED,SAAC,KAAK,CACF3J,KAAK,OACLkD,aAAa,MACbC,KAAK,qBACLlF,YAAY,aACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAO8H,wBAGtB,SAAC,KAAQ,CAEL5G,OAAO,qCAAW,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SAClD0E,QACIJ,EAAOgH,uBACPjH,EAAQiH,sBAEZ3G,aACIL,EAAOgH,sBACV,UAED,SAAC,KAAK,CACF5J,KAAK,OACLkD,aAAa,MACbC,KAAK,wBACLlF,YAAY,gBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAO+H,gCAK9B,SAAC,KAAa,WACV,iBAAKzO,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CAEL4H,OAAO,uCAAa,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SACpD0E,QACIJ,EAAOiH,yBACPlH,EAAQkH,wBAEZ5G,aACIL,EAAOiH,wBACV,UAED,SAAC,KAAK,CACF7J,KAAK,OACLkD,aAAa,MACbC,KAAK,0BACLlF,YAAY,kBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAOgI,6BAGtB,SAAC,KACG,CACA9G,OAAO,sCAAY,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SACnD0E,QACIJ,EAAOkH,wBACPnH,EAAQmH,uBAEZ7G,aACIL,EAAOkH,uBACV,UAED,SAAC,KAAK,CACF9J,KAAK,OACLkD,aAAa,MACbC,KAAK,yBACLlF,YAAY,iBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAOiI,iCAK9B,SAAC,KAAa,WACV,gBAAK3O,UAAU,iCAAgC,UAC3C,SAAC,KAAQ,CAEL4H,OAAO,wCAAc,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SACrD0E,QACIJ,EAAOmH,0BACPpH,EAAQoH,yBAEZ9G,aACIL,EAAOmH,yBACV,UAED,SAAC,KAAK,CACF/J,KAAK,OACLkD,aAAa,MACbC,KAAK,2BACLlF,YAAY,mBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAOkI,mCAQ1C,ECDA,GArNqB,SAACpP,GAElB,IAAOkH,EAKYlH,EALZkH,OACHc,EAIehI,EAJfgI,QACAC,EAGejI,EAHfiI,OAGejI,EAFfmI,aAEenI,EADfkI,aACelI,EAAf2O,WACJ,OAEI,UAAC,KAAI,YACD,SAAC,KAAa,WACV,iBAAKnO,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CACL4H,OAAO,4CAAkB,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SACzD0E,QACIJ,EAAOoH,kBACPrH,EAAQqH,iBAEZ/G,aACIL,EAAOoH,iBACV,UAED,SAAC,KAAK,CACFhK,KAAK,OACLkD,aAAa,MACbC,KAAK,mBACLlF,YAAY,gBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAOmI,sBAGtB,SAAC,KAAQ,CACLjH,OAAO,4CAAkB,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SACzD0E,QACIJ,EAAOqH,kBACPtH,EAAQsH,iBAEZhH,aACIL,EAAOqH,iBACV,UAED,SAAC,KAAK,CACFjK,KAAK,OACLkD,aAAa,MACbC,KAAK,mBACLlF,YAAY,gBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAOoI,2BAK9B,SAAC,KAAa,WACV,iBAAK9O,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CAEL4H,OAAO,qCAAW,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SAClD0E,QACIJ,EAAOsH,oBACPvH,EAAQuH,mBAEZjH,aACIL,EAAOsH,mBACV,UAED,SAAC,KAAK,CACFlK,KAAK,OACLkD,aAAa,MACbC,KAAK,qBACLlF,YAAY,gBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAOqI,wBAGtB,SAAC,KAAQ,CAELnH,OAAO,mCAAS,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SAChD0E,QACIJ,EAAOuH,kBACPxH,EAAQwH,iBAEZlH,aACIL,EAAOuH,iBACV,UAED,SAAC,KAAK,CACFnK,KAAK,OACLkD,aAAa,MACbC,KAAK,mBACLlF,YAAY,cACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAOsI,2BAK9B,SAAC,KAAa,WACV,iBAAKhP,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CAEL4H,OAAO,kCAAQ,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SAC/C0E,QACIJ,EAAOwH,iBACPzH,EAAQyH,gBAEZnH,aACIL,EAAOwH,gBACV,UAED,SAAC,KAAK,CACFpK,KAAK,OACLkD,aAAa,MACbC,KAAK,kBACLlF,YAAY,aACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAOuI,qBAGtB,SAAC,KACG,CACArH,OAAO,qCAAW,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SAClD0E,QACIJ,EAAOyH,oBACP1H,EAAQ0H,mBAEZpH,aACIL,EAAOyH,mBACV,UAED,SAAC,KAAK,CACFrK,KAAK,OACLkD,aAAa,MACbC,KAAK,qBACLlF,YAAY,gBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAOwI,6BAK9B,SAAC,KAAa,WACV,iBAAKlP,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CAEL4H,OAAO,uCAAa,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SACpD0E,QACIJ,EAAO0H,sBACP3H,EAAQ2H,qBAEZrH,aACIL,EAAO0H,qBACV,UAED,SAAC,KAAK,CACFtK,KAAK,OACLkD,aAAa,MACbC,KAAK,uBACLlF,YAAY,kBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAOyI,0BAGtB,SAAC,KACG,CACAvH,OAAO,sCAAY,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SACnD0E,QACIJ,EAAO2H,qBACP5H,EAAQ4H,oBAEZtH,aACIL,EAAO2H,oBACV,UAED,SAAC,KAAK,CACFvK,KAAK,OACLkD,aAAa,MACbC,KAAK,sBACLlF,YAAY,iBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAO0I,8BAK9B,SAAC,KAAa,WACV,gBAAKpP,UAAU,iCAAgC,UAC3C,SAAC,KAAQ,CAEL4H,OAAO,wCAAc,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SACrD0E,QACIJ,EAAO4H,uBACP7H,EAAQ6H,sBAEZvH,aACIL,EAAO4H,sBACV,UAED,SAAC,KAAK,CACFxK,KAAK,OACLkD,aAAa,MACbC,KAAK,wBACLlF,YAAY,mBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAO2I,gCAO1C,E,YCwKA,GA/WqB,SAAH,GAKX,IAAD,EAJFC,EAAmB,EAAnBA,oBACAC,EAAsB,EAAtBA,uBACAtK,EAAM,EAANA,OACAoD,EAAU,EAAVA,WAEMnD,GAASC,EAAAA,EAAAA,MACf,GAA8BC,EAAAA,EAAAA,KAAmB,eAAjCvE,GAAF,KAAY,OAC1BC,EAAAA,EAAAA,YAAU,WACN0O,GACJ,GAAE,IACF,IAAMrO,GAAMC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,IAAI,IACvD,GAA2ClC,EAAAA,EAAAA,UAAS,IAAG,eAAhDoQ,EAAe,KAACC,EAAkB,KACnC1N,EAAmB,OAAHb,QAAG,IAAHA,OAAG,EAAHA,EAAKK,cAkCvBmO,EAhCgB,CAChBpC,aAAcpB,KAAKC,MAAM,IAAyB,IAAhBD,KAAKE,UAIvCmB,aAAc,IAAI7E,KAClBiH,SAAU,GACV,WAA2B,OAAb5N,QAAa,IAAbA,OAAa,EAAbA,EAAelC,GAC7B,oBAAuB,aACvBmN,iBAAkB,GAClB4C,OAAQ,GACRzB,oBAAqB,GACrBC,oBAAqB,GACrBC,sBAAuB,GACvBC,oBAAqB,GACrBC,mBAAoB,GACpBC,sBAAuB,GACvBC,wBAAyB,GACzBC,uBAAwB,GACxBmB,mBAAoB,WACpBlB,yBAA0B,GAC1BC,iBAAkB,GAClBC,iBAAkB,GAClBC,mBAAoB,GACpBC,iBAAkB,GAClBC,gBAAiB,GACjBC,mBAAoB,GACpBC,qBAAsB,GACtBC,oBAAqB,GACrBW,gBAAiB,SACjBV,sBAAuB,IAGX,OAAbrN,QAAa,IAAbA,GAAAA,EAAe0K,2BACdiD,GAAUK,EAAAA,GAAAA,IAAuC,OAAbhO,QAAa,IAAbA,OAAa,EAAbA,EAAe0K,2BAEvD,OAAsCrN,EAAAA,EAAAA,WAAS,kBAAIsQ,GAAS,IAAE,WAA2B,OAAb3N,QAAa,IAAbA,OAAa,EAAbA,EAAelC,GAAGA,GAAY,QAAV,EAAC6P,SAAS,aAAT,EAAW7P,MAAI,eAAzG0G,EAAY,KAEbyJ,GAF4B,KAEZ,WAClB5H,GACJ,GAEM6H,EAAa,SAACC,GAChBrL,QAAQC,IAAI,aAAcoL,GAC1BZ,GAAuB,GACvBtK,GACJ,EA+BMyC,GA9BmB0B,EAAAA,GAAW,CAChCmE,aAAcnE,EAAAA,KAAaI,SAAS,2BACpCgE,aAAcpE,EAAAA,KAAWK,WAAWD,SAAS,6BAC7CoG,SAAUxG,EAAAA,KAAaI,SAAS,yBAGhCyD,iBAAkB7D,EAAAA,KAAaI,SAAS,gCAExC4E,oBAAqBhF,EAAAA,KAAaI,SAAS,wCAC3C6E,oBAAqBjF,EAAAA,KAAaI,SAAS,wCAC3C8E,sBAAuBlF,EAAAA,KAAaI,SAAS,uBAC7C+E,oBAAqBnF,EAAAA,KAAaI,SAAS,qBAC3CgF,mBAAoBpF,EAAAA,KAAaI,SAAS,oBAC1CiF,sBAAuBrF,EAAAA,KAAaI,SAAS,uBAC7CkF,wBAAyBtF,EAAAA,KAAaI,SAAS,yBAC/CmF,uBAAwBvF,EAAAA,KAAaI,SAAS,wBAE9CoF,yBAA0BxF,EAAAA,KAAaI,SAAS,qBAChDqF,iBAAkBzF,EAAAA,KAAaI,SAAS,8BACxCsF,iBAAkB1F,EAAAA,KAAaI,SAAS,8BACxCuF,mBAAoB3F,EAAAA,KAAaI,SAAS,uBAC1CwF,iBAAkB5F,EAAAA,KAAaI,SAAS,qBACxCyF,gBAAiB7F,EAAAA,KAAaI,SAAS,oBACvC0F,mBAAoB9F,EAAAA,KAAaI,SAAS,uBAC1C2F,qBAAsB/F,EAAAA,KAAaI,SAAS,yBAC5C4F,oBAAqBhG,EAAAA,KAAaI,SAAS,wBAE3C6F,sBAAuBjG,EAAAA,KAAaI,SAAS,uBAG/B,yCAAG,WAAM9C,GAAM,8EAEe,OAAtCnF,GAAK6O,EAAAA,GAAAA,IAA0B1J,GAAO,UACzB2J,EAAAA,EAAAA,IAA2B9O,GAAK,OAC/B,aADduF,EAAI,QACDpB,QACLR,GAASS,EAAAA,EAAAA,IAA8B,OAAb3D,QAAa,IAAbA,OAAa,EAAbA,EAAelC,KACzCoQ,KACuB,WAAhBpJ,EAAKpB,SACZ7E,GAAW+E,EAAAA,EAAAA,IAAYkB,IACvBoJ,KACH,2CAEJ,gBAZiB,uCAaZV,EAAc,yCAAC,wHACMc,EAAAA,EAAAA,IAAsB,CACzCC,SAAS,SACThP,KAAK,omCACP,OAHIiP,EAAQ,OAIRrP,EAAKsP,KAAKC,MAAc,OAARF,QAAQ,IAARA,GAAc,QAAN,EAARA,EAAUjP,YAAI,OAAU,QAAV,EAAd,EAAgBiP,gBAAQ,WAAhB,EAAR,EAA0BG,kBAC1CC,GAAa,OAAHzP,QAAG,IAAHA,GAAW,QAAR,EAAHA,EAAK0P,cAAM,OAAY,QAAZ,EAAX,EAAazF,QAAQ,UAAE,WAApB,EAAH,EAAyB0F,mBAAoB,GACvDC,EAAgB,OAATH,QAAS,IAATA,OAAS,EAATA,EAAWlQ,KAAI,SAACgE,GACzB,MAAO,CAAC6D,MAAM7D,EAAEkD,MAAMlD,EAC1B,IACAgL,EAAmBqB,GAAO,2CAC7B,kBAXmB,mCAiBdC,EAAyB,CAC3B,CAAEzI,MAAO,QAASX,MAAO,SACzB,CAAEW,MAAO,WAAYX,MAAO,aAG1BqJ,GAAa7P,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM6P,OAAOD,UAAU,IAE3DpE,EAAe,SAACC,GAElB,OAAO,CACX,EAEA,OACI,0BACI,SAAC,KAAM,CACH7F,OAAQqI,EACR6B,2BAA2B,EAC3BtH,MAAO,IACPzJ,OAAQ,MACRgR,kBAAkB,EAClBlK,QAAS+I,EACToB,eAAgBpB,EAAc,UAE9B,iBAAKjQ,UAAU,uBAAsB,WACjC,eAAIA,UAAU,OAAM,8BACpB,gBAAKA,UAAU,mBAAkB,UAC7B,SAAC,KAAM,CACH+F,cAAeS,EAEfe,SAAUG,EAAa,SAEtB,gBACGhB,EAAM,EAANA,OACAc,EAAO,EAAPA,QACAC,EAAM,EAANA,OACAE,EAAY,EAAZA,aACAD,EAAY,EAAZA,aACAyG,EAAU,EAAVA,WAAU,OAGV,UAAC,KAAI,YACD,SAAC,KAAa,WACV,iBAAKnO,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CACL4H,OAAO,yCAAe,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SACtD0E,QACIJ,EAAO8F,cACP/F,EAAQ+F,aAEZzF,aACIL,EAAO8F,aACV,UAED,SAAC,KAAK,CACF1I,KAAK,OACLkD,aAAa,MACbC,KAAK,eACLlF,YAAY,oBACZ/C,UAAWkI,EAAAA,GACXM,MAAO7B,EAAO6G,aACdnF,UAAU,OAGlB,SAAC,KAAQ,CACDR,OAAO,2CAAiB,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SACxD0E,QACIJ,EAAO+F,cACPhG,EAAQgG,aAEZ1F,aACIL,EAAO+F,aACV,UAEL,SAAC,KAAK,CAACxF,KAAK,eAAc,SACrB,gBAAGkC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAU,CACPrH,YAAY,uBACZoH,MAAOA,EACPC,KAAMA,EACN5B,MAAO,IAAII,KAAKuB,EAAM3B,OACtB6B,SAAU,SAACC,GACPF,EAAKG,cACDJ,EAAMlC,KACNqC,EAER,EAEAE,YAAc0G,GAChB,YAMtB,SAAC,KAAa,WAEV,iBAAKjR,UAAU,iCAAgC,WAC3C,SAAC,KAAQ,CACL4H,OAAO,uCAAa,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SAEpD0E,QAASJ,EAAOmI,UAAYpI,EAAQoI,SAChC9H,aAAcL,EAAOmI,SAAS,UAElC,SAAC,KAAK,CAAC5H,KAAK,WAAU,SACjB,gBAAGkC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACPrH,YAAY,mBACZoH,MAAOA,EACPC,KAAMA,EACNiB,QAASqE,EACTlH,MAAOkH,EAAgB6B,MAAK,SAAAC,GAAM,OAAIA,EAAOhJ,QAAU2B,EAAM3B,KAAK,KAAK,GACvE6B,SAAU,SAACoH,GAAc,OAAKrH,EAAKG,cAAcJ,EAAMlC,KAAMwJ,EAAejJ,MAAM,GACpF,OAIV,SAAC,KAAQ,CAELX,OAAO,8CAAoB,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SAC3D0E,QACIJ,EAAOwF,kBACPzF,EAAQyF,iBAEZnF,aACIL,EAAOwF,iBACV,UAED,SAAC,KAAK,CAACjF,KAAK,mBAAkB,SACzB,gBAAGkC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACX,SAAC,KAAM,CACPrH,YAAY,0BACZoH,MAAOA,EACPC,KAAMA,EACNiB,QAAS4F,EACTzI,MAAOyI,EAAuBM,MAAK,SAAAC,GAAM,OAAIA,EAAOhJ,QAAU2B,EAAM3B,KAAK,KAAK,GAC9E6B,SAAU,SAACoH,GAAc,OAAKrH,EAAKG,cAAcJ,EAAMlC,KAAMwJ,EAAejJ,MAAM,GACpF,YAMlB,UAAC,KAAa,YACV,SAAC5D,EAAA,EAAS,CAAClE,MAAO,CACd,CACIX,GAAI,EACJD,MAAO,oBACPE,WAAW,SAAC,EAAc,CACtB2G,OAAAA,EACAc,QAAAA,EACAC,OAAAA,EACAE,aAAAA,EACAD,aAAAA,EACAyG,WAAAA,KAGR,CACIrO,GAAI,EACJD,MAAO,iBACPE,WAAW,SAAC,GAAY,CACpB2G,OAAAA,EACAc,QAAAA,EACAC,OAAAA,EACAE,aAAAA,EACAD,aAAAA,EACAyG,WAAAA,SAIZ,gBAAKnO,UAAU,eAAc,UACzB,SAAC,KAAQ,CAEL4H,OAAO,+CAAqB,iBAAMzH,MAAO,CAAEgD,MAAO,OAAQ,SAAE,SAC5D0E,QACIJ,EAAOoI,QACPrI,EAAQqI,OAEZ/H,aACIL,EAAOoI,OACV,UAET,SAAC,KAAM,CACHhC,WAAS,EACT7N,UAAU,qCACVG,MAAO,CAAE2N,UAAW,QACpBjB,aAAcA,EACdzC,SAAU,SAAC2D,EAAcC,EAAOC,EAAWC,GAE3C,EACE,UAEF,gBAAKlO,UAAU,oBAAmB,UAClC,eAAGA,UAAU,gBAAe,WACxB,iBAAMA,UAAU,mCAGhB,iBAAMA,UAAU,gBAAe,8CAQ/C,gBAAKA,UAAU,kBAAiB,UACpB,iCACI,SAAC,KAAI,CACDA,UAAU,qCAAoC,UAE9C,SAAC,KAAM,CACH6E,KAAM,SACN7E,UAAU,OACVC,QAAS,kBACLgQ,GAAe,EAEnBjL,QAAQ,QACR7E,MAAO,CACH+C,gBAAiB,WACnB,uBAKV,SAAC,KAAI,CAAClD,UAAU,qCAAoC,UAChD,SAAC,KAAM,CACH6E,KAAM,SACN7E,UAAU,OACVgF,QAAQ,QACR/E,QAASkO,EAAW,0CAOjC,YAQ3C,ECvRA,GAnGwB,WACpB,IAAMhN,GAAMC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,IAAI,IACjDiC,GAAUC,EAAAA,EAAAA,MACVzB,EAAmB,OAAHb,QAAG,IAAHA,OAAG,EAAHA,EAAKK,cAC3B,GAAsDnC,EAAAA,EAAAA,WAAS,GAAM,eAA9DiQ,EAAmB,KAAEC,EAAsB,KAClD,GAAwBlQ,EAAAA,EAAAA,UAAS,GAAE,eAA5BoS,EAAI,KAAEC,EAAO,KACpB,GAA8BtM,EAAAA,EAAAA,KAAmB,eAA1CxE,EAAO,KAAEC,EAAU,KAWpBoE,EAAS,WACXyM,EAAQD,EAAO,EACnB,EACME,EAAqB,yCAAG,iGAQpB,MACkB,QARlBC,EAAoC,OAAb5P,QAAa,IAAbA,GAAsC,QAAzB,EAAbA,EAAeP,+BAAuB,OAClB,QADkB,EAAtC,EACvB4J,QAAO,SAAC3G,GAAC,QAAO,OAADA,QAAC,IAADA,GAAAA,EAAG6B,yBAAwB,WAAC,WADP,EAAb,EAEvB7F,KAAI,SAACyK,GACH,MAAO,CACH0G,eAAiB,OAAD1G,QAAC,IAADA,OAAC,EAADA,EAAGrL,GACnBqE,YAAc,OAADgH,QAAC,IAADA,OAAC,EAADA,EAAGhH,YAExB,WACoB,IAApByN,OAAoB,EAApBA,EAAsBhI,QAAS,GAAC,gBAI/B,OAHKhD,EAAM,CACRL,yBAA0BqL,EAC1BhJ,WAAyB,OAAb5G,QAAa,IAAbA,OAAa,EAAbA,EAAelC,IAC9B,UACkBgS,EAAAA,EAAAA,IAA4BlL,GAAI,OAC/B,aADdE,EAAI,QACDpB,OACLT,IACuB,WAAhB6B,EAAKpB,QACZ7E,GAAW+E,EAAAA,EAAAA,IAAYkB,IAC1B,uBAED7B,IAAQ,4CAEf,kBAvB0B,mCAyBrBoD,EAAa,WAtCF,IAAC0J,EAEVL,GAFUK,EAsCgBN,EAAO,GArCtB,EACH,EACDM,EAAW,EACV,EAEAA,EAgC2B,EAgB3C,OACI,iBAAK/R,UAAU,OAAM,UAChBY,IACG,SAAC,KAAK,CAACZ,UAAU,OAAO6E,KAAK,SAASmN,UAAQ,WACzCC,MAAMC,QAAQtR,GAAWA,EAAQuR,KAAK,MAAQvR,KAGvD,UAAC,KAAK,CAACP,QAASoR,EAAK,WACjB,SAAC,UAAU,CAAC5R,MAAO,0BACnB,SAAC,UAAU,CAACA,MAAM,eAClB,SAAC,UAAU,CAACA,MAAM,eAClB,SAAC,UAAU,CAACA,MAAM,gBAEZ,IAAT4R,IACG,0BACI,SAAC,EAAmB,CAACxM,OAAQ0M,MAG3B,IAATF,IACG,0BACI,SAAC,EAAS,CAACxM,OAAQA,EAAQoD,WAAYA,MAGrC,IAAToJ,IACG,0BACI,SAAC,EAAS,CAACxM,OAAQ,WA3B/BsK,GAAuB,EA2BgC,EAAElH,WAAYA,MAGvD,IAAToJ,IACG,0BACI,SAAC,EAAQ,CAACxM,OA7CH,WACnBzB,EAAS,uBACb,EA2CkD6E,WAtCjB,WAC7BkH,GAAuB,GACvBmC,EAAQ,EACZ,OAsCQ,SAAC,GAAY,CAACpC,oBAAqBA,EAAqBrK,OAAQA,EAAQsK,uBAAwBA,EAAwBlH,WA7C/F,WAC7BkH,GAAuB,GACvBmC,EAAQ,EACZ,MA6CJ,EClGQU,GAAgCC,EAAAA,GAAAA,OAAxBC,GAAwBD,EAAAA,GAAAA,QAAfE,GAAeF,EAAAA,GAAAA,YACxCG,EAAAA,EAAAA,IAAc,YAAaC,EAAAA,GAC3B,IA0EA,GA1EsB,WAClB,IAAO3S,GAAI4S,EAAAA,EAAAA,MAAJ5S,GACDoF,GAAWC,EAAAA,EAAAA,MACXwN,GAAUvR,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,KAAKoR,OAAO,IAE7DpR,GAAOH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,KAAKC,aAAa,IAEhEoR,GAAYlP,EAAAA,EAAAA,cAAY,WACvB5D,GACCoF,GAASS,EAAAA,EAAAA,IAAiB7F,GAGlC,GAAG,CAACoF,EAASpF,KAEbgB,EAAAA,EAAAA,YAAU,WACN8R,GACJ,GAAG,CAAC1N,EAAU0N,IAEd,IAAMC,EAAiB,CACnB,CACI7K,KAAM,OACN8K,KAAM,SAEV,CACI9K,KAAM,cACN8K,KAAM,wBAEV,CACI9K,KAAU,OAAJzG,QAAI,IAAJA,OAAI,EAAJA,EAAMe,YAIpB,OACI,+BACI,UAAC,KAAO,CAACqQ,QAASA,EAAS9N,KAAK,QAAO,WACvC,SAAC,IAAiB,CAACJ,KAAMoO,KACzB,mBACA,0BACI,UAAC,KAAI,CAACE,aAAa,mBAAkB,WACjC,UAACT,GAAO,YACJ,SAACF,GAAM,CAAC7J,MAAM,mBAAkB,iCAGhC,SAAC6J,GAAM,CAAC7J,MAAM,iBAAgB,8BAC9B,SAAC6J,GAAM,CAAC7J,MAAM,WAAU,0BAE5B,0BACI,UAACgK,GAAU,CAAChK,MAAM,mBAAkB,WAChC,gBAAKvI,UAAU,oDAEf,SAAC,EAAmB,UAG5B,0BACI,UAACuS,GAAU,CAAChK,MAAM,iBAAgB,WAC9B,gBAAKvI,UAAU,oDAEf,SAAC,GAAe,UAGxB,0BACI,UAACuS,GAAU,CAAChK,MAAM,WAAU,WACxB,gBAAKvI,UAAU,oDAEf,SAAC,EAAe,kBAQ5C,C","sources":["components/shared/Accordion.js","utils/hooks/useTimeOutMessage.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/WorkOrderTabTable.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/WorkOrderTabDetails.js","views/wareHouse/WareHouse/components/WorkOrders/components/activity/ActivityTableSearch.js","views/wareHouse/WareHouse/components/WorkOrders/components/activity/ActivityTableFilter.js","views/wareHouse/WareHouse/components/WorkOrders/components/activity/ActivityTableTools.js","views/wareHouse/WareHouse/components/WorkOrders/components/activity/ActivityTable.js","views/wareHouse/WareHouse/components/WorkOrders/components/activity/ActivityDetails.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/InventoryAllocationItem.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/InventoryAllocation.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/LabellingItem.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/Labelling.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/PackagingItem.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/Packaging.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/Dispatch.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/ShippingAddressInput.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/PickupAddressInput.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/ShipmentForm.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/OrderProcessing.js","views/wareHouse/WareHouse/components/WorkOrders/components/WorkOrderDetailsTab/WorkOrderTabs.js"],"sourcesContent":["import { BsChevronDown } from 'react-icons/bs'\r\nconst { useState, useRef } = require('react')\r\nconst AccordionItem = (props) => {\r\n    const contentEl = useRef()\r\n    const { handleToggle, active, faq } = props\r\n    const { title, id, component } = faq\r\n\r\n    return (\r\n        <div className=\"rc-accordion-card\">\r\n            <div className=\"rc-accordion-header\">\r\n                <div\r\n                    className={`rc-accordion-toggle p-3 ${\r\n                        active === id ? 'active' : ''\r\n                    }`}\r\n                    onClick={() => handleToggle(id)}\r\n                >\r\n                    <h5 className=\"rc-accordion-title\">{title}</h5>\r\n                    <BsChevronDown />\r\n                </div>\r\n            </div>\r\n            <div\r\n                ref={contentEl}\r\n                className={`rc-collapse ${active === id ? 'show' : ''}`}\r\n                style={\r\n                    active === id\r\n                        ? { height: contentEl?.current?.scrollHeight }\r\n                        : { height: '0px' }\r\n                }\r\n            >\r\n                <div className=\"rc-accordion-body\">\r\n                    <p className=\"mb-0\">{component}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Accordion = (props) => {\r\n    const [active, setActive] = useState(null)\r\n\r\n    const handleToggle = (index) => {\r\n        if (active === index) {\r\n            setActive(null)\r\n        } else {\r\n            setActive(index)\r\n        }\r\n    }\r\n\r\n    if(props?.Items === 0){\r\n        return (<></>)\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container-fluid mt-5 mb-5\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-md-8 mt-2\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                {props?.Items?.map((faq, index) => {\r\n                                    return (\r\n                                        <AccordionItem\r\n                                            key={index}\r\n                                            active={active}\r\n                                            handleToggle={handleToggle}\r\n                                            faq={faq}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Accordion\r\n","import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import React, { useEffect, useCallback, useMemo, useRef, useState } from 'react'\r\nimport { DataTable } from 'components/shared'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst WorkOrderTabTable = () => {\r\n    const tableRef = useRef(null)\r\n    const res = useSelector((state) => state.wareHouse.data)\r\n    const workOrderItem = res?.workOrderItem\r\n    // const productItems = res?.productItems\r\n    const data=workOrderItem?.dgl_wo_intry_allocation\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Product Title',\r\n                accessorKey: 'item_var_id',\r\n            },\r\n            {\r\n                header: 'Product ID',\r\n                accessorKey: 'item_var_id',\r\n            },\r\n            {\r\n                header: 'Quantity',\r\n                accessorKey: 'quantity',\r\n            },\r\n            // {\r\n            //     header: 'Description',\r\n            //     accessorKey: 'duration',\r\n            // },\r\n            {\r\n                header: 'Status of processing',\r\n                accessorKey: 'status',\r\n                cell: (props) => {\r\n                    // return (\r\n                    //     <div className=\"flex items-center\">\r\n                    //         <Badge\r\n                    //             className={ItemStatusColor[0].dotClass}\r\n                    //         />\r\n                    //         <span\r\n                    //             className={`ml-2 rtl:mr-2 capitalize font-semibold ${ItemStatusColor[0].textClass}`}\r\n                    //         >\r\n                    //             {ItemStatusColor[0].label}\r\n                    //         </span>\r\n                    //     </div>\r\n                    // )\r\n                    return (\r\n                        <>{workOrderItem?.wo_status}</>\r\n                    )\r\n                },\r\n            }\r\n        ],\r\n        []\r\n    )\r\n\r\n  \r\n    return (\r\n        <>\r\n            <DataTable\r\n                ref={tableRef}\r\n                columns={columns}\r\n                data={data}\r\n            />\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default WorkOrderTabTable\r\n\r\n","import { Card } from 'components/ui'\r\nimport React from 'react'\r\nimport WorkOrderTabTable from './WorkOrderTabTable'\r\nimport dayjs from 'dayjs'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst WorkOrderTabDetails = () => {\r\n    const res = useSelector((state) => state.wareHouse.data)\r\n    const workOrderData = res?.workOrderItem\r\n    const qty = workOrderData?.dgl_wo_intry_allocation?.reduce(\r\n        (accumulator, currentValue) => accumulator + currentValue.quantity,\r\n        0\r\n    )\r\n    return (\r\n        <>\r\n            <Card className=\"mx-3 mb-6\">\r\n                <div className=\"md:grid grid-cols-4\">\r\n                    <div className=\"md:gird mx-2\">\r\n                        <div className=\"text-base text-black font-bold   decoration-2\">\r\n                            Work Order ID\r\n                        </div>\r\n                        <div className=\"col-span-6 md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">\r\n                                {workOrderData?.wo_unq_id}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"md:gird mx-2\">\r\n                        <div className=\"text-base text-black font-bold   decoration-2\">\r\n                            Ware House Title\r\n                        </div>\r\n                        <div className=\" md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">\r\n                                {workOrderData?.wo_desc}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"md:gird mx-2\">\r\n                        <div className=\"text-base text-black font-bold   decoration-2\">\r\n                            Order ID\r\n                        </div>\r\n                        <div className=\"md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">\r\n                                {workOrderData?.dgl_ord_info_id}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"md:gird mx-2\">\r\n                        <div className=\"text-base text-black font-bold   decoration-2\">\r\n                            Status\r\n                        </div>\r\n                        <div className=\" md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">\r\n                                {workOrderData?.wo_status}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"md:gird mx-2 mt-6\">\r\n                        <div className=\"text-base text-black font-bold   decoration-2\">\r\n                            Work Order Date\r\n                        </div>\r\n                        <div className=\"md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">\r\n                                {dayjs(\r\n                                    workOrderData?.wo_alltd_dt,\r\n                                    'YYYY-MM-DD'\r\n                                )?.format('YYYY-MM-DD')}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\" md:gird mx-2 mt-6\">\r\n                        <div className=\"text-base text-black font-bold   decoration-2\">\r\n                            Items Quantity\r\n                        </div>\r\n                        <div className=\" md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">{qty}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"md:gird mx-2 mt-6\">\r\n                        <div className=\"text-base text-black font-bold   decoration-2\">\r\n                            Work Orders Due Date\r\n                        </div>\r\n                        <div className=\"md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">--</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"md:gird mx-2 mt-6\">\r\n                        <div className=\"text-base text-black font-bold   decoration-2\">\r\n                            Order Description\r\n                        </div>\r\n                        <div className=\"md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">\r\n                                {workOrderData?.wo_desc}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n            <div className=\"mt-6\">\r\n                <WorkOrderTabTable />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WorkOrderTabDetails\r\n","import React, { useRef } from 'react'\r\nimport { Input } from 'components/ui'\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\n\r\nconst ActivityTableSearch = () => {\r\n    // const dispatch = useDispatch()\r\n\r\n    const searchInput = useRef()\r\n\r\n   \r\n    // // const onEdit = (e) => {\r\n    //     debounceFn(e.target.value)\r\n    // }\r\n\r\n    return (\r\n        <Input\r\n            ref={searchInput}\r\n            className=\"lg:w-52\"\r\n            size=\"sm\"\r\n            placeholder=\"Search\"\r\n            prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n            // onChange={onEdit}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ActivityTableSearch\r\n","import React from 'react'\r\nimport { HiOutlineFilter} from 'react-icons/hi'\r\nimport {\r\n   \r\n    Button,\r\n  \r\n} from 'components/ui'\r\n\r\n\r\n\r\nconst ActivityTableFilter = () => {\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                size=\"sm\"\r\n                className=\"block md:inline-block ltr:md:ml-2 rtl:md:mr-2 md:mb-0 mb-4\"\r\n                icon={<HiOutlineFilter />}\r\n                onClick={() => {}}\r\n            >\r\n                Filter\r\n            </Button>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ActivityTableFilter\r\n","import React from 'react'\r\nimport { HiDownload, HiPlusCircle } from 'react-icons/hi'\r\n import { Link } from 'react-router-dom'\r\nimport {\r\n    Button,\r\n   \r\n} from 'components/ui'\r\n\r\nimport { BiRefresh } from 'react-icons/bi'\r\nimport ActivityTableSearch from './ActivityTableSearch'\r\nimport ActivityTableFilter from './ActivityTableFilter'\r\n// import ActivityTableSearch from './ActivityTableSearch'\r\n// import ActivityTableFilter from './ActivityTableFilter'\r\n\r\n\r\n\r\n\r\n\r\nconst ActivityTableTools = () => {\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center\">\r\n            {/* <SettlementTableIdSearch/>\r\n            <SettlementIdFilters/>\r\n         */}\r\n         <ActivityTableSearch/>\r\n         <ActivityTableFilter/>\r\n            \r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n            // target=\"_blank\"\r\n            // to=\"/warehouse-new-add-inventory\" \r\n            >\r\n                <Button block size=\"sm\" style={{ backgroundColor: \"gray\", color: \"white\" }} icon={<BiRefresh />}>\r\n                    Sync\r\n                </Button>\r\n\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActivityTableTools\r\n","import React, { useEffect, useCallback, useMemo, useRef } from 'react'\r\nimport { Badge, Tooltip } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye } from 'react-icons/hi'\r\nimport {MdModeEdit} from 'react-icons/md'\r\nimport { RiCheckboxCircleFill, RiCloseCircleFill } from 'react-icons/ri'\r\nimport {IoMdDownload} from 'react-icons/io'\r\n\r\nimport {AiFillCopy} from 'react-icons/ai'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// import { getOrders, setTableData } from '../../store/dataSlice'\r\n// import {\r\n//     setSelectedRows,\r\n//     addRowItem,\r\n//     removeRowItem,\r\n//     setDeleteMode,\r\n//     setSelectedRow,\r\n// } from '../../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\n\r\nconst ItemStatusColor = {\r\n    0: {\r\n        label: 'Active',\r\n        dotClass: 'bg-emerald-500',\r\n        textClass: 'text-emerald-500',\r\n    },\r\n    1: {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-500',\r\n        textClass: 'text-amber-500',\r\n    },\r\n    2: { label: 'Inactive', dotClass: 'bg-red-500', textClass: 'text-red-500' },\r\n}\r\n\r\n\r\n\r\nconst ActionColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Item-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <div className=\"text-lg\">\r\n            <Tooltip title=\"Edit\">\r\n            <span\r\n                className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                //onClick={onView}\r\n            >\r\n               <RiCloseCircleFill className='text-red-600'/>\r\n               \r\n            </span>\r\n        </Tooltip>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ActivityTable = () => {\r\n\r\n     const tableRef = useRef(null)\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    // const { pageIndex, pageSize, sort, query, total } = useSelector(\r\n    //     (state) => state.myaccountList.data.tableData\r\n    // )\r\n    // const loading = useSelector((state) => state?.myaccountList?.data?.loading)\r\n\r\n    // const data = useSelector((state) => state?.myaccountList?.data?.ItemList)\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getOrders())\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setSelectedRows([]))\r\n    //     fetchData()\r\n    // }, [dispatch, fetchData, pageIndex, pageSize, sort])\r\n\r\n    // useEffect(() => {\r\n    //     if (tableRef) {\r\n    //         tableRef.current?.resetSelected()\r\n    //     }\r\n    // }, [data])\r\n\r\n    // const tableData = useMemo(\r\n    //     () => ({ pageIndex, pageSize, sort, query, total }),\r\n    //     [pageIndex, pageSize, sort, query, total]\r\n    // )\r\n\r\n    const data = [\r\n        {\r\n            referenceId:\"#126382\",\r\n            settlementType:\"User Group-1\",\r\n            fromAccount:\"Loream ipsum is simply dummy text of the printing and type setting industry\",\r\n            toAccount:\"02/23/2023\",\r\n            \r\n        },\r\n        {\r\n            referenceId:\"#126382\",\r\n            settlementType:\"User Group-2\",\r\n            fromAccount:\"Loream ipsum is simply dummy text of the printing and type setting industry\",\r\n            toAccount:\"02/23/2023\",\r\n        },\r\n        {\r\n            referenceId:\"#126382\",\r\n            settlementType:\"User Group-3\",\r\n            fromAccount:\"Loream ipsum is simply dummy text of the printing and type setting industry\",\r\n            toAccount:\"02/23/2023\",\r\n        },\r\n        {\r\n            referenceId:\"#126382\",\r\n            settlementType:\"User Group-3\",\r\n            fromAccount:\"Loream ipsum is simply dummy text of the printing and type setting industry\",\r\n            toAccount:\"02/23/2023\",\r\n        },\r\n        {\r\n            referenceId:\"#126382\",\r\n            settlementType:\"User Group-3\",\r\n            fromAccount:\"Loream ipsum is simply dummy text of the printing and type setting industry\",\r\n            toAccount:\"02/23/2023\",\r\n        },\r\n\r\n    ]\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'Actions',\r\n                flex: 1,\r\n                id: 'action',\r\n                cell: (props) => <ActionColumn row={props.row.original} />,\r\n            },\r\n            {\r\n                header: 'Account ID',\r\n                accessorKey: 'referenceId',\r\n            },\r\n            {\r\n                header: 'User',\r\n                accessorKey: 'settlementType',\r\n                \r\n               \r\n            },\r\n            {\r\n                header: 'Activity',\r\n                accessorKey: 'fromAccount',\r\n                \r\n               \r\n            },\r\n            {\r\n                header: 'Date & Time',\r\n                accessorKey: 'toAccount',\r\n                \r\n               \r\n            },\r\n           \r\n            // {\r\n            //     header: 'Status',\r\n            //     accessorKey: 'status',\r\n               \r\n            //     cell: (props) => {\r\n            //         return (\r\n            //             <div className=\"flex items-center\">\r\n            //                 <Badge\r\n            //                     className={ItemStatusColor[0].dotClass}\r\n            //                 />\r\n            //                 <span\r\n            //                     className={`ml-2 rtl:mr-2 capitalize font-semibold ${ItemStatusColor[0].textClass}`}\r\n            //                 >\r\n            //                     {ItemStatusColor[0].label}\r\n            //                 </span>\r\n            //             </div>\r\n            //         )\r\n            //     },\r\n            // }\r\n        ],\r\n        []\r\n    )\r\n\r\n    // const onPaginationChange = (page) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageIndex = page\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSelectChange = (value) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.pageSize = Number(value)\r\n    //     newTableData.pageIndex = 1\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onSort = (sort) => {\r\n    //     const newTableData = cloneDeep(tableData)\r\n    //     newTableData.sort = sort\r\n    //     dispatch(setTableData(newTableData))\r\n    // }\r\n\r\n    // const onRowSelect = (checked, row) => {\r\n    //     if (checked) {\r\n    //         dispatch(addRowItem([row.id]))\r\n    //     } else {\r\n    //         dispatch(removeRowItem(row.id))\r\n    //     }\r\n    // }\r\n\r\n    // const onAllRowSelect = useCallback(\r\n    //     (checked, rows) => {\r\n    //         if (checked) {\r\n    //             const originalRows = rows.map((row) => row.original)\r\n    //             const selectedIds = []\r\n    //             originalRows.forEach((row) => {\r\n    //                 selectedIds.push(row.id)\r\n    //             })\r\n    //             dispatch(setSelectedRows(selectedIds))\r\n    //         } else {\r\n    //             dispatch(setSelectedRows([]))\r\n    //         }\r\n    //     },\r\n    //     [dispatch]\r\n    // )\r\n\r\n    return (\r\n        <DataTable\r\n            ref={tableRef}\r\n            columns={columns}\r\n            data={data}\r\n            // loading={loading}\r\n            // pagingData={tableData}\r\n            // onPaginationChange={onPaginationChange}\r\n            // onSelectChange={onSelectChange}\r\n            // onSort={onSort}\r\n            // onCheckBoxChange={onRowSelect}\r\n            // onIndeterminateCheckBoxChange={onAllRowSelect}\r\n            // selectable\r\n        />\r\n    )\r\n}\r\n\r\nexport default ActivityTable\r\n\r\n","import React from 'react'\r\n\r\nimport { AdaptableCard } from 'components/shared'\r\nimport ActivityTableTools from './ActivityTableTools'\r\nimport ActivityTable from './ActivityTable'\r\n// import ActivityTableTools from './ActivityTableTools'\r\n// import ActivityTable from './ActivityTable'\r\n\r\n\r\nfunction ActivityDetails() {\r\n  return (\r\n    <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n             <div className=\"lg:flex items-center justify-between mb-4\">\r\n                <h3 className=\"mb-4 lg:mb-0\">Activity Log</h3>\r\n                {/* <SettlementIdTableTools/> */}\r\n                <ActivityTableTools/>\r\n            </div>\r\n            {/* <SettlementIdTable/> */}\r\n            <div className='mt-6'>\r\n            <ActivityTable/>\r\n            </div>\r\n        </AdaptableCard>\r\n   \r\n  )\r\n}\r\n\r\nexport default ActivityDetails","import { Card } from 'components/ui'\r\n\r\nconst InventoryAllocationItem = (props) => {\r\n    const { dataItem } = props\r\n    return (\r\n        <Card className=\"mx-3 mb-6\">\r\n            <div className=\"md:grid grid-cols-4\">\r\n                <div className=\"md:gird mx-2\">\r\n                    <div className=\"text-base text-black font-bold   decoration-2\">\r\n                        Product Id:\r\n                    </div>\r\n                    <div className=\"col-span-6 md:grid grid-cols-2 gap-2\">\r\n                        <p className=\"mt-2 text-base\">{dataItem?.item_var_id}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"md:gird mx-2\">\r\n                    <div className=\"text-base text-black font-bold   decoration-2\">\r\n                        Product Type:\r\n                    </div>\r\n                    <div className=\" md:grid grid-cols-2 gap-2\">\r\n                        <p className=\"mt-2 text-base\">\r\n                            {dataItem?.item_type}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"md:gird mx-2\">\r\n                    <div className=\"text-base text-black font-bold   decoration-2\">\r\n                        Sku Code:\r\n                    </div>\r\n                    <div className=\"md:grid grid-cols-2 gap-2\">\r\n                        <p className=\"mt-2 text-base\">{'--'}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"md:gird mx-2\">\r\n                    <div className=\"text-base text-black font-bold   decoration-2\">\r\n                        Allocated Quantity\r\n                    </div>\r\n                    <div className=\" md:grid grid-cols-2 gap-2\">\r\n                        <p className=\"mt-2 text-base\">{dataItem?.quantity}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InventoryAllocationItem\r\n","import Accordion from 'components/shared/Accordion'\r\nimport { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport InventoryAllocationItem from './InventoryAllocationItem'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from 'components/ui'\r\n\r\nconst InventoryAllocation = (props) => {\r\n    const [AccordionItems, setAccordionItems] = useState([])\r\n    const data = useSelector((state) => state.wareHouse.data)\r\n    const workOrderItem = data?.workOrderItem\r\n    // const productItems = data?.productItems\r\n    const dgl_wo_intry_allocation = workOrderItem.dgl_wo_intry_allocation\r\n    useEffect(() => {\r\n        handleUpdateAccordions(dgl_wo_intry_allocation)\r\n    }, [dgl_wo_intry_allocation])\r\n    const handleUpdateAccordions = (records) => {\r\n        const list = records?.map((i) => {\r\n            // let title = ''\r\n            // const findItem = productItems?.find(\r\n            //     (prod) => prod?.id === i?.item_id\r\n            // )\r\n            // if (findItem) {\r\n            //     title = findItem?.item_title\r\n            // }\r\n            let component = (\r\n                <InventoryAllocationItem  dataItem={i} />\r\n            )\r\n\r\n            return { id: i?.item_var_id, title:i?.item_var_id, component }\r\n        })\r\n        setAccordionItems(list)\r\n    }\r\n    // AccordionItems = [\r\n    //     {\r\n    //         id: 1,\r\n    //         header: 'What is Lorem Ipsum?',\r\n    //         component: <h3>hello</h3>,\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         header: 'Where does it come from?',\r\n    //         component: <p>helllo thet</p>,\r\n    //     },\r\n    // ]\r\n\r\n    return (\r\n        <div>\r\n            <Accordion Items={AccordionItems} />\r\n            <div className=\"mt-4 text-right\">\r\n                <>\r\n                    <Link\r\n                        className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                        to={`/warehouse-workorder`}\r\n                    >\r\n                        <Button\r\n                            type={'button'}\r\n                            className=\"mx-2\"\r\n                            onClick={() => console.log('cancel')}\r\n                            variant=\"solid\"\r\n                            style={{\r\n                                backgroundColor: '#4D4D4D',\r\n                            }}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Link>\r\n                </>\r\n                <Button\r\n                    variant=\"solid\"\r\n                    onClick={() => props?.onNext()}\r\n                >\r\n                    {'Next: Labelling'}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InventoryAllocation\r\n","import { AdaptableCard, DataTable } from 'components/shared'\r\nimport {\r\n    Button,\r\n    Card,\r\n    Checkbox,\r\n    Dialog,\r\n    FormContainer,\r\n    FormItem,\r\n    Input,\r\n    Tooltip,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { useCallback, useMemo, useRef, useState } from 'react'\r\nimport { MdDelete, MdModeEdit } from 'react-icons/md'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    apiCreateWorkOrderLabellingItem,\r\n    apiDeleteWorkOrderLabellingItem,\r\n    apiUpdateWorkOrderLabellingItem,\r\n} from 'services/WorkOrderService'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { GetErrorMsg } from 'views/Servicefile'\r\nimport { getWorkOrderById } from 'views/wareHouse/WareHouse/store/dataSlice'\r\n\r\nconst LabellingItem = (props) => {\r\n    const tableRef = useRef(null)\r\n    const dispatch = useDispatch()\r\n    const data = useSelector((state) => state.wareHouse.data)\r\n    const workOrderItem = data?.workOrderItem\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    const [showDialog, setShowDialog] = useState(false)\r\n    const { dataItem } = props\r\n    const ActionColumn = ({ row }) => {\r\n        const { textTheme } = useThemeClass()\r\n\r\n        const onDelete = useCallback(async () => {\r\n            const Id = row?.id\r\n            const res = await apiDeleteWorkOrderLabellingItem(Id)\r\n            if (res.status === 'success') {\r\n                dispatch(getWorkOrderById(workOrderItem?.id))\r\n            } else if (res.status === 'failed') {\r\n                setMessage(GetErrorMsg(res))\r\n            }\r\n        }, [row])\r\n        const onEdit = useCallback(() => {\r\n            setShowDialog(true)\r\n            setInitValues(row)\r\n        }, [row])\r\n\r\n        return (\r\n            <div className=\"flex justify-end text-lg\">\r\n                <Tooltip title=\"Edit\">\r\n                    <span\r\n                        className={`cursor-pointer p-1 text-blue-500 hover:${textTheme}`}\r\n                        onClick={onEdit}\r\n                    >\r\n                        <MdModeEdit />\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title=\"Delete\">\r\n                    <span\r\n                        className={`cursor-pointer text-red-500 p-1 hover:${textTheme}`}\r\n                        onClick={onDelete}\r\n                    >\r\n                        <MdDelete />\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    }\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                header: 'SIM No.',\r\n                accessorKey: 'sim_number',\r\n            },\r\n            {\r\n                header: 'IMEI No.',\r\n                accessorKey: 'imei_number',\r\n            },\r\n            {\r\n                header: 'SIM Sl.No.',\r\n                accessorKey: 'sim_serial_number',\r\n            },\r\n            {\r\n                header: 'Barcode',\r\n                accessorKey: 'bar_code',\r\n            },\r\n            {\r\n                header: 'GTIN Number',\r\n                accessorKey: 'gst_number',\r\n            },\r\n            {\r\n                header: 'Actions',\r\n                flex: 1,\r\n                accessorKey: 'action',\r\n                cell: (props) => <ActionColumn row={props.row.original} />,\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const initialValues = {\r\n        bar_code: '',\r\n        gst_number: '',\r\n        sim_number_check: false,\r\n        sim_number: '',\r\n        imei_number: '',\r\n        sim_serial_number: '',\r\n        wo_label_id: dataItem?.dgl_work_order_labelling?.id,\r\n    }\r\n    const [initialState, setInitValues] = useState(initialValues)\r\n    const handleAddNewLabel = async (values, setSubmitting) => {\r\n        let resp\r\n        if (values?.id) {\r\n            const req = {\r\n                ...values,\r\n                wo_label_id: dataItem?.dgl_work_order_labelling?.id,\r\n            }\r\n            resp = await apiUpdateWorkOrderLabellingItem(req)\r\n        } else {\r\n            resp = await apiCreateWorkOrderLabellingItem(values)\r\n        }\r\n        if (resp.status === 'success') {\r\n            dispatch(getWorkOrderById(workOrderItem?.id))\r\n            setShowDialog(false)\r\n        } else if (resp.status === 'failed') {\r\n            setMessage(GetErrorMsg(resp))\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Card className=\"mx-3 mb-6\">\r\n                <div className=\"md:grid grid-cols-4 pb-2\">\r\n                    <div className=\"md:gird mx-2\">\r\n                        <div className=\"text-base text-black font-bold   decoration-2\">\r\n                            Product Id:\r\n                        </div>\r\n                        <div className=\"col-span-6 md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">\r\n                                {dataItem?.item_var_id}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"md:gird mx-2\">\r\n                        <div className=\"text-base text-black font-bold   decoration-2\">\r\n                            Product Type:\r\n                        </div>\r\n                        <div className=\" md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">\r\n                                {dataItem?.item_type}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"md:gird mx-2\">\r\n                        <div className=\"text-base text-black font-bold   decoration-2\">\r\n                            Sku Code:\r\n                        </div>\r\n                        <div className=\"md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">{'--'}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"md:gird mx-2\">\r\n                        <div className=\"text-base text-black font-bold   decoration-2\">\r\n                            Allocated Quantity\r\n                        </div>\r\n                        <div className=\" md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">\r\n                                {dataItem?.quantity}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <hr />\r\n                <div className=\"py-2 flex justify-end\">\r\n                    <Button variant=\"solid\" onClick={() => setShowDialog(true)}>\r\n                        {'Add New'}\r\n                    </Button>\r\n                </div>\r\n                <DataTable\r\n                    ref={tableRef}\r\n                    columns={columns}\r\n                    data={dataItem?.dgl_work_order_labelling?.labelling_items}\r\n                />\r\n            </Card>\r\n            <Dialog isOpen={showDialog} onClose={() => setShowDialog(false)}>\r\n                <h6\r\n                    style={{\r\n                        fontFamily: 'Roboto',\r\n                        fontStyle: 'normal',\r\n                        fontWeight: 700,\r\n                        fontSize: '18px',\r\n                        color: '#212121',\r\n                    }}\r\n                >\r\n                    {initialState?.id ? `Update` : `Add`}\r\n                </h6>\r\n                <hr className=\"text-gary-500 mt-4 mb-4\" />\r\n                <Formik\r\n                    initialValues={initialState}\r\n                    // validationSchema={validationSchema}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        setSubmitting(true)\r\n                        handleAddNewLabel(values, setSubmitting)\r\n                    }}\r\n                >\r\n                    {({\r\n                        values,\r\n                        touched,\r\n                        errors,\r\n                        handleSubmit,\r\n                        isSubmitting,\r\n                    }) => {\r\n                        return (\r\n                            <Form onSubmit={handleSubmit}>\r\n                                <FormContainer>\r\n                                    <div className=\"mt-3 dark:bg-gray-700 rounded \">\r\n                                        <div\r\n                                            className=\"p-1\"\r\n                                            // style={{\r\n                                            //     backgroundColor: '#F5F5F5',\r\n                                            // }}\r\n                                        >\r\n                                            <AdaptableCard\r\n                                                className=\"h-full\"\r\n                                                bodyClass=\"h-full\"\r\n                                                // divider\r\n                                            >\r\n                                                <div className=\"md:grid grid-cols-1 gap-2 mx-1 \">\r\n                                                    <FormItem\r\n                                                        label=\"Bar Code\"\r\n                                                        invalid={\r\n                                                            errors.bar_code &&\r\n                                                            touched.bar_code\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.bar_code\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"bar_code\"\r\n                                                            placeholder=\"Enter Bar Code\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                                <div className=\"md:grid grid-cols-2 gap-2 mx-1 \">\r\n                                                    <FormItem\r\n                                                        label=\"GSTIN Number\"\r\n                                                        invalid={\r\n                                                            errors.gst_number &&\r\n                                                            touched.gst_number\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.gst_number\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"gst_number\"\r\n                                                            placeholder=\"Enter GSTIN Number\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"SIM Number\"\r\n                                                        invalid={\r\n                                                            errors.sim_number_check &&\r\n                                                            touched.sim_number_check\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.sim_number_check\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            name=\"sim_number_check\"\r\n                                                            component={Checkbox}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    {values?.sim_number_check && (\r\n                                                        <>\r\n                                                            <FormItem\r\n                                                                label=\"SIM Number\"\r\n                                                                invalid={\r\n                                                                    errors.sim_number &&\r\n                                                                    touched.sim_number\r\n                                                                }\r\n                                                                errorMessage={\r\n                                                                    errors.sim_number\r\n                                                                }\r\n                                                            >\r\n                                                                <Field\r\n                                                                    type=\"number\"\r\n                                                                    autoComplete=\"off\"\r\n                                                                    name=\"sim_number\"\r\n                                                                    placeholder=\"Enter SIM Number\"\r\n                                                                    component={\r\n                                                                        Input\r\n                                                                    }\r\n                                                                />\r\n                                                            </FormItem>\r\n                                                            <FormItem\r\n                                                                label=\"IMEI Number\"\r\n                                                                invalid={\r\n                                                                    errors.imei_number &&\r\n                                                                    touched.imei_number\r\n                                                                }\r\n                                                                errorMessage={\r\n                                                                    errors.imei_number\r\n                                                                }\r\n                                                            >\r\n                                                                <Field\r\n                                                                    type=\"number\"\r\n                                                                    autoComplete=\"off\"\r\n                                                                    name=\"imei_number\"\r\n                                                                    placeholder=\"Enter IMEI Number\"\r\n                                                                    component={\r\n                                                                        Input\r\n                                                                    }\r\n                                                                />\r\n                                                            </FormItem>\r\n                                                            <FormItem\r\n                                                                label=\"SIM Serial Number\"\r\n                                                                invalid={\r\n                                                                    errors.sim_serial_number &&\r\n                                                                    touched.sim_serial_number\r\n                                                                }\r\n                                                                errorMessage={\r\n                                                                    errors.sim_serial_number\r\n                                                                }\r\n                                                            >\r\n                                                                <Field\r\n                                                                    type=\"number\"\r\n                                                                    autoComplete=\"off\"\r\n                                                                    name=\"sim_serial_number\"\r\n                                                                    placeholder=\"Enter SIM Serial Number\"\r\n                                                                    component={\r\n                                                                        Input\r\n                                                                    }\r\n                                                                />\r\n                                                            </FormItem>\r\n                                                        </>\r\n                                                    )}\r\n                                                </div>\r\n                                            </AdaptableCard>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        <div className=\"mt-2 text-right\">\r\n                                            <>\r\n                                                <Button\r\n                                                    style={{\r\n                                                        backgroundColor:\r\n                                                            '#4D4D4D',\r\n                                                        color: 'white',\r\n                                                        borderRadius: '2px',\r\n                                                    }}\r\n                                                    type={'button'}\r\n                                                    className=\"mr-3\"\r\n                                                    onClick={() =>\r\n                                                        setShowDialog(false)\r\n                                                    }\r\n                                                >\r\n                                                    Cancel\r\n                                                </Button>\r\n                                                <Button\r\n                                                    className=\"mx-2\"\r\n                                                    variant=\"solid\"\r\n                                                    type={'submit'}\r\n                                                    disabled={isSubmitting}\r\n                                                >\r\n                                                    {values?.id\r\n                                                        ? 'Update'\r\n                                                        : 'Add'}\r\n                                                </Button>\r\n                                            </>\r\n                                        </div>\r\n                                    </div>\r\n                                </FormContainer>\r\n                            </Form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LabellingItem\r\n","import Accordion from 'components/shared/Accordion'\r\nimport { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Button } from 'components/ui'\r\nimport LabellingItem from './LabellingItem'\r\n\r\nconst Labelling = (props) => {\r\n    const [AccordionItems, setAccordionItems] = useState([])\r\n    const data = useSelector((state) => state.wareHouse.data)\r\n    const workOrderItem = data?.workOrderItem\r\n    // const productItems = data?.productItems\r\n    const dgl_wo_intry_allocation = workOrderItem.dgl_wo_intry_allocation\r\n    useEffect(() => {\r\n        handleUpdateAccordions(dgl_wo_intry_allocation)\r\n    }, [dgl_wo_intry_allocation])\r\n    const handleUpdateAccordions = (records) => {\r\n        const list = records?.map((i) => {\r\n            // let title = ''\r\n            // const findItem = productItems?.find(\r\n            //     (prod) => prod?.id === i?.item_id\r\n            // )\r\n            // if (findItem) {\r\n            //     title = findItem?.item_title\r\n            // }\r\n            let component = (\r\n                <LabellingItem dataItem={i} />\r\n            )\r\n\r\n            return { id: i?.item_var_id, title:i?.item_var_id, component }\r\n        })\r\n        setAccordionItems(list)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Accordion Items={AccordionItems} />\r\n            <div className=\"mt-4 text-right\">\r\n                <Button\r\n                    type={'button'}\r\n                    className=\"mx-2\"\r\n                    onClick={() => props?.onPrevious()}\r\n                    variant=\"solid\"\r\n                    style={{\r\n                        backgroundColor: '#4D4D4D',\r\n                    }}\r\n                >\r\n                    {'Previous'}\r\n                </Button>\r\n                <Button variant=\"solid\" onClick={() => props?.onNext()}>\r\n                    {'Next: Packaging'}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Labelling\r\n","import { AdaptableCard } from 'components/shared'\r\nimport {\r\n    Button,\r\n    Card,\r\n    Checkbox,\r\n    DatePicker,\r\n    FormContainer,\r\n    FormItem,\r\n    Input,\r\n    Select,\r\n    Table,\r\n} from 'components/ui'\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport { useState } from 'react'\r\nimport { HiMinus, HiMinusCircle, HiPlus, HiPlusCircle } from 'react-icons/hi'\r\nimport { useSelector } from 'react-redux'\r\nimport * as Yup from 'yup'\r\n\r\nconst PackagingItem = (props) => {\r\n    const data = useSelector((state) => state.wareHouse.data)\r\n    const dateFormat = 'DD-MM-YYYY'\r\n    const workOrderItem = data?.workOrderItem\r\n    const dgl_wo_intry_allocation = workOrderItem?.dgl_wo_intry_allocation\r\n    const updated_wo_intry_alloc=dgl_wo_intry_allocation?.map(i=> {\r\n        return {value:i?.item_id,label:`${i?.item_id}`}\r\n    })\r\n    const { dataItem } = props\r\n    const handleAddNewPackageItem = (values, setSubmitting) => {\r\n        props?.handleUpdateItem(values)\r\n    }\r\n    const packageItem = {\r\n        ...dataItem,\r\n        package_date: new Date(dataItem?.package_date),\r\n        wo_info_id:workOrderItem?.id\r\n    }\r\n    const [initialState, setInitValues] = useState(packageItem)\r\n    const { Tr, Th, Td, THead, TBody } = Table\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        package_id: Yup.number().trim().required('Please enter Package ID ').nullable(),\r\n        package_date: Yup.date().trim().required('Please enter Packaging Date ').nullable(),\r\n        net_weight: Yup.number().trim().required('Please enter Package Net Weight ').nullable(),\r\n        gross_weight: Yup.number().trim().required('Please enter Package Gross Weight ').nullable(),\r\n        length: Yup.number().trim().required('Please enter Length ').nullable(),\r\n        width: Yup.number().trim().required('Please enter Width ').nullable(),\r\n        height: Yup.number().trim().required('Please enter Height ').nullable(),\r\n        bar_code: Yup.string().trim().required('Please enter Barcode ').nullable(),\r\n        special_instruction: Yup.string().trim().required('Please enter Special Instruction ').nullable(),\r\n        is_shipping: Yup.string().trim().required('Please enter Is Shipping ').nullable()\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Card className=\"mx-3 mb-6\">\r\n                <Formik\r\n                    initialValues={initialState}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        setSubmitting(true)\r\n                        handleAddNewPackageItem(values, setSubmitting)\r\n                    }}\r\n                >\r\n                    {({\r\n                        values,\r\n                        touched,\r\n                        errors,\r\n                        handleSubmit,\r\n                        isSubmitting,\r\n                    }) => {\r\n                        return (\r\n                            <Form onSubmit={handleSubmit}>\r\n                                <FormContainer>\r\n                                    <div className=\"mt-3 dark:bg-gray-700 rounded \">\r\n                                        <div className=\"p-1\">\r\n                                            <AdaptableCard\r\n                                                className=\"h-full\"\r\n                                                bodyClass=\"h-full\"\r\n                                                // divider\r\n                                            >\r\n                                                <div className=\"md:grid grid-cols-4 gap-2 mx-1\">\r\n                                                    <FormItem\r\n                                                        label=\"Package ID\"\r\n                                                        invalid={\r\n                                                            errors.package_id &&\r\n                                                            touched.package_id\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.package_id\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"package_id\"\r\n                                                            disabled={true}\r\n                                                            placeholder=\"Enter Package ID\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"Packaging Date\"\r\n                                                        invalid={\r\n                                                            errors.package_date &&\r\n                                                            touched.package_date\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.package_date\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            name=\"package_date\"\r\n                                                            placeholder=\"Select Date\"\r\n                                                        >\r\n                                                            {({\r\n                                                                field,\r\n                                                                form,\r\n                                                            }) => (\r\n                                                                <DatePicker\r\n                                                                    field={\r\n                                                                        field\r\n                                                                    }\r\n                                                                    form={form}\r\n                                                                    value={\r\n                                                                        field.value\r\n                                                                    }\r\n                                                                    placeholder=\"Select Date\"\r\n                                                                    onChange={(\r\n                                                                        date\r\n                                                                    ) => {\r\n                                                                        form.setFieldValue(\r\n                                                                            field.name,\r\n                                                                            date\r\n                                                                        )\r\n                                                                    }}\r\n                                                                    inputFormat={\r\n                                                                        dateFormat\r\n                                                                    }\r\n                                                                />\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"Package Net Weight\"\r\n                                                        invalid={\r\n                                                            errors.net_weight &&\r\n                                                            touched.net_weight\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.net_weight\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"net_weight\"\r\n                                                            autoComplete=\"off\"\r\n                                                            placeholder=\"Enter Package Net Weight\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"Package Gross Weight\"\r\n                                                        invalid={\r\n                                                            errors.gross_weight &&\r\n                                                            touched.gross_weight\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.gross_weight\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"gross_weight\"\r\n                                                            autoComplete=\"off\"\r\n                                                            placeholder=\"Enter Package Gross Weight\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                                <div className=\"md:grid grid-cols-4 gap-2 mx-1 \">\r\n                                                    <FormItem\r\n                                                        label=\"Length\"\r\n                                                        invalid={\r\n                                                            errors.length &&\r\n                                                            touched.length\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.length\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"length\"\r\n                                                            autoComplete=\"off\"\r\n                                                            placeholder=\"Enter Length\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"Width\"\r\n                                                        invalid={\r\n                                                            errors.width &&\r\n                                                            touched.width\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.width\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"width\"\r\n                                                            autoComplete=\"off\"\r\n                                                            placeholder=\"Enter Width\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"Height\"\r\n                                                        invalid={\r\n                                                            errors.height &&\r\n                                                            touched.height\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.height\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"height\"\r\n                                                            autoComplete=\"off\"\r\n                                                            placeholder=\"Enter Height\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"Barcode\"\r\n                                                        invalid={\r\n                                                            errors.bar_code &&\r\n                                                            touched.bar_code\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.bar_code\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"bar_code\"\r\n                                                            autoComplete=\"off\"\r\n                                                            placeholder=\"Enter Barcode\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                                <hr className=\"text-gary-500 my-2\" />\r\n                                                <div className=\"md:grid grid-cols-1 gap-2 mx-1 \">\r\n                                                    <FormItem\r\n                                                        label=\"Special Instruction\"\r\n                                                        invalid={\r\n                                                            errors.special_instruction &&\r\n                                                            touched.special_instruction\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.special_instruction\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            name=\"special_instruction\"\r\n                                                            autoComplete=\"off\"\r\n                                                            placeholder=\"Enter Special Instruction\"\r\n                                                            textArea\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                                <div className=\"md:grid grid-cols-1 gap-2 mx-1 \">\r\n                                                    <FormItem\r\n                                                        label=\"Is Shipping\"\r\n                                                        invalid={\r\n                                                            errors.is_shipping &&\r\n                                                            touched.is_shipping\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.is_shipping\r\n                                                        }\r\n                                                    >\r\n                                                        <Field\r\n                                                            name=\"is_shipping\"\r\n                                                            component={Checkbox}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                            </AdaptableCard>\r\n                                        </div>\r\n                                        <div className=\"p-1 bg-grey-400\">\r\n                                            <FieldArray name=\"package_items\">\r\n                                                {({ insert, remove, push }) => (\r\n                                                    <>\r\n                                                        <div className=\"flex justify-end\">\r\n                                                            <Button\r\n                                                                variant=\"twoTone\"\r\n                                                                color=\"blue-600\"\r\n                                                                type=\"button\"\r\n                                                                onClick={() =>\r\n                                                                    push({\r\n                                                                        prod_or_package_id:\r\n                                                                            '',\r\n                                                                        manufacturer:\r\n                                                                            '',\r\n                                                                        ord_quantity: 0,\r\n                                                                        description:\r\n                                                                            '',\r\n                                                                        quantity_to_pack: 0,\r\n                                                                        wo_package_id:\r\n                                                                            null,\r\n                                                                    })\r\n                                                                }\r\n                                                            >\r\n                                                                Add\r\n                                                            </Button>\r\n                                                        </div>\r\n                                                        <Table>\r\n                                                            <THead>\r\n                                                                <Tr>\r\n                                                                    <Th>\r\n                                                                        Product/Package\r\n                                                                    </Th>\r\n                                                                    <Th>\r\n                                                                        Manufacturer\r\n                                                                    </Th>\r\n                                                                    <Th>\r\n                                                                        Ordered\r\n                                                                        Quantity\r\n                                                                    </Th>\r\n                                                                    <Th>\r\n                                                                        Description\r\n                                                                    </Th>\r\n                                                                    <Th>\r\n                                                                        Quantity\r\n                                                                        to Pack\r\n                                                                    </Th>\r\n                                                                    <Th></Th>\r\n                                                                </Tr>\r\n                                                            </THead>\r\n                                                            <TBody>\r\n                                                                {values?.package_items?.map(\r\n                                                                    (\r\n                                                                        j,\r\n                                                                        index\r\n                                                                    ) => {\r\n                                                                        return (\r\n                                                                            <Tr\r\n                                                                                key={\r\n                                                                                    j?.id\r\n                                                                                }\r\n                                                                            >\r\n                                                                                <Td>\r\n                                                                                <Field  name={`package_items.${index}.prod_or_package_id`}>\r\n                                                                                        {({\r\n                                                                                            field,\r\n                                                                                            form,\r\n                                                                                        }) => (\r\n                                                                                            <>\r\n                                                                                                <Select\r\n                                                                                                    placeholder=\"Select Item\"\r\n                                                                                                    field={\r\n                                                                                                        field\r\n                                                                                                    }\r\n                                                                                                    form={\r\n                                                                                                        form\r\n                                                                                                    }\r\n                                                                                                    options={\r\n                                                                                                        updated_wo_intry_alloc\r\n                                                                                                    }\r\n                                                                                                    value={updated_wo_intry_alloc?.filter(\r\n                                                                                                        (\r\n                                                                                                            wh\r\n                                                                                                        ) =>\r\n                                                                                                            wh.value ==\r\n                                                                                                            j.prod_or_package_id\r\n                                                                                                    )}\r\n                                                                                                    onChange={(\r\n                                                                                                        wh\r\n                                                                                                    ) => {\r\n                                                                                                        form.setFieldValue(\r\n                                                                                                            field.name,\r\n                                                                                                            wh.value\r\n                                                                                                        )\r\n                                                                                                    }}\r\n                                                                                                />\r\n                                                                                            </>\r\n                                                                                        )}\r\n                                                                                    </Field>\r\n                                                                                </Td>\r\n                                                                                <Td>\r\n                                                                                    <Field\r\n                                                                                        type=\"text\"\r\n                                                                                        name={`package_items.${index}.manufacturer`}\r\n                                                                                        autoComplete=\"off\"\r\n                                                                                        placeholder=\"Enter manufacturer\"\r\n                                                                                        component={\r\n                                                                                            Input\r\n                                                                                        }\r\n                                                                                        \r\n                                                                                    />\r\n                                                                                    \r\n                                                                                </Td>\r\n                                                                                <Td>\r\n                                                                                    <Field\r\n                                                                                        type=\"number\"\r\n                                                                                        name={`package_items.${index}.ord_quantity`}\r\n                                                                                        autoComplete=\"off\"\r\n                                                                                        placeholder=\"Enter Order Qty\"\r\n                                                                                        component={\r\n                                                                                            Input\r\n                                                                                        }\r\n                                                                                    />\r\n                                                                                </Td>\r\n                                                                                <Td>\r\n                                                                                    <Field\r\n                                                                                        type=\"text\"\r\n                                                                                        name={`package_items.${index}.description`}\r\n                                                                                        autoComplete=\"off\"\r\n                                                                                        placeholder=\"Enter description\"\r\n                                                                                        component={\r\n                                                                                            Input\r\n                                                                                        }\r\n                                                                                    />\r\n                                                                                </Td>\r\n                                                                                <Td>\r\n                                                                                    <Field\r\n                                                                                        type=\"number\"\r\n                                                                                        name={`package_items.${index}.quantity_to_pack`}\r\n                                                                                        autoComplete=\"off\"\r\n                                                                                        placeholder=\"Enter Pack Qty\"\r\n                                                                                        component={\r\n                                                                                            Input\r\n                                                                                        }\r\n                                                                                    />\r\n                                                                                </Td>\r\n                                                                                <Td>\r\n                                                                                    <HiMinusCircle\r\n                                                                                        color=\"red\"\r\n                                                                                        size={\r\n                                                                                            '1.2rem'\r\n                                                                                        }\r\n                                                                                        onClick={() =>\r\n                                                                                            remove(\r\n                                                                                                index\r\n                                                                                            )\r\n                                                                                        }\r\n                                                                                    />\r\n                                                                                </Td>\r\n                                                                            </Tr>\r\n                                                                        )\r\n                                                                    }\r\n                                                                )}\r\n                                                            </TBody>\r\n                                                        </Table>\r\n                                                    </>\r\n                                                )}\r\n                                            </FieldArray>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        <div className=\"my-2 text-right\">\r\n                                            <>\r\n                                                <Button\r\n                                                    className=\"mx-2\"\r\n                                                    variant=\"twoTone\"\r\n                                                    color=\"blue-600\"\r\n                                                    type={'submit'}\r\n                                                >\r\n                                                    {'Update Package'}\r\n                                                </Button>\r\n                                                <Button\r\n                                                    className=\"mx-2\"\r\n                                                    variant=\"twoTone\"\r\n                                                    color=\"red-600\"\r\n                                                    onClick={()=>props?.handleRemoveItem(values?.package_id)}\r\n                                                    type={'button'}\r\n                                                >\r\n                                                    {'Delete Package'}\r\n                                                </Button>\r\n                                            </>\r\n                                        </div>\r\n                                    </div>\r\n                                </FormContainer>\r\n                            </Form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PackagingItem\r\n","import Accordion from 'components/shared/Accordion'\r\nimport { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Button } from 'components/ui'\r\nimport PackagingItem from './PackagingItem'\r\nimport { apiCreateWorkOrderPackagingItemsBulk } from 'services/WorkOrderService'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { GetErrorMsg } from 'views/Servicefile'\r\nimport { getWorkOrderById } from 'views/wareHouse/WareHouse/store/dataSlice'\r\n\r\nconst Packaging = (props) => {\r\n    const [AccordionItems, setAccordionItems] = useState([])\r\n    const data = useSelector((state) => state.wareHouse.data)\r\n    const dispatch = useDispatch()\r\n    const workOrderItem = data?.workOrderItem\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    const [work_order_pack, setWorkOrderPack] = useState(\r\n        workOrderItem.dgl_work_order_packaging\r\n    )\r\n    useEffect(() => {\r\n        handleUpdateAccordions(work_order_pack)\r\n    }, [work_order_pack])\r\n    useEffect(() => {\r\n        if(work_order_pack?.length ===0){\r\n            handleAddNewPackage()\r\n        }\r\n    }, [])\r\n    const handleRemoveItem = (id) => {\r\n        const data = [...work_order_pack]\r\n        const findIndex = data?.findIndex((i) => i?.package_id === id)\r\n        data.splice(findIndex, 1)\r\n        setWorkOrderPack(data)\r\n    }\r\n\r\n    const handleUpdateItem = (dataItem) => {\r\n        const data = [...work_order_pack]\r\n        const updateData = data?.map((i) => {\r\n            if (i?.package_id === dataItem?.package_id) {\r\n                return {...i,...dataItem }\r\n            } else {\r\n                return { ...i }\r\n            }\r\n        })\r\n        setWorkOrderPack(updateData)\r\n    }\r\n\r\n    const handleUpdateAccordions = (records) => {\r\n        const list = records?.map((i) => {\r\n            console.log('package_id',i?.package_id)\r\n            let component = (\r\n                <PackagingItem\r\n                    dataItem={i}\r\n                    handleRemoveItem={handleRemoveItem}\r\n                    handleUpdateItem={handleUpdateItem}\r\n                />\r\n            )\r\n\r\n            return { id: i?.package_id, title: i?.package_id, component }\r\n        })\r\n        setAccordionItems(list)\r\n    }\r\n\r\n    const handleCreateBulkPackaging = async () => {\r\n        const data = [...work_order_pack]\r\n        if (data?.length > 0) {\r\n            const req = { dgl_work_order_packaging_dto: data,wo_info_id:workOrderItem?.id }\r\n            const resp = await apiCreateWorkOrderPackagingItemsBulk(req)\r\n            if (resp.status === 'success') {\r\n                dispatch(getWorkOrderById(workOrderItem?.id))\r\n                props?.onNext()\r\n            } else if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp))\r\n            }\r\n        } else {\r\n            setMessage(`Please do atleast One Package to Create Shipment`)\r\n        }\r\n    }\r\n\r\n    const handleAddNewPackage = () => {\r\n        let data = [...work_order_pack]\r\n        const newItem = {\r\n            package_id: `PACK${Math.floor(\r\n                Math.random() * (999 - 100 + 1) + 100\r\n            )}`,\r\n            package_date: new Date(),\r\n            net_weight: '',\r\n            gross_weight: '',\r\n            length: '',\r\n            width: '',\r\n            height: '',\r\n            bar_code: '',\r\n            is_shipping: false,\r\n            package_items: [],\r\n            shipping_label: null,\r\n            way_bill: null,\r\n            special_instruction: '',\r\n            wo_info_id: null,\r\n            wo_packaging_status: null,\r\n        }\r\n        data.push(newItem)\r\n        setWorkOrderPack(data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Accordion Items={AccordionItems} />\r\n            <div className=\"mt-4 text-right\">\r\n                <Button variant=\"twoTone\" onClick={() => handleAddNewPackage()}>\r\n                    {'Add New Package'}\r\n                </Button>\r\n            </div>\r\n            <div className=\"mt-4 text-right\">\r\n                <Button\r\n                    type={'button'}\r\n                    className=\"mx-2\"\r\n                    onClick={() => props?.onPrevious()}\r\n                    variant=\"solid\"\r\n                    style={{\r\n                        backgroundColor: '#4D4D4D',\r\n                    }}\r\n                >\r\n                    {'Previous'}\r\n                </Button>\r\n                <Button\r\n                    variant=\"solid\"\r\n                    onClick={() => handleCreateBulkPackaging()}\r\n                >\r\n                    {'Next: Create Shipment'}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Packaging\r\n","import { IoMdDownload, IoMdCloudUpload } from 'react-icons/io'\r\nimport logo from '../../../../../../../assets/images/fedex.png'\r\nimport { useSelector } from 'react-redux'\r\nimport {\r\n    Button,\r\n    Card,\r\n    Checkbox,\r\n    DatePicker,\r\n    FormContainer,\r\n    FormItem,\r\n    Input,\r\n    Select,\r\n    Table,\r\n    Upload,\r\n} from 'components/ui'\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport dayjs from 'dayjs'\r\nimport { useState } from 'react'\r\nimport { apiUpdateWorkOrderShipment } from 'services/WorkOrderService'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { GetErrorMsg } from 'views/Servicefile'\r\nconst { Tr, Th, Td, THead, TBody } = Table\r\nconst Dispatch = (props) => {\r\n    const data = useSelector((state) => state.wareHouse.data)\r\n    const workOrderItem = data?.workOrderItem\r\n    const shipment_details = workOrderItem?.dgl_wo_shippment_details\r\n    const package_details = workOrderItem?.dgl_work_order_packaging\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    const [shipInitValues,setShipInitValues]=useState({...shipment_details,wo_info_id:workOrderItem?.id})\r\n\r\n    const beforeUpload = (file) => {\r\n        // Implement any required file validation here, if necessary.\r\n        return true // Return true to allow the upload, or false to prevent it.\r\n    }\r\n    const handleSubmitDispatch = async (values) => {\r\n        console.log(values)\r\n        const resp = await apiUpdateWorkOrderShipment(values)\r\n        if (resp.status === 'success') {\r\n            props?.onNext()\r\n        } else if (resp.status === 'failed') {\r\n            setMessage(GetErrorMsg(resp))\r\n        }\r\n    \r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        delivery_partner: Yup.string().trim().required('Please enter Delivery Partner ').nullable(),\r\n        vehicle_number: Yup.string().trim().required('Please enter Vehicle Number ').nullable(),\r\n        driver_name: Yup.string().trim().required('Please enter Driver Name ').nullable(),\r\n        mobile_number: Yup.string().trim().min(2, \"Number must be atleast 2 characters\").max(20, \"Max 20 characters are allowed\")\r\n            .required(\"Please enter Contact number\").nullable()\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={shipInitValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    handleSubmitDispatch(values, setSubmitting)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, handleSubmit, isSubmitting }) => {\r\n                    return (\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <FormContainer>\r\n                                <div className=\"m-4 border p-6\">\r\n                                    <div className=\"md:grid grid-cols-2 mb-4\">\r\n                                        <h5 className=\"mb-4 mt-1 text-xl\">\r\n                                            Shipment ID:{' '}\r\n                                            <span className=\"text-slate-500\">{`#${shipment_details?.shippment_id}`}</span>\r\n                                        </h5>\r\n                                    </div>\r\n                                    <div className=\"md:grid grid-cols-4\">\r\n                                        <div>\r\n                                            <div className=\"text-base text-black font-bold decoration-2\">\r\n                                                Dispatch Date:\r\n                                            </div>\r\n                                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                                <p className=\"mt-2 text-base\">\r\n                                                    {dayjs(\r\n                                                        shipment_details?.dispatchdate,\r\n                                                        'YYYY-MM-DD'\r\n                                                    )?.format('YYYY-MM-DD')}\r\n                                                </p>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <div className=\"text-base text-black font-bold decoration-2\">\r\n                                                Time Slot:\r\n                                            </div>\r\n                                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                                <p className=\"mt-2 text-base\">\r\n                                                    02:00PM - 05:00PM\r\n                                                </p>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <div className=\"text-base text-black font-bold decoration-2 mt-2 mb-1\">\r\n                                                Tracking ID:\r\n                                            </div>\r\n                                            <a\r\n                                                className=\"text-blue-500\"\r\n                                                href=\"javascript:void(0)\"\r\n                                            >\r\n                                                {\r\n                                                    shipment_details?.tracking_number\r\n                                                }\r\n                                            </a>\r\n                                        </div>\r\n                                        <div>\r\n                                            <div className=\"text-base text-black font-bold decoration-2\">\r\n                                                Shipment Status:\r\n                                            </div>\r\n                                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                                <p className=\"mt-2 text-base flex flex-row\">\r\n                                                    <span className=\"pt-2\">\r\n                                                        <span class=\"flex w-2.5 h-2.5 bg-orange-600 rounded-full mr-1.5 flex-shrink-0\"></span>\r\n                                                    </span>\r\n                                                    {\r\n                                                        shipment_details?.wo_shippment_status\r\n                                                    }\r\n                                                </p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"bg-zinc-100 p-5 mt-4\">\r\n                                        <div className=\"bg-white\">\r\n                                            <Table className=\"text-black\">\r\n                                                <THead className=\"text-black\">\r\n                                                    <Tr className=\"bg-white\">\r\n                                                        <Th>Package ID</Th>\r\n                                                        <Th>Package Date</Th>\r\n                                                        <Th>Weight</Th>\r\n                                                        <Th>Dimensions</Th>\r\n                                                        <Th>Shipping Label</Th>\r\n                                                        <Th>Way Bill</Th>\r\n                                                    </Tr>\r\n                                                </THead>\r\n                                                <TBody>\r\n                                                    {package_details?.map(\r\n                                                        (i) => {\r\n                                                            return (\r\n                                                                <Tr>\r\n                                                                    <Td>\r\n                                                                        {\r\n                                                                            i?.package_id\r\n                                                                        }\r\n                                                                    </Td>\r\n                                                                    <Td>\r\n                                                                        {' '}\r\n                                                                        {dayjs(\r\n                                                                            i?.package_date,\r\n                                                                            'YYYY-MM-DD'\r\n                                                                        )?.format(\r\n                                                                            'YYYY-MM-DD'\r\n                                                                        )}\r\n                                                                    </Td>\r\n                                                                    <Td>\r\n                                                                        {\r\n                                                                            i?.net_weight\r\n                                                                        }\r\n                                                                    </Td>\r\n                                                                    <Td>{`${i?.length}x${i?.width}x${i?.height}`}</Td>\r\n                                                                    <Td>\r\n                                                                        <IoMdDownload />\r\n                                                                    </Td>\r\n                                                                    <Td>\r\n                                                                        <IoMdDownload />\r\n                                                                    </Td>\r\n                                                                </Tr>\r\n                                                            )\r\n                                                        }\r\n                                                    )}\r\n                                                </TBody>\r\n                                            </Table>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"border-dashed border-t mt-6 mb-6\"></div>\r\n                                    <div className=\"md:grid grid-cols-4 gap-x-2\">\r\n                                        <div>\r\n                                            <FormItem\r\n                                                label=\"Delivery Partner\"\r\n                                                invalid={\r\n                                                    errors.delivery_partner &&\r\n                                                    touched.delivery_partner\r\n                                                }\r\n                                                errorMessage={\r\n                                                    errors.delivery_partner\r\n                                                }\r\n                                            >\r\n                                                <Field\r\n                                                    type=\"text\"\r\n                                                    autoComplete=\"off\"\r\n                                                    name=\"delivery_partner\"\r\n                                                    disabled={true}\r\n                                                    placeholder=\"Enter Delivery Partner\"\r\n                                                    component={Input}\r\n                                                />\r\n                                            </FormItem>\r\n                                        </div>\r\n                                        <div>\r\n                                            <FormItem\r\n                                                label=\"Vehicle Number\"\r\n                                                invalid={\r\n                                                    errors.vehicle_number &&\r\n                                                    touched.vehicle_number\r\n                                                }\r\n                                                errorMessage={\r\n                                                    errors.vehicle_number\r\n                                                }\r\n                                            >\r\n                                                <Field\r\n                                                    type=\"text\"\r\n                                                    autoComplete=\"off\"\r\n                                                    name=\"vehicle_number\"\r\n                                                    placeholder=\"Enter Vehicle Number\"\r\n                                                    component={Input}\r\n                                                />\r\n                                            </FormItem>\r\n                                        </div>\r\n                                        <div>\r\n                                            <FormItem\r\n                                                label=\"Driver Name\"\r\n                                                invalid={\r\n                                                    errors.driver_name &&\r\n                                                    touched.driver_name\r\n                                                }\r\n                                                errorMessage={\r\n                                                    errors.driver_name\r\n                                                }\r\n                                            >\r\n                                                <Field\r\n                                                    type=\"text\"\r\n                                                    autoComplete=\"off\"\r\n                                                    name=\"driver_name\"\r\n                                                    placeholder=\"Enter Driver Name\"\r\n                                                    component={Input}\r\n                                                />\r\n                                            </FormItem>\r\n                                        </div>\r\n                                        <div>\r\n                                            <FormItem\r\n                                                label=\"Contact Number\"\r\n                                                invalid={\r\n                                                    errors.mobile_number &&\r\n                                                    touched.mobile_number\r\n                                                }\r\n                                                errorMessage={\r\n                                                    errors.mobile_number\r\n                                                }\r\n                                            >\r\n                                                <Field\r\n                                                    type=\"text\"\r\n                                                    autoComplete=\"off\"\r\n                                                    name=\"mobile_number\"\r\n                                                    placeholder=\"Enter Contact Number\"\r\n                                                    component={Input}\r\n                                                />\r\n                                            </FormItem>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"border-dashed border-t mt-6 mb-6\"></div>\r\n                                    <div className=\"md:grid grid-cols-4\">\r\n                                        <div className=\"col-span-2 row-span-2\">\r\n                                            <div className=\"text-base text-black font-bold decoration-2\">\r\n                                                Outgoing Shipment Report:\r\n                                            </div>\r\n                                            <Upload\r\n                                                draggable\r\n                                                className=\"border-gray-200 w-[500] h-[0] px-6\"\r\n                                                style={{ minHeight: '3rem' }}\r\n                                                beforeUpload={beforeUpload}\r\n                                                onChange={(\r\n                                                    updatedFiles,\r\n                                                    files,\r\n                                                    uploadRes,\r\n                                                    filesDetails\r\n                                                ) => {\r\n                                                    // Here, you can update the form values with the uploaded file information.\r\n                                                    // Since we are using static values, this will not be triggered in this example.\r\n                                                }}\r\n                                            >\r\n                                                <div className=\"my-10 text-center\">\r\n                                                    <p className=\"font-semibold\">\r\n                                                        <span className=\"text-gray-400 dark:text-white\"></span>\r\n                                                        <span className=\"flex flex-row\">\r\n                                                            <span className=\"text-gray-400\">\r\n                                                                Upload Your\r\n                                                                Shipping Report\r\n                                                            </span>\r\n                                                            <span className=\"p-1 mx-2\">\r\n                                                                <IoMdCloudUpload />\r\n                                                            </span>\r\n                                                        </span>\r\n                                                    </p>\r\n                                                </div>\r\n                                            </Upload>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"mt-4 text-right\">\r\n                                    <Button\r\n                                        type={'button'}\r\n                                        className=\"mx-2\"\r\n                                        onClick={() => props?.onPrevious()}\r\n                                        variant=\"solid\"\r\n                                        style={{\r\n                                            backgroundColor: '#4D4D4D',\r\n                                        }}\r\n                                    >\r\n                                        {'Previous'}\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"solid\"\r\n                                        type=\"submit\"\r\n                                    >\r\n                                        {'Dispatched'}\r\n                                    </Button>\r\n                                </div>\r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dispatch\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    toast,\r\n    Notification,\r\n    Alert,\r\n    Upload,\r\n    Dialog\r\n} from 'components/ui'\r\nimport * as Yup from 'yup'\r\nimport { Field, Form, Formik } from 'formik'\r\nconst ShippingInputs = (props) => {\r\n\r\n    const {values,\r\n        touched,\r\n        errors,\r\n        isSubmitting,\r\n        handleSubmit,\r\n        submitForm } = props;\r\n    return (\r\n\r\n        <Form>\r\n            <FormContainer>\r\n                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                    <FormItem\r\n                        \r\n                        label={<p>Address Line 1 <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.shippment_add_line1 &&\r\n                            touched.shippment_add_line1\r\n                        }\r\n                        errorMessage={\r\n                            errors.shippment_add_line1\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"shippment_add_line1\"\r\n                            placeholder=\"Enter Address\"\r\n                            component={Input}\r\n                            value={values.shippment_add_line1}\r\n                        />\r\n                    </FormItem>\r\n                    <FormItem\r\n                        \r\n                        label={<p>Address Line 2 <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.shippment_add_line2 &&\r\n                            touched.shippment_add_line2\r\n                        }\r\n                        errorMessage={\r\n                            errors.shippment_add_line2\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"shippment_add_line2\"\r\n                            placeholder=\"Enter Address\"\r\n                            component={Input}\r\n                            value={values.shippment_add_line2}\r\n                        />\r\n                    </FormItem>\r\n                </div>\r\n            </FormContainer>\r\n            <FormContainer>\r\n                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                    <FormItem\r\n                        // label=\"Country\"\r\n                        label={<p>Country <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.shippment_add_country &&\r\n                            touched.shippment_add_country\r\n                        }\r\n                        errorMessage={\r\n                            errors.shippment_add_country\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"shippment_add_country\"\r\n                            placeholder=\"Enter Country\"\r\n                            component={Input}\r\n                            value={values.shippment_add_country}\r\n                        />\r\n                    </FormItem>\r\n                    <FormItem\r\n                        // label=\"State\"\r\n                        label={<p>State <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.shippment_add_state &&\r\n                            touched.shippment_add_state\r\n                        }\r\n                        errorMessage={\r\n                            errors.shippment_add_state\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"shippment_add_state\"\r\n                            placeholder=\"Enter State\"\r\n                            component={Input}\r\n                            value={values.shippment_add_state}\r\n                        />\r\n                    </FormItem>\r\n                </div>\r\n            </FormContainer>\r\n            <FormContainer>\r\n                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                    <FormItem\r\n                        // label=\"City\"\r\n                        label={<p>City <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.shippment_add_city &&\r\n                            touched.shippment_add_city\r\n                        }\r\n                        errorMessage={\r\n                            errors.shippment_add_city\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"shippment_add_city\"\r\n                            placeholder=\"Enter City\"\r\n                            component={Input}\r\n                            value={values.shippment_add_city}\r\n                        />\r\n                    </FormItem>\r\n                    <FormItem\r\n                        \r\n                        label={<p>Zipcode <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.shippment_add_zipcode &&\r\n                            touched.shippment_add_zipcode\r\n                        }\r\n                        errorMessage={\r\n                            errors.shippment_add_zipcode\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"shippment_add_zipcode\"\r\n                            placeholder=\"Enter Zipcode\"\r\n                            component={Input}\r\n                            value={values.shippment_add_zipcode}\r\n                        />\r\n                    </FormItem>\r\n                </div>\r\n            </FormContainer>\r\n            <FormContainer>\r\n                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                    <FormItem\r\n                        \r\n                        label={<p>Longitude <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.shippment_add_longitude &&\r\n                            touched.shippment_add_longitude\r\n                        }\r\n                        errorMessage={\r\n                            errors.shippment_add_longitude\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"shippment_add_longitude\"\r\n                            placeholder=\"Enter Longitude\"\r\n                            component={Input}\r\n                            value={values.shippment_add_longitude}\r\n                        />\r\n                    </FormItem>\r\n                    <FormItem\r\n                        // label=\"Latitude\"\r\n                        label={<p>Latitude <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.shippment_add_latitude &&\r\n                            touched.shippment_add_latitude\r\n                        }\r\n                        errorMessage={\r\n                            errors.shippment_add_latitude\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"shippment_add_latitude\"\r\n                            placeholder=\"Enter Latitude\"\r\n                            component={Input}\r\n                            value={values.shippment_add_latitude}\r\n                        />\r\n                    </FormItem>\r\n                </div>\r\n            </FormContainer>\r\n            <FormContainer>\r\n                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                    <FormItem\r\n                        \r\n                        label={<p>Other Info <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.shippment_add_other_info &&\r\n                            touched.shippment_add_other_info\r\n                        }\r\n                        errorMessage={\r\n                            errors.shippment_add_other_info\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"shippment_add_other_info\"\r\n                            placeholder=\"Enter Other Info\"\r\n                            component={Input}\r\n                            value={values.shippment_add_other_info}\r\n                        />\r\n                    </FormItem>\r\n                </div>\r\n            </FormContainer>\r\n        </Form>\r\n\r\n    )\r\n}\r\n\r\nexport default ShippingInputs\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    toast,\r\n    Notification,\r\n    Alert,\r\n    Upload,\r\n    Dialog\r\n} from 'components/ui'\r\nimport * as Yup from 'yup'\r\nimport { Field, Form, Formik } from 'formik'\r\nconst PickupInputs = (props) => {\r\n\r\n    const {values,\r\n        touched,\r\n        errors,\r\n        isSubmitting,\r\n        handleSubmit,\r\n        submitForm } = props;\r\n    return (\r\n\r\n        <Form>\r\n            <FormContainer>\r\n                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                    <FormItem\r\n                        label={<p>Address Line 1 <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.pickup_add_line1 &&\r\n                            touched.pickup_add_line1\r\n                        }\r\n                        errorMessage={\r\n                            errors.pickup_add_line1\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"pickup_add_line1\"\r\n                            placeholder=\"Enter Address\"\r\n                            component={Input}\r\n                            value={values.pickup_add_line1}\r\n                        />\r\n                    </FormItem>\r\n                    <FormItem\r\n                        label={<p>Address Line 2 <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.pickup_add_line2 &&\r\n                            touched.pickup_add_line2\r\n                        }\r\n                        errorMessage={\r\n                            errors.pickup_add_line2\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"pickup_add_line2\"\r\n                            placeholder=\"Enter Address\"\r\n                            component={Input}\r\n                            value={values.pickup_add_line2}\r\n                        />\r\n                    </FormItem>\r\n                </div>\r\n            </FormContainer>\r\n            <FormContainer>\r\n                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                    <FormItem\r\n                        \r\n                        label={<p>Country <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.pickup_add_country &&\r\n                            touched.pickup_add_country\r\n                        }\r\n                        errorMessage={\r\n                            errors.pickup_add_country\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"pickup_add_country\"\r\n                            placeholder=\"Enter Country\"\r\n                            component={Input}\r\n                            value={values.pickup_add_country}\r\n                        />\r\n                    </FormItem>\r\n                    <FormItem\r\n                        \r\n                        label={<p>State <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.pickup_add_state &&\r\n                            touched.pickup_add_state\r\n                        }\r\n                        errorMessage={\r\n                            errors.pickup_add_state\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"pickup_add_state\"\r\n                            placeholder=\"Enter State\"\r\n                            component={Input}\r\n                            value={values.pickup_add_state}\r\n                        />\r\n                    </FormItem>\r\n                </div>\r\n            </FormContainer>\r\n            <FormContainer>\r\n                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                    <FormItem\r\n                        \r\n                        label={<p>City <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.pickup_add_city &&\r\n                            touched.pickup_add_city\r\n                        }\r\n                        errorMessage={\r\n                            errors.pickup_add_city\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"pickup_add_city\"\r\n                            placeholder=\"Enter City\"\r\n                            component={Input}\r\n                            value={values.pickup_add_city}\r\n                        />\r\n                    </FormItem>\r\n                    <FormItem\r\n                        // label=\"Zipcode\"\r\n                        label={<p>Zipcode <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.pickup_add_zipcode &&\r\n                            touched.pickup_add_zipcode\r\n                        }\r\n                        errorMessage={\r\n                            errors.pickup_add_zipcode\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"pickup_add_zipcode\"\r\n                            placeholder=\"Enter Zipcode\"\r\n                            component={Input}\r\n                            value={values.pickup_add_zipcode}\r\n                        />\r\n                    </FormItem>\r\n                </div>\r\n            </FormContainer>\r\n            <FormContainer>\r\n                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                    <FormItem\r\n                        \r\n                        label={<p>Longitude <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.pickup_add_longitude &&\r\n                            touched.pickup_add_longitude\r\n                        }\r\n                        errorMessage={\r\n                            errors.pickup_add_longitude\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"pickup_add_longitude\"\r\n                            placeholder=\"Enter Longitude\"\r\n                            component={Input}\r\n                            value={values.pickup_add_longitude}\r\n                        />\r\n                    </FormItem>\r\n                    <FormItem\r\n                        // label=\"Latitude\"\r\n                        label={<p>Latitude <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.pickup_add_latitude &&\r\n                            touched.pickup_add_latitude\r\n                        }\r\n                        errorMessage={\r\n                            errors.pickup_add_latitude\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"pickup_add_latitude\"\r\n                            placeholder=\"Enter Latitude\"\r\n                            component={Input}\r\n                            value={values.pickup_add_latitude}\r\n                        />\r\n                    </FormItem>\r\n                </div>\r\n            </FormContainer>\r\n            <FormContainer>\r\n                <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                    <FormItem\r\n                        \r\n                        label={<p>Other Info <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                        invalid={\r\n                            errors.pickup_add_other_info &&\r\n                            touched.pickup_add_other_info\r\n                        }\r\n                        errorMessage={\r\n                            errors.pickup_add_other_info\r\n                        }\r\n                    >\r\n                        <Field\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            name=\"pickup_add_other_info\"\r\n                            placeholder=\"Enter Other Info\"\r\n                            component={Input}\r\n                            value={values.pickup_add_other_info}\r\n                        />\r\n                    </FormItem>\r\n                </div>\r\n            </FormContainer>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default PickupInputs\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    toast,\r\n    Notification,\r\n    Alert,\r\n    Upload,\r\n    Dialog\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Accordion from 'components/shared/Accordion'\r\nimport ShippingInputs from './ShippingAddressInput'\r\nimport PickupInputs from './PickupAddressInput'\r\nimport { APiToUiConversionShipment, UiToApiConversionShipment } from 'utils/campareandCopy'\r\nimport { apiCreateWorkOrderShipment, apiGetPickUpTimeSlots } from 'services/WorkOrderService'\r\nimport { getWorkOrderById } from 'views/wareHouse/WareHouse/store/dataSlice'\r\nimport { GetErrorMsg } from 'views/Servicefile'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\n\r\nconst ShipmentForm = ({\r\n    shipmentFormVisible,\r\n    setShipmentFormVisible,\r\n    onNext,\r\n    onPrevious\r\n}) => {\r\n    const dispatch=useDispatch()\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    useEffect(()=>{\r\n        fetchTimeSlots()\r\n    },[])\r\n    const res = useSelector((state) => state.wareHouse.data);\r\n    const [timeslotOptions,setTimeslotOptions]=useState([])\r\n    const workOrderData = res?.workOrderItem\r\n\r\n    let initialValues = {\r\n        shippment_id: Math.floor(100000 + Math.random() * 900000),\r\n        // shippment_id:  `SHIP${Math.floor(\r\n        //     Math.random() * (999 - 100 + 1) + 100\r\n        // )}`,\r\n        dispatchdate: new Date(),\r\n        timeSlot: '',\r\n        \"wo_info_id\": workOrderData?.id,\r\n        \"wo_shippment_status\": \"IN_TRANSIT\",\r\n        delivery_partner: '',\r\n        doc_id: '',\r\n        shippment_add_line1: '',\r\n        shippment_add_line2: '',\r\n        shippment_add_country: '',\r\n        shippment_add_state: '',\r\n        shippment_add_city: '',\r\n        shippment_add_zipcode: '',\r\n        shippment_add_longitude: '',\r\n        shippment_add_latitude: '',\r\n        shippment_add_type: 'DELIVERY',\r\n        shippment_add_other_info: '',\r\n        pickup_add_line1: '',\r\n        pickup_add_line2: '',\r\n        pickup_add_country: '',\r\n        pickup_add_state: '',\r\n        pickup_add_city: '',\r\n        pickup_add_zipcode: '',\r\n        pickup_add_longitude: '',\r\n        pickup_add_latitude: '',\r\n        pickup_add_type: 'PICKUP',\r\n        pickup_add_other_info: ''\r\n    }\r\n    let dataValue=initialValues\r\n    if(workOrderData?.dgl_wo_shippment_details){\r\n        dataValue=APiToUiConversionShipment(workOrderData?.dgl_wo_shippment_details)\r\n    }\r\n    const [initialState, setInitValues] = useState({...dataValue, \"wo_info_id\": workOrderData?.id,id:dataValue?.id})\r\n\r\n    const onDialogClose = () => {\r\n        onPrevious()\r\n    }\r\n\r\n    const onDialogOk = (e) => {\r\n        console.log('onDialogOk', e)\r\n        setShipmentFormVisible(false);\r\n        onNext();\r\n    }\r\n    const validationSchema = Yup.object({\r\n        shippment_id: Yup.number().required('Shipment Id is required'),\r\n        dispatchdate: Yup.date().nullable().required('Dispatch Date is required'),\r\n        timeSlot: Yup.string().required('Time Slot is required'),\r\n        // deliveryAddress: Yup.string().required('Delivery Address is required'),\r\n        // pickupAddress: Yup.string().required('Pickup Address is required'),\r\n        delivery_partner: Yup.string().required('Delivery Partner is required'),\r\n        // doc_id: Yup.string().required('Support Documents is required'),\r\n        shippment_add_line1: Yup.string().required('Shippment Address Line 1 is required'),\r\n        shippment_add_line2: Yup.string().required('Shippment Address Line 2 is required'),\r\n        shippment_add_country: Yup.string().required('Country is required'),\r\n        shippment_add_state: Yup.string().required('State is required'),\r\n        shippment_add_city: Yup.string().required('City is required'),\r\n        shippment_add_zipcode: Yup.string().required('ZipCode is required'),\r\n        shippment_add_longitude: Yup.string().required('Longitude is required'),\r\n        shippment_add_latitude: Yup.string().required('latitude is required'),\r\n        // shippment_add_type: Yup.string().required('Delivery Type is required'),\r\n        shippment_add_other_info: Yup.string().required('Other is required'),\r\n        pickup_add_line1: Yup.string().required('Address Line 1 is required'),\r\n        pickup_add_line2: Yup.string().required('Address Line 2 is required'),\r\n        pickup_add_country: Yup.string().required('Country is required'),\r\n        pickup_add_state: Yup.string().required('State is required'),\r\n        pickup_add_city: Yup.string().required('City is required'),\r\n        pickup_add_zipcode: Yup.string().required('ZipCode is required'),\r\n        pickup_add_longitude: Yup.string().required('Longitude is required'),\r\n        pickup_add_latitude: Yup.string().required('latitude is required'),\r\n        // pickup_add_type: Yup.string().required('Delivery Type is required'),\r\n        pickup_add_other_info: Yup.string().required('Other is required'),\r\n    })\r\n\r\n    const handleSubmit = async(values) => {\r\n        // onDialogOk();\r\n        const data=UiToApiConversionShipment(values)\r\n        const resp = await apiCreateWorkOrderShipment(data)\r\n        if (resp.status === 'success') {\r\n            dispatch(getWorkOrderById(workOrderData?.id))\r\n            onDialogOk();\r\n        } else if (resp.status === 'failed') {\r\n            setMessage(GetErrorMsg(resp))\r\n            onDialogOk();\r\n        }\r\n    \r\n    };\r\n    const fetchTimeSlots=async()=>{\r\n        const response = await apiGetPickUpTimeSlots({\r\n            int_type:'pickup',\r\n            data:'%7B%22pickupAddress%22%3A%7B%22streetLines%22%3A%5B%22Walker%20st%22%5D%2C%22urbanizationCode%22%3A%22URB%20FAIR%20OAKS%22%2C%22city%22%3A%22NewYork%22%2C%22stateOrProvinceCode%22%3A%22NY%22%2C%22postalCode%22%3A%2210006%22%2C%22countryCode%22%3A%22US%22%2C%22residential%22%3Afalse%2C%22addressClassification%22%3A%22MIXED%22%7D%2C%22dispatchDate%22%3A%222023-07-14%22%2C%22packageReadyTime%22%3A%2215%3A30%3A00%22%2C%22customerCloseTime%22%3A%2218%3A00%3A00%22%2C%22pickupRequestType%22%3A%5B%22SAME_DAY%22%5D%2C%22shipmentAttributes%22%3A%7B%22weight%22%3A%7B%22units%22%3A%22KG%22%2C%22value%22%3A20%7D%2C%22packagingType%22%3A%22YOUR_PACKAGING%22%2C%22dimensions%22%3A%7B%22length%22%3A7%2C%22width%22%3A8%2C%22units%22%3A%22CM%22%2C%22height%22%3A9%7D%7D%2C%22numberOfBusinessDays%22%3A1%2C%22packageDetails%22%3A%5B%7B%22packageSpecialServices%22%3A%7B%22specialServiceTypes%22%3A%5B%22SIGNATURE_OPTION%22%5D%7D%7D%5D%2C%22associatedAccountNumber%22%3A%22740561073%20%22%2C%22associatedAccountNumberType%22%3A%22FEDEX_EXPRESS%22%2C%22carriers%22%3A%5B%22FDXE%22%5D%2C%22countryRelationship%22%3A%22DOMESTIC%22%7D'\r\n        })\r\n        const res= JSON.parse(response?.data?.response?.response_message)\r\n        const timeslots=res?.output?.options[0]?.readyTimeOptions || []\r\n        const result=timeslots?.map((i)=>{\r\n            return {value:i,label:i}\r\n        })\r\n        setTimeslotOptions(result)\r\n    }\r\n    // const timeslotOptions = [\r\n    //     { value: '09:00 AM - 01:00 PM', label: '09:00 AM - 01:00 PM' },\r\n    //     { value: '02:00 PM - 05:00 PM', label: '02:00 PM - 05:00 PM' }\r\n    // ];\r\n\r\n    const deliveryPartnerOptions = [\r\n        { value: 'FEDEX', label: 'FEDEX' },\r\n        { value: 'BlueDart', label: 'BlueDart' }\r\n    ];\r\n\r\n    const dateFormat = useSelector((state) => state.locale.dateFormat)\r\n\r\n    const beforeUpload = (file) => {\r\n        // Implement any required file validation here, if necessary.\r\n        return true; // Return true to allow the upload, or false to prevent it.\r\n    };\r\n      \r\n    return (\r\n        <div>\r\n            <Dialog\r\n                isOpen={shipmentFormVisible}\r\n                shouldCloseOnOverlayClick={false}\r\n                width={1000}\r\n                height={'90%'}\r\n                shouldCloseOnEsc={false}\r\n                onClose={onDialogClose}\r\n                onRequestClose={onDialogClose}\r\n            >\r\n                <div className=\"flex flex-col h-full\">\r\n                    <h5 className=\"mb-4\">Create Shipment</h5>\r\n                    <div className=\" overflow-y-auto\">\r\n                        <Formik\r\n                            initialValues={initialState}\r\n                            // validationSchema={validationSchema}\r\n                            onSubmit={handleSubmit}\r\n                        >\r\n                            {({\r\n                                values,\r\n                                touched,\r\n                                errors,\r\n                                isSubmitting,\r\n                                handleSubmit,\r\n                                submitForm,\r\n                            }) => (\r\n                                \r\n                                <Form>\r\n                                    <FormContainer>\r\n                                        <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                                            <FormItem\r\n                                                label={<p>Shipment ID <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                invalid={\r\n                                                    errors.shippment_id &&\r\n                                                    touched.shippment_id\r\n                                                }\r\n                                                errorMessage={\r\n                                                    errors.shippment_id\r\n                                                }\r\n                                            >\r\n                                                <Field\r\n                                                    type=\"text\"\r\n                                                    autoComplete=\"off\"\r\n                                                    name=\"shippment_id\"\r\n                                                    placeholder=\"Enter Shipment Id\"\r\n                                                    component={Input}\r\n                                                    value={values.shippment_id}\r\n                                                    disabled={true}\r\n                                                />\r\n                                            </FormItem>\r\n                                            <FormItem\r\n                                                    label={<p>Dispatch Date <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                    invalid={\r\n                                                        errors.dispatchdate &&\r\n                                                        touched.dispatchdate\r\n                                                    }\r\n                                                    errorMessage={\r\n                                                        errors.dispatchdate\r\n                                                    }\r\n                                                >\r\n                                                <Field name=\"dispatchdate\" >\r\n                                                    {({ field, form }) => (\r\n                                                        <DatePicker\r\n                                                            placeholder=\"Select Dispatch date\"\r\n                                                            field={field}\r\n                                                            form={form}\r\n                                                            value={new Date(field.value)}\r\n                                                            onChange={(date) => {\r\n                                                                form.setFieldValue(\r\n                                                                    field.name,\r\n                                                                    date\r\n                                                                )\r\n                                                            }}\r\n                                                            // minDate={new Date()}\r\n                                                            inputFormat= {dateFormat}\r\n                                                        />\r\n                                                    )}\r\n                                                </Field>\r\n                                            </FormItem>\r\n                                        </div>\r\n                                    </FormContainer>\r\n                                    <FormContainer>\r\n                                        \r\n                                        <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n                                            <FormItem\r\n                                                label={<p>Time Slot <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                \r\n                                                invalid={errors.timeSlot && touched.timeSlot}\r\n                                                    errorMessage={errors.timeSlot}\r\n                                            >\r\n                                                <Field name=\"timeSlot\">\r\n                                                    {({ field, form }) => (\r\n                                                        <Select\r\n                                                        placeholder=\"Select Time Slot\"\r\n                                                        field={field}\r\n                                                        form={form}\r\n                                                        options={timeslotOptions}\r\n                                                        value={timeslotOptions.find(option => option.value === field.value) || ''}\r\n                                                        onChange={(selectedOption) => form.setFieldValue(field.name, selectedOption.value)}\r\n                                                    />\r\n                                                    )}\r\n                                                </Field>\r\n                                            </FormItem>\r\n                                            <FormItem\r\n                                                \r\n                                                label={<p>Delivery Partner <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                invalid={\r\n                                                    errors.delivery_partner &&\r\n                                                    touched.delivery_partner\r\n                                                }\r\n                                                errorMessage={\r\n                                                    errors.delivery_partner\r\n                                                }\r\n                                            >\r\n                                                <Field name=\"delivery_partner\">\r\n                                                    {({ field, form }) => (\r\n                                                        <Select\r\n                                                        placeholder=\"Select Delivery Partner\"\r\n                                                        field={field}\r\n                                                        form={form}\r\n                                                        options={deliveryPartnerOptions}\r\n                                                        value={deliveryPartnerOptions.find(option => option.value === field.value) || ''}\r\n                                                        onChange={(selectedOption) => form.setFieldValue(field.name, selectedOption.value)}\r\n                                                    />\r\n                                                    )}\r\n                                                </Field>\r\n                                            </FormItem>\r\n                                        </div>\r\n                                    </FormContainer>\r\n                                    <FormContainer>\r\n                                        <Accordion Items={[\r\n                                            {\r\n                                                id: 1,\r\n                                                title: 'Shippment Address',\r\n                                                component: <ShippingInputs {...{\r\n                                                    values,\r\n                                                    touched,\r\n                                                    errors,\r\n                                                    isSubmitting,\r\n                                                    handleSubmit,\r\n                                                    submitForm,\r\n                                                }}  />,\r\n                                            },\r\n                                            {\r\n                                                id: 2,\r\n                                                title: 'Pickup Address',\r\n                                                component: <PickupInputs {...{\r\n                                                    values,\r\n                                                    touched,\r\n                                                    errors,\r\n                                                    isSubmitting,\r\n                                                    handleSubmit,\r\n                                                    submitForm,\r\n                                                }} />,\r\n                                            },\r\n                                        ]}  /> \r\n                                        <div className=\"md:grid mx-4\">\r\n                                            <FormItem\r\n                                               \r\n                                                label={<p>Support Documents <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                invalid={\r\n                                                    errors.doc_id &&\r\n                                                    touched.doc_id\r\n                                                }\r\n                                                errorMessage={\r\n                                                    errors.doc_id\r\n                                                }\r\n                                            >\r\n                                        <Upload\r\n                                            draggable\r\n                                            className=\"border-gray-200 w-[500] h-[0] px-6\"\r\n                                            style={{ minHeight: '3rem' }}\r\n                                            beforeUpload={beforeUpload}\r\n                                            onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                            // Here, you can update the form values with the uploaded file information.\r\n                                            // Since we are using static values, this will not be triggered in this example.\r\n                                            }}\r\n                                        >\r\n                                            <div className=\"my-10 text-center\">\r\n                                            <p className=\"font-semibold\">\r\n                                                <span className=\"text-gray-400 dark:text-white\">\r\n                                                \r\n                                                </span>\r\n                                                <span className=\"text-blue-700\">Support Documents</span>\r\n                                            </p>\r\n                                            </div>\r\n                                        </Upload>\r\n                                        </FormItem>\r\n                                        </div>  \r\n                                    \r\n                                    </FormContainer>\r\n                                <div className=\"mt-4 text-right\">\r\n                                            <>\r\n                                                <Link\r\n                                                    className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                                >\r\n                                                    <Button\r\n                                                        type={'button'}\r\n                                                        className=\"mx-2\"\r\n                                                        onClick={() =>\r\n                                                            onDialogClose()\r\n                                                        }\r\n                                                        variant=\"solid\"\r\n                                                        style={{\r\n                                                            backgroundColor: '#4D4D4D',\r\n                                                        }}\r\n                                                    >\r\n                                                        Cancel\r\n                                                    </Button>\r\n                                                </Link>\r\n                                                <Link className=\"block lg:inline-block md:mb-0 mb-4\">\r\n                                                    <Button\r\n                                                        type={'submit'}\r\n                                                        className=\"mx-2\"\r\n                                                        variant=\"solid\"\r\n                                                        onClick={submitForm}\r\n                                                    >\r\n                                                        Submit For Approval\r\n                                                    </Button>\r\n                                                </Link>\r\n                                            </>\r\n                                        </div>\r\n                                    </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShipmentForm;","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { Steps, Button, Card, Alert } from 'components/ui'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { HiCheckCircle } from 'react-icons/hi'\r\nimport Accordion from 'components/shared/Accordion'\r\nimport InventoryAllocation from './InventoryAllocation'\r\nimport Labelling from './Labelling'\r\nimport { apiCreateWorkOrderLabelling } from 'services/WorkOrderService'\r\nimport { GetErrorMsg } from 'views/Servicefile'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport Packaging from './Packaging'\r\nimport Dispatch from './Dispatch'\r\nimport ShipmentForm from './ShipmentForm'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst OrderProcessing = () => {\r\n    const res = useSelector((state) => state.wareHouse.data);\r\n    const navigate= useNavigate()\r\n    const workOrderData = res?.workOrderItem\r\n    const [shipmentFormVisible, setShipmentFormVisible] = useState(false)\r\n    const [step, setStep] = useState(0)\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    const onChange = (nextStep) => {\r\n        if (nextStep < 0) {\r\n            setStep(0)\r\n        } else if (nextStep > 3) {\r\n            setStep(3)\r\n        } else {\r\n            setStep(nextStep)\r\n        }\r\n    }\r\n\r\n    const onNext = () => {\r\n        setStep(step + 1)\r\n    }\r\n    const handleCreateLabelling = async () => {\r\n        const work_order_labelling = workOrderData?.dgl_wo_intry_allocation\r\n            ?.filter((i) => !i?.dgl_work_order_labelling)\r\n            ?.map((j) => {\r\n                return {\r\n                    wo_inventry_id: j?.id,\r\n                    item_var_id: j?.item_var_id,\r\n                }\r\n            })\r\n        if (work_order_labelling?.length > 0) {\r\n            const req = {\r\n                dgl_work_order_labelling: work_order_labelling,\r\n                wo_info_id: workOrderData?.id,\r\n            }\r\n            const resp = await apiCreateWorkOrderLabelling(req)\r\n            if (resp.status === 'success') {\r\n                onNext()\r\n            } else if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp))\r\n            }\r\n        } else {\r\n            onNext()\r\n        }\r\n    }\r\n\r\n    const onPrevious = () => onChange(step - 1)\r\n    const handleComplete = () => {\r\n        navigate(`/warehouse-workorder`)\r\n    }\r\n    const handleShipmentFormPrevious=()=>{\r\n        setShipmentFormVisible(false);\r\n        setStep(2)\r\n    }\r\n    const handleDispatchFormPrevious=()=>{\r\n        setShipmentFormVisible(true);\r\n        setStep(2)\r\n    }\r\n\r\n    const showShipmentForm = () => {\r\n        setShipmentFormVisible(true);\r\n    }\r\n    return (\r\n        <div className=\"mt-5\">\r\n            {message && (\r\n                <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                    {Array.isArray(message) ? message.join(', ') : message}\r\n                </Alert>\r\n            )}\r\n            <Steps current={step}>\r\n                <Steps.Item title={'INVENTORY ALLOCATION'} />\r\n                <Steps.Item title=\"LABELLING\" />\r\n                <Steps.Item title=\"PACKAGING\" />\r\n                <Steps.Item title=\"DISPATCH\" />\r\n            </Steps>\r\n            {step === 0 && (\r\n                <div>\r\n                    <InventoryAllocation onNext={handleCreateLabelling} />\r\n                </div>\r\n            )}\r\n            {step === 1 && (\r\n                <div>\r\n                    <Labelling onNext={onNext} onPrevious={onPrevious} />\r\n                </div>\r\n            )}\r\n            {step === 2 && (\r\n                <div>\r\n                    <Packaging onNext={() => showShipmentForm()} onPrevious={onPrevious} />\r\n                </div>\r\n            )}\r\n            {step === 3 && (\r\n                <div>\r\n                    <Dispatch onNext={handleComplete} onPrevious={handleDispatchFormPrevious} />\r\n                </div>\r\n            )}\r\n            <ShipmentForm shipmentFormVisible={shipmentFormVisible} onNext={onNext} setShipmentFormVisible={setShipmentFormVisible} onPrevious={handleShipmentFormPrevious} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderProcessing\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { Tabs } from 'components/ui'\r\nimport WorkOrderTabDetails from './WorkOrderTabDetails'\r\n\r\nimport ActivityDetails from '../activity/ActivityDetails'\r\nimport { useLocation, useParams } from 'react-router-dom'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\nimport { injectReducer } from 'store'\r\nimport reducer from 'views/wareHouse/WareHouse/store'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getItemVariants, getWorkOrderById } from 'views/wareHouse/WareHouse/store/dataSlice'\r\nimport { Loading } from 'components/shared'\r\nimport OrderProcessing from './OrderProcessing'\r\n\r\nconst { TabNav, TabList, TabContent } = Tabs\r\ninjectReducer('wareHouse', reducer)\r\nconst WorkOrderTabs = () => {\r\n    const {id}=useParams()\r\n    const dispatch = useDispatch()\r\n    const loading = useSelector((state) => state.wareHouse.data.loading)\r\n \r\n    const data = useSelector((state) => state.wareHouse.data.workOrderItem)\r\n    \r\n    const fetchData = useCallback(() => {\r\n        if(id){\r\n            dispatch(getWorkOrderById(id))\r\n            // dispatch(getItemVariants())\r\n        }\r\n    }, [dispatch,id])\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [dispatch, fetchData])\r\n    \r\n    const breadCrumbList = [\r\n        {\r\n            name: 'Home',\r\n            link: '/home',\r\n        },\r\n        {\r\n            name: 'Work Orders',\r\n            link: '/warehouse-workorder',\r\n        },\r\n        {\r\n            name: data?.wo_unq_id,\r\n        },\r\n    ]\r\n    \r\n    return (\r\n        <>\r\n            <Loading loading={loading} type=\"cover\">\r\n            <CustomBreadcrumbs list={breadCrumbList} />\r\n            <br />\r\n            <div>\r\n                <Tabs defaultValue=\"workOrderDetails\">\r\n                    <TabList>\r\n                        <TabNav value=\"workOrderDetails\">\r\n                            Work Order Details\r\n                        </TabNav>\r\n                        <TabNav value=\"orderPrcessing\">OrderProcessing</TabNav>\r\n                        <TabNav value=\"activity\">Activity</TabNav>\r\n                    </TabList>\r\n                    <div>\r\n                        <TabContent value=\"workOrderDetails\">\r\n                            <div className=\"lg:flex items-center justify-between mt-6 mb-6\">\r\n                            </div>\r\n                            <WorkOrderTabDetails />\r\n                        </TabContent>\r\n                    </div>\r\n                    <div>\r\n                        <TabContent value=\"orderPrcessing\">\r\n                            <div className=\"lg:flex items-center justify-between mt-6 mb-6\">\r\n                            </div>\r\n                            <OrderProcessing />\r\n                        </TabContent>\r\n                    </div>\r\n                    <div>\r\n                        <TabContent value=\"activity\">\r\n                            <div className=\"lg:flex items-center justify-between mt-6 mb-6\">\r\n                            </div>\r\n                            <ActivityDetails />\r\n                        </TabContent>\r\n                    </div>\r\n                </Tabs>\r\n            </div>\r\n            </Loading>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WorkOrderTabs\r\n"],"names":["require","useState","useRef","AccordionItem","props","contentEl","handleToggle","active","faq","title","id","component","className","onClick","ref","style","height","current","scrollHeight","setActive","index","Items","map","interval","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","tableRef","res","useSelector","state","wareHouse","data","workOrderItem","dgl_wo_intry_allocation","columns","useMemo","header","accessorKey","cell","wo_status","workOrderData","qty","reduce","accumulator","currentValue","quantity","wo_unq_id","wo_desc","dgl_ord_info_id","dayjs","wo_alltd_dt","format","searchInput","size","placeholder","prefix","icon","block","backgroundColor","color","ActionColumn","row","textTheme","useThemeClass","navigate","useNavigate","useCallback","flex","original","referenceId","settlementType","fromAccount","toAccount","bodyClass","dataItem","item_var_id","item_type","AccordionItems","setAccordionItems","handleUpdateAccordions","records","list","i","Accordion","to","type","console","log","variant","onNext","dispatch","useDispatch","useTimeOutMessage","showDialog","setShowDialog","onDelete","Id","apiDeleteWorkOrderLabellingItem","status","getWorkOrderById","GetErrorMsg","onEdit","setInitValues","initialValues","bar_code","gst_number","sim_number_check","sim_number","imei_number","sim_serial_number","wo_label_id","dgl_work_order_labelling","initialState","handleAddNewLabel","values","setSubmitting","req","apiUpdateWorkOrderLabellingItem","resp","apiCreateWorkOrderLabellingItem","labelling_items","isOpen","onClose","fontFamily","fontStyle","fontWeight","fontSize","onSubmit","touched","errors","handleSubmit","isSubmitting","label","invalid","errorMessage","autoComplete","name","Input","Checkbox","borderRadius","disabled","onPrevious","updated_wo_intry_alloc","value","item_id","packageItem","package_date","Date","wo_info_id","Tr","Table","Th","Td","THead","TBody","validationSchema","Yup","shape","package_id","trim","required","nullable","net_weight","gross_weight","length","width","special_instruction","is_shipping","handleUpdateItem","handleAddNewPackageItem","field","form","onChange","date","setFieldValue","inputFormat","textArea","insert","remove","push","prod_or_package_id","manufacturer","ord_quantity","description","quantity_to_pack","wo_package_id","package_items","j","options","filter","wh","handleRemoveItem","dgl_work_order_packaging","work_order_pack","setWorkOrderPack","handleAddNewPackage","findIndex","splice","updateData","handleCreateBulkPackaging","dgl_work_order_packaging_dto","apiCreateWorkOrderPackagingItemsBulk","newItem","Math","floor","random","shipping_label","way_bill","wo_packaging_status","shipment_details","dgl_wo_shippment_details","package_details","shipInitValues","beforeUpload","file","handleSubmitDispatch","apiUpdateWorkOrderShipment","delivery_partner","vehicle_number","driver_name","mobile_number","min","max","shippment_id","dispatchdate","href","tracking_number","class","wo_shippment_status","draggable","minHeight","updatedFiles","files","uploadRes","filesDetails","submitForm","shippment_add_line1","shippment_add_line2","shippment_add_country","shippment_add_state","shippment_add_city","shippment_add_zipcode","shippment_add_longitude","shippment_add_latitude","shippment_add_other_info","pickup_add_line1","pickup_add_line2","pickup_add_country","pickup_add_state","pickup_add_city","pickup_add_zipcode","pickup_add_longitude","pickup_add_latitude","pickup_add_other_info","shipmentFormVisible","setShipmentFormVisible","fetchTimeSlots","timeslotOptions","setTimeslotOptions","dataValue","timeSlot","doc_id","shippment_add_type","pickup_add_type","APiToUiConversionShipment","onDialogClose","onDialogOk","e","UiToApiConversionShipment","apiCreateWorkOrderShipment","apiGetPickUpTimeSlots","int_type","response","JSON","parse","response_message","timeslots","output","readyTimeOptions","result","deliveryPartnerOptions","dateFormat","locale","shouldCloseOnOverlayClick","shouldCloseOnEsc","onRequestClose","find","option","selectedOption","step","setStep","handleCreateLabelling","work_order_labelling","wo_inventry_id","apiCreateWorkOrderLabelling","nextStep","showIcon","Array","isArray","join","TabNav","Tabs","TabList","TabContent","injectReducer","reducer","useParams","loading","fetchData","breadCrumbList","link","defaultValue"],"sourceRoot":""}