{"version":3,"file":"static/js/4012.7f38f036.chunk.js","mappings":"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","sources":["views/catalogue/Solutions/store/stateSlice.js","views/catalogue/Solutions/store/index.js","views/catalogue/Solutions/components/SolutionsTable.js","views/catalogue/Solutions/components/SolutionsTableSearch.js","views/catalogue/Solutions/components/SolutionsFilter.js","views/catalogue/Solutions/components/SolutionsTableTools.js","views/catalogue/Solutions/components/SolutionsDeleteConfirmation.js","views/catalogue/Solutions/index.js"],"sourcesContent":["import { createSlice, current } from '@reduxjs/toolkit'\r\n\r\nconst stateSlice = createSlice({\r\n    name: 'solutionsList/state',\r\n    initialState: {\r\n        selectedRows: [],\r\n        selectedRow: [],\r\n        deleteMode: '',\r\n    },\r\n    reducers: {\r\n        setSelectedRows: (state, action) => {\r\n            state.selectedRows = action.payload\r\n        },\r\n        setSelectedRow: (state, action) => {\r\n            state.selectedRow = action.payload\r\n        },\r\n        addRowItem: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (!currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: [...currentState.selectedRows, ...payload],\r\n                }\r\n            }\r\n        },\r\n        removeRowItem: (state, { payload }) => {\r\n            const currentState = current(state)\r\n            if (currentState.selectedRows.includes(payload)) {\r\n                return {\r\n                    selectedRows: currentState.selectedRows.filter(\r\n                        (id) => id !== payload\r\n                    ),\r\n                }\r\n            }\r\n        },\r\n        setDeleteMode: (state, action) => {\r\n            state.deleteMode = action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    setSelectedRows,\r\n    setSelectedRow,\r\n    addRowItem,\r\n    removeRowItem,\r\n    toggleDeleteConfirmation,\r\n    setDeleteMode,\r\n} = stateSlice.actions\r\n\r\nexport default stateSlice.reducer\r\n","import { combineReducers } from '@reduxjs/toolkit'\r\nimport state from './stateSlice'\r\nimport data from './dataSlice'\r\n\r\nconst reducer = combineReducers({\r\n    state,\r\n    data,\r\n})\r\n\r\nexport default reducer\r\n","import React, { useEffect, useCallback, useMemo, useRef, useState } from 'react'\r\nimport { Badge, Button, Dialog, Tooltip } from 'components/ui'\r\nimport { DataTable } from 'components/shared'\r\nimport { HiOutlineEye, HiOutlineTrash } from 'react-icons/hi'\r\nimport NumberFormat from 'react-number-format'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getSolutions, setTableData } from '../store/dataSlice'\r\nimport {\r\n    setSelectedRows,\r\n    addRowItem,\r\n    removeRowItem,\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n} from '../store/stateSlice'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport dayjs from 'dayjs'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport { AiFillCopy } from 'react-icons/ai'\r\nimport { RiCheckboxCircleFill, RiCloseCircleFill } from 'react-icons/ri'\r\nimport { BsPatchCheckFill } from 'react-icons/bs'\r\nimport { OpenNotification, snakeToCamel } from 'views/Servicefile'\r\nimport { apiUpdateSolutionStatus } from 'services/SolutionsService'\r\n\r\nimport ReactHtmlParser from 'html-react-parser'\r\n\r\n\r\n\r\nconst SolutionColumn = ({ row }) => {\r\n    const { textTheme } = useThemeClass()\r\n    const navigate = useNavigate()\r\n\r\n    const onView = useCallback(() => {\r\n        navigate(`/app/sales/Item-details/${row.id}`)\r\n    }, [navigate, row])\r\n\r\n    return (\r\n        <span\r\n            className={`cursor-pointer select-none font-semibold hover:${textTheme}`}\r\n            onClick={onView}\r\n        >\r\n            #{row.id}\r\n        </span>\r\n    )\r\n}\r\n\r\nconst orderStatusColor = {\r\n    ACTIVE: {\r\n        label: 'Active',\r\n        dotClass: 'bg-black-400',\r\n        textClass: 'text-black-400',\r\n        backgroundColor: 'bg-[#F5F5F5]',\r\n    },\r\n    SUBMITTED: {\r\n        label: 'Submitted',\r\n        dotClass: 'bg-blue-400',\r\n        textClass: 'text-black-400',\r\n        backgroundColor: 'bg-[#F0F7FF]',\r\n    },\r\n    IN_ACTIVE: {\r\n        label: 'Inactive',\r\n        dotClass: 'bg-blue-400',\r\n        textClass: 'text-black-400',\r\n        backgroundColor: 'bg-[#F5F5F5]',\r\n    },\r\n}\r\n\r\n\r\nconst SolutionsTable = ({ actionPermissions }) => {\r\n    const { pageIndex, pageSize, sort, query, total, sort_field, order } = useSelector(\r\n        (state) => state.solutionsList.data.tableData\r\n    )\r\n\r\n    const [isDeactivate, setDeactivate] = useState(false)\r\n\r\n    const [row, setRow] = useState('')\r\n    const tableRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const loading = useSelector((state) => state.solutionsList.data.loading)\r\n\r\n    const data = useSelector((state) => state.solutionsList.data.ItemList.res)\r\n\r\n    const totalCount = useSelector((state) => state.solutionsList.data.ItemList.total)\r\n    const { enterAccount, password, rememberMe, usernameOrEmail } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n\r\n    // const fetchData = useCallback(() => {\r\n    //     dispatch(getSolutions())\r\n    // }, [])\r\n\r\n    const fetchData = useCallback(() => {\r\n        //catalogs/admin/templates?page=0&size=100&accId=OP1&order=desc\r\n        dispatch(getSolutions({\r\n            page: pageIndex - 1,\r\n            size: pageSize,\r\n            sort_field: sort_field ? sort_field : 'id',\r\n            accId: enterAccount,\r\n            order: order ? order : 'desc'\r\n        }))\r\n    }, [dispatch, pageIndex, pageSize, sort_field, enterAccount, order, isDeactivate])\r\n\r\n    useEffect(() => {\r\n        dispatch(setSelectedRows([]))\r\n        fetchData()\r\n    }, [dispatch, fetchData, pageIndex, pageSize, sort, isDeactivate])\r\n\r\n    useEffect(() => {\r\n        if (tableRef) {\r\n            tableRef.current?.resetSelected()\r\n        }\r\n    }, [data])\r\n\r\n\r\n\r\n    const updateOperatorStatus = async () => {\r\n        let isStatus = row.sol_status === 'ACTIVE' ? 'IN_ACTIVE' : 'ACTIVE'\r\n        const resp = await apiUpdateSolutionStatus(row.id, isStatus);\r\n\r\n        if (resp.data) {\r\n\r\n            if (isStatus === 'ACTIVE') {\r\n\r\n                setDeactivate(false)\r\n                OpenNotification('success', 'Activated successfully')\r\n\r\n            } else {\r\n\r\n                setDeactivate(false)\r\n                OpenNotification('success', 'Deactivated successfully')\r\n\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n    const ActionColumn = ({ row }) => {\r\n        const dispatch = useDispatch()\r\n        const { textTheme } = useThemeClass()\r\n        const navigate = useNavigate()\r\n\r\n\r\n        const IconComponent = row.sol_status != 'ACTIVE' ? RiCheckboxCircleFill : RiCloseCircleFill;\r\n        const iconColor = row.sol_status != 'ACTIVE' ? \"green\" : \"rose\";\r\n        const disableIconStyle = { color: 'grey', pointerEvents: 'none' }\r\n        const { canAdd, canEdit, canView, canActivate, canClone, canApprove } =\r\n            actionPermissions\r\n\r\n\r\n        const onClone = () => {\r\n            navigate(`/catalogue-new-solutions`, {\r\n                state: { data: row, mode: 'ADD' },\r\n            })\r\n        }\r\n        const onEdit = () => {\r\n            navigate(`/catalogue-new-solutions`, {\r\n                state: { data: row, mode: 'EDIT' },\r\n            })\r\n        }\r\n        const handleClick = () => {\r\n            setDeactivate(true);\r\n            setRow(row);\r\n        };\r\n        return (\r\n            <div className=\"flex justify-end text-lg\">\r\n                <span\r\n                    className={`cursor-pointer p-1  hover:${textTheme}`}\r\n                    onClick={onEdit}\r\n                    style={canClone ? null : disableIconStyle}\r\n                >\r\n                    <MdModeEdit />\r\n                </span>\r\n\r\n                <span\r\n                    className={`cursor-pointer p-1  hover:${textTheme}`}\r\n                    onClick={onClone}\r\n                    style={canClone ? null : disableIconStyle}\r\n                >\r\n                    <AiFillCopy />\r\n                </span>\r\n\r\n                <Tooltip title={`${row.sol_status != 'ACTIVE' ? \"Activate\" : \"Deactivate\"}`}>\r\n                    <span onClick={handleClick} style={canActivate ? null : disableIconStyle} className={`cursor-pointer p-1 text-${iconColor}-800 hover:text-${iconColor}-800`}>\r\n                        <IconComponent />\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const tableData = useMemo(\r\n        () => ({ pageIndex, pageSize, sort, query, total: totalCount }),\r\n        [pageIndex, pageSize, sort, query, totalCount]\r\n    )\r\n    const columns = useMemo(\r\n\r\n\r\n        () => [\r\n            {\r\n                header: 'Actions',\r\n                flex: 1,\r\n                id: 'action',\r\n                cell: (props) => <ActionColumn row={props.row.original} />,\r\n            },\r\n            {\r\n                header: 'Solution ID',\r\n                accessorKey: 'sol_unq_id',\r\n                // cell: (props) => {\r\n                //     const { sol } = props.row.original\r\n                //     return (\r\n                //         <p>{sol?.solId}</p>\r\n                //     )\r\n                // },\r\n\r\n            },\r\n            {\r\n                header: 'Solution Title',\r\n                accessorKey: 'sol_title',\r\n            },\r\n            // {\r\n            //     header: 'Product Category',\r\n            //     accessorKey: 'sol',\r\n            //     flex: 1,\r\n            //     cell: (props) => {\r\n            //         const { sol } = props.row.original\r\n            //         return (\r\n            //             <p>{sol?.relProdCat?.prodCatTitle}</p>\r\n            //         )\r\n            //     },\r\n            // },\r\n            {\r\n                header: 'No. Of Items',\r\n                accessorKey: 'sol',\r\n                flex: 1,\r\n                cell: (props) => {\r\n                    const sol = props?.row?.original\r\n                    return (\r\n                        <p>{sol?.dgl_cat_sol_items.length}</p>\r\n                    )\r\n                },\r\n            },\r\n            {\r\n                header: 'Solution Price In USD',\r\n                accessorKey: 'solDisplayItemPrice',\r\n                flex: 1,\r\n                cell: (props) => {\r\n                    const sol = props?.row?.original\r\n                    return (\r\n                        <p>{sol?.sol_base_price} {` $`}</p>\r\n                    )\r\n                },\r\n\r\n            },\r\n            {\r\n                header: 'Description',\r\n                accessorKey: 'sol_desc',\r\n\r\n\r\n                cell: (props) => {\r\n                    const sol = props?.row?.original\r\n                    const sol_desc = ReactHtmlParser(sol?.sol_desc)\r\n                    return (\r\n                        <p>{sol_desc}</p>\r\n                    )\r\n                },\r\n            },\r\n            {\r\n                header: 'Status',\r\n                accessorKey: 'sol_status',\r\n                flex: 1,\r\n                cell: (props) => {\r\n                    const { sol_status } = props.row.original\r\n                    return (\r\n                        <div className=\"flex items-center\">\r\n                            <span\r\n                                className={`flex ml-2 rtl:mr-2 capitalize font-semibold rounded-full border ${orderStatusColor[sol_status]?.backgroundColor} mt-4 px-2 py-1 text-${orderStatusColor[sol_status]?.dotClass}`}\r\n                            >\r\n                                {sol_status === 'ACTIVE' && (<RiCheckboxCircleFill className=\"mt-1 mr-2 text-[#3B8C59]\" />)}\r\n                                {sol_status === 'IN_ACTIVE' && (<RiCloseCircleFill className=\"mt-1 mr-2 text-[#FF0000]\" />)}\r\n                                {sol_status === 'SUBMITTED' && (<BsPatchCheckFill className=\"mt-1 mr-2 text-blue-500\" />)}\r\n                                {orderStatusColor[sol_status]?.label}\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                },\r\n            },\r\n\r\n        ],\r\n        []\r\n    )\r\n\r\n    const onPaginationChange = (page) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageIndex = page\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSelectChange = (value) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        newTableData.pageSize = Number(value)\r\n        newTableData.pageIndex = 1\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onSort = (sort) => {\r\n        const newTableData = cloneDeep(tableData)\r\n        const sortfield = snakeToCamel(sort.key)\r\n        newTableData[\"sort_field\"] = sortfield;\r\n        newTableData[\"order\"] = sort.order;\r\n        dispatch(setTableData(newTableData))\r\n    }\r\n\r\n    const onRowSelect = (checked, row) => {\r\n        if (checked) {\r\n            dispatch(addRowItem([row.id]))\r\n        } else {\r\n            dispatch(removeRowItem(row.id))\r\n        }\r\n    }\r\n\r\n    const onAllRowSelect = useCallback(\r\n        (checked, rows) => {\r\n            if (checked) {\r\n                const originalRows = rows.map((row) => row.original)\r\n                const selectedIds = []\r\n                originalRows.forEach((row) => {\r\n                    selectedIds.push(row.id)\r\n                })\r\n                dispatch(setSelectedRows(selectedIds))\r\n            } else {\r\n                dispatch(setSelectedRows([]))\r\n            }\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <DataTable\r\n                ref={tableRef}\r\n                columns={columns}\r\n                data={data}\r\n                loading={loading}\r\n                pagingData={tableData}\r\n                onPaginationChange={onPaginationChange}\r\n                onSelectChange={onSelectChange}\r\n                onSort={onSort}\r\n                onCheckBoxChange={onRowSelect}\r\n                onIndeterminateCheckBoxChange={onAllRowSelect}\r\n                selectable\r\n            />\r\n\r\n            <Dialog\r\n                isOpen={isDeactivate}\r\n                onClose={() => setDeactivate(false)}>\r\n                <h6 style={{  fontStyle: 'normal', fontSize: 700, fontSize: '18px', color: '#212121' }}>\r\n                    {row.sol_status != 'ACTIVE' ? `Activate` : `Deactivate`}</h6>\r\n                <hr className='text-gary-500 mt-4 mb-4' />\r\n                <p>{row.sol_status != 'ACTIVE'\r\n                    ? ` Are you sure you want to activate this solution ?`\r\n                    : ` Are you sure you want to deactivate this solution ?`}</p>\r\n                <div className='mt-6 text-end'>\r\n                    <Button style={{ backgroundColor: \"#4D4D4D\", color: \"white\" }} className='mr-3'\r\n                        onClick={() => setDeactivate(false)}\r\n                    >No</Button>\r\n                    <Button variant='solid'\r\n                        onClick={() => updateOperatorStatus()}\r\n                    >Yes</Button>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SolutionsTable\r\n","import React, { useRef } from 'react'\r\nimport { Input } from 'components/ui'\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getSolutions, setTableData } from '../store/dataSlice'\r\nimport debounce from 'lodash/debounce'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\n\r\nconst SolutionTableSearch = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const searchInput = useRef()\r\n\r\n    const tableData = useSelector(\r\n        (state) => state.solutionsList.data.tableData\r\n    )\r\n    const { enterAccount, password, rememberMe, usernameOrEmail } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n\r\n    const debounceFn = debounce(handleDebounceFn, 500)\r\n\r\n    function handleDebounceFn(val) {\r\n        const newTableData = cloneDeep(tableData)  \r\n        newTableData.page_no = tableData.pageIndex-1\r\n        newTableData.page_size = tableData.pageSize\r\n        newTableData.unq_id=enterAccount\r\n        newTableData.sort_field=tableData.sort_field\r\n        if (typeof val === 'string' && val.length > 1) {\r\n            fetchData(newTableData)\r\n        }\r\n\r\n        if (typeof val === 'string' && val.length === 0) {\r\n            fetchData(newTableData)\r\n        }\r\n    }\r\n\r\n    const fetchData = (data) => {\r\n        dispatch(setTableData(data))\r\n        dispatch(getSolutions(data))\r\n    }\r\n\r\n    const onEdit = (e) => {\r\n        debounceFn(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <Input\r\n            ref={searchInput}\r\n            className=\"lg:w-52\"\r\n            size=\"sm\"\r\n            placeholder=\"Search\"\r\n            prefix={<HiOutlineSearch className=\"text-lg\" />}\r\n            onChange={onEdit}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SolutionTableSearch\r\n","import React from 'react'\r\nimport { HiOutlineFilter} from 'react-icons/hi'\r\nimport {\r\n   \r\n    Button,\r\n  \r\n} from 'components/ui'\r\n\r\n\r\n\r\nconst SolutionFilter = () => {\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                size=\"sm\"\r\n                className=\"block md:inline-block ltr:md:ml-2 rtl:md:mr-2 md:mb-0 mb-4\"\r\n                icon={<HiOutlineFilter />}\r\n                onClick={() => {}}\r\n            >\r\n                Filter\r\n            </Button>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default SolutionFilter\r\n","import React from 'react'\r\nimport { HiDownload, HiPlusCircle } from 'react-icons/hi'\r\nimport SolutionTableSearch from './SolutionsTableSearch'\r\nimport { Link } from 'react-router-dom'\r\nimport OperatorsFilter from './SolutionsFilter'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Radio,\r\n    FormItem,\r\n    FormContainer,\r\n    Drawer,\r\n} from 'components/ui'\r\nimport NewOperators from './NewSolutions'\r\n\r\n\r\nconst SolutionsTableTools = ({ actionPermissions }) => {\r\n    const { canAdd } = actionPermissions\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center\">\r\n            <SolutionTableSearch />\r\n            <OperatorsFilter />\r\n            <Link\r\n                className=\"block lg:inline-block md:mx-2 md:mb-0 mb-4\"\r\n                target=\"_blank\"\r\n                download\r\n            >\r\n                <Button block size=\"sm\" icon={<HiDownload />}>\r\n                    Export\r\n                </Button>\r\n            </Link>\r\n            <Link\r\n                className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                to=\"/catalogue-new-solutions\"\r\n            >\r\n                <Button block variant='solid' disabled={!canAdd} size=\"sm\" icon={<HiPlusCircle />}>\r\n                    Add Solution\r\n                </Button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SolutionsTableTools\r\n","import React from 'react'\r\nimport { toast, Notification } from 'components/ui'\r\nimport { ConfirmDialog } from 'components/shared'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n    setDeleteMode,\r\n    setSelectedRow,\r\n    setSelectedRows,\r\n} from '../store/stateSlice'\r\nimport { deleteSolutions, getSolutions } from '../store/dataSlice'\r\n\r\nconst SolutionDeleteConfirmation = () => {\r\n    const dispatch = useDispatch()\r\n    const selectedRows = useSelector(\r\n        (state) => state.solutionsList.state.selectedRows\r\n    )\r\n    const selectedRow = useSelector(\r\n        (state) => state.solutionsList.state.selectedRow\r\n    )\r\n    const deleteMode = useSelector(\r\n        (state) => state.solutionsList.state.deleteMode\r\n    )\r\n    const tableData = useSelector(\r\n        (state) => state.solutionsList.data.tableData\r\n    )\r\n\r\n    const onDialogClose = () => {\r\n        dispatch(setDeleteMode(''))\r\n\r\n        if (deleteMode === 'single') {\r\n            dispatch(setSelectedRow([]))\r\n        }\r\n    }\r\n\r\n    const onDelete = async () => {\r\n        dispatch(setDeleteMode(''))\r\n\r\n        if (deleteMode === 'single') {\r\n            const success = await deleteSolutions({ id: selectedRow })\r\n            deleteSucceed(success)\r\n            dispatch(setSelectedRow([]))\r\n        }\r\n\r\n        if (deleteMode === 'batch') {\r\n            const success = await deleteSolutions({ id: selectedRows })\r\n            deleteSucceed(success, selectedRows.length)\r\n            dispatch(setSelectedRows([]))\r\n        }\r\n    }\r\n\r\n    const deleteSucceed = (success, Solutions) => {\r\n        if (success) {\r\n            dispatch(getSolutions(tableData))\r\n            toast.push(\r\n                <Notification\r\n                    title={'Successfuly Deleted'}\r\n                    type=\"success\"\r\n                    duration={2500}\r\n                >\r\n                    {deleteMode === 'single' && 'Solution '}\r\n                    {deleteMode === 'batch' && `${Solutions} Solutions `}\r\n                    successfuly deleted\r\n                </Notification>,\r\n                {\r\n                    placement: 'top-center',\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ConfirmDialog\r\n            isOpen={deleteMode === 'single' || deleteMode === 'batch'}\r\n            onClose={onDialogClose}\r\n            onRequestClose={onDialogClose}\r\n            type=\"danger\"\r\n            title=\"Delete product\"\r\n            onCancel={onDialogClose}\r\n            onConfirm={onDelete}\r\n            confirmButtonColor=\"red-600\"\r\n        >\r\n            <p>\r\n                Are you sure you want to delete this Solution? All record related\r\n                to this Solution will be deleted as well. This action cannot be\r\n                undone.\r\n            </p>\r\n        </ConfirmDialog>\r\n    )\r\n}\r\n\r\nexport default SolutionDeleteConfirmation\r\n","import React, { useState } from 'react'\r\nimport reducer from './store'\r\nimport { injectReducer } from 'store/index'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport SolutionsTable from './components/SolutionsTable'\r\nimport SolutionsTableTools from './components/SolutionsTableTools'\r\nimport SolutionDeleteConfirmation from './components/SolutionsDeleteConfirmation'\r\nimport { useSelector } from 'react-redux'\r\n\r\ninjectReducer('solutionsList', reducer)\r\n\r\n\r\nconst Solutions = () => {\r\n    const { permissionsList } = useSelector((state) => state.auth.user)\r\n    const [canAdd, setCanAdd] = useState(permissionsList.includes('CATSOLADD'))\r\n    const [canEdit, setCanEdit] = useState(\r\n        permissionsList.includes('CATSOLEDI')\r\n    )\r\n    const [canView, setCanView] = useState(permissionsList.includes('CATSOLVIE'))\r\n    const [canActivate, setCanActivate] = useState(permissionsList.includes('CATSOLDEA'))\r\n    const [canClone, setCanClone] = useState(permissionsList.includes('CATSOLCLO'))\r\n    const [canApprove, setCanApprove] = useState(permissionsList.includes('CATSOLAPP'))\r\n\r\n    const actionPermissions = {\r\n        canAdd,\r\n        canEdit,\r\n        canClone,\r\n        canView,\r\n        canActivate,\r\n        canApprove,\r\n    }\r\n    return (\r\n        <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\r\n            <div className=\"lg:flex items-center justify-between mb-4\">\r\n                <h3 className=\"mb-4 lg:mb-0\">Solutions</h3>\r\n                <SolutionsTableTools actionPermissions={actionPermissions} />\r\n            </div>\r\n            <SolutionsTable actionPermissions={actionPermissions} />\r\n            <SolutionDeleteConfirmation />\r\n        </AdaptableCard>\r\n    )\r\n}\r\n\r\nexport default Solutions\r\n"],"names":["stateSlice","createSlice","name","initialState","selectedRows","selectedRow","deleteMode","reducers","setSelectedRows","state","action","payload","setSelectedRow","addRowItem","currentState","current","includes","removeRowItem","filter","id","setDeleteMode","actions","toggleDeleteConfirmation","combineReducers","data","orderStatusColor","ACTIVE","label","dotClass","textClass","backgroundColor","SUBMITTED","IN_ACTIVE","actionPermissions","useSelector","solutionsList","tableData","pageIndex","pageSize","sort","query","sort_field","total","order","useState","isDeactivate","setDeactivate","row","setRow","tableRef","useRef","dispatch","useDispatch","loading","ItemList","res","totalCount","auth","user","enterAccount","fetchData","password","rememberMe","usernameOrEmail","useCallback","getSolutions","page","size","accId","useEffect","resetSelected","updateOperatorStatus","isStatus","sol_status","apiUpdateSolutionStatus","OpenNotification","ActionColumn","textTheme","useThemeClass","navigate","useNavigate","IconComponent","RiCheckboxCircleFill","RiCloseCircleFill","iconColor","disableIconStyle","color","pointerEvents","canActivate","canAdd","canEdit","canView","canClone","canApprove","className","onClick","mode","style","title","useMemo","columns","header","flex","cell","props","original","accessorKey","sol","dgl_cat_sol_items","length","sol_base_price","sol_desc","ReactHtmlParser","onAllRowSelect","checked","rows","originalRows","map","selectedIds","forEach","push","ref","pagingData","onPaginationChange","newTableData","cloneDeep","setTableData","onSelectChange","value","Number","onSort","sortfield","snakeToCamel","key","onCheckBoxChange","onIndeterminateCheckBoxChange","selectable","isOpen","onClose","fontStyle","fontSize","variant","searchInput","debounceFn","debounce","val","page_no","page_size","unq_id","placeholder","prefix","onChange","e","target","icon","download","block","to","disabled","onDialogClose","onDelete","deleteSolutions","success","deleteSucceed","Solutions","toast","type","duration","placement","onRequestClose","onCancel","onConfirm","confirmButtonColor","injectReducer","reducer","permissionsList","bodyClass"],"sourceRoot":""}