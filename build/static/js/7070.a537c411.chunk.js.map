{"version":3,"file":"static/js/7070.a537c411.chunk.js","mappings":"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","sources":["services/EnterpriseService.js","utils/hooks/useTimeOutMessage.js","views/catalogue/Solutions/components/SolutionAddressInfo.js","views/catalogue/Solutions/components/SolutionBasicDetails.js","views/catalogue/Solutions/components/SolutionDetails.js","views/catalogue/Solutions/components/MasterPermissionBox.js","views/catalogue/Solutions/components/SolutionPreview.js","views/catalogue/Solutions/components/SolutionCreateStep2.js","views/catalogue/Solutions/components/SolutionCreate.js","views/catalogue/Solutions/components/SolutionConfig.js","views/catalogue/Solutions/components/StepControlled.js","views/catalogue/Solutions/components/NewSolutions.js","views/catalogue/Solutions/store/dataSlice.js"],"sourcesContent":["import ApiService from './ApiService'\r\n\r\nexport async function apiGetSalesDashboardData(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/dashboard',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/products',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesProducts(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/products/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesProduct(params) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/product',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiPutSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/products/update',\r\n        method: 'put',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiCreateSalesProduct(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/products/create',\r\n        method: 'post',\r\n        data,\r\n    })\r\n}\r\n\r\n/* export async function apiGetSalesOrders(params) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/orders',\r\n        method: 'get',\r\n        params,\r\n    })\r\n} */\r\n\r\nexport async function apiGetSalesOrders(params) {\r\n\r\n    return ApiService.fetchData({\r\n        //url: `account/enterprise-customers?page_no=${params.pageIndex}&page_size=${params.pageSize}&sort_field=${params.sort.key}`,\r\n        // url: '/sales/orders',\r\n        url: `/account/enterprise-customers`,\r\n\r\n        method: 'get',\r\n        params\r\n    })\r\n}\r\n\r\nexport async function apiDeleteSalesOrders(data) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/orders/delete',\r\n        method: 'delete',\r\n        data,\r\n    })\r\n}\r\n\r\nexport async function apiGetSalesOrderDetails(params) {\r\n    return ApiService.fetchData({\r\n        url: '/enterprise/sales/orders-details',\r\n        method: 'get',\r\n        params,\r\n    })\r\n}\r\n\r\nexport async function apiSubmitEnterprise(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/account/enterprise-customers',\r\n            method: 'post',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        };\r\n\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n}\r\n\r\nexport async function apiUpdateEnterpriseAccStatus(id, status) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/enterprise-customers?id=${id}&cust_status=${status}`,\r\n        method: 'patch',\r\n\r\n    })\r\n}\r\n\r\nexport async function apiUpdateEnterprise(data) {\r\n    try {\r\n        const resp = await ApiService.fetchData({\r\n            url: '/account/enterprise-customers',\r\n            method: 'put',\r\n            data,\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp, // Include the response data if needed\r\n        };\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n\r\n}\r\n\r\nexport async function apiGetParentAccountEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/enterprise-customers/parent/${data.accMnoParentId}`,\r\n        //url: `/account/acc-operators/dropdown/${data.enterAccount}`,    \r\n        method: 'get',\r\n\r\n    })\r\n}\r\n\r\n\r\nexport async function apiGetOperatorAccountEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n        //url: `/account/enterprise-customers/parent/${data.accMnoParentId}`,   \r\n        url: `/account/acc-operators/dropdown/${data.enterAccount}`,\r\n        method: 'get',\r\n\r\n    })\r\n}\r\n\r\n\r\nexport async function apiGetCurrencyEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/currency/unq-id/drop-down/${data.enterAccount}`,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\n\r\n\r\nexport async function apiGetCustomerCatEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n\r\n        url: `/account/cust-cats/unq-id-cust-type/drop-down/${data.enterAccount}/EnterpriseCustomer`,\r\n        method: 'get',\r\n\r\n    })\r\n}\r\n\r\n\r\nexport async function apiGetContractTypeEnterprise(data) {\r\n\r\n    return ApiService.fetchData({\r\n        url: `/account/contract-types/unq-id-acc-type/drop-down/${data.enterAccount}/EnterpriseCustomer`,\r\n        method: 'get',\r\n\r\n    })\r\n}\r\nexport async function apiGetUploadFileTypes(data) {\r\n    return ApiService.fetchData({\r\n        url: `/account/doc-pol?page_no=0&page_size=100&sort_feild=id&unq_id=${data}`,\r\n        method: 'get',\r\n    })\r\n}\r\nexport async function apiUploadFiles(file,loc1, loc2) {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        const resp = await ApiService.fetchData({\r\n            url: `/media/${loc1}/${loc2}`,\r\n            method: 'post',\r\n            data: formData,\r\n            headers:{'Content-Type': 'multipart/form-data'}\r\n        })\r\n        return {\r\n            status: 'success',\r\n            data: resp.data,\r\n        };\r\n    } catch (errors) {\r\n        return {\r\n            status: 'failed',\r\n            message: errors?.response?.data || errors.toString(),\r\n        };\r\n    }\r\n}","import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import React, { useCallback } from 'react'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n} from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport get from 'lodash/get'\r\nimport { countryList } from 'constants/countries.constant'\r\nimport * as Yup from 'yup'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    country: Yup.string().required('Please select country'),\r\n    addressLine1: Yup.string().required('Please enter your address'),\r\n    addressLine2: Yup.string(),\r\n    city: Yup.string().required('Please enter your city'),\r\n    state: Yup.string().required('Please enter your state'),\r\n    zipCode: Yup.string().required('Please enter zip code'),\r\n    sameCorrespondenceAddress: Yup.bool(),\r\n    correspondenceAddress: Yup.object().when('sameCorrespondenceAddress', {\r\n        is: false,\r\n        then: Yup.object().shape({\r\n            country: Yup.string().required('Please select country'),\r\n            addressLine1: Yup.string().required('Please enter your address'),\r\n            addressLine2: Yup.string(),\r\n            city: Yup.string().required('Please enter your city'),\r\n            state: Yup.string().required('Please enter your state'),\r\n            zipCode: Yup.string().required('Please enter zip code'),\r\n        }),\r\n        otherwise: (schema) => schema,\r\n    }),\r\n})\r\n\r\nconst AddressForm = (props) => {\r\n    const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        countryName,\r\n        addressLine1Name,\r\n        addressLine2Name,\r\n        cityName,\r\n        stateName,\r\n        zipCodeName,\r\n    } = props\r\n\r\n    const getError = useCallback(\r\n        (name) => {\r\n            return get(errors, name)\r\n        },\r\n        [errors]\r\n    )\r\n\r\n    const getTouched = useCallback(\r\n        (name) => {\r\n            return get(touched, name)\r\n        },\r\n        [touched]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <div className=\"md:grid grid-cols-2 gap-4 mx-4\">\r\n               \r\n                <FormItem\r\n                    label=\"Address Line 1\"\r\n                    invalid={\r\n                        getError(addressLine1Name) &&\r\n                        getTouched(addressLine1Name)\r\n                    }\r\n                    errorMessage={getError(addressLine1Name)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={addressLine1Name}\r\n                        placeholder=\"Address Line 1\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n\r\n                <FormItem\r\n                    label=\"Address Line 2\"\r\n                    invalid={\r\n                        getError(addressLine2Name) &&\r\n                        getTouched(addressLine2Name)\r\n                    }\r\n                    errorMessage={getError(addressLine2Name)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={addressLine2Name}\r\n                        placeholder=\"Address Line 2\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n            </div>\r\n            <div className=\"md:grid grid-cols-4 gap-4 mx-4\">\r\n              \r\n                <FormItem\r\n                    label=\"City\"\r\n                    invalid={getError(cityName) && getTouched(cityName)}\r\n                    errorMessage={getError(cityName)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={cityName}\r\n                        placeholder=\"City\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n                <FormItem\r\n                    label=\"State\"\r\n                    invalid={getError(stateName) && getTouched(stateName)}\r\n                    errorMessage={getError(stateName)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={stateName}\r\n                        placeholder=\"State\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n                <FormItem\r\n                    label=\"Country\"\r\n                    invalid={getError(countryName) && getTouched(countryName)}\r\n                    errorMessage={getError(countryName)}\r\n                >\r\n                    <Field name={countryName}>\r\n                        {({ field, form }) => (\r\n                            <Select\r\n                                placeholder=\"Country\"\r\n                                field={field}\r\n                                form={form}\r\n                                options={countryList}\r\n                                value={countryList.filter(\r\n                                    (c) => c.value === get(values, countryName)\r\n                                )}\r\n                                onChange={(c) =>\r\n                                    form.setFieldValue(field.name, c.value)\r\n                                }\r\n                            />\r\n                        )}\r\n                    </Field>\r\n                </FormItem>\r\n                <FormItem\r\n                    label=\"Zip Code\"\r\n                    invalid={getError(zipCodeName) && getTouched(zipCodeName)}\r\n                    errorMessage={getError(zipCodeName)}\r\n                >\r\n                    <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        name={zipCodeName}\r\n                        placeholder=\"Zip Code\"\r\n                        component={Input}\r\n                    />\r\n                </FormItem>\r\n            </div>\r\n           \r\n              \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nconst SolutionAddressInfo = ({\r\n    data = {\r\n        country: '',\r\n        addressLine1: '',\r\n        addressLine2: '',\r\n        city: '',\r\n        state: '',\r\n        zipCode: '',\r\n        sameCorrespondenceAddress: true,\r\n        correspondenceAddress: {\r\n            country: '',\r\n            addressLine1: '',\r\n            addressLine2: '',\r\n            city: '',\r\n            state: '',\r\n            zipCode: '',\r\n        },\r\n    },\r\n    onNextChange,\r\n    onBackChange,\r\n    currentStepStatus,\r\n}) => {\r\n    const onNext = (values, setSubmitting) => {\r\n        onNextChange?.(values, 'addressInformation', setSubmitting)\r\n    }\r\n\r\n    const onCheck = (value, field, form) => {\r\n        form.setFieldValue(field.name, value)\r\n    }\r\n\r\n    const onBack = () => {\r\n        onBackChange?.()\r\n    }\r\n\r\n    return (\r\n        <>\r\n             <h3 className=\"mx-4 mb-4 mt-2\">ADDRESS</h3>\r\n            <Formik\r\n                initialValues={data}\r\n                enableReinitialize\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    setTimeout(() => {\r\n                        onNext(values, setSubmitting)\r\n                    }, 1000)\r\n                }}\r\n            >\r\n                {({ values, touched, errors, setFieldValue, isSubmitting }) => {\r\n                    const formProps = { values, touched, errors }\r\n                    return (\r\n                        <Form>\r\n                            <FormContainer>\r\n                               \r\n                                <AddressForm\r\n                                    countryName=\"country\"\r\n                                    addressLine1Name=\"addressLine1\"\r\n                                    addressLine2Name=\"addressLine2\"\r\n                                    cityName=\"city\"\r\n                                    stateName=\"state\"\r\n                                    zipCodeName=\"zipCode\"\r\n                                    {...formProps}\r\n                                />\r\n                              \r\n                            </FormContainer>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SolutionAddressInfo\r\n","import {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n\r\n} from 'components/ui'\r\nimport * as Yup from 'yup'\r\nimport { FormItem, FormContainer, Upload, Dialog } from 'components/ui'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { HiOutlineCloudUpload } from 'react-icons/hi'\r\nimport { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getProductCategorys } from '../store/dataSlice'\r\nimport { useEffect, useState } from 'react'\r\nimport { apiUploadFiles } from 'services/EnterpriseService'\r\nimport CloseButton from 'components/ui/CloseButton'\r\nimport appConfig from 'configs/app.config'\r\nimport { OpenNotification } from 'views/Servicefile'\r\nconst pCategoryOptions = [\r\n    { label: 'GPS TRACKERS', value: 5 }, //need to use this option only\r\n    { label: 'SMART SECURITY SYSTEMS', value: 6 },\r\n    { label: 'SMART MOBILES', value: 7 },\r\n]\r\n\r\n\r\n\r\nconst validatationSchema = Yup.object().shape({\r\n    pCategory: Yup.string().trim().required('Please select category'),\r\n    solTitle: Yup.string().trim().required('Please enter title'),\r\n    solDesc: Yup.string().trim().required('Please enter description'),\r\n    solKeywords: Yup.string().trim().required('Please enter keywords'),\r\n})\r\n\r\n\r\nconst saveFilesInCatalog = 2\r\nconst SolutionBasicDetails = ({ onChange, refId, ...props }) => {\r\n    const productCat = useSelector((state) => state?.solutionsList?.data?.templateProductList)\r\n    const dispatch = useDispatch()\r\n    const { enterAccount, password, rememberMe, usernameOrEmail, user_type, acc_mno_parent_unq_id, acc_user_id } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n    useEffect(() => {\r\n        dispatch(getProductCategorys({\r\n            enterAccount: user_type === 'Provider' ? acc_mno_parent_unq_id : enterAccount,\r\n        }))\r\n    }, [dispatch, enterAccount])\r\n\r\n\r\n    const beforeUpload = async (newFiles, files) => {\r\n        const file = newFiles[0];\r\n        const allowedTypes = ['image/jpeg', 'image/png'];\r\n\r\n        if (!allowedTypes.includes(file.type)) {\r\n            OpenNotification('warning', 'JPG/PNG files are allowed only!')\r\n          return false;\r\n        } \r\n        try { \r\n          const ress = await apiUploadFiles(file, acc_user_id, saveFilesInCatalog); \r\n          return ress;\r\n        } catch (error) {\r\n          console.error('Error during file upload:', error);\r\n          return false;\r\n        }\r\n      };\r\n    const [showContent, setShowContent] = useState(false)\r\n    const [content, setContent] = useState(null)\r\n    const onClickView = (fileInfo) => {\r\n        setShowContent(true)\r\n        setContent(fileInfo)\r\n    }\r\n    const SubmitSolBasicDet = async (values) => {\r\n        if(values.imageFile == ''){\r\n            OpenNotification('warning','Upload file is Mandatory')\r\n            return\r\n        }\r\n     \r\n\r\n        let body = {\r\n            \"acc_id\": enterAccount,\r\n            \"sol_title\": values.solTitle.trim(),\r\n            \"sol_desc\": values.solDesc,\r\n            \"sol_keywords\": values.solKeywords,\r\n            \"sol_text_banner\": values.solTextBanner,\r\n            \"sol_img_url\": values.imageFile,\r\n            \"sol_geo_tag\": \"\",\r\n            \"sol_thumbnail\": \"Sample1.jpg\",\r\n            \"sol_status\": 1,\r\n        }\r\n        let updatedPayload = body\r\n        props.setSolutionState(updatedPayload)\r\n        let dataToStore = props.solutionIntialValues\r\n        dataToStore.basics = values\r\n        props.setSolutionIntialValues(dataToStore)\r\n        props.setStep(props.step + 1)\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <Formik\r\n                innerRef={refId}\r\n                initialValues={props?.solutionIntialValues?.basics}\r\n                validationSchema={validatationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    SubmitSolBasicDet(values)\r\n                }}\r\n            >\r\n                {({ values, touched, handleSubmit, errors, isSubmitting, setFieldValue }) => {\r\n                    return (\r\n                        <Form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                            <FormContainer>\r\n                                <div className='p-2'>\r\n                                    <div className=\"md:grid grid-cols-3 gap-3 mx-4\">\r\n                                        <FormItem\r\n                                            label={<p>Product Category <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                            invalid={\r\n                                                errors.pCategory &&\r\n                                                touched.pCategory\r\n                                            }\r\n                                            errorMessage={errors.pCategory}\r\n                                        >\r\n                                            <Field name=\"pCategory\">\r\n                                                {({ field, form }) => (\r\n                                                    <Select\r\n                                                        placeholder=\"Select Product Category\"\r\n                                                        field={field}\r\n                                                        form={form}\r\n                                                        options={productCat || []}\r\n                                                        value={productCat?.filter(\r\n                                                            (category) =>\r\n                                                                category.value ===\r\n                                                                values.pCategory\r\n                                                        )}\r\n                                                        onChange={(category) =>\r\n                                                            form.setFieldValue(\r\n                                                                field.name,\r\n                                                                category.value\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                )}\r\n                                            </Field>\r\n                                        </FormItem>\r\n                                        <FormItem label={<p>Solution Title <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                            invalid={errors.solTitle && touched.solTitle}\r\n                                            errorMessage={errors.solTitle}\r\n                                        >\r\n                                            <Field\r\n                                                value={values?.solTitle}\r\n                                                type=\"text\"\r\n                                                autoComplete=\"off\"\r\n                                                name=\"solTitle\"\r\n                                                placeholder=\"Enter Solution Title\"\r\n                                                component={Input}\r\n                                            />\r\n                                        </FormItem>\r\n\r\n                                    </div>\r\n                                    <div className=\"md:grid grid-cols-2 gap-3 mx-4\">\r\n                                        <FormItem label={<p>Description <span style={{ color: \"red\" }}>{'*'}</span></p>}\r\n                                            invalid={errors.solDesc && touched.solDesc}\r\n                                            errorMessage={errors.solDesc}\r\n                                        >\r\n                                            <Field name=\"solDesc\"  >\r\n                                                {({ field, form }) => (\r\n                                                    <RichTextEditor\r\n                                                        value={field.value}\r\n                                                        onChange={(val) =>\r\n                                                            form.setFieldValue(field.name, val)\r\n                                                        }\r\n                                                    />\r\n                                                )}\r\n                                            </Field>\r\n                                        </FormItem>\r\n                                    </div>\r\n                                    <div className=\"md:grid grid-cols-2 gap-3 mx-4\">\r\n                                        <FormItem label={<p>Keyword To Search Solution <span style={{ color: \"red\" }}>{'*'}</span></p>}\r\n                                            invalid={errors.solKeywords && touched.solKeywords}\r\n                                            errorMessage={errors.solKeywords}\r\n                                        >\r\n                                            <Field name=\"solKeywords\"  >\r\n                                                {({ field, form }) => (\r\n                                                    <RichTextEditor\r\n                                                        value={field.value}\r\n                                                        onChange={(val) =>\r\n                                                            form.setFieldValue(field.name, val)\r\n                                                        }\r\n                                                    />\r\n                                                )}\r\n                                            </Field>\r\n                                        </FormItem>\r\n                                    </div>\r\n                                    <div className=\"md:grid grid-cols-2 gap-3 mx-4\">\r\n                                        <FormItem label={<p>Add Text Banner </p>}\r\n                                            invalid={errors.solTextBanner && touched.solTextBanner}\r\n                                            errorMessage={errors.solTextBanner}\r\n                                        >\r\n                                            <Field name=\"solTextBanner\"  >\r\n                                                {({ field, form }) => (\r\n                                                    <RichTextEditor\r\n                                                        value={field.value}\r\n                                                        onChange={(val) =>\r\n                                                            form.setFieldValue(field.name, val)\r\n                                                        }\r\n                                                    />\r\n                                                )}\r\n                                            </Field>\r\n                                        </FormItem>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className='p-2'>\r\n\r\n                                    <AdaptableCard>\r\n                                        <h5 className=\"mb-4 mt-2 mx-4\">UPLOAD IMAGE<span style={{ color: 'red' }}>{' *'}</span></h5>\r\n                                        <FormItem label=\"\">\r\n\r\n                                            <Field name=\"imageFile\">\r\n                                                {({ field, form }) => (\r\n                                                    <div className='mx-4'>\r\n                                                        <Upload beforeUpload={beforeUpload} draggable className='border-blue-500 bg-blue-50 w-96 h-36'\r\n                                                            onChange={(updatedFiles, files, uploadRes, filesDetails) => {\r\n                                                                setFieldValue(`imageFile`, uploadRes?.data?.fileUnqId);\r\n                                                            }\r\n                                                            }\r\n                                                        >\r\n                                                            <div className=\"my-10 text-center\">\r\n                                                                <div className=\"text-6xl mb-4 flex justify-center\">\r\n                                                                    <HiOutlineCloudUpload className=\"h-10\" style={{ color: \"#2563eb\" }} />\r\n                                                                </div>\r\n                                                                <p className=\"font-semibold\">\r\n                                                                    <span className=\"text-gray-800 dark:text-white\">\r\n                                                                        Upload Files Here or{' '}\r\n                                                                    </span>\r\n                                                                    <span className=\"text-blue-500\">\r\n                                                                        browse\r\n                                                                    </span>\r\n                                                                </p>\r\n                                                                <p className=\"mt-1 opacity-60 dark:text-white\">\r\n                                                                    JPG/PNG are allowed\r\n                                                                </p>\r\n                                                            </div>\r\n                                                        </Upload>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Field>\r\n                                            {values?.imageFile &&\r\n                                                <div className=\"upload-file cursor-pointer\" >\r\n                                                    <div className=\"upload-file-info\" onClick={() => onClickView(values?.imageFile)}>\r\n                                                        <h6 className=\"upload-file-name\">{values?.imageFile.substring(0, 15)}</h6>\r\n                                                    </div>\r\n\r\n                                                    <CloseButton\r\n                                                        className=\"upload-file-remove \"\r\n                                                        onClick={() => {\r\n                                                            setFieldValue(`imageFile`, '');\r\n                                                        }}\r\n                                                    />\r\n                                                </div>}\r\n                                        </FormItem>\r\n                                    </AdaptableCard>\r\n                                </div>\r\n                            </FormContainer>\r\n\r\n\r\n\r\n                            <Dialog isOpen={showContent}\r\n                                onClose={() => setShowContent(false)}>\r\n                                <div className='p-5'>\r\n                                    <img src={`${appConfig.apiPrefix}/media/uniqid/${content}`} alt=\"Content\" />\r\n                                    <Button onClick={() => window.open(`${appConfig.apiPrefix}/media/uniqid/${content}`, '_blank')} className='mt-2' variant='solid'>Download</Button>\r\n                                </div>\r\n\r\n                            </Dialog>\r\n\r\n\r\n                        </Form>\r\n\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SolutionBasicDetails\r\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport SolutionAccountInfo from './SolutionAccountInfo'\r\nimport SolutionContactInfo from './SolutionContactInfo'\r\nimport SolutionAddressInfo from './SolutionAddressInfo'\r\nimport SolutionUploadFiles from './SolutionUploadFiles'\r\nimport SolutionBillingInfo from './SolutionBillingInfo'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport SolutionBasicDetails from './SolutionBasicDetails'\r\nimport SolutionBasicDetailsOther from './SolutionBasicDetailsOther'\r\n\r\nconst SolutionDetails = forwardRef((props, ref) => {\r\n\r\n    const [formData, setFormData] = useState({\r\n        SolutionBasicDetails: { values: null, validated: false },\r\n        \r\n    })\r\n    const solutionBasicDetailsref = React.useRef()\r\n    \r\n\r\n    React.useEffect(() => {\r\n        if (\r\n          formData.SolutionBasicDetails.validated\r\n          //&& formData.EnterpriseContactInfo.validated\r\n        ) {\r\n          alert('Ready to save')\r\n        }\r\n      }, [formData])\r\n\r\n    async function handleSubmit() {\r\n     \r\n        await solutionBasicDetailsref.current.submitForm()\r\n        \r\n      \r\n    }\r\n\r\n    function handleChangeSolutionBasicDetails(data) {\r\n        setFormData({ ...formData, SolutionBasicDetails: data })\r\n    }\r\n   \r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            handleSubmitFromParent() {\r\n                handleSubmit()\r\n            },\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"mx-2 mb-4 mt-2\">Basic Details</h3>\r\n            <div className=\"p-3\"  style={{backgroundColor:\"#F5F5F5\"}}>\r\n                <AdaptableCard className=\"h-full m-2\" bodyClass=\"h-full\"   >\r\n                    <SolutionBasicDetails\r\n                        handleSubmit={handleSubmit}\r\n                        onChange={handleChangeSolutionBasicDetails}\r\n                        refId={solutionBasicDetailsref}\r\n                        solutionState={props.solutionState}\r\n                        setSolutionState={props.setSolutionState}\r\n                        solutionIntialValues={props.solutionIntialValues}\r\n                        setSolutionIntialValues={props.setSolutionIntialValues}\r\n                        step={props.step}\r\n                        setStep={props.setStep}\r\n                    />\r\n                </AdaptableCard>\r\n                {/* <AdaptableCard\r\n                   className=\"h-full m-2\"\r\n                    bodyClass=\"h-full\"\r\n                    \r\n                >\r\n                    <SolutionBasicDetailsOther\r\n                      \r\n                        onChange={handleChangeSolutionBasicDetailsOther}\r\n                        refId={solutionBasicDetailsOtherref}\r\n                        solutionState={props.solutionState}\r\n                        setSolutionState={props.setSolutionState}\r\n                        step={props.step}\r\n                        setStep={props.setStep}\r\n                        solutionIntialValues={props.solutionIntialValues}\r\n                        setSolutionIntialValues={props.setSolutionIntialValues}\r\n                    />\r\n                </AdaptableCard>  */}\r\n            </div>\r\n        \r\n        </>\r\n    )\r\n})\r\n\r\nexport default SolutionDetails\r\n","import { Card, Checkbox } from 'components/ui'\r\nimport React from 'react'\r\n\r\nvar randomColor = Math.floor(Math.random() * 16777215).toString(16)\r\n\r\nfunction MasterPermissionBox() {\r\n    return (\r\n        <>\r\n            <div className=\"bg-gray-50 p-5\">\r\n                <div className=\"md:grid grid-cols-3 \">\r\n                    <Card\r\n                        className=\"rounded-none border-t-4 border-indigo-500 border-r-0 border-b-0 border-l-0\"\r\n                        \r\n                    >\r\n                        <div className=\"flex justify-between\">\r\n                            <p className=\"text-base text-black font-bold\">\r\n                                Account Management\r\n                            </p>\r\n                            <div className=\"flex\">\r\n                                <Checkbox className=\"\" />\r\n                                <p className='text-base font-medium'>Select All</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex flex-row-reverse gap-4 mt-6 \" >\r\n                            <p className='text-base font-medium'>Approve</p>\r\n                            <p className='text-base font-medium'>Deactivate</p>\r\n                            <p className='text-base font-medium'>Edit</p>\r\n                            <p className='text-base font-medium'>Add</p>\r\n                            <p className='text-base font-medium'>View</p>\r\n                        </div>\r\n                        <div className='flex mt-5'>\r\n                            <p className='mr-6'>Operaters</p>\r\n                            <Checkbox className=\"mx-3\"/>\r\n                            <Checkbox className=\"mx-4\"/>\r\n                            <Checkbox className=\"mx-4\"/>\r\n                            <Checkbox className=\"mx-6 mr-8\"/>\r\n                            <Checkbox className=\"mx-6 ml-8\"/>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MasterPermissionBox\r\n","import { Card } from 'components/ui'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { MdModeEdit } from 'react-icons/md'\r\nimport GetDropdownLabel from 'views/Servicefile'\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nconst proCategoryOptions = [\r\n    { label: 'Product', value: 'P' },\r\n    { label: 'Data Plan', value: 'D' },\r\n    { label: 'Service Plan', value: 'S' },\r\n]\r\n\r\n\r\nfunction SolutionPreview({ solutionIntialValues, setStep, solutionState }) {\r\n    const productCat = useSelector((state) => state?.solutionsList?.data?.templateProductList)\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"mx-4 mb-4 mt-2\">Preview</h3>\r\n\r\n            <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-1 mb-4\">\r\n                    <h6 className=\"mx-2 mb-4 mt-1 font-bold\">\r\n                        SOLUTION CREATION{' '}\r\n                    </h6>\r\n                    <div className=\" text-base text-black font-bold flex justify-end\">\r\n                        <Link onClick={() => { setStep(0) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                <div className=\"md:grid grid-cols-7 mt-4\">\r\n                    <div className=\"col-span-1 md:gird mx-2\">\r\n                        <div className=\"md:grid grid-cols-1 text-base text-black font-bold decoration-2 mb-2\">\r\n                            Product Category\r\n                        </div>\r\n                        <div className=\"col-span-6 md:grid grid-cols-1 gap-2\">\r\n                            <p className=\"mt-2 text-base\">{GetDropdownLabel(solutionIntialValues?.basics?.pCategory, productCat)}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"text-base text-black font-bold decoration-2 mb-2\">\r\n                            Solution Title\r\n                        </div>\r\n                        <div className=\"md:grid grid-cols-1 gap-2\">\r\n                            <p className=\"mt-2 text-base\">{solutionIntialValues.basics.solTitle}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-span-1 md:gird mx-2\">\r\n                        <div className=\"text-base text-black font-bold decoration-2 mb-2\">\r\n                            Description\r\n                        </div>\r\n                        <div className=\"md:grid grid-cols-1 gap-2\">\r\n                            <p className=\"mt-2 text-base\">\r\n                                {solutionIntialValues.basics.solDesc.replace(/<[^>]*>?/gm, '')}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {solutionIntialValues?.solCreate?.initialValues.map((element, index) => {\r\n                    return (\r\n                        GetDropdownLabel(element?.cItemType, element?.chooseItems) &&  <>\r\n                            <div className=\"md:grid grid-cols-7 mt-5\">\r\n\r\n                                <div className=\"col-span-1 md:gird mx-2\">\r\n                                    <div className=\"text-base text-black font-bold decoration-2 mb-2\">\r\n                                        Item Type\r\n                                    </div>\r\n                                    <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                        <p className=\"mt-2 text-base\">{GetDropdownLabel(element?.solItemType, proCategoryOptions)}</p>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <div className=\"text-base text-black font-bold decoration-2 mb-2\">\r\n                                        Item\r\n                                    </div>\r\n                                    <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                        <p className=\"mt-2 text-base\">{GetDropdownLabel(element?.cItemType, element?.chooseItems)}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{marginLeft:150}}>\r\n\r\n                                {element?.solItems?.map((vnt, index) => {\r\n                                    return (vnt?.solPrice && <div className=\"md:grid grid-cols-7 mt-5\">\r\n\r\n                                        <div className=\"col-span-1 md:gird mx-2\">\r\n                                            <div className=\"text-base text-black font-bold decoration-2 mb-2\">\r\n                                                Varient\r\n                                            </div>\r\n                                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                                <p className=\"mt-2 text-base\">{GetDropdownLabel(vnt?.solVariant, element?.chooseVarients)}</p>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            <div className=\"text-base text-black font-bold decoration-2 mb-2\">\r\n                                                Price in USD\r\n                                            </div>\r\n                                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                                <p className=\"mt-2 text-base\">{vnt?.solPrice}</p>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <div className=\"text-base text-black font-bold decoration-2 mb-2\">\r\n                                                Discount\r\n                                            </div>\r\n                                            <div className=\"md:grid grid-cols-1 gap-2\">\r\n                                                <p className=\"mt-2 text-base\">{vnt?.solDiscount}</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>)\r\n\r\n                                })}\r\n                            </div>\r\n\r\n\r\n                        </>\r\n\r\n                    )\r\n\r\n                })}\r\n\r\n\r\n\r\n\r\n            </Card>\r\n            {/* <Card className=\"mx-3 mb-4 mt-1\">\r\n                <div className=\"md:grid grid-cols-2 mb-4\">\r\n                    <h6 className=\"mx-2 mb-4 mt-1 font-bold\">CONFIG DETAILS</h6>\r\n                    <div className=\" text-base text-black font-bold flex justify-end\">\r\n                        <Link onClick={() => { setStep(0) }} >\r\n                            <div className='flex'>\r\n                                <MdModeEdit className=\"mt-1\" />\r\n                                <p className='ml-2'>EDIT</p>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                <div className=\"md:grid grid-cols-6\">\r\n                    <div className=\"col-span-2 md:gird mx-2\">\r\n                        <div className=\"text-base text-black font-bold  decoration-2 mb-2\">\r\n                            Title:\r\n                        </div>\r\n                        <div className=\"col-span-6 md:grid grid-cols-2 gap-2\">\r\n                            <p className=\"mt-2 text-base\">Config ABC</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <h5 className=\"mx-2 mb-4 mt-4 font-bold\">IF</h5>\r\n                <div className=\"md:grid grid-cols-1\">\r\n                    <div className=\"md:grid grid-cols-7\">\r\n                        <div className=\"text-base text-black mb-2\">1.</div>\r\n                        <div className=\"grid-cols-1 text-base text-black mb-2\">\r\n                            Customer Type\r\n                        </div>\r\n                        <div className=\"grid-cols-1 text-base text-black mb-2\">\r\n                            Greater Than or Equal to\r\n                        </div>\r\n                        <div className=\"grid-cols-1 text-base text-black mb-2\">\r\n                            10000\r\n                        </div>\r\n                        <div className=\"grid-cols-1 bold text-base text-black font-bold  decoration-2 mb-2\">\r\n                            AND\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"md:grid grid-cols-7\">\r\n                        <div className=\"text-base text-black mb-2\">2.</div>\r\n                        <div className=\"grid-cols-1 text-base text-black mb-2\">\r\n                            Customer Type\r\n                        </div>\r\n                        <div className=\"grid-cols-1 text-base text-black mb-2\">\r\n                            Greater Than or Equal to\r\n                        </div>\r\n                        <div className=\"grid-cols-1 text-base text-black mb-2\">\r\n                            10000\r\n                        </div>\r\n                        <div className=\"grid-cols-1 bold text-base text-black font-bold  decoration-2 mb-2\"></div>\r\n                    </div>\r\n                </div>\r\n                <h5 className=\"mx-2 mb-4 mt-1 font-bold\">THEN</h5>\r\n                <div className=\"md:grid grid-cols-2\">\r\n                    <div className=\"md:grid grid-cols-4\">\r\n                        <div className=\"text-base text-black mb-2\">1.</div>\r\n                        <div className=\"grid-cols-1 text-base text-black mb-2\">\r\n                            Price\r\n                        </div>\r\n                        <div className=\"grid-cols-1 text-base text-black mb-2\">\r\n                            Equal to\r\n                        </div>\r\n                        <div className=\"grid-cols-1 text-base text-black mb-2\">\r\n                            10000\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SolutionPreview\r\n","import React, { useEffect, useState } from 'react'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport { Field, FieldArray, Form, Formik } from 'formik'\r\nimport {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Checkbox,\r\n    Radio,\r\n    Dialog,\r\n    Alert,\r\n} from 'components/ui'\r\nimport SolutionBasicDetailsOther from './SolutionBasicDetailsOther'\r\nimport { HiMinus, HiPlus } from 'react-icons/hi'\r\nimport { BsFillPlusCircleFill } from 'react-icons/bs'\r\nimport * as Yup from 'yup'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getItemsByItemTypeD, getItemsByItemTypeP, getItemsByItemTypeS, getVarientsByItem } from '../store/dataSlice'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { apiGetVarientsByItem } from 'services/SolutionsService'\r\n\r\nconst proCategoryOptions = [\r\n    { label: 'Product', value: 'P' },\r\n    { label: 'Data Plan', value: 'D' },\r\n    { label: 'Service Plan', value: 'S' },\r\n]\r\n\r\n\r\nconst emiOptions = [\r\n    { label: '3', value: 3 },\r\n    { label: '6', value: 6 },\r\n]\r\n\r\n\r\nconst validatationSchema = Yup.object().shape({\r\n    initialValues: Yup.array().of(\r\n        Yup.object().shape({\r\n            solItemType: Yup.string().required('Item Type is required'),\r\n            cItemType: Yup.string().required('Item  is required'),\r\n\r\n            solItems: Yup.array().of(\r\n                Yup.object().shape({\r\n                    solVariant: Yup.string().required('Variant is required'),\r\n                    solPrice: Yup.string().required('Variant Price is required'),\r\n                }),\r\n\r\n            ),\r\n        })\r\n\r\n    ),\r\n});\r\nconst SolutionCreateStep2 = ({ onChange, refId, ...props }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [addNewFields, setAddNewField] = useState(false)\r\n    const [provApplicablePopup, setProvApplicablePopup] = useState({ bool: false, field: '', index: '' })\r\n    const { enterAccount, password, rememberMe, usernameOrEmail } = useSelector(\r\n        (state) => state.auth.user\r\n    )\r\n    const itemsByItemTypeP = useSelector((state) => state?.solutionsList?.data?.itemsByItemTypeP)\r\n    const itemsByItemTypeD = useSelector((state) => state?.solutionsList?.data?.itemsByItemTypeD)\r\n    const itemsByItemTypeS = useSelector((state) => state?.solutionsList?.data?.itemsByItemTypeS)\r\n\r\n    const varientsByItem = useSelector((state) => state?.solutionsList?.data?.varients)\r\n    const [varients, setVarients] = useState([])\r\n    const [solMessage, setSolMessage] = useTimeOutMessage()\r\n\r\n    const SubmitData = (values) => {\r\n        let dataToStore = props.solutionIntialValues\r\n        dataToStore.solCreate.initialValues = values.initialValues\r\n        props.setSolutionIntialValues(dataToStore)\r\n        let body = {\r\n            \"dgl_rel_prod_cat_ids\": [{\r\n                \"rel_prod_cat_id\": props?.solutionIntialValues?.basics?.pCategory,\r\n                \"prod_cat_status\": 0\r\n            },],\r\n            \"dgl_cat_sol_items\": [\r\n                {\r\n\r\n                    \"sol_display_item_var_price\": values.solPrice,\r\n                    \"sol_item_parent_item\": values.solParentVariant,\r\n                    \"sol_item_is_dep\": true,\r\n                    \"is_paid_provider\": false,\r\n                    \"dgl_cat_sol_info\": null,\r\n                    \"item\": {\r\n                        \"id\": values.cItemType\r\n                    },\r\n                    \"item_var\": {\r\n                        \"id\": values.solVariant\r\n                    }\r\n                },\r\n            ],\r\n            \"dgl_cat_sol_configs\": [{\r\n                \"sol_config_title\": \"SolConfig3\",\r\n                \"sol_config_details\": \"json string3\"\r\n            }]\r\n        }\r\n        let datq = { ...props.solutionState, ...body }\r\n        props.setSolutionState(datq)\r\n        props.setStep(props.step + 1)\r\n    }\r\n\r\n    const onCheck = (value, field, form, values, solIndex) => {\r\n        form.setFieldValue(field.name, value)\r\n    }\r\n\r\n    const onCheckPay = (form) => {\r\n        form.setFieldValue(provApplicablePopup.field, true)\r\n    }\r\n\r\n    const onChangeEmidd = (value, form, setFieldValue, values, solIndex, emiIndex, field) => {\r\n        setFieldValue(field, value)\r\n    }\r\n\r\n    const onClickAddNewField = () => {\r\n        setAddNewField(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getItemsByItemTypeP({ catId: props?.solutionIntialValues?.basics?.pCategory, itemType: \"P\" }))\r\n        dispatch(getItemsByItemTypeD({ catId: props?.solutionIntialValues?.basics?.pCategory, itemType: \"D\" }))\r\n        dispatch(getItemsByItemTypeS({ catId: props?.solutionIntialValues?.basics?.pCategory, itemType: \"S\" }))\r\n    }, [])\r\n\r\n    const onClickDeleteNewField = () => {\r\n        setAddNewField(false)\r\n    }\r\n    const onChangeItemType = (form, field, solItemType, solIndex, values) => {\r\n        form.setFieldValue(field.name, solItemType.value)\r\n\r\n    }\r\n    const onChangeItem = async (form, field, cItemType, values, solIndex) => {\r\n\r\n        let data = getOptionsForChooseItem(values, solIndex)\r\n        form.setFieldValue(\r\n            `initialValues[${solIndex}].chooseItems`, data\r\n\r\n        )\r\n        form.setFieldValue(\r\n            field.name,\r\n            cItemType.value\r\n        )\r\n        const response = await apiGetVarientsByItem(cItemType.value)\r\n        let ddValues = []\r\n        if (response.status === 'success') {\r\n            ddValues = response.data.data.response.map((product) => (\r\n                {\r\n                    value: product.id,\r\n                    label: product.item_var_title,\r\n                }\r\n            ));\r\n        }\r\n\r\n        form.setFieldValue(\r\n            `initialValues[${solIndex}].chooseVarients`,\r\n            ddValues\r\n        )\r\n        // form.setFieldValue(\r\n        //     `initialValues[${solIndex}].itemPrice`,\r\n        //     response?.data?.data?.response[0]?.var_def_price\r\n        // )\r\n        // form.setFieldValue(\r\n        //     `initialValues[${solIndex}].solItems`,\r\n        //     [{ solVariant: \"\", solParentVariant: \"\", solPrice: response?.data?.data?.response[0]?.var_def_price, solDiscount: \"\" }]\r\n        // )\r\n        form.setFieldValue(\r\n            `initialValues[${solIndex}].solItems`,\r\n            [{ solVariant: \"\", solParentVariant: \"\", solPrice: \"\", solDiscount: \"\", isDep:true, defaultSolPrice:\"\" }]\r\n        )\r\n    }\r\n\r\n    const onChangeVarient = async (form, field, cItem, values, solIndex, index, ddList) => {\r\n        let flag = values?.initialValues[solIndex]?.solItems?.some(item => item.solVariant === cItem.value)\r\n        if (!flag) {\r\n            form.setFieldValue(field.name, cItem.value)\r\n            const response = await apiGetVarientsByItem(values.initialValues[solIndex].cItemType)\r\n            let priceDefault\r\n            response?.data?.data?.response?.map((e, ind) => {\r\n                if (e.id == cItem.value) {\r\n                    priceDefault = e.var_def_price\r\n                }\r\n            })\r\n            form.setFieldValue(\r\n                `initialValues[${solIndex}].solItems[${index}].defaultSolPrice`,\r\n                Number(priceDefault)\r\n            )\r\n            form.setFieldValue(\r\n                `initialValues[${solIndex}].solItems[${index}].solPrice`,\r\n                Number(priceDefault)\r\n            )\r\n            form.setFieldValue(\r\n                `initialValues[${solIndex}].solItems[${index}].solDiscount`,\r\n                0\r\n            )\r\n        }\r\n    }\r\n\r\n    const onChangeVarientPrice = (field, form ,index, solIndex, e , values) =>{\r\n        form.setFieldValue(\r\n            `initialValues[${solIndex}].solItems[${index}].solPrice`,\r\n            e.target.value\r\n        )\r\n        form.setFieldValue(\r\n            `initialValues[${solIndex}].solItems[${index}].solDiscount`,\r\n           (-((values?.initialValues[solIndex]?.solItems[index]?.defaultSolPrice - Number(e.target.value)) / 100 )*100)\r\n        )\r\n    }\r\n\r\n    const getOptionsForChooseItem = (values, solIndex) => {\r\n        if (values.initialValues[solIndex].solItemType == \"P\") {\r\n            return itemsByItemTypeP\r\n        } else if (values.initialValues[solIndex].solItemType == \"D\") {\r\n            return itemsByItemTypeD\r\n        } else if (values.initialValues[solIndex].solItemType == \"S\") {\r\n            return itemsByItemTypeS\r\n        } else {\r\n            return []\r\n        }\r\n\r\n    }\r\n\r\n    const onChangeDepRadio = (e, values, solIndex, index, form, field) => {\r\n        form.setFieldValue(field.name, true)\r\n        values?.initialValues[solIndex]?.solItems?.map((f, index2) => {\r\n            if (index != index2) {\r\n                form.setFieldValue(`initialValues[${solIndex}].solItems[${index2}].isDep`, false)\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bg-gray-50 p-5\" style={{ backgroundColor: \"#f5f5f5\" }}>\r\n                <Formik\r\n                    innerRef={refId}\r\n                    initialValues={props.solutionIntialValues.solCreate}\r\n                    validationSchema={validatationSchema}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        setSubmitting(true)\r\n                        SubmitData(values)\r\n                    }}\r\n                >\r\n                    {({ values, touched, errors, isSubmitting, setFieldValue }) => {\r\n                        return (\r\n                            <Form>\r\n                                <FormContainer>\r\n                                    <FieldArray name='initialValues'>\r\n                                        {({ push: pushSol, remove: removeSol }) => (\r\n                                            <div>\r\n                                                {values.initialValues?.map((solItem, solIndex) => {\r\n                                                    return (\r\n                                                        <>\r\n                                                            <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider>\r\n                                                                <div className='md:grid grid-cols-3 gap-6 mx-4 mt-4'>\r\n                                                                    <FormItem\r\n                                                                        label={<p>Choose Item Type <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                                    >\r\n                                                                        <Field name={`initialValues[${solIndex}].solItemType`}>\r\n                                                                            {({ field, form }) => (\r\n                                                                                <Select placeholder=\"Select Item Type\" field={field} form={form}\r\n                                                                                    options={proCategoryOptions}\r\n                                                                                    value={proCategoryOptions?.filter((solItemType) => solItemType.value === values.initialValues[solIndex].solItemType)}\r\n                                                                                    onChange={(solItemType) => onChangeItemType(form, field, solItemType, solIndex, values)}\r\n                                                                                />\r\n                                                                            )}\r\n                                                                        </Field>\r\n\r\n                                                                        {errors.initialValues?.[solIndex]?.solItemType && touched.initialValues?.[solIndex]?.solItemType && (\r\n                                                                            <div className=\"error-message\">{errors.initialValues[solIndex].solItemType}</div>\r\n                                                                        )}\r\n                                                                    </FormItem>\r\n                                                                    <FormItem\r\n                                                                        label={<p>Choose Item <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                                        invalid={errors.cItemType && touched.cItemType}\r\n                                                                        errorMessage={errors.cItemType}\r\n                                                                    >\r\n                                                                        <Field name={`initialValues[${solIndex}].cItemType`}>\r\n                                                                            {({ field, form }) => (\r\n                                                                                <Select placeholder=\"Select Item\" field={field} form={form}\r\n                                                                                    options={getOptionsForChooseItem(values, solIndex)}\r\n                                                                                    value={getOptionsForChooseItem(values, solIndex)?.filter((cItemType) => cItemType.value === values.initialValues[solIndex].cItemType)}\r\n                                                                                    onChange={(cItemType) => onChangeItem(form, field, cItemType, values, solIndex)}\r\n                                                                                />\r\n                                                                            )}\r\n                                                                        </Field>\r\n                                                                        {errors.initialValues?.[solIndex]?.cItemType && touched.initialValues?.[solIndex]?.cItemType && (\r\n                                                                            <div className=\"error-message\">{errors.initialValues[solIndex].cItemType}</div>\r\n                                                                        )}\r\n                                                                    </FormItem>\r\n                                                                </div>\r\n                                                                {values?.initialValues[solIndex]?.cItemType && <FieldArray name={`initialValues[${solIndex}].solItems`}>\r\n                                                                    {({ push, remove }) => (\r\n                                                                        <div>\r\n                                                                            {values.initialValues[solIndex]?.solItems?.map((item, index) => {\r\n                                                                                return (\r\n                                                                                    <>\r\n                                                                                        <div className=\"md:grid grid-cols-6 gap-6 mx-4 mt-4\">\r\n                                                                                            <div className='flex col-start-1 col-end-3'>\r\n                                                                                                <FormItem className='w-24' style={{ paddingTop: '35%' }} >\r\n                                                                                                    <Field name={`initialValues[${solIndex}].solItems[${index}].isDep`}>\r\n\r\n                                                                                                        {({ field, form }) => (\r\n                                                                                                            <Radio style={{ marginRight: \"-100px\" }} value={`initialValues[${solIndex}].solItems[${index}].isDep`}\r\n                                                                                                                id={`initialValues[${solIndex}].solItems[${index}].isDep`}\r\n                                                                                                                key={`initialValues[${solIndex}].solItems[${index}].isDep`}\r\n                                                                                                                checked={values.initialValues[solIndex].solItems[index].isDep}\r\n                                                                                                                onChange={(e) => onChangeDepRadio(e, values, solIndex, index, form, field)}\r\n                                                                                                            >\r\n                                                                                                            </Radio>\r\n                                                                                                        )}\r\n                                                                                                    </Field>\r\n\r\n                                                                                                </FormItem>\r\n                                                                                                <FormItem className='w-44'\r\n                                                                                                    label={<p>Choose Variant <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                                                                >\r\n                                                                                                    <Field name={`initialValues[${solIndex}].solItems[${index}].solVariant`}>\r\n                                                                                                        {({ field, form }) => (\r\n                                                                                                            <Select\r\n                                                                                                                placeholder=\"Select variant\" field={field} form={form}\r\n                                                                                                                // options={varients || []}\r\n                                                                                                                options={values.initialValues[solIndex]?.chooseVarients || []}\r\n\r\n                                                                                                                value={values.initialValues[solIndex]?.chooseVarients?.filter((cItem) => cItem.value === values.initialValues[solIndex]?.solItems[index].solVariant)}\r\n                                                                                                                onChange={(cItem) => onChangeVarient(form, field, cItem, values, solIndex, index, values.initialValues[solIndex]?.chooseVarients)}\r\n                                                                                                            />\r\n                                                                                                        )}\r\n                                                                                                    </Field>\r\n\r\n                                                                                                    {errors.initialValues?.[solIndex]?.solItems?.[index]?.solVariant && touched.initialValues?.[solIndex]?.solItems?.[index]?.solVariant && (\r\n                                                                                                        <div style={{ color: 'red' }}>{errors.initialValues[solIndex].solItems[index].solVariant}</div>\r\n                                                                                                    )}\r\n                                                                                                </FormItem>\r\n                                                                                            </div>\r\n                                                                                            {/* <FormItem className='col-start-2 col-end-3 w-44'\r\n                                                                                                    label={<p className='whitespace-nowrap'>Applicable Parent Variant <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                                                                    invalid={errors.solParentVariant && touched.solParentVariant}\r\n                                                                                                    errorMessage={errors.solParentVariant}\r\n                                                                                                >\r\n                                                                                                    <Field name={`initialValues[${solIndex}].solItems[${index}].solParentVariant`}>\r\n                                                                                                        {({ field, form }) => (\r\n                                                                                                            <Select isDisabled={true} placeholder=\"Select\" field={field} form={form} options={values.initialValues[solIndex]?.chooseVarients || []}\r\n                                                                                                                value={values.initialValues[solIndex]?.chooseVarients.filter((cItem) => cItem.value === values.initialValues[solIndex]?.solItems[index].solParentVariant)}\r\n                                                                                                                onChange={(cItem) => form.setFieldValue(field.name, cItem.value)}\r\n                                                                                                            />\r\n                                                                                                        )}\r\n                                                                                                    </Field>\r\n                                                                                                </FormItem> */}\r\n\r\n\r\n                                                                                            {/* <FormItem className='ml-2 w-40' label={<p>Price in USD <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                                                            // errorMessage={errors.solPrice}\r\n                                                                                            >\r\n                                                                                                <Field type=\"number\" autoComplete=\"off\" placeholder=\"Enter Price\" component={Input}\r\n                                                                                                    name={`initialValues[${solIndex}].solItems[${index}].solPrice`} />\r\n\r\n                                                                                                {errors.initialValues?.[solIndex]?.solItems?.[index]?.solPrice && touched.initialValues?.[solIndex]?.solItems?.[index]?.solPrice && (\r\n                                                                                                    <div style={{color:'red'}}>{errors.initialValues[solIndex].solItems[index].solPrice}</div>\r\n                                                                                                )}\r\n                                                                                            </FormItem> */}\r\n\r\n                                                                                            <FormItem className='ml-2 w-40' label={<p>Price in USD <span style={{ color: 'red' }}>{'*'}</span></p>}>\r\n                                                                                                <Field name={`initialValues[${solIndex}].solItems[${index}].solPrice`}>\r\n                                                                                                    {({ field, form }) => (\r\n                                                                                                       <Input\r\n                                                                                                       placeholder=\"Price\"\r\n                                                                                                       value = {values?.initialValues[solIndex]?.solItems[index]?.solPrice}\r\n                                                                                                       onChange={(e)=>onChangeVarientPrice(field, form ,index, solIndex,e,values)}\r\n                                                                                                   />\r\n                                                                                                    )}\r\n                                                                                                </Field>\r\n\r\n                                                                                                {errors.initialValues?.[solIndex]?.solItems?.[index]?.solPrice && touched.initialValues?.[solIndex]?.solItems?.[index]?.solPrice && (\r\n                                                                                                    <div style={{color:'red'}}>{errors.initialValues[solIndex].solItems[index].solPrice}</div>\r\n                                                                                                )}\r\n                                                                                            </FormItem>\r\n\r\n\r\n\r\n\r\n                                                                                            <FormItem label=\"Discount\">\r\n                                                                                                <Field type=\"text\" disabled autoComplete=\"off\" placeholder=\"Enter Price\" component={Input}\r\n                                                                                                    name={`initialValues[${solIndex}].solItems[${index}].solDiscount`} suffix={'%'} />\r\n                                                                                            </FormItem>\r\n                                                                                            <div className=\"mt-6\">\r\n                                                                                                <Button className='border-cyan-500' shape=\"circle\" size=\"md\" icon={<HiPlus />} type={'button'}\r\n                                                                                                    onClick={() => push({ solVariant: \"\", solParentVariant: \"\", solPrice: values.initialValues[solIndex].itemPrice, solDiscount: \"\", isDep: '' })} />\r\n                                                                                                {values.initialValues[solIndex].solItems.length > 1 &&\r\n                                                                                                    <Button className='ml-4 border-red-500' shape=\"circle\" size=\"md\" icon={<HiMinus />} type={'button'}\r\n                                                                                                        onClick={() => remove(index)} />}\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                                    </>\r\n                                                                                )\r\n                                                                            })}\r\n                                                                        </div>\r\n                                                                    )}\r\n                                                                </FieldArray>}\r\n                                                                {/* <div className=\"md:grid grid-cols-1 gap-6 mx-4 mt-4\">\r\n                                                                    <FormItem label=\"Is Payement to Provider applicable\">\r\n                                                                        <Field name={`initialValues[${solIndex}].paymentProvAvailable`}>\r\n                                                                            {({ field, form }) => (\r\n                                                                                <>\r\n                                                                                    <Checkbox\r\n                                                                                        disabled\r\n                                                                                        checked={values?.initialValues[solIndex]?.paymentProvAvailable}\r\n                                                                                        // onChange={e => setProvApplicablePopup({bool : true , field : `initialValues[${solIndex}]?.paymentProvAvailable`, index:solIndex, value:values.initialValues[solIndex]?.paymentProvAvailable})}\r\n                                                                                        onChange={e => onCheck(e, field, form, setFieldValue, values, solIndex)}\r\n                                                                                    />\r\n                                                                                    <Dialog isOpen={provApplicablePopup.bool} onClose={() => setProvApplicablePopup({ bool: false, field: '', index: '' })}>\r\n                                                                                        <div>\r\n                                                                                            <h5 className=\"pb-2 border-b-2\">Split Payment Confirmation</h5>\r\n                                                                                            <div className=\"mt-4\">\r\n                                                                                                <label>Are you sure you want to {values?.initialValues[solIndex]?.paymentProvAvailable ? 'deactivate' : 'activate'} this Split Payment</label>\r\n                                                                                            </div>\r\n                                                                                            <div className=\"mt-8 flex gap-4 justify-end \">\r\n                                                                                                <Button onClick={() => setProvApplicablePopup({ bool: false, field: '', index: '' })}>No</Button>\r\n                                                                                                <Button\r\n                                                                                                    onClick={() => onCheckPay(form)}\r\n                                                                                                    variant=\"solid\"\r\n                                                                                                >\r\n                                                                                                    Yes\r\n                                                                                                </Button>\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                                    </Dialog>\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </Field>\r\n                                                                    </FormItem>\r\n                                                                    <div className=\"md:grid grid-cols-1 gap-6\">\r\n                                                                        <FormItem label=\"EMI\">\r\n                                                                            <Field name={`initialValues[${solIndex}].emiCheck`}>\r\n                                                                                {({ field, form }) => (\r\n                                                                                    <Checkbox\r\n                                                                                        disabled\r\n                                                                                        checked={values.initialValues[solIndex].emiCheck}\r\n                                                                                        onChange={e => onCheck(e, field, form, setFieldValue, values, solIndex)}\r\n                                                                                    />\r\n                                                                                )}\r\n                                                                            </Field>\r\n                                                                        </FormItem>\r\n                                                                    </div>\r\n                                                                    {values.initialValues[solIndex].emiCheck == true &&\r\n                                                                        <div className=''>\r\n                                                                            <FieldArray name={`initialValues[${solIndex}].emiArr`}>\r\n                                                                                {({ push: pushEmiArr, remove: removeEmiArr }) => (\r\n                                                                                    <div>\r\n                                                                                        {values.initialValues[solIndex].emiArr?.map((emiEl, emiIndex) => {\r\n                                                                                            return (\r\n                                                                                                <>\r\n                                                                                                    <div className='md:grid grid-cols-4 gap-4 mx-4 '>\r\n                                                                                                        <FormItem label='No of Months'>\r\n                                                                                                            <Field name={`initialValues[${solIndex}].emiArr[${emiIndex}].noOfEmis`}>\r\n                                                                                                                {({ field, form }) => (\r\n                                                                                                                    <Select placeholder=\"Select\" field={field} form={form}\r\n                                                                                                                        options={emiOptions}\r\n                                                                                                                        value={emiOptions.filter((cItem) => cItem.value === values.initialValues[solIndex]?.emiArr[emiIndex]?.noOfEmis)}\r\n                                                                                                                        onChange={(cItem) => onChangeEmidd(cItem.value, form, setFieldValue, values, solIndex, emiIndex, field.name)}\r\n                                                                                                                    />\r\n                                                                                                                )}\r\n                                                                                                            </Field>\r\n                                                                                                        </FormItem>\r\n                                                                                                        <FormItem label='Emi Value per month'>\r\n                                                                                                            <Field type=\"text\" autoComplete=\"off\" placeholder=\"Enter Emi Value per month\" component={Input}\r\n                                                                                                                name={`initialValues[${solIndex}].emiArr[${emiIndex}].emiValuePerMonth`} />\r\n                                                                                                        </FormItem>\r\n                                                                                                        <div className='mt-7'>\r\n                                                                                                            <Button type='button' className=' border-cyan-500' shape=\"circle\" size=\"md\" icon={<HiPlus />}\r\n                                                                                                                onClick={() => pushEmiArr({\r\n                                                                                                                    noOfEmis: '',\r\n                                                                                                                    emiValuePerMonth: ''\r\n                                                                                                                })} />\r\n                                                                                                            {values.initialValues[solIndex].emiArr.length > 1 &&\r\n                                                                                                                <Button type='button' className='mx-4  border-red-500' shape=\"circle\" size=\"md\" icon={<HiMinus />}\r\n                                                                                                                    onClick={() => removeEmiArr(emiIndex)} />}\r\n                                                                                                        </div>\r\n                                                                                                    </div>\r\n                                                                                                </>\r\n                                                                                            )\r\n                                                                                        })}\r\n                                                                                    </div>\r\n                                                                                )}\r\n                                                                            </FieldArray>\r\n                                                                        </div>}\r\n                                                                </div> */}\r\n                                                            </AdaptableCard>\r\n                                                            <div className=\"mt-4 text-right lg:flex items-center justify-end\">\r\n                                                                <Button variant=\"plain\" type='button' className='font-bold mb-4' style={{ color: \"#004D99\" }} icon={<BsFillPlusCircleFill fill='#004D99' />}\r\n                                                                    onClick={() => pushSol({\r\n                                                                        solItemType: \"\",\r\n                                                                        cItemType: \"\",\r\n                                                                        solItems: [{ solVariant: \"\", solParentVariant: \"\", solPrice: \"\", solDiscount: \"\" }],\r\n                                                                        paymentProvAvailable: false,\r\n                                                                        emiCheck: false,\r\n                                                                        emiArr: [{ noOfEmis: '', emiValuePerMonth: '' }],\r\n                                                                        chooseItems: [],\r\n                                                                        chooseVarients: []\r\n                                                                    })}\r\n                                                                >ADD NEW ITEM</Button>\r\n                                                                {values.initialValues.length > 1 &&\r\n                                                                    <Button variant=\"plain\" type='button' className='font-bold mb-4' style={{ color: \"#990000\" }} icon={<BsFillPlusCircleFill fill='#990000' />}\r\n                                                                        onClick={() => removeSol(solIndex)}\r\n                                                                    >DELETE</Button>}\r\n                                                            </div>\r\n                                                        </>\r\n                                                    )\r\n                                                })}\r\n                                            </div>\r\n                                        )}\r\n                                    </FieldArray>\r\n                                </FormContainer>\r\n                            </Form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SolutionCreateStep2\r\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Checkbox,\r\n} from 'components/ui'\r\nimport SolutionBasicDetailsOther from './SolutionBasicDetailsOther'\r\nimport SolutionCreateStep2 from './SolutionCreateStep2'\r\n\r\nconst pCategoryOptions = [\r\n    { label: 'Airtel Inc.', value: 'M' },\r\n    { label: 'Airtel Inc.', value: 'F' },\r\n    { label: 'Airtel India', value: 'O' },\r\n]\r\n\r\nconst solutionCreateValues = {\r\n    solItemType: \"\",\r\n    cItemType: \"\", // not in api\r\n    solDisplayItemPrice: \"\",\r\n    solItemIsDep: false,\r\n    cVariant: \"\",// not in api\r\n    sCustomerType: \"\",// not in api\r\n    sCustomerCatg: \"\",// not in api\r\n    solutionSPrice: \"\",// not in api\r\n    solutionDiscount: \"\",// not in api\r\n    solutionDiscountMin: \"\",// not in api\r\n    solutionDiscountMax: \"\",// not in api\r\n    solutionDescription: \"\",// not in api\r\n}\r\n\r\nconst SolutionCreate = forwardRef((props, ref) => {\r\n    const [formData, setFormData] = useState({\r\n        SolutionBasicDetails: { values: null, validated: false },\r\n    })\r\n    const solutionBasicDetailsref = React.useRef()\r\n    async function handleSubmit() {\r\n        await solutionBasicDetailsref.current.submitForm()\r\n    }\r\n    function handleChangeSolutionBasicDetails(data) {\r\n        setFormData({ ...formData, SolutionBasicDetails: data })\r\n    }\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            handleSubmitFromParent() {\r\n                handleSubmit()\r\n            },\r\n        }\r\n    })\r\n    return (\r\n        <>\r\n            <h3 className=\"mx-4 mb-4\">Create Solution</h3>\r\n            <SolutionCreateStep2 handleSubmit={handleSubmit}\r\n                onChange={handleChangeSolutionBasicDetails}\r\n                refId={solutionBasicDetailsref}\r\n                solutionCreate={props.solutionCreate}\r\n                setSolutionCreate={props.setSolutionCreate}\r\n                solutionState={props.solutionState}\r\n                setSolutionState={props.setSolutionState}\r\n                step={props.step}\r\n                solutionIntialValues={props.solutionIntialValues}\r\n                setSolutionIntialValues={props.setSolutionIntialValues}\r\n                setStep={props.setStep} />\r\n        </>\r\n    )\r\n})\r\n\r\nexport default SolutionCreate\r\n","import React from 'react'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Checkbox,\r\n} from 'components/ui'\r\nimport { HiMinus, HiPlus } from 'react-icons/hi'\r\nimport { BsFillPlusCircleFill } from 'react-icons/bs'\r\n\r\nconst pCategoryOptions = [\r\n    { label: 'Airtel Inc.', value: 'M' },\r\n    { label: 'Airtel Inc.', value: 'F' },\r\n    { label: 'Airtel India', value: 'O' },\r\n]\r\n\r\nconst SolutionConfig = (props) => {\r\n    return (\r\n        <>\r\n            <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" >\r\n                <h3 className=\"mx-2 mb-4\">Create Config</h3>\r\n                <Formik\r\n                    initialValues={{}}\r\n                    // validationSchema={{}}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        setSubmitting(true)\r\n                    }}\r\n                >\r\n                    {({ values, touched, errors, isSubmitting }) => {\r\n                        return (\r\n                            <Form>\r\n                                <FormContainer>\r\n                                    <div className=\"md:grid grid-cols-2 gap-6  mt-4\">\r\n                                        <FormItem label=\"Title\">\r\n                                            <Field\r\n                                                type=\"text\"\r\n                                                autoComplete=\"off\"\r\n                                                name=\"titleConfigSolution\"\r\n                                                placeholder=\"Enter Config Title\"\r\n                                                component={Input}\r\n                                            />\r\n                                        </FormItem>\r\n                                    </div>\r\n                                    <AdaptableCard\r\n                                        className=\"h-full p-4 bg-gray-50\" style={{backgroundColor:\"#f5f5f5\"}}\r\n                                        bodyClass=\"h-full\"\r\n                                        divider\r\n                                    >\r\n                                        <Button\r\n                                            onClick={() => { }}\r\n                                            className=\"mt-5 mb-5\"\r\n                                            variant=\"solid\"\r\n                                        >\r\n                                            IF\r\n                                        </Button>\r\n                                        <FormItem label=\"\" className=\"\" >\r\n                                            <AdaptableCard\r\n                                                className=\"h-full pl-36\"\r\n                                                bodyClass=\"h-full\"\r\n                                                divider\r\n                                            >\r\n                                                <div className=''>\r\n                                                    <div className=\"md:grid grid-cols-6 gap-4  mt-4 \">\r\n                                                        <FormItem\r\n                                                            label=\"\"\r\n                                                            invalid={\r\n                                                                errors.labelIfConfig &&\r\n                                                                touched.labelIfConfig\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.labelIfConfig\r\n                                                            }\r\n                                                        >\r\n                                                            <Field name=\"labelIfConfig\">\r\n                                                                {({\r\n                                                                    field,\r\n                                                                    form,\r\n                                                                }) => (\r\n                                                                    <Select\r\n                                                                        isDisabled={true} placeholder=\"Select\"\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={form}\r\n                                                                        options={\r\n                                                                            pCategoryOptions\r\n                                                                        }\r\n                                                                        value={pCategoryOptions.filter(\r\n                                                                            (\r\n                                                                                cItem\r\n                                                                            ) =>\r\n                                                                                cItem.value ===\r\n                                                                                values.labelIfConfig\r\n                                                                        )}\r\n                                                                        onChange={(\r\n                                                                            cItem\r\n                                                                        ) =>\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                cItem.value\r\n                                                                            )\r\n                                                                        }\r\n                                                                    />\r\n                                                                )}\r\n                                                            </Field>\r\n                                                        </FormItem>\r\n                                                        <FormItem\r\n                                                            label=\"\"\r\n                                                            invalid={\r\n                                                                errors.interactionIfConfig &&\r\n                                                                touched.interactionIfConfig\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.interactionIfConfig\r\n                                                            }\r\n                                                        >\r\n                                                            <Field name=\"interactionIfConfig\">\r\n                                                                {({\r\n                                                                    field,\r\n                                                                    form,\r\n                                                                }) => (\r\n                                                                    <Select\r\n                                                                        isDisabled={true} placeholder=\"Select Interaction\"\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={form}\r\n                                                                        options={\r\n                                                                            pCategoryOptions\r\n                                                                        }\r\n                                                                        value={pCategoryOptions.filter(\r\n                                                                            (\r\n                                                                                cItem\r\n                                                                            ) =>\r\n                                                                                cItem.value ===\r\n                                                                                values.interactionIfConfig\r\n                                                                        )}\r\n                                                                        onChange={(\r\n                                                                            cItem\r\n                                                                        ) =>\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                cItem.value\r\n                                                                            )\r\n                                                                        }\r\n                                                                    />\r\n                                                                )}\r\n                                                            </Field>\r\n                                                        </FormItem>\r\n                                                        <FormItem\r\n                                                            label=\"\"\r\n                                                            invalid={\r\n                                                                errors.valueIfConfig &&\r\n                                                                touched.valueIfConfig\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.valueIfConfig\r\n                                                            }\r\n                                                        >\r\n                                                            <Field name=\"valueIfConfig\">\r\n                                                                {({\r\n                                                                    field,\r\n                                                                    form,\r\n                                                                }) => (\r\n                                                                    <Select\r\n                                                                        isDisabled={true} placeholder=\"Select Value\"\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={form}\r\n                                                                        options={\r\n                                                                            pCategoryOptions\r\n                                                                        }\r\n                                                                        value={pCategoryOptions.filter(\r\n                                                                            (\r\n                                                                                cItem\r\n                                                                            ) =>\r\n                                                                                cItem.value ===\r\n                                                                                values.valueIfConfig\r\n                                                                        )}\r\n                                                                        onChange={(\r\n                                                                            cItem\r\n                                                                        ) =>\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                cItem.value\r\n                                                                            )\r\n                                                                        }\r\n                                                                    />\r\n                                                                )}\r\n                                                            </Field>\r\n                                                        </FormItem>\r\n                                                        <FormItem label=\"\">\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                name=\"configIfFirst\"\r\n                                                                placeholder=\"\"\r\n                                                                component={Input}\r\n                                                            />\r\n                                                        </FormItem>\r\n                                                        <FormItem label=\"\">\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                name=\"configIfFirst\"\r\n                                                                placeholder=\"\"\r\n                                                                component={Input}\r\n                                                            />\r\n                                                        </FormItem>\r\n                                                        <FormItem className=\"ml-8\">\r\n                                                            <Button className='border-red-500'\r\n                                                                shape=\"circle\"\r\n                                                                size=\"md\"\r\n                                                                icon={<HiMinus />}\r\n                                                                onClick={''}\r\n                                                            />\r\n                                                            <Button className='ml-4 border-cyan-500'\r\n                                                                shape=\"circle\"\r\n                                                                size=\"md\"\r\n                                                                icon={<HiPlus />}\r\n                                                                onClick={''}\r\n                                                            />\r\n                                                        </FormItem>\r\n                                                    </div>\r\n                                                    <div className=\"md:grid grid-cols-6 gap-4  mt-4  \">\r\n                                                        {/* <FormItem label=\"\"></FormItem> */}\r\n                                                        <FormItem\r\n                                                            label=\"\"\r\n                                                            invalid={\r\n                                                                errors.labelIfConfig &&\r\n                                                                touched.labelIfConfig\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.labelIfConfig\r\n                                                            }\r\n                                                        >\r\n                                                            <Field name=\"labelIfConfig\">\r\n                                                                {({\r\n                                                                    field,\r\n                                                                    form,\r\n                                                                }) => (\r\n                                                                    <Select isDisabled={true}\r\n                                                                        placeholder=\"Select\"\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={form}\r\n                                                                        options={\r\n                                                                            pCategoryOptions\r\n                                                                        }\r\n                                                                        value={pCategoryOptions.filter(\r\n                                                                            (\r\n                                                                                cItem\r\n                                                                            ) =>\r\n                                                                                cItem.value ===\r\n                                                                                values.labelIfConfig\r\n                                                                        )}\r\n                                                                        onChange={(\r\n                                                                            cItem\r\n                                                                        ) =>\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                cItem.value\r\n                                                                            )\r\n                                                                        }\r\n                                                                    />\r\n                                                                )}\r\n                                                            </Field>\r\n                                                        </FormItem>\r\n                                                        <FormItem\r\n                                                            label=\"\"\r\n                                                            invalid={\r\n                                                                errors.interactionIfConfig &&\r\n                                                                touched.interactionIfConfig\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.interactionIfConfig\r\n                                                            }\r\n                                                        >\r\n                                                            <Field name=\"interactionIfConfig\">\r\n                                                                {({\r\n                                                                    field,\r\n                                                                    form,\r\n                                                                }) => (\r\n                                                                    <Select\r\n                                                                        isDisabled={true} placeholder=\"Select Interaction\"\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={form}\r\n                                                                        options={\r\n                                                                            pCategoryOptions\r\n                                                                        }\r\n                                                                        value={pCategoryOptions.filter(\r\n                                                                            (\r\n                                                                                cItem\r\n                                                                            ) =>\r\n                                                                                cItem.value ===\r\n                                                                                values.interactionIfConfig\r\n                                                                        )}\r\n                                                                        onChange={(\r\n                                                                            cItem\r\n                                                                        ) =>\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                cItem.value\r\n                                                                            )\r\n                                                                        }\r\n                                                                    />\r\n                                                                )}\r\n                                                            </Field>\r\n                                                        </FormItem>\r\n                                                        <FormItem\r\n                                                            label=\"\"\r\n                                                            invalid={\r\n                                                                errors.valueIfConfig &&\r\n                                                                touched.valueIfConfig\r\n                                                            }\r\n                                                            errorMessage={\r\n                                                                errors.valueIfConfig\r\n                                                            }\r\n                                                        >\r\n                                                            <Field name=\"valueIfConfig\">\r\n                                                                {({\r\n                                                                    field,\r\n                                                                    form,\r\n                                                                }) => (\r\n                                                                    <Select\r\n                                                                        isDisabled={true} placeholder=\"Select Value\"\r\n                                                                        field={\r\n                                                                            field\r\n                                                                        }\r\n                                                                        form={form}\r\n                                                                        options={\r\n                                                                            pCategoryOptions\r\n                                                                        }\r\n                                                                        value={pCategoryOptions.filter(\r\n                                                                            (\r\n                                                                                cItem\r\n                                                                            ) =>\r\n                                                                                cItem.value ===\r\n                                                                                values.valueIfConfig\r\n                                                                        )}\r\n                                                                        onChange={(\r\n                                                                            cItem\r\n                                                                        ) =>\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                cItem.value\r\n                                                                            )\r\n                                                                        }\r\n                                                                    />\r\n                                                                )}\r\n                                                            </Field>\r\n                                                        </FormItem>\r\n                                                        <FormItem label=\"\">\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                name=\"configIfFirst\"\r\n                                                                placeholder=\"\"\r\n                                                                component={Input}\r\n                                                            />\r\n                                                        </FormItem>\r\n                                                        <FormItem label=\"\">\r\n                                                            <Field\r\n                                                                type=\"text\"\r\n                                                                autoComplete=\"off\"\r\n                                                                name=\"configIfFirst\"\r\n                                                                placeholder=\"\"\r\n                                                                component={Input}\r\n                                                            />\r\n                                                        </FormItem>\r\n                                                        <FormItem className=\"ml-8\">\r\n                                                            <Button className='border-red-500'\r\n                                                                shape=\"circle\"\r\n                                                                size=\"md\"\r\n                                                                icon={<HiMinus />}\r\n                                                                onClick={''}\r\n                                                            />\r\n                                                            <Button className='ml-4 border-cyan-500'\r\n                                                                shape=\"circle\"\r\n                                                                size=\"md\"\r\n                                                                icon={<HiPlus />}\r\n                                                                onClick={''}\r\n                                                            />\r\n                                                        </FormItem>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </AdaptableCard>\r\n                                        </FormItem>\r\n                                    </AdaptableCard>\r\n                                    <AdaptableCard\r\n                                        className=\"h-full p-4 bg-gray-50\" style={{backgroundColor:\"#F5F5F5\"}}\r\n                                        bodyClass=\"h-full\"\r\n                                        divider\r\n                                    >\r\n                                        <Button\r\n                                            onClick={() => { }}\r\n                                            className=\"mt-5 mb-5\"\r\n                                            variant=\"solid\"\r\n                                        >\r\n                                            THEN\r\n                                        </Button>\r\n                                        <FormItem label=\"\">\r\n                                            <AdaptableCard\r\n                                                className=\"h-full pl-36\"\r\n                                                bodyClass=\"h-full\"\r\n                                                divider\r\n                                            >\r\n                                                <div className=\"md:grid grid-cols-6 gap-4  mt-4  \">\r\n                                                    <FormItem\r\n                                                        label=\"\"\r\n                                                        invalid={\r\n                                                            errors.labelIfConfig &&\r\n                                                            touched.labelIfConfig\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.labelIfConfig\r\n                                                        }\r\n                                                    >\r\n                                                        <Field name=\"labelIfConfig\">\r\n                                                            {({\r\n                                                                field,\r\n                                                                form,\r\n                                                            }) => (\r\n                                                                <Select\r\n                                                                    isDisabled={true} placeholder=\"Select\"\r\n                                                                    field={\r\n                                                                        field\r\n                                                                    }\r\n                                                                    form={form}\r\n                                                                    options={\r\n                                                                        pCategoryOptions\r\n                                                                    }\r\n                                                                    value={pCategoryOptions.filter(\r\n                                                                        (\r\n                                                                            cItem\r\n                                                                        ) =>\r\n                                                                            cItem.value ===\r\n                                                                            values.labelIfConfig\r\n                                                                    )}\r\n                                                                    onChange={(\r\n                                                                        cItem\r\n                                                                    ) =>\r\n                                                                        form.setFieldValue(\r\n                                                                            field.name,\r\n                                                                            cItem.value\r\n                                                                        )\r\n                                                                    }\r\n                                                                />\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"\"\r\n                                                        invalid={\r\n                                                            errors.interactionIfConfig &&\r\n                                                            touched.interactionIfConfig\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.interactionIfConfig\r\n                                                        }\r\n                                                    >\r\n                                                        <Field name=\"interactionIfConfig\">\r\n                                                            {({\r\n                                                                field,\r\n                                                                form,\r\n                                                            }) => (\r\n                                                                <Select\r\n                                                                    isDisabled={true} placeholder=\"Select Interaction\"\r\n                                                                    field={\r\n                                                                        field\r\n                                                                    }\r\n                                                                    form={form}\r\n                                                                    options={\r\n                                                                        pCategoryOptions\r\n                                                                    }\r\n                                                                    value={pCategoryOptions.filter(\r\n                                                                        (\r\n                                                                            cItem\r\n                                                                        ) =>\r\n                                                                            cItem.value ===\r\n                                                                            values.interactionIfConfig\r\n                                                                    )}\r\n                                                                    onChange={(\r\n                                                                        cItem\r\n                                                                    ) =>\r\n                                                                        form.setFieldValue(\r\n                                                                            field.name,\r\n                                                                            cItem.value\r\n                                                                        )\r\n                                                                    }\r\n                                                                />\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"\"\r\n                                                        invalid={\r\n                                                            errors.valueIfConfig &&\r\n                                                            touched.valueIfConfig\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.valueIfConfig\r\n                                                        }\r\n                                                    >\r\n                                                        <Field name=\"valueIfConfig\">\r\n                                                            {({\r\n                                                                field,\r\n                                                                form,\r\n                                                            }) => (\r\n                                                                <Select\r\n                                                                    isDisabled={true} placeholder=\"Select Value\"\r\n                                                                    field={\r\n                                                                        field\r\n                                                                    }\r\n                                                                    form={form}\r\n                                                                    options={\r\n                                                                        pCategoryOptions\r\n                                                                    }\r\n                                                                    value={pCategoryOptions.filter(\r\n                                                                        (\r\n                                                                            cItem\r\n                                                                        ) =>\r\n                                                                            cItem.value ===\r\n                                                                            values.valueIfConfig\r\n                                                                    )}\r\n                                                                    onChange={(\r\n                                                                        cItem\r\n                                                                    ) =>\r\n                                                                        form.setFieldValue(\r\n                                                                            field.name,\r\n                                                                            cItem.value\r\n                                                                        )\r\n                                                                    }\r\n                                                                />\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                    <FormItem label=\"\">\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"configIfFirst\"\r\n                                                            placeholder=\"\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem label=\"\">\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"configIfFirst\"\r\n                                                            placeholder=\"\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem className=\"ml-8\">\r\n                                                        <Button className='border-red-500'\r\n                                                            shape=\"circle\"\r\n                                                            size=\"md\"\r\n                                                            icon={<HiMinus />}\r\n                                                            onClick={''}\r\n                                                        />\r\n                                                        <Button className='ml-4 border-cyan-500'\r\n                                                            shape=\"circle\"\r\n                                                            size=\"md\"\r\n                                                            icon={<HiPlus />}\r\n                                                            onClick={''}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                                <div className=\"md:grid grid-cols-6 gap-4  mt-4  \">\r\n\r\n                                                    <FormItem\r\n                                                        label=\"\"\r\n                                                        invalid={\r\n                                                            errors.labelIfConfig &&\r\n                                                            touched.labelIfConfig\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.labelIfConfig\r\n                                                        }\r\n                                                    >\r\n                                                        <Field name=\"labelIfConfig\">\r\n                                                            {({\r\n                                                                field,\r\n                                                                form,\r\n                                                            }) => (\r\n                                                                <Select\r\n                                                                    isDisabled={true} placeholder=\"Select\"\r\n                                                                    field={\r\n                                                                        field\r\n                                                                    }\r\n                                                                    form={form}\r\n                                                                    options={\r\n                                                                        pCategoryOptions\r\n                                                                    }\r\n                                                                    value={pCategoryOptions.filter(\r\n                                                                        (\r\n                                                                            cItem\r\n                                                                        ) =>\r\n                                                                            cItem.value ===\r\n                                                                            values.labelIfConfig\r\n                                                                    )}\r\n                                                                    onChange={(\r\n                                                                        cItem\r\n                                                                    ) =>\r\n                                                                        form.setFieldValue(\r\n                                                                            field.name,\r\n                                                                            cItem.value\r\n                                                                        )\r\n                                                                    }\r\n                                                                />\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"\"\r\n                                                        invalid={\r\n                                                            errors.interactionIfConfig &&\r\n                                                            touched.interactionIfConfig\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.interactionIfConfig\r\n                                                        }\r\n                                                    >\r\n                                                        <Field name=\"interactionIfConfig\">\r\n                                                            {({\r\n                                                                field,\r\n                                                                form,\r\n                                                            }) => (\r\n                                                                <Select\r\n                                                                    isDisabled={true} placeholder=\"Select Interaction\"\r\n                                                                    field={\r\n                                                                        field\r\n                                                                    }\r\n                                                                    form={form}\r\n                                                                    options={\r\n                                                                        pCategoryOptions\r\n                                                                    }\r\n                                                                    value={pCategoryOptions.filter(\r\n                                                                        (\r\n                                                                            cItem\r\n                                                                        ) =>\r\n                                                                            cItem.value ===\r\n                                                                            values.interactionIfConfig\r\n                                                                    )}\r\n                                                                    onChange={(\r\n                                                                        cItem\r\n                                                                    ) =>\r\n                                                                        form.setFieldValue(\r\n                                                                            field.name,\r\n                                                                            cItem.value\r\n                                                                        )\r\n                                                                    }\r\n                                                                />\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"\"\r\n                                                        invalid={\r\n                                                            errors.valueIfConfig &&\r\n                                                            touched.valueIfConfig\r\n                                                        }\r\n                                                        errorMessage={\r\n                                                            errors.valueIfConfig\r\n                                                        }\r\n                                                    >\r\n                                                        <Field name=\"valueIfConfig\">\r\n                                                            {({\r\n                                                                field,\r\n                                                                form,\r\n                                                            }) => (\r\n                                                                <Select\r\n                                                                    isDisabled={true} placeholder=\"Select Value\"\r\n                                                                    field={\r\n                                                                        field\r\n                                                                    }\r\n                                                                    form={form}\r\n                                                                    options={\r\n                                                                        pCategoryOptions\r\n                                                                    }\r\n                                                                    value={pCategoryOptions.filter(\r\n                                                                        (\r\n                                                                            cItem\r\n                                                                        ) =>\r\n                                                                            cItem.value ===\r\n                                                                            values.valueIfConfig\r\n                                                                    )}\r\n                                                                    onChange={(\r\n                                                                        cItem\r\n                                                                    ) =>\r\n                                                                        form.setFieldValue(\r\n                                                                            field.name,\r\n                                                                            cItem.value\r\n                                                                        )\r\n                                                                    }\r\n                                                                />\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </FormItem>\r\n                                                    <FormItem label=\"\">\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"configIfFirst\"\r\n                                                            placeholder=\"\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem label=\"\">\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"configIfFirst\"\r\n                                                            placeholder=\"\"\r\n                                                            component={Input}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    <FormItem className=\"ml-8\">\r\n                                                        <Button className='border-red-500'\r\n                                                            shape=\"circle\"\r\n                                                            size=\"md\"\r\n                                                            icon={<HiMinus />}\r\n                                                            onClick={''}\r\n                                                        />\r\n                                                        <Button className='ml-4 border-cyan-500'\r\n                                                            shape=\"circle\"\r\n                                                            size=\"md\"\r\n                                                            icon={<HiPlus />}\r\n                                                            onClick={''}\r\n                                                        />\r\n                                                    </FormItem>\r\n                                                </div>\r\n                                            </AdaptableCard>\r\n                                        </FormItem>\r\n                                        <Checkbox\r\n                                            children={\r\n                                                <p className=\"mr-6 color-black\">\r\n                                                    Allowed Multiple Usages\r\n                                                </p>\r\n                                            }\r\n                                        />\r\n                                    </AdaptableCard>\r\n                                </FormContainer>\r\n                            </Form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n                \r\n            </AdaptableCard>\r\n            <div className=\"mt-4 text-right lg:flex items-center justify-end\">\r\n                    <Button variant=\"plain\" className='font-bold' style={{ color: \"#004D99\" }} icon={<BsFillPlusCircleFill fill='#004D99' />}>ADD NEW FIELD</Button>\r\n                    <Button variant=\"plain\" className='font-bold' style={{ color: \"#990000\" }} icon={<BsFillPlusCircleFill fill='#990000' />}>DELETE</Button>\r\n                </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SolutionConfig\r\n","import React, { useRef, useState, useEffect } from 'react'\r\nimport { Steps, Button } from 'components/ui'\r\nimport NewSolutions from './NewSolutions'\r\nimport SolutionDetails from './SolutionDetails'\r\nimport { AdaptableCard } from 'components/shared'\r\nimport MasterPermissionBox from './MasterPermissionBox'\r\nimport SolutionPreview from './SolutionPreview'\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom'\r\nimport SolutionCreate from './SolutionCreate'\r\nimport SolutionConfig from './SolutionConfig'\r\nimport { apiSolFinalSubmit, apiSolFinalUpdateSubmit } from 'services/SolutionsService'\r\nimport { BiArrowBack } from 'react-icons/bi'\r\n\r\n// import campareandCopy from 'utils/campareandCopy'\r\nimport { useSelector } from 'react-redux'\r\nimport { OpenNotification } from 'views/Servicefile'\r\nimport { EditandCopySol } from 'utils/campareandCopy'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\n\r\nconst Controlled = () => {\r\n\r\n    const location = useLocation();\r\n    const rowForEdit = location.state?.data;\r\n    const mode = location.state?.mode;\r\n    const [solutionState, setSolutionState] = useState()\r\n    const [solutionCreate, setSolutionCreate] = useState()\r\n    let intials = {\r\n        basics: {\r\n            pCategory: \"\", // not in api\r\n            solTitle: \"\",\r\n            solDesc: \"\",\r\n            solKeywords: \"\",\r\n            solTextBanner: \"\",\r\n            imageFile: \"\"\r\n        },\r\n        basicOther: {\r\n            zipCode: \"\",\r\n            upload: ''\r\n        },\r\n\r\n        solCreate: {\r\n            initialValues: [\r\n                {\r\n                    solItemType: \"\",\r\n                    cItemType: \"\", // not in api\r\n                    solItems: [{\r\n                        solVariant: \"\",\r\n                        solParentVariant: \"\",\r\n                        solPrice: \"\",\r\n                        solDiscount: \"\",\r\n                        isDep: false,\r\n                        defaultSolPrice:\"\"\r\n                    }],\r\n                    paymentProvAvailable: false,\r\n                    emiCheck: false,\r\n                    emiArr: [{\r\n                        noOfEmis: '',\r\n                        emiValuePerMonth: ''\r\n                    }],\r\n                    chooseItems: [],\r\n                    chooseVarients: []\r\n\r\n                }\r\n            ]\r\n        }\r\n\r\n    }\r\n    // <div>Catalogue/Solutions/Create Solution</div>\r\n    let breadCrumbList = [{\r\n        name: 'Catalouge',\r\n    }, {\r\n        name: 'Solutions',\r\n        link: \"/catalouge-menu-item-view-3\"\r\n    }, {\r\n        name: `Create Item`,\r\n    }]\r\n\r\n    if (mode === \"EDIT\") {\r\n        breadCrumbList = [\r\n            {\r\n                name: 'Catalouge',\r\n            },\r\n            {\r\n                name: 'Solutions',\r\n                link: '/catalouge-menu-item-view-3',\r\n            },\r\n            {\r\n                name: rowForEdit?.sol_title,\r\n                link: '/catalouge-menu-item-view-3',\r\n                state: rowForEdit\r\n            },\r\n            {\r\n                name: \"Edit\"\r\n            },\r\n        ]\r\n    }\r\n\r\n\r\n    const { unq_id, role_name } = useSelector((state) => state.auth.user)\r\n    const [solutionIntialValues, setSolutionIntialValues] = useState(intials)\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            if (rowForEdit) {\r\n                let valiInti = await EditandCopySol(intials, rowForEdit)\r\n                setSolutionIntialValues(valiInti)\r\n            } else {\r\n                setSolutionIntialValues(intials)\r\n            }\r\n        }\r\n        fetchData();\r\n    }, [rowForEdit]);\r\n\r\n\r\n\r\n    const [step, setStep] = useState(0)\r\n    const childRef = useRef()\r\n    const childRef2 = useRef()\r\n\r\n    const navigate = useNavigate()\r\n    const onChange = (nextStep) => {\r\n\r\n        if (nextStep < 0) {\r\n            setStep(0)\r\n        } else if (nextStep > 3) {\r\n            setStep(3)\r\n        } else {\r\n            setStep(nextStep)\r\n        }\r\n    }\r\n\r\n    const onNext = () => {\r\n\r\n        if (step == 0) {\r\n            childRef.current?.handleSubmitFromParent()\r\n        }\r\n        if (step == 1) {\r\n            childRef2.current.handleSubmitFromParent();\r\n        }\r\n        if (step == 2) {\r\n            onChange(step + 1)\r\n        }\r\n\r\n    }\r\n\r\n    const submitApi = async () => {\r\n        console.log(solutionIntialValues)\r\n        let body = {\r\n            \"acc_id\": unq_id,\r\n            \"sol_title\": solutionIntialValues?.basics?.solTitle,\r\n            \"sol_desc\": solutionIntialValues?.basics?.solDesc,\r\n            \"sol_keywords\": solutionIntialValues?.basics?.solKeywords,\r\n            \"sol_text_banner\": solutionIntialValues?.basics?.solTextBanner,\r\n            \"sol_img_url\": solutionIntialValues?.basics?.imageFile,\r\n            \"sol_geo_tag\": \"\",\r\n            \"sol_thumbnail\": \"Sample1.jpg\",\r\n            \"sol_status\": 'ACTIVE',\r\n            \"dgl_rel_prod_cat_ids\": [{\r\n                \"rel_prod_cat_id\": solutionIntialValues?.basics?.pCategory,\r\n                \"prod_cat_status\": 0\r\n            },],\r\n            \"dgl_cat_sol_configs\": [{\r\n                \"sol_config_title\": \"SolConfig3\",\r\n                \"sol_config_details\": \"json string3\"\r\n            }]\r\n        }\r\n\r\n        let catSols = []\r\n        // solutionIntialValues.solCreate.initialValues\r\n        let array1 = solutionIntialValues.solCreate\r\n        let array2 = []\r\n        for (const initialValue of array1.initialValues) {\r\n            // Loop through the solItems array of the current initialValue\r\n            for (const solItem of initialValue.solItems) {\r\n                const itemObj = {\r\n                    \"sol_display_item_var_price\": solItem.solPrice,\r\n                    \"sol_item_parent_item\": \"\",\r\n                    \"sol_item_is_dep\": solItem?.isDep,\r\n                    \"is_paid_provider\": false,\r\n                    \"item\": {\r\n                        \"id\": initialValue.cItemType\r\n                    },\r\n                    \"item_var\": {\r\n                        \"id\": solItem.solVariant\r\n                    }\r\n                };\r\n                array2.push(itemObj);\r\n            }\r\n        }\r\n        body.dgl_cat_sol_items = array2\r\n        console.log(body)\r\n        // return\r\n        if (mode == 'EDIT') {\r\n            const resp = await apiSolFinalUpdateSubmit(body)\r\n            if (resp.data.success) {\r\n                OpenNotification('success', 'Updated successfully')\r\n                navigate('/catalouge-menu-item-view-3')\r\n            }\r\n        } else {\r\n            const resp = await apiSolFinalSubmit(body)\r\n            if (resp.data.success) {\r\n                OpenNotification('success', 'Created successfully')\r\n                navigate('/catalouge-menu-item-view-3')\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const onPrevious = () => onChange(step - 1)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <CustomBreadcrumbs list={breadCrumbList} />\r\n            <Steps current={step}>\r\n                <Steps.Item title=\"BASIC DETAILS\" />\r\n                <Steps.Item title=\"CREATE SOLUTION\" />\r\n                <Steps.Item title=\"CONFIG SOLUTION\" />\r\n                <Steps.Item title=\"PREVIEW\" />\r\n            </Steps>\r\n\r\n            <div className=\"mt-6 rounded \">\r\n\r\n                {step == 0 && Object.keys(solutionIntialValues).length &&\r\n                    <SolutionDetails\r\n                        ref={childRef}\r\n                        solutionState={solutionState}\r\n                        setSolutionState={setSolutionState}\r\n                        step={step}\r\n                        setStep={setStep}\r\n                        solutionIntialValues={solutionIntialValues}\r\n                        setSolutionIntialValues={setSolutionIntialValues}\r\n                    />}\r\n                {step == 1 && Object.keys(solutionIntialValues).length && <SolutionCreate\r\n                    ref={childRef2}\r\n                    solutionCreate={solutionCreate}\r\n                    setSolutionCreate={setSolutionCreate}\r\n                    solutionState={solutionState}\r\n                    setSolutionState={setSolutionState}\r\n                    solutionIntialValues={solutionIntialValues}\r\n                    setSolutionIntialValues={setSolutionIntialValues}\r\n                    step={step}\r\n                    setStep={setStep}\r\n                />}\r\n                {step == 2 && Object.keys(solutionIntialValues).length && <SolutionConfig />}\r\n                {step == 3 && Object.keys(solutionIntialValues).length && <SolutionPreview solutionIntialValues={solutionIntialValues} solutionState={solutionState} step={step} setStep={setStep} />}\r\n            </div>\r\n            <div className=\"flex justify-between mt-12\">\r\n                <div>\r\n                    {step > 0 && <Button\r\n                        className=\"mx-2   \"\r\n                        style={{\r\n                            backgroundColor: \"#4D4D4D\", \r\n                            fontStyle: 'normal',\r\n                            fontSize: 500, fontSize: '18px',\r\n                            color: \"white\"\r\n                        }}\r\n                        onClick={onPrevious}\r\n                        type=\"button\"\r\n\r\n                    >\r\n                        Previous\r\n                    </Button>}\r\n                </div>\r\n\r\n                <div className='flex'>\r\n\r\n                    {step >= 0 && (\r\n                        <Link\r\n                            className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                            to=\"/catalouge-menu-item-view-3\">\r\n                            <Button\r\n                                className=\"mx-2\"\r\n                                onClick={onPrevious}\r\n                                variant=\"solid\"\r\n                                style={{ backgroundColor: \"#4D4D4D\" }}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </Link>\r\n                    )}\r\n                    {step < 3 && (\r\n                        <Button\r\n                            onClick={onNext}\r\n                            disabled={step === 3}\r\n                            variant='solid'\r\n                        >\r\n                            {step === 3 ? 'Completed' : 'Next'}\r\n                        </Button>\r\n                    )}\r\n\r\n                    {step === 3 && (\r\n                        <>\r\n                            {/* <Link\r\n                            className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                            to=\"/catalouge-menu-item-view-3\"\r\n                        > */}\r\n                            <Button onClick={submitApi} variant='solid'>\r\n                                {'Submit for Approval'}\r\n                            </Button>\r\n                            {/* </Link> */}\r\n                        </>\r\n                    )}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controlled\r\n","import React from 'react'\r\nimport StepControlled from './StepControlled'\r\nimport { AdaptableCard, RichTextEditor } from 'components/shared'\r\nimport { Input, FormItem } from 'components/ui'\r\nimport { Field } from 'formik'\r\nexport default function NewSolutions() {\r\n   \r\n  return (\r\n    <>\r\n   \r\n    <div className='mt-5'>\r\n    <StepControlled />\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { apiGetSalesItems, apiDeleteSalesItems, apiGetItemsByItemType, apiGetVarientsByItem } from 'services/SolutionsService'\r\nimport { apiGetProductCategory } from 'services/TemplateService'\r\n\r\nexport const getSolutions = createAsyncThunk(\r\n    'solutionsList/data/getItems',\r\n    async (data) => {\r\n        \r\n        const response = await apiGetSalesItems(data)\r\n        return response.data\r\n    }\r\n)\r\nexport const getProductCategorys = createAsyncThunk(\r\n    'solutionsList/data/getProductCategorys',\r\n    async (data) => {\r\n        const response = await apiGetProductCategory(data)\r\n        return response.data\r\n    }\r\n)\r\nexport const getItemsByItemTypeP = createAsyncThunk(\r\n    'solutionsList/data/getItemsByItemTypeP',\r\n    async (data) => {\r\n        const response = await apiGetItemsByItemType(data.catId, data.itemType)\r\n        return response.data\r\n    }\r\n)\r\nexport const getItemsByItemTypeD = createAsyncThunk(\r\n    'solutionsList/data/getItemsByItemTypeD',\r\n    async (data) => {\r\n        const response = await apiGetItemsByItemType(data.catId, data.itemType)\r\n        return response.data\r\n    }\r\n)\r\nexport const getItemsByItemTypeS = createAsyncThunk(\r\n    'solutionsList/data/getItemsByItemTypeS',\r\n    async (data) => {\r\n        const response = await apiGetItemsByItemType(data.catId, data.itemType)\r\n        return response.data\r\n    }\r\n)\r\nexport const getVarientsByItem = createAsyncThunk(\r\n    'solutionsList/data/getVarientsByItem',\r\n    async (data) => {\r\n        const response = await apiGetVarientsByItem(data)\r\n        if (response.status === 'success') {\r\n            return response.data.data\r\n        }\r\n    }\r\n)\r\n\r\nexport const deleteSolutions = async (data) => {\r\n    const response = await apiDeleteSalesItems(data)\r\n    return response.data\r\n}\r\n\r\nexport const initialTableData = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    query: '',\r\n    sort: {\r\n        order: '',\r\n        key: '',\r\n    },\r\n}\r\n\r\nconst dataSlice = createSlice({\r\n    name: 'solutionsList/data',\r\n    initialState: {\r\n        loading: false,\r\n        ItemList: [],\r\n        tableData: initialTableData,\r\n        templateProductList:[],\r\n        itemsByItemTypeP : [],\r\n        itemsByItemTypeD : [],\r\n        itemsByItemTypeS : [],\r\n\r\n        varients : []\r\n\r\n    },\r\n    reducers: {\r\n        setItemList: (state, action) => {\r\n            state.ItemList = action.payload\r\n        },\r\n        setTableData: (state, action) => {\r\n            state.tableData = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [getSolutions.fulfilled]: (state, action) => {\r\n            \r\n            state.ItemList = action.payload\r\n            state.tableData.total = action.payload.total\r\n            state.loading = false\r\n        },\r\n        [getSolutions.pending]: (state) => {\r\n            state.loading = true\r\n        },\r\n        [getProductCategorys.fulfilled]: (state, action) => {\r\n            state.templateProductList = action?.payload?.response?.map((product) => ({\r\n                value: product.id,\r\n                label: product.prod_cat_title,\r\n            }));\r\n            state.loading = false\r\n        },\r\n        [getItemsByItemTypeP.fulfilled]: (state, action) => {\r\n            state.itemsByItemTypeP= action?.payload?.response.map((product) => (\r\n                {\r\n                value: product.id,\r\n                label: product.title,\r\n            }\r\n            ));\r\n            state.loading = false\r\n        },\r\n        [getItemsByItemTypeS.fulfilled]: (state, action) => {\r\n            state.itemsByItemTypeS= action?.payload?.response.map((product) => (\r\n                {\r\n                value: product.id,\r\n                label: product.title,\r\n            }\r\n            ));\r\n            state.loading = false\r\n        },\r\n        [getItemsByItemTypeD.fulfilled]: (state, action) => {\r\n            state.itemsByItemTypeD= action?.payload?.response.map((product) => (\r\n                {\r\n                value: product.id,\r\n                label: product.title,\r\n            }\r\n            ));\r\n            state.loading = false\r\n        },\r\n        [getVarientsByItem.fulfilled]: (state, action) => {\r\n            state.varients= action?.payload?.response.map((product) => (\r\n            {\r\n                value: product.id,\r\n                label: product.item_var_title,\r\n            }\r\n            ));\r\n            state.loading = false\r\n        },\r\n    },\r\n})\r\n\r\nexport const { setItemList, setTableData } = dataSlice.actions\r\n\r\nexport default dataSlice.reducer\r\n"],"names":["apiGetSalesOrders","params","ApiService","url","method","apiDeleteSalesOrders","data","apiSubmitEnterprise","resp","status","message","response","toString","apiUpdateEnterpriseAccStatus","id","apiUpdateEnterprise","apiGetParentAccountEnterprise","accMnoParentId","apiGetOperatorAccountEnterprise","enterAccount","apiGetCurrencyEnterprise","apiGetCustomerCatEnterprise","apiGetContractTypeEnterprise","apiGetUploadFileTypes","apiUploadFiles","file","loc1","loc2","formData","FormData","append","headers","interval","useState","setMessage","useEffect","timeout","setTimeout","clearTimeout","Yup","shape","country","required","addressLine1","addressLine2","city","state","zipCode","sameCorrespondenceAddress","correspondenceAddress","when","is","then","otherwise","schema","validatationSchema","pCategory","trim","solTitle","solDesc","solKeywords","onChange","refId","props","productCat","useSelector","solutionsList","templateProductList","dispatch","useDispatch","auth","user","user_type","password","rememberMe","usernameOrEmail","acc_mno_parent_unq_id","acc_user_id","getProductCategorys","beforeUpload","newFiles","files","includes","type","OpenNotification","ress","console","error","showContent","setShowContent","content","setContent","SubmitSolBasicDet","values","imageFile","body","solTextBanner","updatedPayload","setSolutionState","dataToStore","solutionIntialValues","basics","setSolutionIntialValues","setStep","step","innerRef","initialValues","validationSchema","onSubmit","setSubmitting","touched","handleSubmit","errors","setFieldValue","isSubmitting","autoComplete","className","label","style","color","invalid","errorMessage","name","field","form","placeholder","options","value","filter","category","component","Input","val","draggable","updatedFiles","uploadRes","filesDetails","fileUnqId","onClick","fileInfo","substring","CloseButton","isOpen","onClose","src","appConfig","alt","window","open","variant","SolutionDetails","forwardRef","ref","SolutionBasicDetails","validated","setFormData","solutionBasicDetailsref","React","current","submitForm","alert","useImperativeHandle","handleSubmitFromParent","backgroundColor","bodyClass","solutionState","Math","floor","random","proCategoryOptions","GetDropdownLabel","replace","solCreate","map","element","index","cItemType","chooseItems","solItemType","marginLeft","solItems","vnt","solPrice","solVariant","chooseVarients","solDiscount","of","bool","itemsByItemTypeP","itemsByItemTypeD","itemsByItemTypeS","varients","useTimeOutMessage","getItemsByItemTypeP","catId","itemType","getItemsByItemTypeD","getItemsByItemTypeS","onChangeItem","solIndex","getOptionsForChooseItem","apiGetVarientsByItem","ddValues","product","item_var_title","solParentVariant","isDep","defaultSolPrice","onChangeVarient","cItem","ddList","some","item","e","ind","priceDefault","var_def_price","Number","datq","SubmitData","pushSol","push","removeSol","remove","solItem","divider","onChangeItemType","paddingTop","marginRight","checked","f","index2","onChangeDepRadio","target","onChangeVarientPrice","disabled","suffix","size","icon","itemPrice","length","fill","paymentProvAvailable","emiCheck","emiArr","noOfEmis","emiValuePerMonth","SolutionCreate","solutionCreate","setSolutionCreate","pCategoryOptions","labelIfConfig","isDisabled","interactionIfConfig","valueIfConfig","children","location","useLocation","rowForEdit","mode","intials","basicOther","upload","breadCrumbList","link","sol_title","unq_id","role_name","EditandCopySol","valiInti","fetchData","childRef","useRef","childRef2","navigate","useNavigate","nextStep","submitApi","log","array1","array2","initialValue","itemObj","dgl_cat_sol_items","apiSolFinalUpdateSubmit","success","apiSolFinalSubmit","onPrevious","list","title","Object","keys","fontStyle","fontSize","to","NewSolutions","StepControlled","getSolutions","createAsyncThunk","apiGetSalesItems","apiGetProductCategory","apiGetItemsByItemType","getVarientsByItem","deleteSolutions","apiDeleteSalesItems","dataSlice","createSlice","initialState","loading","ItemList","tableData","total","pageIndex","pageSize","query","sort","order","key","reducers","setItemList","action","payload","setTableData","extraReducers","fulfilled","pending","prod_cat_title","actions"],"sourceRoot":""}