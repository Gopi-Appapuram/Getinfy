{"version":3,"file":"static/js/4370.74f19ac0.chunk.js","mappings":"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","sources":["utils/hooks/useTimeOutMessage.js","views/masterData/TaxComponent/components/AddTaxComponent.js","views/masterData/TaxComponent/components/NewTaxComponent.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import { AdaptableCard, RichTextEditor } from 'components/shared'\r\n\r\nimport {\r\n    Input,\r\n    InputGroup,\r\n    Button,\r\n    DatePicker,\r\n    Select,\r\n    FormItem,\r\n    FormContainer,\r\n    Radio,\r\n    Checkbox,\r\n    Alert\r\n} from 'components/ui'\r\nimport * as Yup from 'yup'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { useState, useRef, useEffect } from 'react'\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { GetErrorMsg, OpenNotification } from 'views/Servicefile'\r\nimport { apiCreateTaxComp, apiUpdateTaxCompValue } from 'services/TaxComponentService'\r\nimport { EditandCopyTaxComp } from 'utils/campareandCopy'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getParentAccount } from '../store/dataSlice'\r\nimport ReactHtmlParser from 'html-react-parser'\r\nimport CustomBreadcrumbs from 'components/template/CustomBreadCrumb'\r\n\r\n\r\nconst placementList = [\r\n    { name: 'Fixed', value: 'Fixed' },\r\n    { name: 'Percentage', value: 'Percentage' },\r\n\r\n]\r\n\r\nconst validationSchemaforCheckbox = Yup.object().shape({\r\n    Checkout: Yup.boolean(),\r\n    Payments: Yup.boolean(),\r\n    Settlements: Yup.boolean(),\r\n}).test('checkbox-required', 'Please select at the customer type', function (value) {\r\n\r\n    const isCheckoutSelected = value.Checkout;\r\n    const isPaymentsSelected = value.Payments;\r\n    const isSettlementsSelected = value.Settlements;\r\n    const isAtLeastOneSelected = isCheckoutSelected || isPaymentsSelected || isSettlementsSelected;\r\n    return isAtLeastOneSelected;\r\n}).nullable()\r\n\r\nconst AddTaxComponent = (props) => {\r\n\r\n\r\n    const formikRef = useRef()\r\n    const location = useLocation();\r\n    const mode = location.state?.mode ? location.state.mode : \"ADD\";\r\n    const rowForEdit = location.state?.data;\r\n    const [placement, setPlacement] = useState(rowForEdit ? rowForEdit.tax_comp_ded_type : '');\r\n\r\n    const onPlacementChange = (e) => {\r\n        setPlacement(e);\r\n    };\r\n    // const PriceInput = (props) => {\r\n    //     return <Input {...props} value={props.field.value} suffix=\"%\" />\r\n    // }\r\n\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const validationSchema = Yup.object().shape({\r\n\r\n        title: Yup.string().trim().required(\"Please enter tax title\").nullable(),\r\n        // description: Yup.string().required(\"Please enter description\").nullable(),\r\n       // acc_unq_id: Yup.string().required(\"Please enter operator\").nullable(),\r\n\r\n\r\n    })\r\n\r\n    let appModules = {\r\n        'checkout': false,\r\n        'payments': false,\r\n        'settlements': false\r\n    }\r\n\r\n    let initialValues = {\r\n        title: \"\",\r\n        description: \"\",\r\n        // app_modules: appModules,\r\n        app_modules: {\r\n            Checkout: false,\r\n            Payments: false,\r\n            settlements:false,\r\n        },\r\n        placement: \"\",\r\n        acc_unq_id: \"\"\r\n    }\r\n\r\n    const parentAccountList = useSelector((state) => state.TaxComponentList?.data?.parentAccountList)\r\n\r\n\r\n    const {\r\n        unq_id, user_type\r\n    } = useSelector((state) => state?.auth?.user)\r\n\r\n    const [message, setMessage] = useTimeOutMessage()\r\n\r\n    const checkBoxString = rowForEdit && rowForEdit.app_modules ? JSON.parse(rowForEdit.app_modules) : appModules;\r\n\r\n    const [taxCompInitVal, setInitValues] = useState(EditandCopyTaxComp(initialValues, rowForEdit ? rowForEdit : initialValues))\r\n\r\n    const [checkboxValues, setCheckboxValues] = useState(checkBoxString);\r\n\r\n    const { enterAccount, acc_mno_id } = useSelector((state) => state.auth.user)\r\n\r\n\r\n    useEffect(() => {\r\n        if (rowForEdit) {\r\n\r\n            const taxCompEditIntialValues = EditandCopyTaxComp(taxCompInitVal, rowForEdit);\r\n\r\n            setInitValues(taxCompEditIntialValues)\r\n\r\n        }\r\n\r\n    }, [mode, taxCompInitVal])\r\n\r\n    useEffect(() => {\r\n        dispatch(getParentAccount({ enterAccount }))\r\n\r\n    }, [dispatch, enterAccount])\r\n\r\n    const handleCheckboxChange = async (event, name) => {\r\n\r\n        setCheckboxValues((prevValues) => ({\r\n            ...prevValues,\r\n            [name]: event.target.checked\r\n        }));\r\n    };\r\n    const submitApi = async (values) => {\r\n\r\n        let intialValues = {\r\n            title: values.title,\r\n            app_modules: checkboxValues,\r\n            description: values.description,\r\n            acc_unq_id: values.acc_unq_id\r\n        }\r\n\r\n        setInitValues(intialValues)\r\n        // formikRef.current.handleSubmit()\r\n        // const tax_comp_desc = ReactHtmlParser(values?.description);\r\n        let payload = {\r\n            \"tax_comp_title\": values.title.trim(),\r\n            \"app_modules\": JSON.stringify(intialValues.app_modules),\r\n            \"tax_comp_desc\": values?.description,   \r\n            \"md_tax_status\": \"ACTIVE\",\r\n            \"tax_comp_ded_type\": placement,\r\n            \"dgl_acc_mno_id\": acc_mno_id,\r\n            \"tax_value\": \"30\",\r\n            // \"unq_id\": values.acc_unq_id,\r\n            \"unq_id\": user_type !== \"GlobalMno\" ? enterAccount : values.acc_unq_id\r\n        }\r\n\r\n        if (mode === \"ADD\") {\r\n            const resp = await apiCreateTaxComp(payload)\r\n            if (resp.status === 'success') {\r\n                OpenNotification('success', 'Created successfully ')\r\n                navigate('/masterDataMenu-item-view-4')\r\n            } else if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n        } else if (mode === \"EDIT\") {\r\n            payload.id = rowForEdit.id\r\n\r\n            payload.unq_id = user_type !== \"GlobalMno\" ? enterAccount : values.acc_unq_id\r\n            const resp = await apiUpdateTaxCompValue(payload, rowForEdit.id)\r\n            if (resp.status === 'success') {\r\n                OpenNotification('success', 'Updated successfully')\r\n\r\n                navigate('/masterDataMenu-item-view-4')\r\n\r\n            } else if (resp.status === 'failed') {\r\n                setMessage(GetErrorMsg(resp));\r\n            }\r\n        }\r\n    }\r\n\r\n  \r\n\r\n\r\n    const validateCheckBox = async (passedValue) => {\r\n\r\n        try {\r\n            await validationSchemaforCheckbox.validate({ ...checkboxValues });\r\n        } catch (error) {\r\n            return error.message;\r\n        }\r\n\r\n    }\r\n\r\n    let  breadCrumbList=[{\r\n        name:'Master Data',\r\n        // link:\"/home\"\r\n    },\r\n    {\r\n        name:'Tax Component',\r\n        link:\"/masterDataMenu-item-view-4\"\r\n    },\r\n    {\r\n        name: `Add Tax Component`,\r\n    }]\r\n    \r\n    \r\n    if(mode===\"EDIT\"){\r\n    breadCrumbList = [\r\n        {\r\n            name:'Master Data',\r\n            // link:\"/home\"\r\n        },\r\n        {\r\n            name:'Tax Component',\r\n            link:\"/masterDataMenu-item-view-4\"\r\n        },\r\n        {\r\n          name: rowForEdit?.tax_comp_title,\r\n          link: '/masterDataMenu-item-view-4',\r\n          state:rowForEdit\r\n      },\r\n        {\r\n            name: `Edit Tax Component`,\r\n        },\r\n    \r\n    \r\n    ]\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {message && <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                {message}\r\n            </Alert>}\r\n\r\n            <div>\r\n            <div className='mb-3'>\r\n                {/* Master Data / Tax Component / Add Tax Component */}\r\n                <CustomBreadcrumbs  list={breadCrumbList} />\r\n                </div>\r\n                <h3 className='mb-5'>{mode === \"EDIT\" ? \"Edit \" : \"Create \"}Tax Component</h3>\r\n\r\n                <Formik\r\n                    innerRef={formikRef}\r\n                    initialValues={taxCompInitVal}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        // if (placement != \"\" && (checkboxValues.checkout || checkboxValues.payments || checkboxValues.settlements)) {\r\n                            setSubmitting(true)\r\n                            submitApi(values)\r\n                        // } else {\r\n                        //     placement == \"\" ? OpenNotification(\"warning\", \"Please select deduction type\") :\r\n                        //         OpenNotification(\"warning\", \"Please select at least one of the applicable modules\")\r\n                        // }\r\n                    }}\r\n                >\r\n                    {({ values, touched, errors, isSubmitting }) => {\r\n                        return (\r\n                            <Form>\r\n                                <div className=\"p-5\" style={{ backgroundColor: \"#F5F5F5\" }}>\r\n                                    <AdaptableCard className=\"h-full\" bodyClass=\"h-full\" divider>\r\n                                        <FormContainer>\r\n                                            <div>\r\n                                                <div className=\"md:grid gap-4 mx-4 pl-2\">\r\n                                                    <div className='md:grid grid-cols-2 gap-4'>\r\n                                                        {/* <FormItem\r\n                                                            label={<p>Operator <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                            invalid={\r\n                                                                errors.acc_unq_id && touched.acc_unq_id\r\n                                                            }\r\n                                                            errorMessage={errors.acc_unq_id}\r\n                                                        >\r\n                                                            <Field name=\"acc_unq_id\" >\r\n                                                                {({ field, form }) => (\r\n                                                                    <Select\r\n                                                                        isDisabled={user_type !== \"GlobalMno\" ? true : false}\r\n                                                                        placeholder=\"Select Operator\"\r\n                                                                        field={field}\r\n                                                                        form={form}\r\n                                                                        options={parentAccountList}\r\n                                                                        value={user_type !== \"GlobalMno\" ? parentAccountList?.filter(\r\n                                                                            (label) =>\r\n                                                                                label.acc_unq_id === enterAccount\r\n                                                                        ) : parentAccountList?.filter(\r\n                                                                            (label) =>\r\n                                                                                label.acc_unq_id === values.acc_unq_id\r\n                                                                        )}\r\n                                                                        onChange={(label) =>\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                label.acc_unq_id\r\n                                                                            )\r\n                                                                        }\r\n                                                                    />\r\n                                                                )}\r\n                                                            </Field>\r\n                                                        </FormItem> */}\r\n                                                        <FormItem\r\n                                                            label={<p>Operator <span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                            invalid={\r\n                                                                errors.acc_unq_id && touched.acc_unq_id\r\n                                                            }\r\n                                                            errorMessage={errors.acc_unq_id}\r\n                                                        >\r\n                                                            <Field name=\"acc_unq_id\"  validate={async (passedValue) => {\r\n                                                                    if (user_type === \"GlobalMno\") {\r\n                                                                        try {\r\n                                                                            await Yup.string().required('Please enter operator').validate(passedValue);\r\n                                                                        } catch (error) {\r\n                                                                            return error.message;\r\n                                                                        }\r\n                                                                    }\r\n                                                                }} >\r\n                                                                {({ field, form }) => (\r\n                                                                    <Select\r\n                                                                        isDisabled={user_type !== \"GlobalMno\" ? true : false}\r\n                                                                        placeholder=\"Select Operator\"\r\n                                                                        field={field}\r\n                                                                        form={form}\r\n                                                                        options={parentAccountList}\r\n                                                                        value={user_type !== \"GlobalMno\" ? parentAccountList?.filter(\r\n                                                                            (label) =>\r\n                                                                                label.acc_unq_id === enterAccount\r\n                                                                        ) : parentAccountList?.filter(\r\n                                                                            (label) =>\r\n                                                                                label.acc_unq_id === values.acc_unq_id\r\n                                                                        )}\r\n                                                                        onChange={(label) =>\r\n                                                                            form.setFieldValue(\r\n                                                                                field.name,\r\n                                                                                label.acc_unq_id\r\n                                                                            )\r\n                                                                        }\r\n                                                                    />\r\n                                                                  \r\n                                                                )\r\n                                                               \r\n                                                                }\r\n                                                               \r\n                                                            </Field>\r\n                                                        </FormItem>\r\n                                                    </div>\r\n                                                    <div className='md:grid grid-cols-2 gap-4'>\r\n                                                    <FormItem\r\n                                                        label={<p>Tax Title<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                        className=''\r\n                                                        invalid={errors.title && touched.title}\r\n                                                        errorMessage={errors.title}\r\n                                                    >\r\n                                                        <Field\r\n                                                            type=\"text\"\r\n                                                            autoComplete=\"off\"\r\n                                                            name=\"title\"\r\n                                                            placeholder=\"Enter Tax Title\"\r\n                                                            component={Input}\r\n                                                            // className='w-1/3'\r\n                                                       \r\n                                                        />\r\n                                                    </FormItem>\r\n                                                    </div>\r\n                                                    <FormItem\r\n                                                        label={<p>Deduction Type<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                    >\r\n                                                        <Radio.Group value={placement} onChange={onPlacementChange}>\r\n                                                            {placementList.map((item) => (\r\n                                                                <Radio value={item.value} id={item.value} key={item.value}>\r\n                                                                    {item.name}\r\n                                                                </Radio>\r\n                                                            ))}\r\n                                                        </Radio.Group>\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                        label=\"Description\"\r\n                                                        className=''\r\n                                                    // invalid={errors.description && touched.description}\r\n                                                    // errorMessage={errors.description}\r\n                                                    >\r\n                                                        <Field name=\"description\"  >\r\n                                                            {({ field, form }) => (\r\n                                                                <RichTextEditor style={{ width: \"60%\" }}\r\n                                                                    value={field.value}\r\n                                                                    onChange={(val) =>\r\n                                                                        form.setFieldValue(field.name, val)\r\n                                                                    }\r\n                                                                />\r\n                                                            )}\r\n                                                        </Field>\r\n\r\n\r\n                                                    </FormItem>\r\n                                                    <FormItem\r\n                                                            label={<p>Applicable Modules<span style={{ color: 'red' }}>{'*'}</span></p>}\r\n                                                            invalid={touched.app_modules && (checkboxValues[\"Checkout\"] || checkboxValues[\"Payments\"] || checkboxValues[\"Settlements\"]) !== true}\r\n                                                            errorMessage={\"Please select at least one of the applicable modules\"}\r\n                                                        >\r\n                                                            <div className=\"flex mt-2\">\r\n                                                                <div className='flex'>\r\n\r\n                                                                    <p style={{ display: \"flex\", marginTop: \"2%\", marginLeft:\"3px\", }} > <Field className='h-5 w-5'\r\n\r\n                                                                        type=\"checkbox\"\r\n                                                                        name=\"app_modules.Checkout\" // Match the name used in Yup validation schema\r\n                                                                        checked={checkboxValues[\"Checkout\"]}\r\n                                                                        onChange={(e) => handleCheckboxChange(e, \"Checkout\")}\r\n                                                                        validate={validateCheckBox}\r\n                                                                    />\r\n                                                                        <label className='ml-2 ' htmlFor=\"app_modules.Checkout\">Checkout</label>\r\n                                                                    </p>\r\n                                                                </div>\r\n                                                                <div className='flex ml-3'>\r\n                                                                    <p  style={{ display: \"flex\", marginTop: \"2%\", marginLeft:\"3px\", }} >\r\n                                                                        <Field\r\n                                                                        className='h-5 w-5'\r\n                                                                            type=\"checkbox\"\r\n                                                                            name=\"app_modules.Payments\" // Match the name used in Yup validation schema\r\n                                                                            checked={checkboxValues[\"Payments\"]}\r\n                                                                            onChange={(e) => handleCheckboxChange(e, \"Payments\")}\r\n                                                                            validate={validateCheckBox}\r\n                                                                        />\r\n                                                                        <label className='ml-2' htmlFor=\"app_modules.Payments\">Payments</label>\r\n                                                                    </p>\r\n\r\n                                                                </div>\r\n                                                                <div className='flex ml-3'>\r\n                                                                    <p  style={{ display: \"flex\", marginTop: \"2%\", marginLeft:\"3px\", }} >\r\n                                                                        <Field\r\n                                                                        className='h-5 w-5'\r\n                                                                            type=\"checkbox\"\r\n                                                                            name=\"app_modules.Settlements\" // Match the name used in Yup validation schema\r\n                                                                            checked={checkboxValues[\"Settlements\"]}\r\n                                                                            onChange={(e) => handleCheckboxChange(e, \"Settlements\")}\r\n                                                                            validate={validateCheckBox}\r\n                                                                        />\r\n                                                                        <label className='ml-2' htmlFor=\"app_modules.Settlements\">Settlements</label>\r\n                                                                    </p>\r\n\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </FormItem>\r\n                                                </div>\r\n                                            </div>\r\n                                        </FormContainer>\r\n                                    </AdaptableCard>\r\n                                </div>\r\n                                <div className=\" pt-4 text-right w-full flex justify-end\" >\r\n                                    <Link\r\n                                        className=\"block lg:inline-block md:mb-0 mb-4\"\r\n                                        to=\"/masterDataMenu-item-view-4\"\r\n                                    >\r\n                                        <Button\r\n                                            type='button'\r\n                                            className=\"mx-2\"\r\n                                            style={{\r\n                                                backgroundColor: \"#4D4D4D\",\r\n                                                fontStyle: 'normal',\r\n                                                fontSize: '18px'\r\n                                            }}\r\n                                            variant=\"solid\"\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n                                    </Link>\r\n\r\n                                    <Button type='submit' variant='solid' style={{\r\n                                        fontStyle: 'normal',\r\n                                        fontSize: '18px',\r\n                                    }} >\r\n                                        {'Submit'}\r\n                                    </Button>\r\n                                </div>\r\n                            </Form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddTaxComponent\r\n","import React from 'react'\r\nimport AddTaxComponent from './AddTaxComponent'\r\nexport default function NewCustomerCategory() {\r\n   \r\n  return (\r\n    <>\r\n    {/* <div>Master Data / Tax Component / Add Tax Component</div> */}\r\n    <div className='mt-5'>\r\n      {/* <h3>Create Tax Component</h3> */}\r\n      <AddTaxComponent />\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n"],"names":["interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","placementList","name","value","validationSchemaforCheckbox","Yup","shape","Checkout","Payments","Settlements","test","isCheckoutSelected","isPaymentsSelected","isSettlementsSelected","nullable","props","formikRef","useRef","location","useLocation","mode","state","rowForEdit","data","tax_comp_ded_type","placement","setPlacement","onPlacementChange","e","navigate","useNavigate","dispatch","useDispatch","validationSchema","title","trim","required","initialValues","description","app_modules","settlements","acc_unq_id","parentAccountList","useSelector","TaxComponentList","auth","user","user_type","unq_id","useTimeOutMessage","checkBoxString","JSON","parse","EditandCopyTaxComp","taxCompInitVal","setInitValues","checkboxValues","setCheckboxValues","enterAccount","acc_mno_id","taxCompEditIntialValues","getParentAccount","handleCheckboxChange","event","prevValues","target","checked","submitApi","values","intialValues","payload","stringify","apiCreateTaxComp","resp","status","OpenNotification","GetErrorMsg","id","apiUpdateTaxCompValue","validateCheckBox","passedValue","validate","breadCrumbList","link","tax_comp_title","className","type","showIcon","list","innerRef","onSubmit","setSubmitting","touched","errors","isSubmitting","style","backgroundColor","bodyClass","divider","label","color","invalid","errorMessage","field","form","isDisabled","placeholder","options","filter","onChange","setFieldValue","autoComplete","component","Input","map","item","width","val","display","marginTop","marginLeft","htmlFor","to","fontStyle","fontSize","variant","NewCustomerCategory"],"sourceRoot":""}