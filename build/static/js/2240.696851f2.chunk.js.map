{"version":3,"file":"static/js/2240.696851f2.chunk.js","mappings":"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","sources":["components/layout/BlankLayout.js","components/template/ThemeConfigurator/ModeSwitcher.js","components/template/ThemeConfigurator/LayoutSwitcher.js","components/template/ThemeConfigurator/ThemeSwitcher.js","components/template/ThemeConfigurator/DirectionSwitcher.js","components/template/ThemeConfigurator/NavModeSwitcher.js","components/template/ThemeConfigurator/CopyButton.js","components/template/ThemeConfigurator/index.js","components/template/SidePanel/SidePanelContent.js","components/template/SidePanel/index.js","utils/hoc/withHeaderItem.js"],"sourcesContent":["import React from 'react'\r\nimport View from 'views'\r\nimport SidePanel from 'components/template/SidePanel'\r\n\r\nconst BlankLayout = (props) => {\r\n    return (\r\n        <div className=\"app-layout-blank flex flex-auto flex-col h-[100vh]\">\r\n            <View {...props} />\r\n            <SidePanel className=\"hidden\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlankLayout\r\n","import React, { useCallback } from 'react'\r\nimport useDarkMode from 'utils/hooks/useDarkMode'\r\nimport { Switcher } from 'components/ui'\r\n\r\nconst ModeSwitcher = () => {\r\n    const [isDark, setIsDark] = useDarkMode()\r\n\r\n    const onSwitchChange = useCallback(\r\n        (checked) => {\r\n            setIsDark(checked ? 'dark' : 'light')\r\n        },\r\n        [setIsDark]\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <Switcher\r\n                defaultChecked={isDark}\r\n                onChange={(checked) => onSwitchChange(checked)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModeSwitcher\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Segment } from 'components/ui'\r\nimport { SegmentItemOption, DoubleSidedImage } from 'components/shared'\r\nimport { HiCheckCircle } from 'react-icons/hi'\r\nimport useThemeClass from 'utils/hooks/useThemeClass'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setLayout } from 'store/theme/themeSlice'\r\nimport {\r\n    LAYOUT_TYPE_CLASSIC,\r\n    LAYOUT_TYPE_MODERN,\r\n    LAYOUT_TYPE_STACKED_SIDE,\r\n    LAYOUT_TYPE_SIMPLE,\r\n    LAYOUT_TYPE_DECKED,\r\n    LAYOUT_TYPE_BLANK,\r\n} from 'constants/theme.constant'\r\n\r\nconst layouts = [\r\n    {\r\n        value: LAYOUT_TYPE_CLASSIC,\r\n        label: 'Classic',\r\n        src: '/img/thumbs/layouts/classic.jpg',\r\n        srcDark: '/img/thumbs/layouts/classic-dark.jpg',\r\n    },\r\n    {\r\n        value: LAYOUT_TYPE_MODERN,\r\n        label: 'Mordern',\r\n        src: '/img/thumbs/layouts/modern.jpg',\r\n        srcDark: '/img/thumbs/layouts/modern-dark.jpg',\r\n    },\r\n    {\r\n        value: LAYOUT_TYPE_STACKED_SIDE,\r\n        label: 'Stacked Side',\r\n        src: '/img/thumbs/layouts/stackedSide.jpg',\r\n        srcDark: '/img/thumbs/layouts/stackedSide-dark.jpg',\r\n    },\r\n    {\r\n        value: LAYOUT_TYPE_SIMPLE,\r\n        label: 'Simple',\r\n        src: '/img/thumbs/layouts/simple.jpg',\r\n        srcDark: '/img/thumbs/layouts/simple-dark.jpg',\r\n    },\r\n    {\r\n        value: LAYOUT_TYPE_DECKED,\r\n        label: 'Decked',\r\n        src: '/img/thumbs/layouts/decked.jpg',\r\n        srcDark: '/img/thumbs/layouts/decked-dark.jpg',\r\n    },\r\n    {\r\n        value: LAYOUT_TYPE_BLANK,\r\n        label: 'Blank',\r\n        src: '/img/thumbs/layouts/blank.jpg',\r\n        srcDark: '/img/thumbs/layouts/blank-dark.jpg',\r\n    },\r\n]\r\n\r\nconst LayoutSwitcher = () => {\r\n    const type = useSelector((state) => state.theme.layout.type)\r\n    const dispatch = useDispatch()\r\n\r\n    const onLayoutSelect = (val) => {\r\n        dispatch(setLayout(val))\r\n    }\r\n\r\n    const { textTheme } = useThemeClass()\r\n\r\n    return (\r\n        <div>\r\n            <Segment\r\n                className=\"w-full\"\r\n                value={[type]}\r\n                onChange={(val) => onLayoutSelect(val[0])}\r\n            >\r\n                <div className=\"grid grid-cols-3 gap-4 w-full\">\r\n                    {layouts.map((layout) => (\r\n                        <Segment.Item value={layout.value} key={layout.value}>\r\n                            {({\r\n                                ref,\r\n                                active,\r\n                                onSegmentItemClick,\r\n                                disabled,\r\n                            }) => {\r\n                                return (\r\n                                    <div className=\"text-center\">\r\n                                        <SegmentItemOption\r\n                                            hoverable\r\n                                            ref={ref}\r\n                                            active={active}\r\n                                            disabled={disabled}\r\n                                            defaultGutter={false}\r\n                                            onSegmentItemClick={\r\n                                                onSegmentItemClick\r\n                                            }\r\n                                            className=\"relative min-h-[80px] w-full\"\r\n                                            customCheck={\r\n                                                <HiCheckCircle\r\n                                                    className={classNames(\r\n                                                        textTheme,\r\n                                                        'absolute top-2 right-2 text-lg'\r\n                                                    )}\r\n                                                />\r\n                                            }\r\n                                        >\r\n                                            <DoubleSidedImage\r\n                                                className=\"rounded-md\"\r\n                                                src={layout.src}\r\n                                                darkModeSrc={layout.srcDark}\r\n                                                alt=\"\"\r\n                                            />\r\n                                        </SegmentItemOption>\r\n                                        <div\r\n                                            className={classNames(\r\n                                                active && textTheme,\r\n                                                'mt-2 font-semibold'\r\n                                            )}\r\n                                        >\r\n                                            {layout.label}\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            }}\r\n                        </Segment.Item>\r\n                    ))}\r\n                </div>\r\n            </Segment>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LayoutSwitcher\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Select, Badge } from 'components/ui'\r\nimport { setThemeColor, setThemeColorLevel } from 'store/theme/themeSlice'\r\nimport { HiCheck } from 'react-icons/hi'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { components } from 'react-select'\r\n\r\nconst { Control } = components\r\n\r\nconst colorList = [\r\n    { label: 'Red', value: 'red' },\r\n    { label: 'Orange', value: 'orange' },\r\n    { label: 'Amber', value: 'amber' },\r\n    { label: 'Yellow', value: 'yellow' },\r\n    { label: 'Lime', value: 'lime' },\r\n    { label: 'Green', value: 'green' },\r\n    { label: 'Emerald', value: 'emerald' },\r\n    { label: 'Teal', value: 'teal' },\r\n    { label: 'Cyan', value: 'cyan' },\r\n    { label: 'Sky', value: 'sky' },\r\n    { label: 'Blue', value: 'blue' },\r\n    { label: 'Indigo', value: 'indigo' },\r\n    { label: 'Violet', value: 'violet' },\r\n    { label: 'Purple', value: 'purple' },\r\n    { label: 'Fuchsia', value: 'fuchsia' },\r\n    { label: 'Pink', value: 'pink' },\r\n    { label: 'Rose', value: 'rose' },\r\n]\r\n\r\nconst colorLevelList = [\r\n    { label: '400', value: 400 },\r\n    { label: '500', value: 500 },\r\n    { label: '600', value: 600 },\r\n    { label: '700', value: 700 },\r\n    { label: '800', value: 800 },\r\n    { label: '900', value: 900 },\r\n]\r\n\r\nconst ColorBadge = ({ className, themeColor }) => {\r\n    const primaryColorLevel = useSelector(\r\n        (state) => state.theme.primaryColorLevel\r\n    )\r\n\r\n    return (\r\n        <Badge\r\n            className={className}\r\n            innerClass={classNames(`bg-${themeColor}-${primaryColorLevel}`)}\r\n        />\r\n    )\r\n}\r\n\r\nconst CustomSelectOption = ({ innerProps, label, value, isSelected }) => {\r\n    return (\r\n        <div\r\n            className={`flex items-center justify-between p-2 ${\r\n                isSelected\r\n                    ? 'bg-gray-100 dark:bg-gray-500'\r\n                    : 'hover:bg-gray-50 dark:hover:bg-gray-600'\r\n            }`}\r\n            {...innerProps}\r\n        >\r\n            <div className=\"flex items-center gap-2\">\r\n                <ColorBadge themeColor={value} />\r\n                <span>{label}</span>\r\n            </div>\r\n            {isSelected && <HiCheck className=\"text-emerald-500 text-xl\" />}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CustomControl = ({ children, ...props }) => {\r\n    const selected = props.getValue()[0]\r\n\r\n    const themeColor = useSelector((state) => state.theme.themeColor)\r\n\r\n    return (\r\n        <Control {...props}>\r\n            {selected && (\r\n                <ColorBadge\r\n                    themeColor={themeColor}\r\n                    className=\"ltr:ml-4 rtl:mr-4\"\r\n                />\r\n            )}\r\n            {children}\r\n        </Control>\r\n    )\r\n}\r\n\r\nconst ThemeSwitcher = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const themeColor = useSelector((state) => state.theme.themeColor)\r\n    const primaryColorLevel = useSelector(\r\n        (state) => state.theme.primaryColorLevel\r\n    )\r\n\r\n    const onThemeColorChange = ({ value }) => {\r\n        dispatch(setThemeColor(value))\r\n    }\r\n\r\n    const onThemeColorLevelChange = ({ value }) => {\r\n        dispatch(setThemeColorLevel(value))\r\n    }\r\n\r\n    return (\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n            <Select\r\n                size=\"sm\"\r\n                options={colorList}\r\n                components={{\r\n                    Option: CustomSelectOption,\r\n                    Control: CustomControl,\r\n                }}\r\n                value={colorList.filter((color) => color.value === themeColor)}\r\n                onChange={onThemeColorChange}\r\n            />\r\n            <Select\r\n                size=\"sm\"\r\n                options={colorLevelList}\r\n                value={colorLevelList.filter(\r\n                    (color) => color.value === primaryColorLevel\r\n                )}\r\n                onChange={onThemeColorLevelChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThemeSwitcher\r\n","import React from 'react'\r\nimport { InputGroup, Button } from 'components/ui'\r\nimport useDirection from 'utils/hooks/useDirection'\r\nimport { THEME_ENUM } from 'constants/theme.constant'\r\n\r\nconst dirList = [\r\n    { value: THEME_ENUM.DIR_LTR, label: 'LTR' },\r\n    { value: THEME_ENUM.DIR_RTL, label: 'RTL' },\r\n]\r\n\r\nconst DirectionSwitcher = ({ callBackClose }) => {\r\n    const [direction, updateDirection] = useDirection()\r\n\r\n    const onDirChange = (val) => {\r\n        updateDirection(val)\r\n        callBackClose?.()\r\n    }\r\n\r\n    return (\r\n        <InputGroup size=\"sm\">\r\n            {dirList.map((dir) => (\r\n                <Button\r\n                    key={dir.value}\r\n                    active={direction === dir.value}\r\n                    onClick={() => onDirChange(dir.value)}\r\n                >\r\n                    {dir.label}\r\n                </Button>\r\n            ))}\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default DirectionSwitcher\r\n","import React from 'react'\r\nimport { Radio } from 'components/ui'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setNavMode } from 'store/theme/themeSlice'\r\nimport { NAV_MODE_THEMED } from 'constants/theme.constant'\r\n\r\nconst NavModeSwitcher = () => {\r\n    const navMode = useSelector((state) => state.theme.navMode)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSetNavMode = (val) => {\r\n        dispatch(setNavMode(val))\r\n    }\r\n\r\n    return (\r\n        <Radio.Group\r\n            value={navMode === NAV_MODE_THEMED ? NAV_MODE_THEMED : 'default'}\r\n            onChange={(val) => onSetNavMode(val)}\r\n        >\r\n            <Radio value=\"default\">Default</Radio>\r\n            <Radio value={NAV_MODE_THEMED}>Themed</Radio>\r\n        </Radio.Group>\r\n    )\r\n}\r\n\r\nexport default NavModeSwitcher\r\n","import React from 'react'\r\nimport { Button, toast, Notification } from 'components/ui'\r\nimport { themeConfig } from 'configs/theme.config'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst CopyButton = () => {\r\n    const theme = useSelector((state) => state.theme)\r\n\r\n    const handleCopy = () => {\r\n        const config = {\r\n            ...themeConfig,\r\n            ...theme,\r\n            layout: {\r\n                type: theme.layout.type,\r\n                sideNavCollapse: theme.layout.sideNavCollapse,\r\n            },\r\n            panelExpand: false,\r\n        }\r\n\r\n        navigator.clipboard.writeText(JSON.stringify(config, null, 2))\r\n\r\n        toast.push(\r\n            <Notification title=\"Copy Success\" type=\"success\">\r\n                Please replace themeConfig in 'src/configs/themeConfig.js'\r\n            </Notification>,\r\n            {\r\n                placement: 'top-center',\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Button block variant=\"solid\" onClick={handleCopy}>\r\n            Copy config\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default CopyButton\r\n","import React from 'react'\r\nimport ModeSwitcher from './ModeSwitcher'\r\nimport LayoutSwitcher from './LayoutSwitcher'\r\nimport ThemeSwitcher from './ThemeSwitcher'\r\nimport DirectionSwitcher from './DirectionSwitcher'\r\nimport NavModeSwitcher from './NavModeSwitcher'\r\nimport CopyButton from './CopyButton'\r\n\r\nconst ThemeConfigurator = ({ callBackClose }) => {\r\n    return (\r\n        <div className=\"flex flex-col h-full justify-between\">\r\n            <div className=\"flex flex-col gap-y-10 mb-6\">\r\n                <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                        <h6>Dark Mode</h6>\r\n                        <span>Switch theme to dark mode</span>\r\n                    </div>\r\n                    <ModeSwitcher />\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                        <h6>Direction</h6>\r\n                        <span>Select a direction</span>\r\n                    </div>\r\n                    <DirectionSwitcher callBackClose={callBackClose} />\r\n                </div>\r\n                <div>\r\n                    <h6 className=\"mb-3\">Nav Mode</h6>\r\n                    <NavModeSwitcher />\r\n                </div>\r\n                <div>\r\n                    <h6 className=\"mb-3\">Theme</h6>\r\n                    <ThemeSwitcher />\r\n                </div>\r\n                <div>\r\n                    <h6 className=\"mb-3\">Layout</h6>\r\n                    <LayoutSwitcher />\r\n                </div>\r\n            </div>\r\n            <CopyButton />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThemeConfigurator\r\n","import React from 'react'\r\nimport ThemeConfigurator from 'components/template/ThemeConfigurator'\r\n\r\nconst SidePanelContent = (props) => {\r\n    return <ThemeConfigurator {...props} />\r\n}\r\n\r\nexport default SidePanelContent\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Drawer } from 'components/ui'\r\nimport { HiOutlineCog } from 'react-icons/hi'\r\nimport SidePanelContent from './SidePanelContent'\r\nimport withHeaderItem from 'utils/hoc/withHeaderItem'\r\nimport { setPanelExpand } from 'store/theme/themeSlice'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nexport const SidePanel = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const { className, ...rest } = props\r\n\r\n    const panelExpand = useSelector((state) => state.theme.panelExpand)\r\n\r\n    const direction = useSelector((state) => state.theme.direction)\r\n\r\n    const openPanel = () => {\r\n        dispatch(setPanelExpand(true))\r\n    }\r\n\r\n    const closePanel = () => {\r\n        dispatch(setPanelExpand(false))\r\n        const bodyClassList = document.body.classList\r\n        if (bodyClassList.contains('drawer-lock-scroll')) {\r\n            bodyClassList.remove('drawer-lock-scroll', 'drawer-open')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={classNames('text-2xl', className)}\r\n                onClick={openPanel}\r\n                {...rest}\r\n            >\r\n                <HiOutlineCog />\r\n            </div>\r\n            <Drawer\r\n                title=\"Theme Config\"\r\n                isOpen={panelExpand}\r\n                onClose={closePanel}\r\n                onRequestClose={closePanel}\r\n                placement={direction === 'rtl' ? 'left' : 'right'}\r\n                width={375}\r\n            >\r\n                <SidePanelContent callBackClose={closePanel} />\r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withHeaderItem(SidePanel)\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\nconst withHeaderItem = (Component) => (props) => {\r\n    const { className, hoverable = true } = props\r\n\r\n    return (\r\n        <Component\r\n            {...props}\r\n            className={classNames(\r\n                'header-action-item',\r\n                hoverable && 'header-action-item-hoverable',\r\n                className\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default withHeaderItem\r\n"],"names":["props","className","useDarkMode","isDark","setIsDark","onSwitchChange","useCallback","checked","defaultChecked","onChange","layouts","value","LAYOUT_TYPE_CLASSIC","label","src","srcDark","LAYOUT_TYPE_MODERN","LAYOUT_TYPE_STACKED_SIDE","LAYOUT_TYPE_SIMPLE","LAYOUT_TYPE_DECKED","LAYOUT_TYPE_BLANK","type","useSelector","state","theme","layout","dispatch","useDispatch","textTheme","useThemeClass","val","setLayout","onLayoutSelect","map","ref","active","onSegmentItemClick","disabled","hoverable","defaultGutter","customCheck","classNames","darkModeSrc","alt","Control","components","colorList","colorLevelList","ColorBadge","themeColor","primaryColorLevel","innerClass","CustomSelectOption","innerProps","isSelected","CustomControl","children","selected","getValue","size","options","Option","filter","color","setThemeColor","setThemeColorLevel","dirList","THEME_ENUM","callBackClose","useDirection","direction","updateDirection","dir","onClick","navMode","NAV_MODE_THEMED","setNavMode","onSetNavMode","block","variant","config","themeConfig","sideNavCollapse","panelExpand","navigator","clipboard","writeText","JSON","stringify","toast","title","placement","withHeaderItem","rest","closePanel","setPanelExpand","bodyClassList","document","body","classList","contains","remove","isOpen","onClose","onRequestClose","width","Component"],"sourceRoot":""}