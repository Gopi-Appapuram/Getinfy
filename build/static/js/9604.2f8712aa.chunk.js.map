{"version":3,"file":"static/js/9604.2f8712aa.chunk.js","mappings":"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","sources":["components/template/Logo.js","utils/hooks/useTimeOutMessage.js","views/auth/SignIn/SignInForm.js","views/auth/SignIn/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { APP_NAME } from 'constants/app.constant'\r\nimport { useSelector } from 'react-redux'\r\nimport appConfig from 'configs/app.config'\r\n\r\nconst LOGO_SRC_PATH = '/img/logo/'\r\n\r\nconst Logo = (props) => {\r\n    const { type, mode, gutter, className, imgClass, style, logoWidth } = props\r\n    const { largeLogo, smallLogo, themeLargeLogo, themeSmallLogo } =\r\n        useSelector((state) => state.locale)\r\n    return (\r\n        <div\r\n            className={classNames('logo', className, gutter)}\r\n            style={{\r\n                ...style,\r\n                ...{ width: logoWidth },\r\n            }}\r\n        >\r\n            {largeLogo && type === 'full' && mode === 'light' ? (\r\n                <img\r\n                    className={imgClass}\r\n                    src={`${appConfig.apiPrefix}/media/uniqid/${largeLogo}`}\r\n                    alt=\"large logo\"\r\n                />\r\n            ) : smallLogo && type === 'streamline' && mode === 'light' ? (\r\n                <img\r\n                    className={imgClass}\r\n                    src={`${appConfig.apiPrefix}/media/uniqid/${smallLogo}`}\r\n                    alt=\"small logo\"\r\n                />\r\n            ) : themeLargeLogo && type === 'full' && mode === 'dark' ? (\r\n                <img\r\n                    className={imgClass}\r\n                    src={`${appConfig.apiPrefix}/media/uniqid/${themeLargeLogo}`}\r\n                    alt=\"small logo\"\r\n                />\r\n            ) : themeLargeLogo && type === 'full' && mode === 'dark' ? (\r\n                <img\r\n                    className={imgClass}\r\n                    src={`${appConfig.apiPrefix}/media/uniqid/${themeLargeLogo}`}\r\n                    alt=\"small logo\"\r\n                />\r\n            ) : themeSmallLogo && type === 'streamline' && mode === 'dark' ? (\r\n                <img\r\n                    className={imgClass}\r\n                    src={`${appConfig.apiPrefix}/media/uniqid/${themeSmallLogo}`}\r\n                    alt=\"small logo\"\r\n                />\r\n            ) : (\r\n                <img\r\n                    className={imgClass}\r\n                    src={`${LOGO_SRC_PATH}logo-${mode}-${type}.png`}\r\n                    alt={`${APP_NAME} logo`}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nLogo.defaultProps = {\r\n    mode: 'light',\r\n    type: 'full',\r\n    logoWidth: 'auto',\r\n}\r\n\r\nLogo.propTypes = {\r\n    mode: PropTypes.oneOf(['light', 'dark']),\r\n    type: PropTypes.oneOf(['full', 'streamline']),\r\n    gutter: PropTypes.string,\r\n    imgClass: PropTypes.string,\r\n    logoWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n}\r\n\r\nexport default Logo\r\n","import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import React, { useEffect, useState } from 'react'\r\nimport Logo from 'components/template/Logo'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    FormItem,\r\n    FormContainer,\r\n    Alert,\r\n} from 'components/ui'\r\nimport { PasswordInput, ActionLink } from 'components/shared'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport useAuth from 'utils/hooks/useAuth'\r\nimport axios from 'axios'\r\nimport { setUser } from 'store/auth/userSlice'\r\nimport { useDispatch } from 'react-redux'\r\nimport { GetErrorMsg, OpenNotification } from 'views/Servicefile'\r\nimport useDarkMode from 'utils/hooks/useDarkMode'\r\nimport useDirection from 'utils/hooks/useDirection'\r\n\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    usernameOrEmail: Yup.string().required('Please enter your user name'),\r\n    password: Yup.string().required('Please enter your password'),\r\n    rememberMe: Yup.bool(),\r\n})\r\n\r\nconst SignInForm = (props) => {\r\n    const dispatch = useDispatch()\r\n    const [isDark, setIsDark] = useDarkMode()\r\n    const [direction, updateDirection] = useDirection()\r\n\r\n    const {\r\n        disableSubmit = false,\r\n        className,\r\n        forgotPasswordUrl = '/forgot-password',\r\n        signUpUrl = '/sign-up',\r\n    } = props\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n    const [message, setMessage] = useTimeOutMessage()\r\n    const initialValues = {\r\n        usernameOrEmail: '',\r\n        password: '',\r\n        enterAccount: '',\r\n        rememberMe: rememberMe\r\n    };\r\n\r\n    useEffect(() => {\r\n        setIsDark(\"light\")\r\n        updateDirection(\"LTR\")\r\n    },[])\r\n    // usernameOrEmail: 'anil@getinfy.bom',\r\n    // password: 'Gopi@12345',\r\n    // enterAccount: 'OP83',\r\n    // rememberMe: true,\r\n    // const [initialValuesNew, setInitialValuesNew] = useState({\r\n    //     usernameOrEmail: '',\r\n    //     password: '',\r\n    //     enterAccount: '',\r\n    //     rememberMe: rememberMe\r\n    // });\r\n    const storedData = (localStorage && localStorage?.getItem('userData')) ? JSON.parse(localStorage?.getItem('userData')) : initialValues;\r\n\r\n\r\n    const { signIn } = useAuth()\r\n\r\n    const onSignIn = async (values, setSubmitting) => {\r\n\r\n        if (values.rememberMe) {\r\n            localStorage.setItem('userData', JSON.stringify(values));\r\n        } else {\r\n            localStorage.removeItem('userData');\r\n        }\r\n        const { usernameOrEmail, password, enterAccount } = values\r\n\r\n        setSubmitting(true)\r\n\r\n\r\n\r\n        let body = {\r\n            unq_id: enterAccount,\r\n            enterAccount: enterAccount,\r\n            email: usernameOrEmail,\r\n            password: password,\r\n        }\r\n        const result = await signIn(body)\r\n\r\n        // dispatch(setUser(values))\r\n\r\n\r\n        if (result.status === 'failed') {\r\n\r\n            setMessage('Login failed. Invalid credentials.')\r\n\r\n        }\r\n\r\n        if (result.status === 'success') {\r\n\r\n            setTimeout(() => {\r\n                OpenNotification('success', 'Logged in successfully ')\r\n\r\n            }, 1000)\r\n\r\n        }\r\n\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"\">\r\n                <div\r\n                    className={className}\r\n                    class=\"bg-white\"\r\n                    style={{\r\n                        width: '560px',\r\n                        height: '',\r\n                        opacity: 0.9,\r\n                        borderRadius: '4px',\r\n                        padding: '15px 32px 20px 32px',\r\n                    }}\r\n                >\r\n                    {message && (\r\n                        <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                            {message}\r\n                        </Alert>\r\n                    )}\r\n                    <Formik\r\n\r\n\r\n                        initialValues={\r\n                            storedData\r\n                        }\r\n                        validationSchema={validationSchema}\r\n                        onSubmit={(values, { setSubmitting }) => {\r\n                            if (!disableSubmit) {\r\n                                onSignIn(values, setSubmitting)\r\n                            } else {\r\n                                setSubmitting(false)\r\n                            }\r\n                        }}\r\n                    >\r\n                        {({ touched, errors, isSubmitting, handleChange, setFieldValue }) => {\r\n\r\n                            const handleRememberMeChange = (event) => {\r\n                                const { checked } = event.target;\r\n                                setFieldValue('rememberMe', checked);\r\n                            }\r\n                            return (\r\n                                <Form>\r\n                                    <FormContainer>\r\n                                        <div className=\"grid justify-center gap-6 mb-2\">\r\n                                            <img\r\n                                                className=\"w-20\"\r\n                                                src={\r\n                                                    '/img/avatars/digilink.png'\r\n                                                }\r\n                                            />\r\n\r\n                                            <h4 className=\"font-bold text-2xl\">\r\n                                                Log In\r\n                                            </h4>\r\n                                        </div>\r\n                                        <FormItem label=\" Account ID\">\r\n                                            <Field\r\n                                                type=\"text\"\r\n                                                autoComplete=\"off\"\r\n                                                name=\"enterAccount\"\r\n                                                placeholder=\"Enter Account ID\"\r\n                                                component={Input}\r\n                                            />\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            label=\"Email ID\"\r\n                                            invalid={\r\n                                                errors.usernameOrEmail &&\r\n                                                touched.usernameOrEmail\r\n                                            }\r\n                                            errorMessage={errors.usernameOrEmail}\r\n                                        >\r\n                                            <Field\r\n                                                type=\"text\"\r\n                                                autoComplete=\"off\"\r\n                                                name=\"usernameOrEmail\"\r\n                                                placeholder=\"Enter Email ID\"\r\n                                                component={Input}\r\n                                            />\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            label=\"Password\"\r\n                                            invalid={\r\n                                                errors.password && touched.password\r\n                                            }\r\n                                            errorMessage={errors.password}\r\n                                        >\r\n                                            <Field\r\n                                                autoComplete=\"off\"\r\n                                                name=\"password\"\r\n                                                placeholder=\"Enter Password\"\r\n                                                component={PasswordInput}\r\n                                            />\r\n                                        </FormItem>\r\n                                        <div className=\"flex justify-between mb-6\">\r\n                                            <FormItem>\r\n\r\n                                                <Field\r\n                                                    className=\"mb-0 text-[#212121]\"\r\n                                                    name=\"rememberMe\"\r\n                                                    component={Checkbox}\r\n                                                    children=\"Remember Me\"\r\n                                                    onChange={handleRememberMeChange}\r\n                                                />\r\n                                            </FormItem>\r\n                                            <ActionLink\r\n                                                variant=\"solid\"\r\n                                                to={forgotPasswordUrl}\r\n                                            >\r\n                                                Forgot Password?\r\n                                            </ActionLink>\r\n                                        </div>\r\n                                        <Button\r\n                                            variant=\"solid\"\r\n                                            block\r\n                                            loading={isSubmitting}\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            <p className=\"text-white\">\r\n                                                {isSubmitting\r\n                                                    ? 'Signing in...'\r\n                                                    : 'Sign In'}\r\n                                            </p>\r\n                                        </Button>\r\n\r\n                                        <div class=\"flex items-center py-4\">\r\n                                            <div class=\"flex-grow h-px bg-gray-400\"></div>\r\n                                            <span class=\"flex-shrink  text-black px-4\">\r\n                                                Or\r\n                                            </span>\r\n                                            <div class=\"flex-grow h-px bg-gray-400\"></div>\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            <div\r\n                                                className=\"border-2 border-blue-400 text-[#0080FF] font-bold flex justify-center gap-2 p-[6px] \"\r\n                                                block\r\n\r\n                                            // variant=\"\"\r\n                                            // type=\"submit\"\r\n                                            >\r\n                                                <span>\r\n                                                    <img\r\n                                                        src={\r\n                                                            '/img/avatars/imagetriangle.png'\r\n                                                        }\r\n                                                    />\r\n                                                </span>\r\n                                                <p className=\"mt-1\">\r\n                                                    {' '}\r\n                                                    Login With Airlinq\r\n                                                </p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </FormContainer>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignInForm\r\n","import React from 'react'\r\nimport SignInForm from './SignInForm'\r\n\r\nconst SignIn = () => {\r\n    return (\r\n        <>\r\n            {/* <div className=\"mb-8\">\r\n                <h3 className=\"mb-1\">Welcome back!</h3>\r\n                <p>Please enter your credentials to sign in!</p>\r\n            </div> */}\r\n            <SignInForm disableSubmit={false} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignIn\r\n"],"names":["Logo","props","type","mode","gutter","className","imgClass","style","logoWidth","useSelector","state","locale","largeLogo","smallLogo","themeLargeLogo","themeSmallLogo","classNames","width","src","appConfig","alt","APP_NAME","defaultProps","interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","validationSchema","Yup","shape","usernameOrEmail","required","password","rememberMe","useDispatch","useDarkMode","setIsDark","useDirection","updateDirection","disableSubmit","forgotPasswordUrl","signUpUrl","useTimeOutMessage","initialValues","enterAccount","storedData","localStorage","getItem","JSON","parse","signIn","useAuth","onSignIn","values","setSubmitting","setItem","stringify","removeItem","body","unq_id","email","result","status","OpenNotification","class","height","opacity","borderRadius","padding","showIcon","onSubmit","touched","errors","isSubmitting","setFieldValue","handleChange","label","autoComplete","name","placeholder","component","Input","invalid","errorMessage","PasswordInput","Checkbox","children","onChange","event","checked","target","variant","to","block","loading"],"sourceRoot":""}